;; -*- mode: emacs-lisp; eval: (progn (pp-buffer) (indent-buffer)) -*-
((def-persp nil ((def-buffer "algorithm.h" "/Volumes/Transcend/tensorflow/tensorflow/core/graph/algorithm.h" c++-mode) (def-buffer "algorithm.cc" "/Volumes/Transcend/tensorflow/tensorflow/core/graph/algorithm.cc" c++-mode) (def-buffer "node_builder.h" "/Volumes/Transcend/tensorflow/tensorflow/core/graph/node_builder.h" c++-mode) (def-buffer "tfprof_options.proto" "/Volumes/Transcend/tensorflow/tensorflow/core/profiler/tfprof_options.proto" protobuf-mode) (def-buffer "tfprof_log.proto" "/Volumes/Transcend/tensorflow/tensorflow/core/profiler/tfprof_log.proto" protobuf-mode) (def-buffer "tfprof_options.h" "/Volumes/Transcend/tensorflow/tensorflow/core/profiler/tfprof_options.h" c++-mode) (def-buffer "README.md" "/Volumes/Transcend/tensorflow/tensorflow/core/profiler/README.md" markdown-mode) (def-buffer "hadoop_file_system.h" "/Volumes/Transcend/tensorflow/tensorflow/core/platform/hadoop/hadoop_file_system.h" c++-mode) (def-buffer "hadoop_file_system.cc" "/Volumes/Transcend/tensorflow/tensorflow/core/platform/hadoop/hadoop_file_system.cc" c++-mode) (def-buffer "BUILD" "/Volumes/Transcend/tensorflow/util/python/BUILD" fundamental-mode)) (def-wconf (((min-height . 4) (min-width . 45) (min-height-ignore . 4) (min-width-ignore . 14) (min-height-safe . 1) (min-width-safe . 4) (min-pixel-height . 56) (min-pixel-width . 315) (min-pixel-height-ignore . 56) (min-pixel-width-ignore . 98) (min-pixel-height-safe . 14) (min-pixel-width-safe . 28)) hc (pixel-width . 1430) (pixel-height . 826) (total-width . 204) (total-height . 59) (normal-height . 1.0) (normal-width . 1.0) (combination-limit) (leaf (pixel-width . 245) (pixel-height . 826) (total-width . 35) (total-height . 59) (normal-height . 1.0) (normal-width . 0.17202797202797193) (buffer " *NeoTree*" (selected) (hscroll . 0) (fringes 8 8 nil) (margins nil) (scroll-bars nil 0 t nil 0 nil) (vscroll . 0) (dedicated . t) (point . 259) (start . 1))) (leaf (last . t) (pixel-width . 1185) (pixel-height . 826) (total-width . 169) (total-height . 59) (normal-height . 1.0) (normal-width . 0.8279720279720281) (buffer "algorithm.h" (selected . t) (hscroll . 0) (fringes 8 8 nil) (margins 4) (scroll-bars nil 0 t nil 0 nil) (vscroll . 0) (dedicated) (point . 1052) (start . 1))))) (def-params ((gui-eyebrowse-last-slot . 1) (gui-eyebrowse-current-slot . 1) (gui-eyebrowse-window-configs (1 (((min-height . 4) (min-width . 45) (min-height-ignore . 4) (min-width-ignore . 14) (min-height-safe . 1) (min-width-safe . 4) (min-pixel-height . 56) (min-pixel-width . 315) (min-pixel-height-ignore . 56) (min-pixel-width-ignore . 98) (min-pixel-height-safe . 14) (min-pixel-width-safe . 28)) hc (pixel-width . 1430) (pixel-height . 826) (total-width . 204) (total-height . 59) (normal-height . 1.0) (normal-width . 1.0) (combination-limit) (leaf (pixel-width . 245) (pixel-height . 826) (total-width . 35) (total-height . 59) (normal-height . 1.0) (normal-width . 0.17202797202797193) (buffer " *NeoTree*" (selected) (hscroll . 0) (fringes 8 8 nil) (margins nil) (scroll-bars nil 0 t nil 0 nil) (vscroll . 0) (dedicated . t) (point . 259) (start . 1))) (leaf (last . t) (pixel-width . 1185) (pixel-height . 826) (total-width . 169) (total-height . 59) (normal-height . 1.0) (normal-width . 0.8279720279720281) (buffer "algorithm.h" (selected . t) (hscroll . 0) (fringes 8 8 nil) (margins 4) (scroll-bars nil 0 t nil 0 nil) (vscroll . 0) (dedicated) (point . 1052) (start . 1)))) "")))) t nil nil))