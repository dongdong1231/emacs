;; Object semanticdb-project-database-file
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file"
  :tables
  (list
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [2373 2390])
            ("newcomment" include nil nil [2391 2412])
            ("pcase" include nil nil [2413 2429])
            ("unless" code nil nil [2496 2965])
            ("company" customgroup (:user-visible-flag t) nil [2968 3096])
            ("company-tooltip" variable
               (:default-value (quote ((default :foreground "black") (((class color) (min-colors 88) (background light)) (:background "cornsilk")) (((class color) (min-colors 88) (background dark)) (:background "yellow"))))
                :type "face")
                nil [3098 3360])
            ("company-tooltip-selection" variable
               (:default-value (quote ((((class color) (min-colors 88) (background light)) (:background "light blue")) (((class color) (min-colors 88) (background dark)) (:background "orange1")) (t (:background "green"))))
                :type "face")
                nil [3362 3650])
            ("company-tooltip-search" variable
               (:default-value (quote ((default :inherit highlight)))
                :type "face")
                nil [3652 3770])
            ("company-tooltip-search-selection" variable
               (:default-value (quote ((default :inherit highlight)))
                :type "face")
                nil [3772 3921])
            ("company-tooltip-mouse" variable
               (:default-value (quote ((default :inherit highlight)))
                :type "face")
                nil [3923 4040])
            ("company-tooltip-common" variable
               (:default-value (quote ((((background light)) :foreground "darkred") (((background dark)) :foreground "red")))
                :type "face")
                nil [4042 4234])
            ("company-tooltip-common-selection" variable
               (:default-value (quote ((default :inherit company-tooltip-common)))
                :type "face")
                nil [4236 4390])
            ("company-tooltip-annotation" variable
               (:default-value (quote ((((background light)) :foreground "firebrick4") (((background dark)) :foreground "red4")))
                :type "face")
                nil [4392 4596])
            ("company-tooltip-annotation-selection" variable
               (:default-value (quote ((default :inherit company-tooltip-annotation)))
                :type "face")
                nil [4598 4764])
            ("company-scrollbar-fg" variable
               (:default-value (quote ((((background light)) :background "darkred") (((background dark)) :background "red")))
                :type "face")
                nil [4766 4947])
            ("company-scrollbar-bg" variable
               (:default-value (quote ((((background light)) :background "wheat") (((background dark)) :background "gold")))
                :type "face")
                nil [4949 5134])
            ("company-preview" variable
               (:default-value (quote ((((background light)) :inherit (company-tooltip-selection company-tooltip)) (((background dark)) :background "blue4" :foreground "wheat")))
                :type "face")
                nil [5136 5365])
            ("company-preview-common" variable
               (:default-value (quote ((((background light)) :inherit company-tooltip-common-selection) (((background dark)) :inherit company-preview :foreground "red")))
                :type "face")
                nil [5367 5614])
            ("company-preview-search" variable
               (:default-value (quote ((((background light)) :inherit company-tooltip-common-selection) (((background dark)) :inherit company-preview :background "blue1")))
                :type "face")
                nil [5616 5867])
            ("company-echo" variable (:type "face") nil [5869 5943])
            ("company-echo-common" variable
               (:default-value (quote ((((background dark)) (:foreground "firebrick1")) (((background light)) (:background "firebrick4"))))
                :type "face")
                nil [5945 6149])
            ("company-frontends-set" function (:arguments ("variable" "value")) nil [6151 7684])
            ("company-frontends" variable (:default-value (quote (company-pseudo-tooltip-unless-just-one-frontend company-preview-if-just-one-frontend company-echo-metadata-frontend))) nil [7686 9701])
            ("company-tooltip-limit" variable (:default-value 10) nil [9703 9809])
            ("company-tooltip-minimum" variable (:default-value 6) nil [9811 9979])
            ("company-tooltip-minimum-width" variable nil nil [9981 10185])
            ("company-tooltip-margin" variable (:default-value 1) nil [10187 10295])
            ("company-tooltip-offset-display" variable (:default-value (quote scrollbar)) nil [10297 10651])
            ("company-tooltip-align-annotations" variable nil nil [10653 10824])
            ("company-tooltip-flip-when-above" variable nil nil [10826 10996])
            ("company-safe-backends" variable (:default-value (quote ((company-abbrev . "Abbrev") (company-bbdb . "BBDB") (company-capf . "completion-at-point-functions") (company-clang . "Clang") (company-cmake . "CMake") (company-css . "CSS") (company-dabbrev . "dabbrev for plain text") (company-dabbrev-code . "dabbrev for code") (company-eclim . "Eclim (an Eclipse interface)") (company-elisp . "Emacs Lisp") (company-etags . "etags") (company-files . "Files") (company-gtags . "GNU Global") (company-ispell . "Ispell") (company-keywords . "Programming language keywords") (company-nxml . "nxml") (company-oddmuse . "Oddmuse") (company-semantic . "Semantic") (company-tempo . "Tempo templates") (company-xcode . "Xcode")))) nil [10998 11765])
            ("put" code nil nil [11766 11818])
            ("company-safe-backends-p" function (:arguments ("backends")) nil [11820 12126])
            ("company-backends" variable (:default-value (\` ((\,@ (unless (version< "24.3.51" emacs-version) (list (quote company-elisp)))) company-bbdb company-nxml company-css company-eclim company-semantic company-clang company-xcode company-cmake company-capf company-files (company-dabbrev-code company-gtags company-etags company-keywords) company-oddmuse company-dabbrev))) nil [12128 19019])
            ("put" code nil nil [19021 19090])
            ("company-transformers" variable nil nil [19092 19749])
            ("company-completion-started-hook" variable nil nil [19751 19950])
            ("company-completion-cancelled-hook" variable nil nil [19952 20154])
            ("company-completion-finished-hook" variable nil nil [20156 20462])
            ("company-minimum-prefix-length" variable (:default-value 3) nil [20464 20598])
            ("company-abort-manual-when-too-short" variable nil nil [20600 20882])
            ("company-require-match" variable (:default-value (quote company-explicit-action-p)) nil [20884 21444])
            ("company-auto-complete" variable nil nil [21446 21926])
            ("company-auto-complete-chars" variable (:default-value (quote (32 41 46))) nil [21928 23417])
            ("company-idle-delay" variable (:default-value 0.5) nil [23419 23788])
            ("company-tooltip-idle-delay" variable (:default-value 0.5) nil [23790 24095])
            ("company-begin-commands" variable (:default-value (quote (self-insert-command org-self-insert-command orgtbl-self-insert-command c-scope-operator c-electric-colon c-electric-lt-gt c-electric-slash))) nil [24097 24992])
            ("company-continue-commands" variable (:default-value (quote (not save-buffer save-some-buffers save-buffers-kill-terminal save-buffers-kill-emacs))) nil [24994 25846])
            ("company-show-numbers" variable nil nil [25848 26034])
            ("company-selection-wrap-around" variable nil nil [26036 26231])
            ("company-async-wait" variable (:default-value 0.03) nil [26233 26373])
            ("company-async-timeout" variable (:default-value 2) nil [26375 26477])
            ("company-mode-map" variable (:default-value (make-sparse-keymap)) nil [26561 26642])
            ("company-active-map" variable (:default-value (let ((keymap (make-sparse-keymap))) (define-key keymap "" (quote company-abort)) (define-key keymap "" (quote company-abort)) (define-key keymap (kbd "M-n") (quote company-select-next)) (define-key keymap (kbd "M-p") (quote company-select-previous)) (define-key keymap (kbd "<down>") (quote company-select-next-or-abort)) (define-key keymap (kbd "<up>") (quote company-select-previous-or-abort)) (define-key keymap [remap scroll-up-command] (quote company-next-page)) (define-key keymap [remap scroll-down-command] (quote company-previous-page)) (define-key keymap [down-mouse-1] (quote ignore)) (define-key keymap [down-mouse-3] (quote ignore)) (define-key keymap [mouse-1] (quote company-complete-mouse)) (define-key keymap [mouse-3] (quote company-select-mouse)) (define-key keymap [up-mouse-1] (quote ignore)) (define-key keymap [up-mouse-3] (quote ignore)) (define-key keymap [return] (quote company-complete-selection)) (define-key keymap (kbd "RET") (quote company-complete-selection)) (define-key keymap [tab] (quote company-complete-common)) (define-key keymap (kbd "TAB") (quote company-complete-common)) (define-key keymap (kbd "<f1>") (quote company-show-doc-buffer)) (define-key keymap (kbd "C-h") (quote company-show-doc-buffer)) (define-key keymap "" (quote company-show-location)) (define-key keymap "" (quote company-search-candidates)) (define-key keymap "\223" (quote company-filter-candidates)) (dotimes (i 10) (define-key keymap (read-kbd-macro (format "M-%d" i)) (quote company-complete-number))) keymap)) nil [26644 28217])
            ("company--disabled-backends" variable nil nil [28219 28258])
            ("company-init-backend" function (:arguments ("backend")) nil [28260 29034])
            ("company--maybe-init-backend" function (:arguments ("backend")) nil [29036 29235])
            ("company-lighter-base" variable (:default-value "company") nil [29237 29391])
            ("company-lighter" variable (:default-value (quote (" " (company-candidates (:eval (if (consp company-backend) (company--group-lighter (nth company-selection company-candidates) company-lighter-base) (symbol-name company-backend))) company-lighter-base)))) nil [29393 30022])
            ("put" code nil nil [30024 30070])
            ("define-minor-mode" code nil nil [30087 31632])
            ("company-global-modes" variable (:default-value t) nil [31634 32493])
            ("define-globalized-minor-mode" code nil nil [32510 32589])
            ("company-mode-on" function nil nil [32591 32979])
            ("company-assert-enabled" function nil nil [32981 33108])
            ("defvar-local" code nil nil [33192 33228])
            ("company-emulation-alist" variable (:default-value (quote ((t)))) nil [33230 33275])
            ("company-enable-overriding-keymap" function (:arguments ("keymap")) nil [33277 33389])
            ("company-ensure-emulation-alist" function nil nil [33391 33658])
            ("company-install-map" function nil nil [33660 33836])
            ("company-uninstall-map" function nil nil [33838 33914])
            ("company-ignore" function nil nil [34140 34216])
            ("global-set-key" code nil nil [34218 34273])
            ("company-input-noop" function nil nil [34275 34356])
            ("company--posn-col-row" function (:arguments ("posn")) nil [34358 34923])
            ("company--col-row" function (:arguments ("pos")) nil [34925 35011])
            ("company--row" function (:arguments ("pos")) nil [35013 35080])
            ("defvar-local" code nil nil [35164 35198])
            ("company-grab" function (:arguments ("regexp" "expression" "limit")) nil [35200 35352])
            ("company-grab-line" function (:arguments ("regexp" "expression")) nil [35354 35717])
            ("company-grab-symbol" function nil nil [35719 36113])
            ("company-grab-word" function nil nil [36115 36495])
            ("company-grab-symbol-cons" function (:arguments ("idle-begin-after-re" "max-len")) nil [36497 37127])
            ("company-in-string-or-comment" function nil nil [37129 37359])
            ("company-call-backend" function (:arguments ("args")) nil [37361 37474])
            ("company--force-sync" function (:arguments ("fun" "args" "backend")) nil [37476 38024])
            ("company-call-backend-raw" function (:arguments ("args")) nil [38026 38533])
            ("company--multi-backend-adapter" function (:arguments ("backends" "command" "args")) nil [38535 39707])
            ("company--multi-backend-adapter-candidates" function (:arguments ("backends" "prefix" "separate")) nil [39709 40616])
            ("company--multi-candidates-mapper" function (:arguments ("backend" "separate" "tag")) nil [40618 41033])
            ("company--merge-async" function (:arguments ("pairs" "merger")) nil [41035 42352])
            ("company--prefix-str" function (:arguments ("prefix")) nil [42354 42422])
            ("defvar-local" code nil nil [42506 42539])
            ("defvar-local" code nil nil [42541 42578])
            ("defvar-local" code nil nil [42580 42624])
            ("defvar-local" code nil nil [42626 42669])
            ("defvar-local" code nil nil [42671 42718])
            ("defvar-local" code nil nil [42720 42753])
            ("defvar-local" code nil nil [42755 42789])
            ("defvar-local" code nil nil [42791 42835])
            ("defvar-local" code nil nil [42837 42924])
            ("defvar-local" code nil nil [42926 42967])
            ("company--auto-completion" variable nil nil [42969 43113])
            ("defvar-local" code nil nil [43115 43152])
            ("defvar-local" code nil nil [43154 43186])
            ("company-timer" variable nil nil [43188 43214])
            ("company-tooltip-timer" variable nil nil [43215 43249])
            ("company-strip-prefix" function (:arguments ("str")) nil [43251 43330])
            ("company--insert-candidate" function (:arguments ("candidate")) nil [43332 43785])
            ("company-with-candidate-inserted" function (:arguments ("candidate" "body")) nil [43787 44334])
            ("company-explicit-action-p" function nil nil [44336 44503])
            ("company-reformat" function (:arguments ("candidate")) nil [44505 44892])
            ("company--should-complete" function nil nil [44894 45271])
            ("company--should-continue" function nil nil [45273 45735])
            ("company-call-frontends" function (:arguments ("command")) nil [45737 46026])
            ("company-set-selection" function (:arguments ("selection" "force-update")) nil [46028 46456])
            ("company--group-lighter" function (:arguments ("candidate" "base")) nil [46458 46915])
            ("company-update-candidates" function (:arguments ("candidates")) nil [46917 48504])
            ("company-calculate-candidates" function (:arguments ("prefix")) nil [48506 49812])
            ("company--fetch-candidates" function (:arguments ("prefix")) nil [49814 51233])
            ("company--preprocess-candidates" function (:arguments ("candidates")) nil [51235 51523])
            ("company--postprocess-candidates" function (:arguments ("candidates")) nil [51525 51854])
            ("company--strip-duplicates" function (:arguments ("candidates")) nil [51856 52772])
            ("company--transform-candidates" function (:arguments ("candidates")) nil [52774 52924])
            ("company-occurrence-weight-function" variable (:default-value (function company-occurrence-prefer-closest-above)) nil [52926 53418])
            ("company-occurrence-prefer-closest-above" function (:arguments ("pos" "match-beg" "match-end")) nil [53420 53645])
            ("company-occurrence-prefer-any-closest" function (:arguments ("pos" "_match-beg" "match-end")) nil [53647 53800])
            ("company-sort-by-occurrence" function (:arguments ("candidates")) nil [53802 55187])
            ("company--occurrence-predicate" function nil nil [55189 55694])
            ("company-sort-by-backend-importance" function (:arguments ("candidates")) nil [55696 56518])
            ("company-sort-prefer-same-case-prefix" function (:arguments ("candidates")) nil [56520 56996])
            ("company-idle-begin" function (:arguments ("buf" "win" "tick" "pos")) nil [56998 57332])
            ("company-auto-begin" function nil nil [57334 57835])
            ("company-manual-begin" function nil nil [57852 58164])
            ("company-other-backend" function (:arguments ("backward")) nil [58166 58835])
            ("company-require-match-p" function nil nil [58837 59156])
            ("company-auto-complete-p" function (:arguments ("input")) nil [59158 59756])
            ("company--incremental-p" function nil nil [59758 60080])
            ("company--continue-failed" function (:arguments ("new-prefix")) nil [60082 60854])
            ("company--good-prefix-p" function (:arguments ("prefix")) nil [60856 61423])
            ("company--continue" function nil nil [61425 62846])
            ("company--begin-new" function nil nil [62848 64255])
            ("company--perform" function nil nil [64257 64667])
            ("company-cancel" function (:arguments ("result")) nil [64669 65957])
            ("company-abort" function nil nil [65959 66025])
            ("company-finish" function (:arguments ("result")) nil [66027 66121])
            ("company-keep" function (:arguments ("command")) nil [66123 66210])
            ("company-pre-command" function nil nil [66212 66816])
            ("company-post-command" function nil nil [66818 68244])
            ("company--idle-delay" function nil nil [68246 68355])
            ("company--begin-inhibit-commands" variable (:default-value (quote (company-abort company-complete-mouse company-complete company-complete-common company-complete-selection company-complete-number))) nil [68357 68844])
            ("company--should-begin" function nil nil [68846 69104])
            ("company-search-regexp-function" variable (:default-value (function regexp-quote)) nil [69188 69888])
            ("defvar-local" code nil nil [69890 69929])
            ("company-search-lighter" variable (:default-value (quote (" " (company-search-filtering "Filter" "Search") ": \"" company-search-string "\""))) nil [69931 70180])
            ("defvar-local" code nil nil [70182 70294])
            ("defvar-local" code nil nil [70296 70342])
            ("defvar-local" code nil nil [70344 70390])
            ("company-search-words-regexp" function (:arguments ("input")) nil [70392 70551])
            ("company-search-words-in-any-order-regexp" function (:arguments ("input")) nil [70553 70932])
            ("company-search-flex-regexp" function (:arguments ("input")) nil [70934 71264])
            ("company--permutations" function (:arguments ("lst")) nil [71266 71486])
            ("company--search" function (:arguments ("text" "lines")) nil [71488 71730])
            ("company-search-keypad" function nil nil [71732 71927])
            ("company-search-printing-char" function nil nil [71929 72212])
            ("company--search-update-predicate" function (:arguments ("ss")) nil [72214 72636])
            ("company--search-update-string" function (:arguments ("new")) nil [72638 72898])
            ("company--search-assert-input" function nil nil [72900 73057])
            ("company-search-repeat-forward" function (:user-visible-flag t) nil [73059 73492])
            ("company-search-repeat-backward" function (:user-visible-flag t) nil [73494 74000])
            ("company-search-toggle-filtering" function (:user-visible-flag t) nil [74002 74317])
            ("company-search-abort" function (:user-visible-flag t) nil [74319 74595])
            ("company-search-other-char" function nil nil [74597 74741])
            ("company-search-delete-char" function nil nil [74743 75067])
            ("company-search-map" variable (:default-value (let ((i 0) (keymap (make-keymap))) (if (fboundp (quote max-char)) (set-char-table-range (nth 1 keymap) (cons 256 (max-char)) (quote company-search-printing-char)) (with-no-warnings (let ((l (generic-character-list)) (table (nth 1 keymap))) (while l (set-char-table-default table (car l) (quote company-search-printing-char)) (setq l (cdr l)))))) (define-key keymap [t] (quote company-search-other-char)) (while (< i 32) (define-key keymap (make-string 1 i) (quote company-search-other-char)) (cl-incf i)) (while (< i 256) (define-key keymap (vector i) (quote company-search-printing-char)) (cl-incf i)) (dotimes (i 10) (define-key keymap (read (format "[kp-%s]" i)) (quote company-search-keypad))) (let ((meta-map (make-sparse-keymap))) (define-key keymap (char-to-string meta-prefix-char) meta-map) (define-key keymap [escape] meta-map)) (define-key keymap (vector meta-prefix-char t) (quote company-search-other-char)) (define-key keymap (kbd "M-n") (quote company-select-next)) (define-key keymap (kbd "M-p") (quote company-select-previous)) (define-key keymap (kbd "<down>") (quote company-select-next-or-abort)) (define-key keymap (kbd "<up>") (quote company-select-previous-or-abort)) (define-key keymap "" (quote company-search-other-char)) (define-key keymap [escape escape escape] (quote company-search-other-char)) (define-key keymap (kbd "DEL") (quote company-search-delete-char)) (define-key keymap [backspace] (quote company-search-delete-char)) (define-key keymap "" (quote company-search-abort)) (define-key keymap "" (quote company-search-repeat-forward)) (define-key keymap "" (quote company-search-repeat-backward)) (define-key keymap "" (quote company-search-toggle-filtering)) (dotimes (i 10) (define-key keymap (read-kbd-macro (format "M-%d" i)) (quote company-complete-number))) keymap)) nil [75069 77129])
            ("define-minor-mode" code nil nil [77131 78086])
            ("company--search-assert-enabled" function nil nil [78088 78261])
            ("company-search-candidates" function (:user-visible-flag t) nil [78263 79026])
            ("company-filter-map" variable (:default-value (let ((keymap (make-keymap))) (define-key keymap [remap company-search-printing-char] (quote company-filter-printing-char)) (set-keymap-parent keymap company-search-map) keymap)) nil [79028 79317])
            ("company-filter-candidates" function (:user-visible-flag t) nil [79319 79608])
            ("company-select-next" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [79692 79930])
            ("company-select-previous" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [79932 80129])
            ("company-select-next-or-abort" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [80131 80456])
            ("company-select-previous-or-abort" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [80458 80795])
            ("company-next-page" function (:user-visible-flag t) nil [80797 81215])
            ("company-previous-page" function (:user-visible-flag t) nil [81217 81641])
            ("company-pseudo-tooltip-overlay" variable nil nil [81643 81682])
            ("company-tooltip-offset" variable nil nil [81684 81715])
            ("company--inside-tooltip-p" function (:arguments ("event-col-row" "row" "height")) nil [81717 82259])
            ("company--event-col-row" function (:arguments ("event")) nil [82261 82345])
            ("company-select-mouse" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [82347 83525])
            ("company-complete-mouse" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [83527 83702])
            ("company-complete-selection" function (:user-visible-flag t) nil [83704 83918])
            ("company-complete-common" function (:user-visible-flag t) nil [83920 84241])
            ("company-complete-common-or-cycle" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [84243 84753])
            ("company-indent-or-complete-common" function (:user-visible-flag t) nil [84755 85381])
            ("company-select-next-if-tooltip-visible-or-complete-selection" function (:user-visible-flag t) nil [85383 85815])
            ("company-complete" function (:user-visible-flag t) nil [85832 86386])
            ("company-complete-number" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [86388 87399])
            ("company-space-strings-limit" variable
               (:constant-flag t
                :default-value 100)
                nil [87483 87525])
            ("company-space-strings" variable
               (:constant-flag t
                :default-value (let (lst) (dotimes (i company-space-strings-limit) (push (make-string (- company-space-strings-limit 1 i) 32) lst)) (apply (quote vector) lst)))
                nil [87527 87715])
            ("company-space-string" function (:arguments ("len")) nil [87717 87859])
            ("company-safe-substring" function (:arguments ("str" "from" "to")) nil [87861 88392])
            ("defvar-local" code nil nil [88476 88516])
            ("company-fetch-metadata" function nil nil [88518 88803])
            ("company-doc-buffer" function (:arguments ("string")) nil [88805 89025])
            ("company--electric-saved-window-configuration" variable nil nil [89027 89084])
            ("company--electric-commands" variable (:default-value (quote (scroll-other-window scroll-other-window-down mwheel-scroll))) nil [89086 89249])
            ("company--electric-restore-window-configuration" function nil nil [89251 89630])
            ("company--electric-do" function (:arguments ("body")) nil [89632 90136])
            ("company--unread-last-input" function nil nil [90138 90290])
            ("company-show-doc-buffer" function (:user-visible-flag t) nil [90292 91003])
            ("put" code nil nil [91004 91050])
            ("company-show-location" function (:user-visible-flag t) nil [91052 91946])
            ("put" code nil nil [91947 91991])
            ("defvar-local" code nil nil [92075 92110])
            ("company-remove-callback" function (:arguments ("ignored")) nil [92112 92387])
            ("company-begin-backend" function
               (:user-visible-flag t
                :arguments ("backend" "callback"))
                nil [92389 93160])
            ("company-begin-with" function (:arguments ("candidates" "prefix-length" "require-match" "callback")) nil [93162 94070])
            ("declare-function" code nil nil [94072 94120])
            ("declare-function" code nil nil [94121 94161])
            ("company-version" function
               (:user-visible-flag t
                :arguments ("show-version"))
                nil [94163 94560])
            ("company-diag" function (:user-visible-flag t) nil [94562 96090])
            ("defvar-local" code nil nil [96174 96223])
            ("defvar-local" code nil nil [96225 96264])
            ("company-tooltip--lines-update-offset" function (:arguments ("selection" "num-lines" "limit")) nil [96266 96850])
            ("company-tooltip--simple-update-offset" function (:arguments ("selection" "_num-lines" "limit")) nil [96852 97107])
            ("company-round-tab" function (:arguments ("arg")) nil [97125 97207])
            ("company-plainify" function (:arguments ("str")) nil [97209 97736])
            ("company-fill-propertize" function (:arguments ("value" "annotation" "width" "selected" "left" "right")) nil [97738 101285])
            ("company--search-chunks" function nil nil [101287 101555])
            ("company--pre-render" function (:arguments ("str" "annotation-p")) nil [101557 102057])
            ("company--clean-string" function (:arguments ("str")) nil [102059 102596])
            ("company-buffer-lines" function (:arguments ("beg" "end")) nil [102611 103610])
            ("company-modify-line" function (:arguments ("old" "new" "offset")) nil [103612 103782])
            ("company--length-limit" function (:arguments ("lst" "limit")) nil [103784 103883])
            ("company--window-height" function nil nil [103885 104020])
            ("company--window-width" function nil nil [104022 104861])
            ("company--replacement-string" function (:arguments ("lines" "old" "column" "nl" "align-top")) nil [104863 106215])
            ("company--offset-line" function (:arguments ("line" "offset")) nil [106217 106323])
            ("company--create-lines" function (:arguments ("selection" "limit")) nil [106325 109959])
            ("company--scrollbar-bounds" function (:arguments ("offset" "limit" "length")) nil [109961 110224])
            ("company--scrollbar" function (:arguments ("i" "bounds")) nil [110226 110431])
            ("company--scrollpos-line" function (:arguments ("text" "width")) nil [110433 110712])
            ("company--pseudo-tooltip-height" function nil nil [110723 111184])
            ("company-pseudo-tooltip-show" function (:arguments ("row" "column" "selection")) nil [111186 112328])
            ("company-pseudo-tooltip-show-at-point" function (:arguments ("pos" "column-offset")) nil [112330 112594])
            ("company-pseudo-tooltip-edit" function (:arguments ("selection")) nil [112596 113179])
            ("company-pseudo-tooltip-hide" function nil nil [113181 113357])
            ("company-pseudo-tooltip-hide-temporarily" function nil nil [113359 113719])
            ("company-pseudo-tooltip-unhide" function nil nil [113721 114449])
            ("company-pseudo-tooltip-guard" function nil nil [114451 114910])
            ("company-pseudo-tooltip-frontend" function (:arguments ("command")) nil [114912 116093])
            ("company-pseudo-tooltip-unless-just-one-frontend" function (:arguments ("command")) nil [116095 116366])
            ("company-pseudo-tooltip-unless-just-one-frontend-with-delay" function (:arguments ("command")) nil [116368 117459])
            ("defvar-local" code nil nil [117543 117585])
            ("company-preview-show-at-point" function (:arguments ("pos" "completion")) nil [117587 119430])
            ("company-preview-hide" function nil nil [119432 119580])
            ("company-preview-frontend" function (:arguments ("command")) nil [119582 119950])
            ("company-preview-if-just-one-frontend" function (:arguments ("command")) nil [119952 120199])
            ("company--show-inline-p" function nil nil [120201 120420])
            ("company-tooltip-visible-p" function nil nil [120422 120619])
            ("company-preview-common--show-p" function nil nil [120621 120873])
            ("company-preview-common-frontend" function (:arguments ("command")) nil [120875 121261])
            ("defvar-local" code nil nil [121345 121385])
            ("company-echo-timer" variable nil nil [121387 121418])
            ("company-echo-delay" variable (:default-value 0.01) nil [121420 121451])
            ("company-echo-truncate-lines" variable (:default-value t) nil [121453 121627])
            ("company-echo-show" function (:arguments ("getter")) nil [121629 121927])
            ("company-echo-show-soon" function (:arguments ("getter")) nil [121929 122079])
            ("company-echo-cancel" function (:arguments ("unset")) nil [122081 122241])
            ("company-echo-show-when-idle" function (:arguments ("getter")) nil [122243 122428])
            ("company-echo-format" function nil nil [122430 123498])
            ("company-echo-strip-common-format" function nil nil [123500 124337])
            ("company-echo-hide" function nil nil [124339 124471])
            ("company-echo-frontend" function (:arguments ("command")) nil [124473 124697])
            ("company-echo-strip-common-frontend" function (:arguments ("command")) nil [124699 124949])
            ("company-echo-metadata-frontend" function (:arguments ("command")) nil [124951 125195])
            ("company" package nil nil [125197 125215]))          
      :file "company.el"
      :pointmax 125241
      :fsize 125240
      :lastmodtime '(22848 49125 0 0)
      :unmatched-syntax '((close-paren 2965 . 2966) (symbol 2450 . 2466) (open-paren 2449 . 2450)))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("company" include nil nil [873 891])
            ("company-template" include nil nil [892 919])
            ("cl-lib" include nil nil [920 937])
            ("company-gtags" customgroup (:user-visible-flag t) nil [939 1024])
            ("company-gtags-executable" variable (:default-value (executable-find "global")) nil [1026 1146])
            ("define-obsolete-variable-alias" code nil nil [1148 1259])
            ("company-gtags-insert-arguments" variable (:default-value t) nil [1261 1438])
            ("defvar-local" code nil nil [1440 1495])
            ("company-gtags-modes" variable (:default-value (quote (prog-mode jde-mode))) nil [1497 1755])
            ("company-gtags--tags-available-p" function nil nil [1757 1995])
            ("company-gtags--fetch-tags" function (:arguments ("prefix")) nil [1997 3142])
            ("company-gtags--annotation" function (:arguments ("arg")) nil [3144 3319])
            ("company-gtags" function
               (:user-visible-flag t
                :arguments ("command" "arg" "ignored"))
                nil [3336 4330])
            ("company-gtags" package nil nil [4332 4356]))          
      :file "company-gtags.el"
      :pointmax 4388
      :fsize 4387
      :lastmodtime '(22848 49125 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [852 869])
            ("company-template-field" variable
               (:default-value (quote ((((background dark)) (:background "yellow" :foreground "black")) (((background light)) (:background "orange" :foreground "black"))))
                :type "face")
                nil [871 1113])
            ("company-template-nav-map" variable (:default-value (let ((keymap (make-sparse-keymap))) (define-key keymap [tab] (quote company-template-forward-field)) (define-key keymap (kbd "TAB") (quote company-template-forward-field)) keymap)) nil [1115 1329])
            ("company-template-field-map" variable (:default-value (let ((keymap (make-sparse-keymap))) (set-keymap-parent keymap company-template-nav-map) (define-key keymap (kbd "C-d") (quote company-template-clear-field)) keymap)) nil [1331 1539])
            ("defvar-local" code nil nil [1541 1594])
            ("company-template-templates-at" function (:arguments ("pos")) nil [1678 1975])
            ("company-template-move-to-first" function (:arguments ("templ")) nil [1977 2110])
            ("company-template-forward-field" function nil nil [2112 2376])
            ("company-template-clear-field" function (:user-visible-flag t) nil [2378 2743])
            ("company-template--after-clear-c-like-field" function nil nil [2745 3694])
            ("company-template-find-next-field" function nil nil [3696 4174])
            ("company-template-field-at" function (:arguments ("point")) nil [4176 4364])
            ("company-template-declare-template" function (:arguments ("beg" "end")) nil [4448 4828])
            ("company-template-remove-template" function (:arguments ("templ")) nil [4830 5096])
            ("company-template-add-field" function (:arguments ("templ" "beg" "end" "display" "after-clear-fn")) nil [5098 6265])
            ("company-template-remove-field" function (:arguments ("ovl" "clear")) nil [6267 6723])
            ("company-template-clean-up" function (:arguments ("pos")) nil [6725 7021])
            ("company-template-insert-hook" function (:arguments ("ovl" "after-p" "_ignore")) nil [7105 7282])
            ("company-template-post-command" function nil nil [7284 7470])
            ("company-template-c-like-templatify" function (:arguments ("call")) nil [7554 8766])
            ("company-template--c-like-args" function (:arguments ("templ" "end")) nil [8768 9185])
            ("company-template-objc-templatify" function (:arguments ("selector")) nil [9267 10311])
            ("company-template" package nil nil [10313 10340]))          
      :file "company-template.el"
      :pointmax 10375
      :fsize 10374
      :lastmodtime '(22848 49125 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("company" include nil nil [868 886])
            ("cl-lib" include nil nil [887 904])
            ("etags" include nil nil [905 921])
            ("company-etags" customgroup (:user-visible-flag t) nil [923 1003])
            ("company-etags-use-main-table-list" variable (:default-value t) nil [1005 1273])
            ("company-etags-ignore-case" variable nil nil [1275 1426])
            ("company-etags-everywhere" variable nil nil [1428 1803])
            ("company-etags-modes" variable (:default-value (quote (prog-mode c-mode objc-mode c++-mode java-mode jde-mode pascal-mode perl-mode python-mode))) nil [1805 1955])
            ("defvar-local" code nil nil [1957 2007])
            ("company-etags-find-table" function nil nil [2009 2333])
            ("company-etags-buffer-table" function nil nil [2335 2593])
            ("company-etags--candidates" function (:arguments ("prefix")) nil [2595 2964])
            ("company-etags" function
               (:user-visible-flag t
                :arguments ("command" "arg" "ignored"))
                nil [2981 3929])
            ("company-etags" package nil nil [3931 3955]))          
      :file "company-etags.el"
      :pointmax 3987
      :fsize 3986
      :lastmodtime '(22848 49125 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("company" include nil nil [905 923])
            ("company-dabbrev" include nil nil [924 950])
            ("cl-lib" include nil nil [951 968])
            ("company-dabbrev-code" customgroup (:user-visible-flag t) nil [970 1069])
            ("company-dabbrev-code-modes" variable (:default-value (quote (prog-mode batch-file-mode csharp-mode css-mode erlang-mode haskell-mode jde-mode lua-mode python-mode))) nil [1071 1651])
            ("company-dabbrev-code-other-buffers" variable (:default-value t) nil [1653 2225])
            ("company-dabbrev-code-time-limit" variable (:default-value 0.1) nil [2227 2427])
            ("company-dabbrev-code-everywhere" variable nil nil [2429 2551])
            ("company-dabbrev-code-ignore-case" variable nil nil [2553 2684])
            ("company-dabbrev-code--make-regexp" function (:arguments ("prefix")) nil [2686 2898])
            ("company-dabbrev-code" function
               (:user-visible-flag t
                :arguments ("command" "arg" "ignored"))
                nil [2915 4089])
            ("company-dabbrev-code" package nil nil [4091 4122]))          
      :file "company-dabbrev-code.el"
      :pointmax 4161
      :fsize 4160
      :lastmodtime '(22848 49125 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("company" include nil nil [914 932])
            ("cl-lib" include nil nil [933 950])
            ("company-dabbrev" customgroup (:user-visible-flag t) nil [952 1037])
            ("company-dabbrev-other-buffers" variable (:default-value (quote all)) nil [1039 1435])
            ("company-dabbrev-ignore-buffers" variable (:default-value "\\`[ *]") nil [1437 1720])
            ("company-dabbrev-time-limit" variable (:default-value 0.1) nil [1722 1920])
            ("company-dabbrev-char-regexp" variable (:default-value "\\sw") nil [1922 2062])
            ("company-dabbrev-ignore-case" variable (:default-value (quote keep-prefix)) nil [2064 2329])
            ("company-dabbrev-downcase" variable (:default-value (quote case-replace)) nil [2331 2682])
            ("company-dabbrev-minimum-length" variable (:default-value 4) nil [2684 2926])
            ("company-dabbrev-ignore-invisible" variable nil nil [2928 3069])
            ("company-dabbrev--time-limit-while" function (:arguments ("test" "start" "limit" "freq" "body")) nil [3071 3536])
            ("company-dabbrev--make-regexp" function nil nil [3538 3631])
            ("company-dabbrev--search-buffer" function (:arguments ("regexp" "pos" "symbols" "start" "limit" "ignore-comments")) nil [3633 5368])
            ("company-dabbrev--search" function (:arguments ("regexp" "limit" "other-buffer-modes" "ignore-comments")) nil [5370 6476])
            ("company-dabbrev--prefix" function nil nil [6478 6800])
            ("company-dabbrev--filter" function (:arguments ("prefix" "candidates")) nil [6802 6956])
            ("company-dabbrev" function
               (:user-visible-flag t
                :arguments ("command" "arg" "ignored"))
                nil [6973 8036])
            ("company-dabbrev" package nil nil [8038 8064]))          
      :file "company-dabbrev.el"
      :pointmax 8098
      :fsize 8097
      :lastmodtime '(22848 49125 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("company" include nil nil [878 896])
            ("cl-lib" include nil nil [897 914])
            ("company-files" customgroup (:user-visible-flag t) nil [916 1001])
            ("company-files-exclusions" variable nil nil [1003 1237])
            ("company-files--directory-files" function (:arguments ("dir" "prefix")) nil [1239 1757])
            ("company-files--exclusions-filtered" function (:arguments ("completions")) nil [1759 2437])
            ("company-files--regexps" variable (:default-value (let* ((root (if (eq system-type (quote windows-nt)) "[a-zA-Z]:/" "/")) (begin (concat "\\(?:\\.\\{1,2\\}/\\|~/\\|" root "\\)"))) (list (concat "\"\\(" begin "[^\"
]*\\)") (concat "'\\(" begin "[^'
]*\\)") (concat "\\(?:[ 	=]\\|^\\)\\(" begin "[^ 	
]*\\)")))) nil [2439 2800])
            ("company-files--grab-existing-name" function nil nil [2802 3262])
            ("company-files--connected-p" function (:arguments ("file")) nil [3264 3372])
            ("company-files--trailing-slash-p" function (:arguments ("file")) nil [3374 3651])
            ("company-files--completion-cache" variable nil nil [3653 3697])
            ("company-files--complete" function (:arguments ("prefix")) nil [3699 5171])
            ("company-file--keys-match-p" function (:arguments ("new" "old")) nil [5173 5298])
            ("company-files" function
               (:user-visible-flag t
                :arguments ("command" "arg" "ignored"))
                nil [5315 6013])
            ("company-files" package nil nil [6015 6039]))          
      :file "company-files.el"
      :pointmax 6071
      :fsize 6070
      :lastmodtime '(22848 49125 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("company" include nil nil [881 899])
            ("cl-lib" include nil nil [900 917])
            ("company-keywords-upper-lower" function (:arguments ("lst")) nil [919 1056])
            ("company-keywords-alist" variable (:default-value (\` ((c++-mode "alignas" "alignof" "asm" "auto" "bool" "break" "case" "catch" "char" "char16_t" "char32_t" "class" "const" "const_cast" "constexpr" "continue" "decltype" "default" "delete" "do" "double" "dynamic_cast" "else" "enum" "explicit" "export" "extern" "false" "final" "float" "for" "friend" "goto" "if" "inline" "int" "long" "mutable" "namespace" "new" "noexcept" "nullptr" "operator" "override" "private" "protected" "public" "register" "reinterpret_cast" "return" "short" "signed" "sizeof" "static" "static_assert" "static_cast" "struct" "switch" "template" "this" "thread_local" "throw" "true" "try" "typedef" "typeid" "typename" "union" "unsigned" "using" "virtual" "void" "volatile" "wchar_t" "while") (c-mode "auto" "break" "case" "char" "const" "continue" "default" "do" "double" "else" "enum" "extern" "float" "for" "goto" "if" "int" "long" "register" "return" "short" "signed" "sizeof" "static" "struct" "switch" "typedef" "union" "unsigned" "void" "volatile" "while") (csharp-mode "abstract" "add" "alias" "as" "base" "bool" "break" "byte" "case" "catch" "char" "checked" "class" "const" "continue" "decimal" "default" "delegate" "do" "double" "else" "enum" "event" "explicit" "extern" "false" "finally" "fixed" "float" "for" "foreach" "get" "global" "goto" "if" "implicit" "in" "int" "interface" "internal" "is" "lock" "long" "namespace" "new" "null" "object" "operator" "out" "override" "params" "partial" "private" "protected" "public" "readonly" "ref" "remove" "return" "sbyte" "sealed" "set" "short" "sizeof" "stackalloc" "static" "string" "struct" "switch" "this" "throw" "true" "try" "typeof" "uint" "ulong" "unchecked" "unsafe" "ushort" "using" "value" "var" "virtual" "void" "volatile" "where" "while" "yield") (d-mode "abstract" "alias" "align" "asm" "assert" "auto" "body" "bool" "break" "byte" "case" "cast" "catch" "cdouble" "cent" "cfloat" "char" "class" "const" "continue" "creal" "dchar" "debug" "default" "delegate" "delete" "deprecated" "do" "double" "else" "enum" "export" "extern" "false" "final" "finally" "float" "for" "foreach" "foreach_reverse" "function" "goto" "idouble" "if" "ifloat" "import" "in" "inout" "int" "interface" "invariant" "ireal" "is" "lazy" "long" "macro" "mixin" "module" "new" "nothrow" "null" "out" "override" "package" "pragma" "private" "protected" "public" "pure" "real" "ref" "return" "scope" "short" "static" "struct" "super" "switch" "synchronized" "template" "this" "throw" "true" "try" "typedef" "typeid" "typeof" "ubyte" "ucent" "uint" "ulong" "union" "unittest" "ushort" "version" "void" "volatile" "wchar" "while" "with") (f90-mode \, (company-keywords-upper-lower "abs" "abstract" "achar" "acos" "adjustl" "adjustr" "aimag" "aint" "align" "all" "all_prefix" "all_scatter" "all_suffix" "allocatable" "allocate" "allocated" "and" "anint" "any" "any_prefix" "any_scatter" "any_suffix" "asin" "assign" "assignment" "associate" "associated" "asynchronous" "atan" "atan2" "backspace" "bind" "bit_size" "block" "btest" "c_alert" "c_associated" "c_backspace" "c_bool" "c_carriage_return" "c_char" "c_double" "c_double_complex" "c_f_pointer" "c_f_procpointer" "c_float" "c_float_complex" "c_form_feed" "c_funloc" "c_funptr" "c_horizontal_tab" "c_int" "c_int16_t" "c_int32_t" "c_int64_t" "c_int8_t" "c_int_fast16_t" "c_int_fast32_t" "c_int_fast64_t" "c_int_fast8_t" "c_int_least16_t" "c_int_least32_t" "c_int_least64_t" "c_int_least8_t" "c_intmax_t" "c_intptr_t" "c_loc" "c_long" "c_long_double" "c_long_double_complex" "c_long_long" "c_new_line" "c_null_char" "c_null_funptr" "c_null_ptr" "c_ptr" "c_short" "c_signed_char" "c_size_t" "c_vertical_tab" "call" "case" "ceiling" "char" "character" "character_storage_size" "class" "close" "cmplx" "command_argument_count" "common" "complex" "conjg" "contains" "continue" "copy_prefix" "copy_scatter" "copy_suffix" "cos" "cosh" "count" "count_prefix" "count_scatter" "count_suffix" "cpu_time" "cshift" "cycle" "cyclic" "data" "date_and_time" "dble" "deallocate" "deferred" "digits" "dim" "dimension" "distribute" "do" "dot_product" "double" "dprod" "dynamic" "elemental" "else" "elseif" "elsewhere" "end" "enddo" "endfile" "endif" "entry" "enum" "enumerator" "eoshift" "epsilon" "eq" "equivalence" "eqv" "error_unit" "exit" "exp" "exponent" "extends" "extends_type_of" "external" "extrinsic" "false" "file_storage_size" "final" "floor" "flush" "forall" "format" "fraction" "function" "ge" "generic" "get_command" "get_command_argument" "get_environment_variable" "goto" "grade_down" "grade_up" "gt" "hpf_alignment" "hpf_distribution" "hpf_template" "huge" "iachar" "iall" "iall_prefix" "iall_scatter" "iall_suffix" "iand" "iany" "iany_prefix" "iany_scatter" "iany_suffix" "ibclr" "ibits" "ibset" "ichar" "ieee_arithmetic" "ieee_exceptions" "ieee_features" "ieee_get_underflow_mode" "ieee_set_underflow_mode" "ieee_support_underflow_control" "ieor" "if" "ilen" "implicit" "import" "include" "independent" "index" "inherit" "input_unit" "inquire" "int" "integer" "intent" "interface" "intrinsic" "ior" "iostat_end" "iostat_eor" "iparity" "iparity_prefix" "iparity_scatter" "iparity_suffix" "ishft" "ishftc" "iso_c_binding" "iso_fortran_env" "kind" "lbound" "le" "leadz" "len" "len_trim" "lge" "lgt" "lle" "llt" "log" "log10" "logical" "lt" "matmul" "max" "maxexponent" "maxloc" "maxval" "maxval_prefix" "maxval_scatter" "maxval_suffix" "merge" "min" "minexponent" "minloc" "minval" "minval_prefix" "minval_scatter" "minval_suffix" "mod" "module" "modulo" "move_alloc" "mvbits" "namelist" "ne" "nearest" "neqv" "new" "new_line" "nint" "non_intrinsic" "non_overridable" "none" "nopass" "not" "null" "nullify" "number_of_processors" "numeric_storage_size" "only" "onto" "open" "operator" "optional" "or" "output_unit" "pack" "parameter" "parity" "parity_prefix" "parity_scatter" "parity_suffix" "pass" "pause" "pointer" "popcnt" "poppar" "precision" "present" "print" "private" "procedure" "processors" "processors_shape" "product" "product_prefix" "product_scatter" "product_suffix" "program" "protected" "public" "pure" "radix" "random_number" "random_seed" "range" "read" "real" "realign" "recursive" "redistribute" "repeat" "reshape" "result" "return" "rewind" "rrspacing" "same_type_as" "save" "scale" "scan" "select" "selected_char_kind" "selected_int_kind" "selected_real_kind" "sequence" "set_exponent" "shape" "sign" "sin" "sinh" "size" "spacing" "spread" "sqrt" "stop" "subroutine" "sum" "sum_prefix" "sum_scatter" "sum_suffix" "system_clock" "tan" "tanh" "target" "template" "then" "tiny" "transfer" "transpose" "trim" "true" "type" "ubound" "unpack" "use" "value" "verify" "volatile" "wait" "where" "while" "with" "write")) (java-mode "abstract" "assert" "boolean" "break" "byte" "case" "catch" "char" "class" "continue" "default" "do" "double" "else" "enum" "extends" "final" "finally" "float" "for" "if" "implements" "import" "instanceof" "int" "interface" "long" "native" "new" "package" "private" "protected" "public" "return" "short" "static" "strictfp" "super" "switch" "synchronized" "this" "throw" "throws" "transient" "try" "void" "volatile" "while") (javascript-mode "break" "catch" "const" "continue" "delete" "do" "else" "export" "for" "function" "if" "import" "in" "instanceOf" "label" "let" "new" "return" "switch" "this" "throw" "try" "typeof" "var" "void" "while" "with" "yield") (objc-mode "@catch" "@class" "@encode" "@end" "@finally" "@implementation" "@interface" "@private" "@protected" "@protocol" "@public" "@selector" "@synchronized" "@throw" "@try" "alloc" "autorelease" "bycopy" "byref" "in" "inout" "oneway" "out" "release" "retain") (perl-mode "AUTOLOAD" "BEGIN" "CHECK" "CORE" "DESTROY" "END" "INIT" "__END__" "__FILE__" "__LINE__" "abs" "accept" "alarm" "and" "atan2" "bind" "binmode" "bless" "caller" "chdir" "chmod" "chomp" "chop" "chown" "chr" "chroot" "close" "closedir" "cmp" "connect" "continue" "cos" "crypt" "dbmclose" "dbmopen" "defined" "delete" "die" "do" "dump" "each" "else" "elsif" "endgrent" "endhostent" "endnetent" "endprotoent" "endpwent" "endservent" "eof" "eq" "eval" "exec" "exists" "exit" "exp" "fcntl" "fileno" "flock" "for" "foreach" "fork" "format" "formline" "ge" "getc" "getgrent" "getgrgid" "getgrnam" "gethostbyaddr" "gethostbyname" "gethostent" "getlogin" "getnetbyaddr" "getnetbyname" "getnetent" "getpeername" "getpgrp" "getppid" "getpriority" "getprotobyname" "getprotobynumber" "getprotoent" "getpwent" "getpwnam" "getpwuid" "getservbyname" "getservbyport" "getservent" "getsockname" "getsockopt" "glob" "gmtime" "goto" "grep" "gt" "hex" "if" "index" "int" "ioctl" "join" "keys" "kill" "last" "lc" "lcfirst" "le" "length" "link" "listen" "local" "localtime" "lock" "log" "lstat" "lt" "map" "mkdir" "msgctl" "msgget" "msgrcv" "msgsnd" "my" "ne" "next" "no" "not" "oct" "open" "opendir" "or" "ord" "our" "pack" "package" "pipe" "pop" "pos" "print" "printf" "push" "q" "qq" "quotemeta" "qw" "qx" "rand" "read" "readdir" "readline" "readlink" "readpipe" "recv" "redo" "ref" "rename" "require" "reset" "return" "reverse" "rewinddir" "rindex" "rmdir" "scalar" "seek" "seekdir" "select" "semctl" "semget" "semop" "send" "setgrent" "sethostent" "setnetent" "setpgrp" "setpriority" "setprotoent" "setpwent" "setservent" "setsockopt" "shift" "shmctl" "shmget" "shmread" "shmwrite" "shutdown" "sin" "sleep" "socket" "socketpair" "sort" "splice" "split" "sprintf" "sqrt" "srand" "stat" "study" "sub" "substr" "symlink" "syscall" "sysopen" "sysread" "system" "syswrite" "tell" "telldir" "tie" "time" "times" "tr" "truncate" "uc" "ucfirst" "umask" "undef" "unless" "unlink" "unpack" "unshift" "untie" "until" "use" "utime" "values" "vec" "wait" "waitpid" "wantarray" "warn" "while" "write" "x" "xor" "y") (php-mode "__CLASS__" "__DIR__" "__FILE__" "__FUNCTION__" "__LINE__" "__METHOD__" "__NAMESPACE__" "_once" "abstract" "and" "array" "as" "break" "case" "catch" "cfunction" "class" "clone" "const" "continue" "declare" "default" "die" "do" "echo" "else" "elseif" "empty" "enddeclare" "endfor" "endforeach" "endif" "endswitch" "endwhile" "eval" "exception" "exit" "extends" "final" "for" "foreach" "function" "global" "goto" "if" "implements" "include" "instanceof" "interface" "isset" "list" "namespace" "new" "old_function" "or" "php_user_filter" "print" "private" "protected" "public" "require" "require_once" "return" "static" "switch" "this" "throw" "try" "unset" "use" "var" "while" "xor") (python-mode "and" "assert" "break" "class" "continue" "def" "del" "elif" "else" "except" "exec" "finally" "for" "from" "global" "if" "import" "in" "is" "lambda" "not" "or" "pass" "print" "raise" "return" "try" "while" "yield") (ruby-mode "BEGIN" "END" "alias" "and" "begin" "break" "case" "class" "def" "defined?" "do" "else" "elsif" "end" "ensure" "false" "for" "if" "in" "module" "next" "nil" "not" "or" "redo" "rescue" "retry" "return" "self" "super" "then" "true" "undef" "unless" "until" "when" "while" "yield") (rust-mode "Self" "as" "box" "break" "const" "continue" "crate" "else" "enum" "extern" "false" "fn" "for" "if" "impl" "in" "let" "loop" "macro" "match" "mod" "move" "mut" "pub" "ref" "return" "self" "static" "struct" "super" "trait" "true" "type" "unsafe" "use" "where" "while") (scala-mode "abstract" "case" "catch" "class" "def" "do" "else" "extends" "false" "final" "finally" "for" "forSome" "if" "implicit" "import" "lazy" "match" "new" "null" "object" "override" "package" "private" "protected" "return" "sealed" "super" "this" "throw" "trait" "true" "try" "type" "val" "var" "while" "with" "yield") (julia-mode "abstract" "break" "case" "catch" "const" "continue" "do" "else" "elseif" "end" "eval" "export" "false" "finally" "for" "function" "global" "if" "ifelse" "immutable" "import" "importall" "in" "let" "macro" "module" "otherwise" "quote" "return" "switch" "throw" "true" "try" "type" "typealias" "using" "while") (js2-mode . javascript-mode) (js2-jsx-mode . javascript-mode) (espresso-mode . javascript-mode) (js-mode . javascript-mode) (js-jsx-mode . javascript-mode) (cperl-mode . perl-mode) (jde-mode . java-mode) (ess-julia-mode . julia-mode) (enh-ruby-mode . ruby-mode)))) nil [1058 14704])
            ("company-keywords" function
               (:user-visible-flag t
                :arguments ("command" "arg" "ignored"))
                nil [14721 15431])
            ("company-keywords" package nil nil [15433 15460]))          
      :file "company-keywords.el"
      :pointmax 15495
      :fsize 15494
      :lastmodtime '(22848 49125 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("company" include nil nil [920 938])
            ("cl-lib" include nil nil [939 956])
            ("company--capf-cache" variable nil nil [958 990])
            ("company--capf-data" function nil nil [992 1448])
            ("company--capf-data-real" function nil nil [1450 2235])
            ("declare-function" code nil nil [2237 2289])
            ("company--capf-workaround" function nil nil [2291 2683])
            ("company-capf" function
               (:user-visible-flag t
                :arguments ("command" "arg" "_args"))
                nil [2685 7150])
            ("company-capf" package nil nil [7152 7175]))          
      :file "company-capf.el"
      :pointmax 7207
      :fsize 7206
      :lastmodtime '(22848 49125 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("company" include nil nil [900 918])
            ("cl-lib" include nil nil [919 936])
            ("help-mode" include nil nil [937 957])
            ("find-func" include nil nil [958 978])
            ("company-elisp" customgroup (:user-visible-flag t) nil [980 1065])
            ("company-elisp-detect-function-context" variable (:default-value t) nil [1067 1321])
            ("company-elisp-show-locals-first" variable (:default-value t) nil [1323 1544])
            ("company-elisp--prefix" function nil nil [1546 1831])
            ("company-elisp--predicate" function (:arguments ("symbol")) nil [1833 1965])
            ("company-elisp--fns-regexp" function (:arguments ("names")) nil [1967 2074])
            ("company-elisp-parse-limit" variable (:default-value 30) nil [2076 2113])
            ("company-elisp-parse-depth" variable (:default-value 100) nil [2114 2152])
            ("company-elisp-defun-names" variable (:default-value (quote ("defun" "defmacro" "defsubst"))) nil [2154 2221])
            ("company-elisp-var-binding-regexp" variable (:default-value (apply (function company-elisp--fns-regexp) "let" "lambda" "lexical-let" company-elisp-defun-names)) nil [2223 2441])
            ("company-elisp-var-binding-regexp-1" variable (:default-value (company-elisp--fns-regexp "dolist" "dotimes")) nil [2443 2609])
            ("company-elisp-fun-binding-regexp" variable (:default-value (company-elisp--fns-regexp "flet" "labels")) nil [2611 2764])
            ("company-elisp-defuns-regexp" variable (:default-value (concat "([ 	
]*" (apply (function company-elisp--fns-regexp) company-elisp-defun-names))) nil [2766 2897])
            ("company-elisp--should-complete" function nil nil [2899 3459])
            ("company-elisp--locals" function (:arguments ("prefix" "functions-p")) nil [3461 5101])
            ("company-elisp-candidates" function (:arguments ("prefix")) nil [5103 5645])
            ("company-elisp--globals" function (:arguments ("prefix" "predicate")) nil [5647 5741])
            ("company-elisp--candidates-predicate" function (:arguments ("prefix")) nil [5743 6466])
            ("company-elisp--before-binding-varlist-p" function nil nil [6468 6660])
            ("company-elisp--doc" function (:arguments ("symbol")) nil [6662 6975])
            ("company-elisp" function
               (:user-visible-flag t
                :arguments ("command" "arg" "ignored"))
                nil [6992 8454])
            ("company-elisp" package nil nil [8456 8480]))          
      :file "company-elisp.el"
      :pointmax 8512
      :fsize 8511
      :lastmodtime '(22848 49125 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("company" include nil nil [865 883])
            ("cl-lib" include nil nil [884 901])
            ("declare-function" code nil nil [903 949])
            ("declare-function" code nil nil [950 1004])
            ("declare-function" code nil nil [1005 1054])
            ("declare-function" code nil nil [1055 1107])
            ("declare-function" code nil nil [1108 1163])
            ("declare-function" code nil nil [1164 1207])
            ("company-yasnippet--key-prefixes" function nil nil [1209 2204])
            ("company-yasnippet--candidates" function (:arguments ("prefix")) nil [2206 2865])
            ("company-yasnippet--completions-for-prefix" function (:arguments ("prefix" "key-prefix" "tables")) nil [2867 3656])
            ("company-yasnippet" function
               (:user-visible-flag t
                :arguments ("command" "arg" "ignore"))
                nil [3673 5452])
            ("company-yasnippet" package nil nil [5454 5482]))          
      :file "company-yasnippet.el"
      :pointmax 5518
      :fsize 5517
      :lastmodtime '(22848 49125 0 0)
      :unmatched-syntax nil))
  :file "!Users!ric!.emacs.d!elpa!company-20170613.1653!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
