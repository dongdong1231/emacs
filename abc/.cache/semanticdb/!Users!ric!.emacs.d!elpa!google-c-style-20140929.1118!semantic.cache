;; Object semanticdb-project-database-file
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file"
  :tables
  (list
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags nil
      :file "google-c-style-autoloads.el"
      :pointmax 323
      :fsize 2486
      :lastmodtime '(22865 49384 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cc-defs" include nil nil [1091 1109])
            ("google-c-lineup-expression-plus-4" function (:arguments ("langelem")) nil [1296 2503])
            ("google-c-style" variable
               (:constant-flag t
                :default-value (\` ((c-recognize-knr-p) (c-enable-xemacs-performance-kludge-p . t) (c-basic-offset . 2) (indent-tabs-mode) (c-comment-only-line-offset . 0) (c-hanging-braces-alist (defun-open after) (defun-close before after) (class-open after) (class-close before after) (inexpr-class-open after) (inexpr-class-close before) (namespace-open after) (inline-open after) (inline-close before after) (block-open after) (block-close . c-snug-do-while) (extern-lang-open after) (extern-lang-close after) (statement-case-open after) (substatement-open after)) (c-hanging-colons-alist (case-label) (label after) (access-label after) (member-init-intro before) (inher-intro)) (c-hanging-semi&comma-criteria c-semi&comma-no-newlines-for-oneline-inliners c-semi&comma-inside-parenlist c-semi&comma-no-newlines-before-nonblanks) (c-indent-comments-syntactically-p . t) (comment-column . 40) (c-indent-comment-alist (other space . 2)) (c-cleanup-list brace-else-brace brace-elseif-brace brace-catch-brace empty-defun-braces defun-close-semi list-close-comma scope-operator) (c-offsets-alist (arglist-intro google-c-lineup-expression-plus-4) (func-decl-cont . ++) (member-init-intro . ++) (inher-intro . ++) (comment-intro . 0) (arglist-close . c-lineup-arglist) (topmost-intro . 0) (block-open . 0) (inline-open . 0) (substatement-open . 0) (statement-cont (\, (when (fboundp (quote c-no-indent-after-java-annotations)) (quote c-no-indent-after-java-annotations))) (\, (when (fboundp (quote c-lineup-assignments)) (quote c-lineup-assignments))) ++) (label . /) (case-label . +) (statement-case-open . +) (statement-case-intro . +) (access-label . /) (innamespace . 0)))))
                nil [2520 5586])
            ("google-set-c-style" function (:user-visible-flag t) nil [5603 5883])
            ("google-make-newline-indent" function (:user-visible-flag t) nil [5900 6173])
            ("google-c-style" package nil nil [6175 6200]))          
      :file "google-c-style.el"
      :pointmax 6233
      :fsize 6232
      :lastmodtime '(22865 49384 0 0)
      :unmatched-syntax '((close-paren 1109 . 1110) (symbol 1073 . 1090) (open-paren 1072 . 1073))))
  :file "!Users!ric!.emacs.d!elpa!google-c-style-20140929.1118!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
