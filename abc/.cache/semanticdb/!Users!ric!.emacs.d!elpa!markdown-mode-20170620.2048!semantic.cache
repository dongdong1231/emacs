;; Object semanticdb-project-database-file
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file"
  :tables
  (list
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags nil
      :file "markdown-mode-autoloads.el"
      :pointmax 321
      :fsize 802
      :lastmodtime '(22858 4835 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("easymenu" include nil nil [46889 46908])
            ("outline" include nil nil [46909 46927])
            ("thingatpt" include nil nil [46928 46948])
            ("cl-lib" include nil nil [46949 46966])
            ("url-parse" include nil nil [46967 46987])
            ("button" include nil nil [46988 47005])
            ("color" include nil nil [47006 47022])
            ("jit-lock-start" variable nil nil [47024 47047])
            ("jit-lock-end" variable nil nil [47048 47069])
            ("flyspell-generic-check-word-predicate" variable nil nil [47070 47116])
            ("declare-function" code nil nil [47118 47156])
            ("declare-function" code nil nil [47157 47206])
            ("markdown-mode-version" variable
               (:constant-flag t
                :default-value "2.3-dev")
                nil [47291 47367])
            ("markdown-output-buffer-name" variable
               (:constant-flag t
                :default-value "*markdown-output*")
                nil [47369 47485])
            ("markdown-sub-superscript-display" variable
               (:constant-flag t
                :default-value (quote (((raise -0.3) (height 0.7)) ((raise 0.3) (height 0.7)))))
                nil [47487 47688])
            ("markdown-reference-label-history" variable nil nil [47773 47856])
            ("markdown-live-preview-mode" variable nil nil [47858 47961])
            ("markdown-gfm-language-history" variable nil nil [47963 48082])
            ("markdown-mode-hook" variable nil nil [48167 48240])
            ("markdown-before-export-hook" variable nil nil [48242 48450])
            ("markdown-after-export-hook" variable nil nil [48452 48605])
            ("markdown" customgroup (:user-visible-flag t) nil [48607 48789])
            ("markdown-command" variable (:default-value "markdown") nil [48791 48894])
            ("markdown-command-needs-filename" variable nil nil [48896 49218])
            ("markdown-open-command" variable nil nil [49220 49481])
            ("markdown-hr-strings" variable (:default-value (quote ("-------------------------------------------------------------------------------" "* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *" "---------------------------------------" "* * * * * * * * * * * * * * * * * * * *" "---------" "* * * * *"))) nil [49483 50125])
            ("markdown-bold-underscore" variable nil nil [50127 50278])
            ("markdown-italic-underscore" variable nil nil [50280 50427])
            ("markdown-asymmetric-header" variable nil nil [50429 50783])
            ("markdown-indent-function" variable (:default-value (quote markdown-indent-line)) nil [50785 50911])
            ("markdown-indent-on-enter" variable (:default-value t) nil [50913 52123])
            ("markdown-enable-wiki-links" variable nil nil [52125 52486])
            ("markdown-wiki-link-alias-first" variable (:default-value t) nil [52488 52719])
            ("markdown-wiki-link-search-subdirectories" variable nil nil [52721 53033])
            ("markdown-wiki-link-search-parent-directories" variable nil nil [53035 53311])
            ("markdown-wiki-link-fontify-missing" variable nil nil [53313 53744])
            ("markdown-uri-types" variable (:default-value (quote ("acap" "cid" "data" "dav" "fax" "file" "ftp" "gopher" "http" "https" "imap" "ldap" "mailto" "mid" "modem" "news" "nfs" "nntp" "pop" "prospero" "rtsp" "service" "sip" "tel" "telnet" "tip" "urn" "vemmi" "wais"))) nil [53746 54078])
            ("markdown-url-compose-char" variable (:default-value (cond ((char-displayable-p 8734) 8734) ((char-displayable-p 8230) 8230) (t 35))) nil [54080 54394])
            ("markdown-blockquote-display-char" variable (:default-value (cond ((char-displayable-p 9612) "▌") ((char-displayable-p 9475) "┃") ((char-displayable-p 9474) "│") ((char-displayable-p 124) "|") (t ">"))) nil [54396 54713])
            ("markdown-hr-display-char" variable (:default-value (cond ((char-displayable-p 9472) 9472) ((char-displayable-p 9473) 9473) (t 45))) nil [54715 54973])
            ("markdown-definition-display-char" variable (:default-value (cond ((char-displayable-p 8280) 8280) ((char-displayable-p 8281) 8281) ((char-displayable-p 8801) 8801) ((char-displayable-p 8977) 8977) ((char-displayable-p 9674) 9674) (t nil))) nil [54975 55356])
            ("markdown-enable-math" variable nil nil [55358 55689])
            ("make-variable-buffer-local" code nil nil [55690 55740])
            ("markdown-css-paths" variable nil nil [55742 55861])
            ("markdown-content-type" variable nil nil [55863 56104])
            ("markdown-coding-system" variable nil nil [56106 56442])
            ("markdown-xhtml-header-content" variable nil nil [56444 56584])
            ("markdown-xhtml-standalone-regexp" variable (:default-value "^\\(<\\?xml\\|<!DOCTYPE\\|<html\\)") nil [56586 56781])
            ("markdown-link-space-sub-char" variable (:default-value "_") nil [56783 56939])
            ("markdown-reference-location" variable (:default-value (quote header)) nil [56941 57350])
            ("markdown-footnote-location" variable (:default-value (quote end)) nil [57352 57745])
            ("markdown-unordered-list-item-prefix" variable (:default-value "  * ") nil [57747 57885])
            ("markdown-nested-imenu-heading-index" variable (:default-value t) nil [57887 58219])
            ("markdown-make-gfm-checkboxes-buttons" variable (:default-value t) nil [58221 58359])
            ("markdown-use-pandoc-style-yaml-metadata" variable nil nil [58361 58516])
            ("markdown-split-window-direction" variable (:default-value (quote any)) nil [58518 59258])
            ("markdown-live-preview-window-function" variable (:default-value (quote markdown-live-preview-window-eww)) nil [59260 59525])
            ("markdown-live-preview-delete-export" variable (:default-value (quote delete-on-destroy)) nil [59527 60063])
            ("markdown-list-indent-width" variable (:default-value 4) nil [60065 60256])
            ("markdown-gfm-additional-languages" variable nil nil [60258 60599])
            ("markdown-gfm-use-electric-backquote" variable (:default-value t) nil [60601 60759])
            ("markdown-gfm-downcase-languages" variable (:default-value t) nil [60761 60956])
            ("markdown-hide-urls" variable nil nil [60958 61766])
            ("make-variable-buffer-local" code nil nil [61767 61815])
            ("markdown-regex-comment-start" variable
               (:constant-flag t
                :default-value "<!--")
                nil [61900 62001])
            ("markdown-regex-comment-end" variable
               (:constant-flag t
                :default-value "--[ 	]*>")
                nil [62003 62107])
            ("markdown-regex-link-inline" variable
               (:constant-flag t
                :default-value "\\(!\\)?\\(\\[\\)\\([^]^][^]]*\\|\\)\\(\\]\\)\\((\\)\\([^)]*?\\)\\(?:\\s-+\\(\"[^\"]*\"\\)\\)?\\()\\)")
                nil [62109 62670])
            ("markdown-regex-link-reference" variable
               (:constant-flag t
                :default-value "\\(!\\)?\\(\\[\\)\\([^]^][^]]*\\|\\)\\(\\]\\)[ ]?\\(\\[\\)\\([^]]*?\\)\\(\\]\\)")
                nil [62672 63260])
            ("markdown-regex-reference-definition" variable
               (:constant-flag t
                :default-value "^ \\{0,3\\}\\(\\[\\)\\([^]
]+?\\)\\(\\]\\)\\(:\\)\\s *\\(.*?\\)\\s *\\( \"[^\"]*\"$\\|$\\)")
                nil [63262 63680])
            ("markdown-regex-footnote" variable
               (:constant-flag t
                :default-value "\\(\\[\\^\\)\\(.+?\\)\\(\\]\\)")
                nil [63682 63965])
            ("markdown-regex-header" variable
               (:constant-flag t
                :default-value "^\\(?:\\([^
	 -].*\\)
\\(?:\\(=+\\)\\|\\(-+\\)\\)\\|\\(#+[ 	]+\\)\\(.*?\\)\\([ 	]*#*\\)\\)$")
                nil [63967 64531])
            ("markdown-regex-header-setext" variable
               (:constant-flag t
                :default-value "^\\([^
	 -].*\\)
\\(=+\\|-+\\)$")
                nil [64533 64682])
            ("markdown-regex-header-atx" variable
               (:constant-flag t
                :default-value "^\\(#+\\)[ 	]+\\(.*?\\)[ 	]*\\(#*\\)$")
                nil [64684 64830])
            ("markdown-regex-hr" variable
               (:constant-flag t
                :default-value "^\\(\\*[ ]?\\*[ ]?\\*[ ]?[\\* ]*\\|-[ ]?-[ ]?-[--- ]*\\)$")
                nil [64832 64985])
            ("markdown-regex-code" variable
               (:constant-flag t
                :default-value "\\(?:\\`\\|[^\\]\\)\\(\\(`+\\)\\(\\(?:.\\|
[^
]\\)*?[^`]\\)\\(\\2\\)\\)\\(?:[^`]\\|\\'\\)")
                nil [64987 65687])
            ("markdown-regex-kbd" variable
               (:constant-flag t
                :default-value "\\(<kbd>\\)\\(\\(?:.\\|
[^
]\\)*?\\)\\(</kbd>\\)")
                nil [65689 65906])
            ("markdown-regex-gfm-code-block-open" variable
               (:constant-flag t
                :default-value "^[[:blank:]]*\\(```\\)\\([[:blank:]]*{?[[:blank:]]*\\)\\([^[:space:]]+?\\)?\\(?:[[:blank:]]+\\(.+?\\)\\)?\\([[:blank:]]*}?[[:blank:]]*\\)$")
                nil [65908 66533])
            ("markdown-regex-gfm-code-block-close" variable
               (:constant-flag t
                :default-value "^[[:blank:]]*\\(```\\)\\(\\s *?\\)$")
                nil [66535 66779])
            ("markdown-regex-pre" variable
               (:constant-flag t
                :default-value "^\\(    \\|	\\).*$")
                nil [66781 66898])
            ("markdown-regex-list" variable
               (:constant-flag t
                :default-value "^\\([ 	]*\\)\\([0-9#]+\\.\\|[\\*\\+:-]\\)\\([ 	]+\\)")
                nil [66900 67037])
            ("markdown-regex-bold" variable
               (:constant-flag t
                :default-value "\\(^\\|[^\\]\\)\\(\\([*_]\\{2\\}\\)\\([^ 
	\\]\\|[^ 
	]\\(?:.\\|
[^
]\\)*?[^\\ ]\\)\\(\\3\\)\\)")
                nil [67039 67515])
            ("markdown-regex-italic" variable
               (:constant-flag t
                :default-value "\\(?:^\\|[^\\]\\)\\(\\([*_]\\)\\([^ 
	\\]\\|[^ 
	]\\(?:.\\|
[^
]\\)*?[^\\ ]\\)\\(\\2\\)\\)")
                nil [67517 68007])
            ("markdown-regex-strike-through" variable
               (:constant-flag t
                :default-value "\\(^\\|[^\\]\\)\\(\\(~~\\)\\([^ 
	\\]\\|[^ 
	]\\(?:.\\|
[^
]\\)*?[^\\ ]\\)\\(~~\\)\\)")
                nil [68009 68478])
            ("markdown-regex-gfm-italic" variable
               (:constant-flag t
                :default-value "\\(?:^\\|\\s-\\)\\(\\([*_]\\)\\([^ \\]\\2\\|[^ ]\\(?:.\\|
[^
]\\)*?[^\\ ]\\)\\(\\2\\)\\)")
                nil [68480 68905])
            ("markdown-regex-blockquote" variable
               (:constant-flag t
                :default-value "^[ 	]*\\([A-Z]?>\\)\\([ 	]*\\)\\(.*\\)$")
                nil [68907 69296])
            ("markdown-regex-line-break" variable
               (:constant-flag t
                :default-value "[^ 
	][ 	]*\\(  \\)$")
                nil [69298 69411])
            ("markdown-regex-wiki-link" variable
               (:constant-flag t
                :default-value "\\(?:^\\|[^\\]\\)\\(\\(\\[\\[\\)\\([^]|]+\\)\\(?:\\(|\\)\\([^]]+\\)\\)?\\(\\]\\]\\)\\)")
                nil [69413 70102])
            ("markdown-regex-uri" variable
               (:constant-flag t
                :default-value (concat "\\(" (regexp-opt markdown-uri-types) ":[^]	
<>,;() ]+\\)"))
                nil [70104 70256])
            ("markdown-regex-angle-uri" variable
               (:constant-flag t
                :default-value (concat "\\(<\\)\\(" (regexp-opt markdown-uri-types) ":[^]	
<>,;()]+\\)\\(>\\)"))
                nil [70258 70447])
            ("markdown-regex-email" variable
               (:constant-flag t
                :default-value "<\\(\\(?:\\sw\\|\\s_\\|\\s.\\)+@\\(?:\\sw\\|\\s_\\|\\s.\\)+\\)>")
                nil [70449 70608])
            ("markdown-make-regex-link-generic" function nil nil [70610 70953])
            ("markdown-regex-gfm-checkbox" variable
               (:constant-flag t
                :default-value " \\(\\[[ xX]\\]\\) ")
                nil [70955 71114])
            ("markdown-regex-block-separator" variable
               (:constant-flag t
                :default-value "
[
	 ]*
")
                nil [71116 71230])
            ("markdown-regex-block-separator-noindent" variable
               (:constant-flag t
                :default-value (concat "\\(\\`\\|\\(" markdown-regex-block-separator "\\)[^
	 ]\\)"))
                nil [71232 71424])
            ("markdown-regex-math-inline-single" variable
               (:constant-flag t
                :default-value "\\(?:^\\|[^\\]\\)\\(\\$\\)\\(\\(?:[^\\$]\\|\\\\.\\)*\\)\\(\\$\\)")
                nil [71426 71720])
            ("markdown-regex-math-inline-double" variable
               (:constant-flag t
                :default-value "\\(?:^\\|[^\\]\\)\\(\\$\\$\\)\\(\\(?:[^\\$]\\|\\\\.\\)*\\)\\(\\$\\$\\)")
                nil [71722 72020])
            ("markdown-regex-math-display" variable
               (:constant-flag t
                :default-value "^\\(\\\\\\[\\)\\(\\(?:.\\|
\\)*?\\)?\\(\\\\\\]\\)$")
                nil [72022 72300])
            ("markdown-make-tilde-fence-regex" function (:arguments ("num-tildes" "end-of-line")) nil [72302 72625])
            ("markdown-regex-tilde-fence-begin" variable
               (:constant-flag t
                :default-value (markdown-make-tilde-fence-regex 3 "\\([[:blank:]]*{?\\)[[:blank:]]*\\([^[:space:]]+?\\)?\\(?:[[:blank:]]+\\(.+?\\)\\)?\\([[:blank:]]*}?[[:blank:]]*\\)$"))
                nil [72627 73234])
            ("markdown-regex-declarative-metadata" variable
               (:constant-flag t
                :default-value "^\\([[:alpha:]][[:alpha:] _-]*?\\)\\([:=][ 	]*\\)\\(.*\\)$")
                nil [73236 73558])
            ("markdown-regex-pandoc-metadata" variable
               (:constant-flag t
                :default-value "^\\(%\\)\\([ 	]*\\)\\(.*\\(?:
[ 	]+.*\\)*\\)")
                nil [73560 73706])
            ("markdown-regex-yaml-metadata-border" variable
               (:constant-flag t
                :default-value "\\(-\\{3\\}\\)$")
                nil [73708 73825])
            ("markdown-regex-yaml-pandoc-metadata-end-border" variable
               (:constant-flag t
                :default-value "^\\(\\.\\{3\\}\\|\\-\\{3\\}\\)$")
                nil [73827 73983])
            ("markdown-get-yaml-metadata-start-border" function nil nil [73985 74223])
            ("markdown-get-yaml-metadata-end-border" function (:arguments ("_")) nil [74225 74492])
            ("markdown-regex-inline-attributes" variable
               (:constant-flag t
                :default-value "[ 	]*\\({:?\\)[ 	]*\\(\\(#[[:alpha:]_.:-]+\\|\\.[[:alpha:]_.:-]+\\|\\w+=['\"]?[^
'\"]*['\"]?\\),?[ 	]*\\)+\\(}\\)[ 	]*$")
                nil [74494 74815])
            ("markdown-regex-leanpub-sections" variable
               (:constant-flag t
                :default-value (concat "^\\({\\)\\(" (regexp-opt (quote ("frontmatter" "mainmatter" "backmatter" "appendix" "pagebreak"))) "\\)\\(}\\)[ 	]*
"))
                nil [74817 75064])
            ("markdown-regex-sub-superscript" variable
               (:constant-flag t
                :default-value "\\(?:^\\|[^\\~^]\\)\\(\\([~^]\\)\\([[:alnum:]]+\\)\\(\\2\\)\\)")
                nil [75066 75602])
            ("markdown-regex-include" variable
               (:constant-flag t
                :default-value "^\\(<<\\)\\(?:\\(\\[\\)\\(.*\\)\\(\\]\\)\\)?\\(?:\\((\\)\\(.*\\)\\()\\)\\)?\\(?:\\({\\)\\(.*\\)\\(}\\)\\)?$")
                nil [75604 76299])
            ("markdown-regex-pandoc-inline-footnote" variable
               (:constant-flag t
                :default-value "\\(\\^\\)\\(\\[\\)\\(\\(?:.\\|
[^
]\\)*?\\)\\(\\]\\)")
                nil [76301 76665])
            ("markdown-in-comment-p" function (:arguments ("pos")) nil [76750 76909])
            ("markdown-syntax-propertize-extend-region" function (:arguments ("start" "end")) nil [76911 78308])
            ("markdown-font-lock-extend-region-function" function (:arguments ("start" "end" "_")) nil [78310 78996])
            ("markdown-syntax-propertize-pre-blocks" function (:arguments ("start" "end")) nil [78998 81363])
            ("markdown-fenced-block-pairs" variable
               (:constant-flag t
                :default-value (\` ((((\, markdown-regex-tilde-fence-begin) markdown-tilde-fence-begin) (markdown-make-tilde-fence-regex markdown-tilde-fence-end) markdown-fenced-code) ((markdown-get-yaml-metadata-start-border markdown-yaml-metadata-begin) (markdown-get-yaml-metadata-end-border markdown-yaml-metadata-end) markdown-yaml-metadata-section) (((\, markdown-regex-gfm-code-block-open) markdown-gfm-block-begin) ((\, markdown-regex-gfm-code-block-close) markdown-gfm-block-end) markdown-gfm-code))))
                nil [81365 83374])
            ("markdown-text-property-at-point" function (:arguments ("prop")) nil [83376 83457])
            ("markdown-maybe-funcall-regexp" function (:arguments ("object" "arg")) nil [83459 83699])
            ("markdown-get-start-fence-regexp" function nil nil [83701 84050])
            ("markdown-get-fenced-block-begin-properties" function nil nil [84052 84181])
            ("markdown-get-fenced-block-end-properties" function nil nil [84183 84311])
            ("markdown-get-fenced-block-middle-properties" function nil nil [84313 84420])
            ("markdown-find-previous-prop" function (:arguments ("prop" "lim")) nil [84422 85013])
            ("markdown-find-next-prop" function (:arguments ("prop" "lim")) nil [85015 85443])
            ("markdown-min-of-seq" function (:arguments ("map-fn" "seq")) nil [85445 85855])
            ("markdown-max-of-seq" function (:arguments ("map-fn" "seq")) nil [85857 86287])
            ("markdown-find-previous-block" function nil nil [86289 87686])
            ("markdown-get-fenced-block-from-start" function (:arguments ("prop")) nil [87688 89103])
            ("markdown-get-fenced-block-from-middle" function (:arguments ("prop")) nil [89105 89983])
            ("markdown-get-fenced-block-from-end" function (:arguments ("prop")) nil [89985 91226])
            ("markdown-get-enclosing-fenced-block-construct" function (:arguments ("pos")) nil [91228 92412])
            ("markdown-propertize-end-match" function (:arguments ("reg" "end" "fence-spec" "middle-begin")) nil [92414 93300])
            ("markdown-syntax-propertize-fenced-block-constructs" function (:arguments ("start" "end")) nil [93302 96447])
            ("markdown-syntax-propertize-blockquotes" function (:arguments ("start" "end")) nil [96449 96876])
            ("markdown-syntax-propertize-hrs" function (:arguments ("start" "end")) nil [96878 97310])
            ("markdown-syntax-propertize-yaml-metadata" function (:arguments ("start" "end")) nil [97312 98018])
            ("markdown-syntax-propertize-headings" function (:arguments ("start" "end")) nil [98020 98840])
            ("markdown-syntax-propertize-comments" function (:arguments ("start" "end")) nil [98842 99864])
            ("markdown--syntax-properties" variable (:default-value (list (quote markdown-tilde-fence-begin) nil (quote markdown-tilde-fence-end) nil (quote markdown-fenced-code) nil (quote markdown-yaml-metadata-begin) nil (quote markdown-yaml-metadata-end) nil (quote markdown-yaml-metadata-section) nil (quote markdown-gfm-block-begin) nil (quote markdown-gfm-block-end) nil (quote markdown-gfm-code) nil (quote markdown-pre) nil (quote markdown-blockquote) nil (quote markdown-hr) nil (quote markdown-heading) nil (quote markdown-heading-1-setext) nil (quote markdown-heading-2-setext) nil (quote markdown-heading-1-atx) nil (quote markdown-heading-2-atx) nil (quote markdown-heading-3-atx) nil (quote markdown-heading-4-atx) nil (quote markdown-heading-5-atx) nil (quote markdown-heading-6-atx) nil (quote markdown-metadata-key) nil (quote markdown-metadata-value) nil (quote markdown-metadata-markup) nil)) nil [99866 100820])
            ("markdown-syntax-propertize" function (:arguments ("start" "end")) nil [100822 101481])
            ("markdown-markup-properties" variable
               (:constant-flag t
                :default-value (quote (face markdown-markup-face invisible markdown-markup)))
                nil [101504 101652])
            ("markdown-language-keyword-properties" variable
               (:constant-flag t
                :default-value (quote (face markdown-language-keyword-face invisible markdown-markup)))
                nil [101654 101841])
            ("markdown-language-info-properties" variable
               (:constant-flag t
                :default-value (quote (face markdown-language-info-face invisible markdown-markup)))
                nil [101843 102031])
            ("markdown-include-title-properties" variable
               (:constant-flag t
                :default-value (quote (face markdown-link-title-face invisible markdown-markup)))
                nil [102033 102206])
            ("markdown-inline-footnote-properties" variable
               (:constant-flag t
                :default-value (quote (face nil display ((raise 0.2) (height 0.8)))))
                nil [102208 102369])
            ("markdown-hide-markup" variable nil nil [102371 102936])
            ("make-variable-buffer-local" code nil nil [102937 102987])
            ("markdown-toggle-markup-hiding" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [102989 103677])
            ("font-lock" include nil nil [103762 103782])
            ("markdown-italic-face" variable (:default-value (quote markdown-italic-face)) nil [103784 103873])
            ("markdown-bold-face" variable (:default-value (quote markdown-bold-face)) nil [103875 103958])
            ("markdown-strike-through-face" variable (:default-value (quote markdown-strike-through-face)) nil [103960 104073])
            ("markdown-header-delimiter-face" variable (:default-value (quote markdown-header-delimiter-face)) nil [104075 104200])
            ("markdown-header-rule-face" variable (:default-value (quote markdown-header-rule-face)) nil [104202 104312])
            ("markdown-header-face" variable (:default-value (quote markdown-header-face)) nil [104314 104409])
            ("markdown-header-face-1" variable (:default-value (quote markdown-header-face-1)) nil [104411 104508])
            ("markdown-header-face-2" variable (:default-value (quote markdown-header-face-2)) nil [104510 104607])
            ("markdown-header-face-3" variable (:default-value (quote markdown-header-face-3)) nil [104609 104706])
            ("markdown-header-face-4" variable (:default-value (quote markdown-header-face-4)) nil [104708 104805])
            ("markdown-header-face-5" variable (:default-value (quote markdown-header-face-5)) nil [104807 104904])
            ("markdown-header-face-6" variable (:default-value (quote markdown-header-face-6)) nil [104906 105003])
            ("markdown-inline-code-face" variable (:default-value (quote markdown-inline-code-face)) nil [105005 105104])
            ("markdown-list-face" variable (:default-value (quote markdown-list-face)) nil [105106 105192])
            ("markdown-blockquote-face" variable (:default-value (quote markdown-blockquote-face)) nil [105194 105290])
            ("markdown-pre-face" variable (:default-value (quote markdown-pre-face)) nil [105292 105381])
            ("markdown-language-keyword-face" variable (:default-value (quote markdown-language-keyword-face)) nil [105383 105513])
            ("markdown-language-info-face" variable (:default-value (quote markdown-language-info-face)) nil [105515 105631])
            ("markdown-link-face" variable (:default-value (quote markdown-link-face)) nil [105633 105712])
            ("markdown-missing-link-face" variable (:default-value (quote markdown-missing-link-face)) nil [105714 105846])
            ("markdown-reference-face" variable (:default-value (quote markdown-reference-face)) nil [105848 105941])
            ("markdown-footnote-marker-face" variable (:default-value (quote markdown-footnote-marker-face)) nil [105943 106055])
            ("markdown-url-face" variable (:default-value (quote markdown-url-face)) nil [106057 106133])
            ("markdown-link-title-face" variable (:default-value (quote markdown-link-title-face)) nil [106135 106242])
            ("markdown-line-break-face" variable (:default-value (quote markdown-line-break-face)) nil [106244 106346])
            ("markdown-comment-face" variable (:default-value (quote markdown-comment-face)) nil [106348 106441])
            ("markdown-math-face" variable (:default-value (quote markdown-math-face)) nil [106443 106534])
            ("markdown-metadata-key-face" variable (:default-value (quote markdown-metadata-key-face)) nil [106536 106639])
            ("markdown-metadata-value-face" variable (:default-value (quote markdown-metadata-value-face)) nil [106641 106750])
            ("markdown-gfm-checkbox-face" variable (:default-value (quote markdown-gfm-checkbox-face)) nil [106752 106856])
            ("markdown-highlight-face" variable (:default-value (quote markdown-highlight-face)) nil [106858 106960])
            ("markdown-markup-face" variable (:default-value (quote markdown-markup-face)) nil [106962 107055])
            ("markdown-faces" customgroup (:user-visible-flag t) nil [107057 107153])
            ("markdown-italic-face" variable
               (:default-value (quote ((t (:inherit italic))))
                :type "face")
                nil [107155 107263])
            ("markdown-bold-face" variable
               (:default-value (quote ((t (:inherit bold))))
                :type "face")
                nil [107265 107367])
            ("markdown-strike-through-face" variable
               (:default-value (quote ((t (:strike-through t))))
                :type "face")
                nil [107369 107495])
            ("markdown-markup-face" variable
               (:default-value (quote ((t (:inherit shadow :slant normal :weight normal))))
                :type "face")
                nil [107497 107638])
            ("markdown-header-rule-face" variable
               (:default-value (quote ((t (:inherit markdown-markup-face))))
                :type "face")
                nil [107640 107774])
            ("markdown-header-delimiter-face" variable
               (:default-value (quote ((t (:inherit markdown-markup-face))))
                :type "face")
                nil [107776 107924])
            ("markdown-list-face" variable
               (:default-value (quote ((t (:inherit markdown-markup-face))))
                :type "face")
                nil [107926 108052])
            ("markdown-blockquote-face" variable
               (:default-value (quote ((t (:inherit font-lock-doc-face))))
                :type "face")
                nil [108054 108186])
            ("markdown-code-face" variable
               (:default-value (\` ((t (:inherit fixed-pitch))))
                :type "face")
                nil [108188 108335])
            ("markdown-inline-code-face" variable
               (:default-value (quote ((t (:inherit markdown-code-face font-lock-constant-face))))
                :type "face")
                nil [108337 108486])
            ("markdown-pre-face" variable
               (:default-value (quote ((t (:inherit (markdown-code-face font-lock-constant-face)))))
                :type "face")
                nil [108488 108637])
            ("markdown-language-keyword-face" variable
               (:default-value (quote ((t (:inherit font-lock-type-face))))
                :type "face")
                nil [108639 108791])
            ("markdown-language-info-face" variable
               (:default-value (quote ((t (:inherit font-lock-string-face))))
                :type "face")
                nil [108793 108945])
            ("markdown-link-face" variable
               (:default-value (quote ((t (:inherit link))))
                :type "face")
                nil [108947 109045])
            ("markdown-missing-link-face" variable
               (:default-value (quote ((t (:inherit font-lock-warning-face))))
                :type "face")
                nil [109047 109179])
            ("markdown-reference-face" variable
               (:default-value (quote ((t (:inherit markdown-markup-face))))
                :type "face")
                nil [109181 109310])
            ("define-obsolete-face-alias" code nil nil [109312 109404])
            ("markdown-footnote-marker-face" variable
               (:default-value (quote ((t (:inherit markdown-markup-face))))
                :type "face")
                nil [109406 109542])
            ("markdown-footnote-text-face" variable
               (:default-value (quote ((t (:inherit font-lock-comment-face))))
                :type "face")
                nil [109544 109677])
            ("markdown-url-face" variable
               (:default-value (quote ((t (:inherit font-lock-string-face))))
                :type "face")
                nil [109679 109901])
            ("markdown-plain-url-face" variable
               (:default-value (quote ((t (:inherit markdown-link-face))))
                :type "face")
                nil [109903 110117])
            ("markdown-link-title-face" variable
               (:default-value (quote ((t (:inherit font-lock-comment-face))))
                :type "face")
                nil [110119 110257])
            ("markdown-line-break-face" variable
               (:default-value (quote ((t (:inherit font-lock-constant-face :underline t))))
                :type "face")
                nil [110259 110406])
            ("markdown-comment-face" variable
               (:default-value (quote ((t (:inherit font-lock-comment-face))))
                :type "face")
                nil [110408 110535])
            ("markdown-math-face" variable
               (:default-value (quote ((t (:inherit font-lock-string-face))))
                :type "face")
                nil [110537 110664])
            ("markdown-metadata-key-face" variable
               (:default-value (quote ((t (:inherit font-lock-variable-name-face))))
                :type "face")
                nil [110666 110804])
            ("markdown-metadata-value-face" variable
               (:default-value (quote ((t (:inherit font-lock-string-face))))
                :type "face")
                nil [110806 110941])
            ("markdown-gfm-checkbox-face" variable
               (:default-value (quote ((t (:inherit font-lock-builtin-face))))
                :type "face")
                nil [110943 111076])
            ("markdown-highlight-face" variable
               (:default-value (quote ((t (:inherit highlight))))
                :type "face")
                nil [111078 111199])
            ("markdown-hr-face" variable
               (:default-value (quote ((t (:inherit markdown-markup-face))))
                :type "face")
                nil [111201 111324])
            ("markdown-header-scaling" variable nil nil [111326 111857])
            ("markdown-header-scaling-values" variable (:default-value (quote (2.0 1.7 1.4 1.1 1.0 1.0))) nil [111859 112260])
            ("markdown-make-header-faces" function nil nil [112262 113286])
            ("markdown-make-header-faces" code nil nil [113288 113316])
            ("markdown-update-header-faces" function (:arguments ("scaling" "scaling-values")) nil [113318 113981])
            ("markdown-update-code-face" function nil nil [113983 114718])
            ("markdown-syntactic-face" function (:arguments ("state")) nil [114720 114973])
            ("markdown-list-item-bullets" variable (:default-value (quote ("●" "◎" "○" "◆" "◇" "►" "•"))) nil [114975 115316])
            ("markdown-mode-font-lock-keywords-basic" variable (:default-value (\` ((markdown-match-yaml-metadata-begin (1 markdown-markup-face)) (markdown-match-yaml-metadata-end (1 markdown-markup-face)) (markdown-match-yaml-metadata-key (1 markdown-metadata-key-face) (2 markdown-markup-face) (3 markdown-metadata-value-face)) (markdown-match-gfm-open-code-blocks (1 markdown-markup-properties) (2 markdown-markup-properties nil t) (3 markdown-language-keyword-properties nil t) (4 markdown-language-info-properties nil t) (5 markdown-markup-properties nil t)) (markdown-match-gfm-close-code-blocks (0 markdown-markup-properties)) (markdown-fontify-gfm-code-blocks) (markdown-match-fenced-start-code-block (1 markdown-markup-properties) (2 markdown-markup-properties nil t) (3 markdown-language-keyword-properties nil t) (4 markdown-language-info-properties nil t) (5 markdown-markup-properties nil t)) (markdown-match-fenced-end-code-block (0 markdown-markup-properties)) (markdown-fontify-fenced-code-blocks) (markdown-match-pre-blocks (0 markdown-pre-face)) (markdown-fontify-headings) (markdown-match-declarative-metadata (1 markdown-metadata-key-face) (2 markdown-markup-face) (3 markdown-metadata-value-face)) (markdown-match-pandoc-metadata (1 markdown-markup-face) (2 markdown-markup-face) (3 markdown-metadata-value-face)) (markdown-fontify-hrs) (markdown-match-code (1 markdown-markup-properties prepend) (2 markdown-inline-code-face prepend) (3 markdown-markup-properties prepend)) ((\, markdown-regex-kbd) (1 markdown-markup-properties) (2 markdown-inline-code-face) (3 markdown-markup-properties)) (markdown-fontify-angle-uris) ((\, markdown-regex-email) quote markdown-plain-url-face) (markdown-fontify-list-items) ((\, markdown-regex-footnote) (0 markdown-inline-footnote-properties) (1 markdown-markup-properties) (2 markdown-footnote-marker-face) (3 markdown-markup-properties)) ((\, markdown-regex-pandoc-inline-footnote) (0 markdown-inline-footnote-properties) (1 markdown-markup-properties) (2 markdown-markup-properties) (3 (quote markdown-footnote-text-face)) (4 markdown-markup-properties)) (markdown-match-includes (1 markdown-markup-properties) (2 markdown-markup-properties nil t) (3 markdown-include-title-properties nil t) (4 markdown-markup-properties nil t) (5 markdown-markup-properties) (6 (quote markdown-url-face)) (7 markdown-markup-properties)) (markdown-fontify-inline-links) (markdown-fontify-reference-links) ((\, markdown-regex-reference-definition) (1 markdown-markup-face) (2 markdown-reference-face) (3 markdown-markup-face) (4 markdown-markup-face) (5 markdown-url-face) (6 markdown-link-title-face)) (markdown-fontify-plain-uris) (markdown-match-math-single (1 markdown-markup-face prepend) (2 markdown-math-face append) (3 markdown-markup-face prepend)) (markdown-match-math-double (1 markdown-markup-face prepend) (2 markdown-math-face append) (3 markdown-markup-face prepend)) (markdown-match-bold (1 markdown-markup-properties prepend) (2 markdown-bold-face append) (3 markdown-markup-properties prepend)) (markdown-match-italic (1 markdown-markup-properties prepend) (2 markdown-italic-face append) (3 markdown-markup-properties prepend)) ((\, markdown-regex-strike-through) (3 markdown-markup-properties) (4 markdown-strike-through-face) (5 markdown-markup-properties)) ((\, markdown-regex-line-break) 1 markdown-line-break-face prepend) (markdown-fontify-sub-superscripts) (markdown-match-inline-attributes (0 markdown-markup-properties prepend)) (markdown-match-leanpub-sections (0 markdown-markup-properties)) (markdown-fontify-blockquotes)))) nil [115318 121034])
            ("markdown-mode-font-lock-keywords" variable nil nil [121036 121220])
            ("markdown-footnote-counter" variable nil nil [121235 121305])
            ("make-variable-buffer-local" code nil nil [121306 121361])
            ("markdown-footnote-chars" variable
               (:constant-flag t
                :default-value "[[:alnum:]-]")
                nil [121363 121502])
            ("markdown-regex-footnote-definition" variable
               (:constant-flag t
                :default-value (concat "^\\[\\(\\^" markdown-footnote-chars "*?\\)\\]:\\(?:[ 	]+\\|$\\)"))
                nil [121504 121703])
            ("markdown-replace-regexp-in-string" function (:arguments ("regexp" "rep" "string")) nil [121788 122105])
            ("cond" code nil nil [122265 122477])
            ("defalias" code nil nil [123186 123310])
            ("defalias" code nil nil [123059 123183])
            ("defalias" code nil nil [122928 123056])
            ("defalias" code nil nil [122813 122925])
            ("defalias" code nil nil [122702 122810])
            ("defalias" code nil nil [122567 122699])
            ("markdown-directory-name-p" function (:arguments ("name")) nil [123353 123770])
            ("defalias" code nil nil [123833 125215])
            ("markdown-flyspell-check-word-p" function nil nil [125217 126218])
            ("markdown-font-lock-ensure" function nil nil [126220 126520])
            ("markdown-cur-line-blank" function (:arguments ("predicate")) nil [126605 126930])
            ("markdown-cur-line-blank-p" function nil nil [126932 127073])
            ("markdown-prev-line-blank" function (:arguments ("predicate")) nil [127075 127463])
            ("markdown-prev-line-blank-p" function nil nil [127465 127609])
            ("markdown-next-line-blank" function (:arguments ("predicate")) nil [127611 127983])
            ("markdown-next-line-blank-p" function nil nil [127985 128129])
            ("markdown-prev-line-indent" function nil nil [128131 128438])
            ("markdown-next-line-indent" function nil nil [128440 128723])
            ("markdown-cur-non-list-indent" function nil nil [128725 129080])
            ("markdown-prev-non-list-indent" function nil nil [129082 129269])
            ("markdown-new-baseline" function nil nil [129271 129625])
            ("markdown-search-backward-baseline" function nil nil [129627 130120])
            ("markdown-update-list-levels" function (:arguments ("marker" "indent" "levels")) nil [130122 131422])
            ("markdown-calculate-list-levels" function nil nil [131424 132774])
            ("markdown-prev-list-item" function (:arguments ("level")) nil [132776 134364])
            ("markdown-next-list-item" function (:arguments ("level")) nil [134366 136015])
            ("markdown-cur-list-item-end" function (:arguments ("level")) nil [136017 137386])
            ("markdown-cur-list-item-bounds" function nil nil [137388 139326])
            ("markdown-list-item-at-point-p" function nil nil [139328 139489])
            ("markdown-bounds-of-thing-at-point" function (:arguments ("thing")) nil [139491 140227])
            ("markdown-reference-definition" function (:arguments ("reference")) nil [140229 141069])
            ("markdown-get-defined-references" function nil nil [141071 141462])
            ("markdown-get-used-uris" function nil nil [141464 142304])
            ("markdown-inline-code-at-pos" function (:arguments ("pos")) nil [142306 143391])
            ("markdown-inline-code-at-pos-p" function (:arguments ("pos")) nil [143393 143615])
            ("markdown-inline-code-at-point" function nil nil [143617 143807])
            ("markdown-inline-code-at-point-p" function nil nil [143809 144135])
            ("make-obsolete" code nil nil [144137 144218])
            ("markdown-code-block-at-pos" function (:arguments ("pos")) nil [144220 144924])
            ("defalias" code nil nil [144999 145071])
            ("markdown-code-block-at-point-p" function nil nil [145073 145412])
            ("markdown-heading-at-point" function nil nil [145414 145682])
            ("markdown-pipe-at-bol-p" function nil nil [145684 145887])
            ("markdown-range-property-any" function (:arguments ("begin" "end" "prop" "prop-values")) nil [145972 146727])
            ("markdown-range-properties-exist" function (:arguments ("begin" "end" "props")) nil [146729 147002])
            ("markdown-match-inline-generic" function (:arguments ("regex" "last" "faceless")) nil [147004 147990])
            ("markdown-match-code" function (:arguments ("last")) nil [147992 148970])
            ("markdown-match-bold" function (:arguments ("last")) nil [148972 150052])
            ("markdown-match-italic" function (:arguments ("last")) nil [150054 151389])
            ("markdown-match-math-generic" function (:arguments ("regex" "last")) nil [151391 152190])
            ("markdown-match-list-items" function (:arguments ("last")) nil [152192 153109])
            ("markdown-match-math-single" function (:arguments ("last")) nil [153111 153277])
            ("markdown-match-math-double" function (:arguments ("last")) nil [153279 153447])
            ("markdown-match-propertized-text" function (:arguments ("property" "last")) nil [153449 154084])
            ("markdown-match-pre-blocks" function (:arguments ("last")) nil [154086 154302])
            ("markdown-match-gfm-code-blocks" function (:arguments ("last")) nil [154304 154538])
            ("markdown-match-gfm-open-code-blocks" function (:arguments ("last")) nil [154540 154657])
            ("markdown-match-gfm-close-code-blocks" function (:arguments ("last")) nil [154659 154775])
            ("markdown-match-fenced-code-blocks" function (:arguments ("last")) nil [154777 154941])
            ("markdown-match-fenced-start-code-block" function (:arguments ("last")) nil [154943 155065])
            ("markdown-match-fenced-end-code-block" function (:arguments ("last")) nil [155067 155185])
            ("markdown-match-blockquotes" function (:arguments ("last")) nil [155187 155410])
            ("markdown-match-hr" function (:arguments ("last")) nil [155412 155558])
            ("markdown-match-comments" function (:arguments ("last")) nil [155560 155864])
            ("markdown-match-generic-links" function (:arguments ("last" "ref")) nil [155866 160357])
            ("markdown-match-inline-links" function (:arguments ("last")) nil [160359 160495])
            ("markdown-match-reference-links" function (:arguments ("last")) nil [160497 160635])
            ("markdown-match-angle-uris" function (:arguments ("last")) nil [160637 160832])
            ("markdown-match-plain-uris" function (:arguments ("last")) nil [160834 161017])
            ("markdown-get-match-boundaries" function (:arguments ("start-header" "end-header" "last" "pos")) nil [161019 161549])
            ("markdown-conditional-search-function" variable (:default-value (function re-search-forward)) nil [161551 161746])
            ("markdown-search-until-condition" function (:arguments ("condition" "args")) nil [161748 161947])
            ("markdown-match-generic-metadata" function (:arguments ("regexp" "last" "start-header" "end-header")) nil [161949 163748])
            ("markdown-match-declarative-metadata" function (:arguments ("last")) nil [163750 163932])
            ("markdown-match-pandoc-metadata" function (:arguments ("last")) nil [163934 164101])
            ("markdown-match-yaml-metadata-begin" function (:arguments ("last")) nil [164103 164223])
            ("markdown-match-yaml-metadata-end" function (:arguments ("last")) nil [164225 164341])
            ("markdown-match-yaml-metadata-key" function (:arguments ("last")) nil [164343 164454])
            ("markdown-match-inline-attributes" function (:arguments ("last")) nil [164456 164810])
            ("markdown-match-leanpub-sections" function (:arguments ("last")) nil [164812 165170])
            ("markdown-match-includes" function (:arguments ("last")) nil [165172 168034])
            ("markdown-fontify-headings" function (:arguments ("last")) nil [168119 169467])
            ("markdown-fontify-blockquotes" function (:arguments ("last")) nil [169469 170074])
            ("markdown-fontify-list-items" function (:arguments ("last")) nil [170076 171028])
            ("markdown-fontify-hrs" function (:arguments ("last")) nil [171030 171456])
            ("markdown-fontify-sub-superscripts" function (:arguments ("last")) nil [171458 172393])
            ("markdown-mode-syntax-table" variable (:default-value (let ((tab (make-syntax-table text-mode-syntax-table))) (modify-syntax-entry 34 "." tab) tab)) nil [172478 172656])
            ("markdown-ensure-blank-line-before" function nil nil [172741 172962])
            ("markdown-ensure-blank-line-after" function nil nil [172964 173245])
            ("markdown-wrap-or-insert" function (:arguments ("s1" "s2" "thing" "beg" "end")) nil [173247 174672])
            ("markdown-point-after-unwrap" function (:arguments ("cur" "prefix" "suffix")) nil [174674 175251])
            ("markdown-unwrap-thing-at-point" function (:arguments ("regexp" "all" "text")) nil [175253 176316])
            ("markdown-unwrap-things-in-region" function (:arguments ("beg" "end" "regexp" "all" "text")) nil [176318 177043])
            ("markdown-insert-hr" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [177045 177970])
            ("markdown-insert-bold" function (:user-visible-flag t) nil [177972 178926])
            ("markdown-insert-italic" function (:user-visible-flag t) nil [178928 179907])
            ("markdown-insert-strike-through" function (:user-visible-flag t) nil [179909 180921])
            ("markdown-insert-code" function (:user-visible-flag t) nil [180923 181758])
            ("markdown-insert-kbd" function (:user-visible-flag t) nil [181760 182549])
            ("markdown-insert-inline-link" function (:arguments ("text" "url" "title")) nil [182551 182941])
            ("markdown-insert-reference-link" function (:arguments ("text" "label" "url" "title")) nil [182943 183673])
            ("markdown-insert-reference-definition" function (:arguments ("label" "url" "title")) nil [183675 184888])
            ("define-obsolete-function-alias" code nil nil [184890 184987])
            ("define-obsolete-function-alias" code nil nil [184988 185088])
            ("markdown-insert-link" function (:user-visible-flag t) nil [185090 188978])
            ("markdown-insert-uri" function
               (:user-visible-flag t
                :arguments ("uri"))
                nil [188980 189885])
            ("markdown-insert-wiki-link" function (:user-visible-flag t) nil [189887 190697])
            ("markdown-insert-image" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [190699 191456])
            ("markdown-insert-reference-image" function (:user-visible-flag t) nil [191458 191670])
            ("markdown-remove-header" function (:user-visible-flag t) nil [191672 191999])
            ("markdown-insert-header" function
               (:user-visible-flag t
                :arguments ("level" "text" "setext"))
                nil [192001 193982])
            ("markdown-insert-header-dwim" function
               (:user-visible-flag t
                :arguments ("arg" "setext"))
                nil [193984 195970])
            ("markdown-insert-header-setext-dwim" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [195972 196231])
            ("markdown-insert-header-atx-1" function (:user-visible-flag t) nil [196233 196414])
            ("markdown-insert-header-atx-2" function (:user-visible-flag t) nil [196416 196595])
            ("markdown-insert-header-atx-3" function (:user-visible-flag t) nil [196597 196778])
            ("markdown-insert-header-atx-4" function (:user-visible-flag t) nil [196780 196960])
            ("markdown-insert-header-atx-5" function (:user-visible-flag t) nil [196962 197142])
            ("markdown-insert-header-atx-6" function (:user-visible-flag t) nil [197144 197325])
            ("markdown-insert-header-setext-1" function (:user-visible-flag t) nil [197327 197513])
            ("markdown-insert-header-setext-2" function (:user-visible-flag t) nil [197515 197702])
            ("markdown-blockquote-indentation" function (:arguments ("loc")) nil [197704 198075])
            ("markdown-insert-blockquote" function (:user-visible-flag t) nil [198077 198514])
            ("markdown-block-region" function (:arguments ("beg" "end" "prefix")) nil [198516 199499])
            ("markdown-blockquote-region" function
               (:user-visible-flag t
                :arguments ("beg" "end"))
                nil [199501 199792])
            ("markdown-pre-indentation" function (:arguments ("loc")) nil [199794 200163])
            ("markdown-insert-pre" function (:user-visible-flag t) nil [200165 200576])
            ("markdown-pre-region" function
               (:user-visible-flag t
                :arguments ("beg" "end"))
                nil [200578 200863])
            ("markdown-electric-backquote" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [200865 201344])
            ("markdown-gfm-recognized-languages" variable
               (:constant-flag t
                :default-value (quote ("1C-Enterprise" "ABAP" "ABNF" "AGS-Script" "AMPL" "ANTLR" "API-Blueprint" "APL" "ASN.1" "ASP" "ATS" "ActionScript" "Ada" "Agda" "Alloy" "Alpine-Abuild" "Ant-Build-System" "ApacheConf" "Apex" "Apollo-Guidance-Computer" "AppleScript" "Arc" "Arduino" "AsciiDoc" "AspectJ" "Assembly" "Augeas" "AutoHotkey" "AutoIt" "Awk" "Batchfile" "Befunge" "Bison" "BitBake" "Blade" "BlitzBasic" "BlitzMax" "Bluespec" "Boo" "Brainfuck" "Brightscript" "Bro" "C#" "C++" "C-ObjDump" "C2hs-Haskell" "CLIPS" "CMake" "COBOL" "COLLADA" "CSON" "CSS" "CSV" "CWeb" "Cap'n-Proto" "CartoCSS" "Ceylon" "Chapel" "Charity" "ChucK" "Cirru" "Clarion" "Clean" "Click" "Clojure" "Closure-Templates" "CoffeeScript" "ColdFusion" "ColdFusion-CFC" "Common-Lisp" "Component-Pascal" "Cool" "Coq" "Cpp-ObjDump" "Creole" "Crystal" "Csound" "Csound-Document" "Csound-Score" "Cuda" "Cycript" "Cython" "D-ObjDump" "DIGITAL-Command-Language" "DM" "DNS-Zone" "DTrace" "Darcs-Patch" "Dart" "Diff" "Dockerfile" "Dogescript" "Dylan" "EBNF" "ECL" "ECLiPSe" "EJS" "EQ" "Eagle" "Ecere-Projects" "Eiffel" "Elixir" "Elm" "Emacs-Lisp" "EmberScript" "Erlang" "F#" "FLUX" "Factor" "Fancy" "Fantom" "Filebench-WML" "Filterscript" "Formatted" "Forth" "Fortran" "FreeMarker" "Frege" "G-code" "GAMS" "GAP" "GCC-Machine-Description" "GDB" "GDScript" "GLSL" "GN" "Game-Maker-Language" "Genie" "Genshi" "Gentoo-Ebuild" "Gentoo-Eclass" "Gettext-Catalog" "Gherkin" "Glyph" "Gnuplot" "Go" "Golo" "Gosu" "Grace" "Gradle" "Grammatical-Framework" "Graph-Modeling-Language" "GraphQL" "Graphviz-(DOT)" "Groovy" "Groovy-Server-Pages" "HCL" "HLSL" "HTML" "HTML+Django" "HTML+ECR" "HTML+EEX" "HTML+ERB" "HTML+PHP" "HTTP" "Hack" "Haml" "Handlebars" "Harbour" "Haskell" "Haxe" "Hy" "HyPhy" "IDL" "IGOR-Pro" "INI" "IRC-log" "Idris" "Inform-7" "Inno-Setup" "Io" "Ioke" "Isabelle" "Isabelle-ROOT" "JFlex" "JSON" "JSON5" "JSONLD" "JSONiq" "JSX" "Jasmin" "Java" "Java-Server-Pages" "JavaScript" "Jison" "Jison-Lex" "Jolie" "Julia" "Jupyter-Notebook" "KRL" "KiCad" "Kit" "Kotlin" "LFE" "LLVM" "LOLCODE" "LSL" "LabVIEW" "Lasso" "Latte" "Lean" "Less" "Lex" "LilyPond" "Limbo" "Linker-Script" "Linux-Kernel-Module" "Liquid" "Literate-Agda" "Literate-CoffeeScript" "Literate-Haskell" "LiveScript" "Logos" "Logtalk" "LookML" "LoomScript" "Lua" "M4" "M4Sugar" "MAXScript" "MQL4" "MQL5" "MTML" "MUF" "Makefile" "Mako" "Markdown" "Marko" "Mask" "Mathematica" "Matlab" "Maven-POM" "Max" "MediaWiki" "Mercury" "Meson" "Metal" "MiniD" "Mirah" "Modelica" "Modula-2" "Module-Management-System" "Monkey" "Moocode" "MoonScript" "Myghty" "NCL" "NL" "NSIS" "Nemerle" "NetLinx" "NetLinx+ERB" "NetLogo" "NewLisp" "Nginx" "Nim" "Ninja" "Nit" "Nix" "Nu" "NumPy" "OCaml" "ObjDump" "Objective-C" "Objective-C++" "Objective-J" "Omgrofl" "Opa" "Opal" "OpenCL" "OpenEdge-ABL" "OpenRC-runscript" "OpenSCAD" "OpenType-Feature-File" "Org" "Ox" "Oxygene" "Oz" "P4" "PAWN" "PHP" "PLSQL" "PLpgSQL" "POV-Ray-SDL" "Pan" "Papyrus" "Parrot" "Parrot-Assembly" "Parrot-Internal-Representation" "Pascal" "Pep8" "Perl" "Perl6" "Pic" "Pickle" "PicoLisp" "PigLatin" "Pike" "Pod" "PogoScript" "Pony" "PostScript" "PowerBuilder" "PowerShell" "Processing" "Prolog" "Propeller-Spin" "Protocol-Buffer" "Public-Key" "Pug" "Puppet" "Pure-Data" "PureBasic" "PureScript" "Python" "Python-console" "Python-traceback" "QML" "QMake" "RAML" "RDoc" "REALbasic" "REXX" "RHTML" "RMarkdown" "RPM-Spec" "RUNOFF" "Racket" "Ragel" "Rascal" "Raw-token-data" "Reason" "Rebol" "Red" "Redcode" "Regular-Expression" "Ren'Py" "RenderScript" "RobotFramework" "Roff" "Rouge" "Ruby" "Rust" "SAS" "SCSS" "SMT" "SPARQL" "SQF" "SQL" "SQLPL" "SRecode-Template" "STON" "SVG" "Sage" "SaltStack" "Sass" "Scala" "Scaml" "Scheme" "Scilab" "Self" "ShaderLab" "Shell" "ShellSession" "Shen" "Slash" "Slim" "Smali" "Smalltalk" "Smarty" "SourcePawn" "Spline-Font-Database" "Squirrel" "Stan" "Standard-ML" "Stata" "Stylus" "SubRip-Text" "Sublime-Text-Config" "SuperCollider" "Swift" "SystemVerilog" "TI-Program" "TLA" "TOML" "TXL" "Tcl" "Tcsh" "TeX" "Tea" "Terra" "Text" "Textile" "Thrift" "Turing" "Turtle" "Twig" "Type-Language" "TypeScript" "Unified-Parallel-C" "Unity3D-Asset" "Unix-Assembly" "Uno" "UnrealScript" "UrWeb" "VCL" "VHDL" "Vala" "Verilog" "Vim-script" "Visual-Basic" "Volt" "Vue" "Wavefront-Material" "Wavefront-Object" "Web-Ontology-Language" "WebAssembly" "WebIDL" "World-of-Warcraft-Addon-Data" "X10" "XC" "XCompose" "XML" "XPages" "XProc" "XQuery" "XS" "XSLT" "Xojo" "Xtend" "YAML" "YANG" "Yacc" "Zephir" "Zimpl" "desktop" "eC" "edn" "fish" "mupad" "nesC" "ooc" "reStructuredText" "wisp" "xBase")))
                nil [201346 206525])
            ("markdown-gfm-used-languages" variable nil nil [206527 206611])
            ("make-variable-buffer-local" code nil nil [206612 206669])
            ("markdown-trim-whitespace" function (:arguments ("str")) nil [206671 206809])
            ("markdown-clean-language-string" function (:arguments ("str")) nil [206811 206942])
            ("markdown-validate-language-string" function (:arguments ("widget")) nil [206944 207185])
            ("markdown-gfm-get-corpus" function nil nil [207187 207576])
            ("markdown-gfm-add-used-language" function (:arguments ("lang")) nil [207578 207774])
            ("markdown-insert-gfm-code-block" function
               (:user-visible-flag t
                :arguments ("lang"))
                nil [207776 209396])
            ("markdown-code-block-lang" function (:arguments ("pos-prop")) nil [209398 210441])
            ("markdown-gfm-parse-buffer-for-languages" function (:arguments ("buffer")) nil [210443 210943])
            ("markdown-footnote-counter-inc" function nil nil [211029 211602])
            ("markdown-insert-footnote" function (:user-visible-flag t) nil [211604 212034])
            ("markdown-footnote-text-find-new-location" function nil nil [212036 212454])
            ("markdown-footnote-kill" function (:user-visible-flag t) nil [212456 214155])
            ("markdown-footnote-delete-marker" function nil nil [214157 214564])
            ("markdown-footnote-kill-text" function nil nil [214566 215303])
            ("markdown-footnote-goto-text" function (:user-visible-flag t) nil [215305 215684])
            ("markdown-footnote-return" function (:user-visible-flag t) nil [215686 216100])
            ("markdown-footnote-find-marker" function (:arguments ("id")) nil [216102 216511])
            ("markdown-footnote-find-text" function (:arguments ("id")) nil [216513 216931])
            ("markdown-footnote-marker-positions" function nil nil [216933 217676])
            ("markdown-footnote-text-positions" function nil nil [217678 219318])
            ("markdown-kill-thing-at-point" function (:user-visible-flag t) nil [219403 222884])
            ("markdown-indent-find-next-position" function (:arguments ("cur-pos" "positions")) nil [222974 223295])
            ("define-obsolete-function-alias" code nil nil [223297 223411])
            ("markdown-outdent-find-next-position" function (:arguments ("cur-pos" "positions")) nil [223413 223721])
            ("markdown-indent-line" function (:user-visible-flag t) nil [223723 224836])
            ("markdown-calc-indents" function nil nil [224838 226275])
            ("markdown-enter-key" function (:user-visible-flag t) nil [226277 227482])
            ("define-obsolete-function-alias" code nil nil [227484 227580])
            ("markdown-outdent-or-delete" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [227582 228390])
            ("markdown-find-leftmost-column" function (:arguments ("beg" "end")) nil [228392 228767])
            ("markdown-indent-region" function
               (:user-visible-flag t
                :arguments ("beg" "end" "arg"))
                nil [228769 229413])
            ("define-obsolete-function-alias" code nil nil [229415 229505])
            ("markdown-outdent-region" function
               (:user-visible-flag t
                :arguments ("beg" "end"))
                nil [229507 229679])
            ("markdown-complete-alist" variable
               (:constant-flag t
                :default-value (quote ((markdown-regex-header-atx . markdown-complete-atx) (markdown-regex-header-setext . markdown-complete-setext) (markdown-regex-hr . markdown-complete-hr))))
                nil [229764 230036])
            ("markdown-incomplete-atx-p" function nil nil [230038 231070])
            ("markdown-complete-atx" function nil nil [231072 232136])
            ("markdown-incomplete-setext-p" function nil nil [232138 232542])
            ("markdown-complete-setext" function nil nil [232544 233239])
            ("markdown-incomplete-hr-p" function nil nil [233241 233463])
            ("markdown-complete-hr" function nil nil [233465 233878])
            ("markdown-complete" function (:user-visible-flag t) nil [233880 234248])
            ("markdown-complete-at-point" function (:user-visible-flag t) nil [234250 234852])
            ("markdown-complete-region" function
               (:user-visible-flag t
                :arguments ("beg" "end"))
                nil [234854 235902])
            ("markdown-complete-buffer" function (:user-visible-flag t) nil [235904 236071])
            ("markdown-cycle-atx" function (:arguments ("arg" "remove")) nil [236156 237160])
            ("markdown-cycle-setext" function (:arguments ("arg" "remove")) nil [237162 238059])
            ("markdown-cycle-hr" function (:arguments ("arg" "remove")) nil [238061 238817])
            ("markdown-cycle-bold" function nil nil [238819 239178])
            ("markdown-cycle-italic" function nil nil [239180 239542])
            ("markdown--style-map-prompt" function nil nil [239627 240315])
            ("markdown-mode-style-map" variable (:default-value (let ((map (make-keymap (markdown--style-map-prompt)))) (define-key map (kbd "1") (quote markdown-insert-header-atx-1)) (define-key map (kbd "2") (quote markdown-insert-header-atx-2)) (define-key map (kbd "3") (quote markdown-insert-header-atx-3)) (define-key map (kbd "4") (quote markdown-insert-header-atx-4)) (define-key map (kbd "5") (quote markdown-insert-header-atx-5)) (define-key map (kbd "6") (quote markdown-insert-header-atx-6)) (define-key map (kbd "!") (quote markdown-insert-header-setext-1)) (define-key map (kbd "@") (quote markdown-insert-header-setext-2)) (define-key map (kbd "b") (quote markdown-insert-bold)) (define-key map (kbd "c") (quote markdown-insert-code)) (define-key map (kbd "C") (quote markdown-insert-gfm-code-block)) (define-key map (kbd "f") (quote markdown-insert-footnote)) (define-key map (kbd "h") (quote markdown-insert-header-dwim)) (define-key map (kbd "H") (quote markdown-insert-header-setext-dwim)) (define-key map (kbd "i") (quote markdown-insert-italic)) (define-key map (kbd "k") (quote markdown-insert-kbd)) (define-key map (kbd "l") (quote markdown-insert-link)) (define-key map (kbd "p") (quote markdown-insert-pre)) (define-key map (kbd "P") (quote markdown-pre-region)) (define-key map (kbd "q") (quote markdown-insert-blockquote)) (define-key map (kbd "s") (quote markdown-insert-strike-through)) (define-key map (kbd "Q") (quote markdown-blockquote-region)) (define-key map (kbd "w") (quote markdown-insert-wiki-link)) (define-key map (kbd "-") (quote markdown-insert-hr)) (define-key map (kbd "e") (quote markdown-insert-italic)) map)) nil [240317 241982])
            ("markdown-mode-map" variable (:default-value (let ((map (make-keymap))) (define-key map (kbd "C-c C-s") markdown-mode-style-map) (define-key map (kbd "C-c C-l") (quote markdown-insert-link)) (define-key map (kbd "C-c C-k") (quote markdown-kill-thing-at-point)) (define-key map (kbd "C-c C--") (quote markdown-promote)) (define-key map (kbd "C-c C-=") (quote markdown-demote)) (define-key map (kbd "C-c C-]") (quote markdown-complete)) (define-key map (kbd "C-c C-o") (quote markdown-follow-thing-at-point)) (define-key map (kbd "C-c C-d") (quote markdown-do)) (define-key map (kbd "<return>") (quote markdown-enter-key)) (define-key map (kbd "<backspace>") (quote markdown-outdent-or-delete)) (define-key map (kbd "C-c >") (quote markdown-indent-region)) (define-key map (kbd "C-c <") (quote markdown-outdent-region)) (define-key map (kbd "<tab>") (quote markdown-cycle)) (define-key map (kbd "<S-iso-lefttab>") (quote markdown-shifttab)) (define-key map (kbd "<S-tab>") (quote markdown-shifttab)) (define-key map (kbd "<backtab>") (quote markdown-shifttab)) (define-key map (kbd "C-c C-n") (quote markdown-next-visible-heading)) (define-key map (kbd "C-c C-p") (quote markdown-previous-visible-heading)) (define-key map (kbd "C-c C-f") (quote markdown-forward-same-level)) (define-key map (kbd "C-c C-b") (quote markdown-backward-same-level)) (define-key map (kbd "C-c C-u") (quote markdown-up-heading)) (define-key map (kbd "C-c C-c m") (quote markdown-other-window)) (define-key map (kbd "C-c C-c p") (quote markdown-preview)) (define-key map (kbd "C-c C-c e") (quote markdown-export)) (define-key map (kbd "C-c C-c v") (quote markdown-export-and-preview)) (define-key map (kbd "C-c C-c o") (quote markdown-open)) (define-key map (kbd "C-c C-c l") (quote markdown-live-preview-mode)) (define-key map (kbd "C-c C-c w") (quote markdown-kill-ring-save)) (define-key map (kbd "C-c C-c c") (quote markdown-check-refs)) (define-key map (kbd "C-c C-c n") (quote markdown-cleanup-list-numbers)) (define-key map (kbd "C-c C-c ]") (quote markdown-complete-buffer)) (define-key map (kbd "C-c '") (quote markdown-edit-code-block)) (define-key map (kbd "C-c <up>") (quote markdown-move-up)) (define-key map (kbd "C-c <down>") (quote markdown-move-down)) (define-key map (kbd "C-c <left>") (quote markdown-promote)) (define-key map (kbd "C-c <right>") (quote markdown-demote)) (define-key map (kbd "C-c C-M-h") (quote markdown-mark-subtree)) (define-key map (kbd "C-x n s") (quote markdown-narrow-to-subtree)) (define-key map (kbd "M-<return>") (quote markdown-insert-list-item)) (define-key map (kbd "C-c C-j") (quote markdown-insert-list-item)) (define-key map [remap backward-paragraph] (quote markdown-backward-block)) (define-key map [remap forward-paragraph] (quote markdown-forward-block)) (define-key map [remap mark-paragraph] (quote markdown-mark-block)) (define-key map (kbd "C-x n b") (quote markdown-narrow-to-block)) (define-key map (kbd "C-M-{") (quote markdown-beginning-of-text-block)) (define-key map (kbd "C-M-}") (quote markdown-end-of-text-block)) (define-key map (kbd "C-c M-h") (quote markdown-mark-text-block)) (define-key map [remap backward-page] (quote markdown-backward-page)) (define-key map [remap forward-page] (quote markdown-forward-page)) (define-key map [remap mark-page] (quote markdown-mark-page)) (define-key map [remap narrow-to-page] (quote markdown-narrow-to-page)) (define-key map (kbd "M-n") (quote markdown-next-link)) (define-key map (kbd "M-p") (quote markdown-previous-link)) (define-key map (kbd "C-c C-x C-e") (quote markdown-toggle-math)) (define-key map (kbd "C-c C-x C-f") (quote markdown-toggle-fontify-code-blocks-natively)) (define-key map (kbd "C-c C-x C-i") (quote markdown-toggle-inline-images)) (define-key map (kbd "C-c C-x C-l") (quote markdown-toggle-url-hiding)) (define-key map (kbd "C-c C-x C-m") (quote markdown-toggle-markup-hiding)) (define-key map (kbd "C-c C-x u") (quote markdown-move-up)) (define-key map (kbd "C-c C-x d") (quote markdown-move-down)) (define-key map (kbd "C-c C-x l") (quote markdown-promote)) (define-key map (kbd "C-c C-x r") (quote markdown-demote)) (define-key map (kbd "C-c C-a L") (quote markdown-insert-link)) (define-key map (kbd "C-c C-a l") (quote markdown-insert-link)) (define-key map (kbd "C-c C-a r") (quote markdown-insert-link)) (define-key map (kbd "C-c C-a u") (quote markdown-insert-uri)) (define-key map (kbd "C-c C-a f") (quote markdown-insert-footnote)) (define-key map (kbd "C-c C-a w") (quote markdown-insert-wiki-link)) (define-key map (kbd "C-c C-t 1") (quote markdown-insert-header-atx-1)) (define-key map (kbd "C-c C-t 2") (quote markdown-insert-header-atx-2)) (define-key map (kbd "C-c C-t 3") (quote markdown-insert-header-atx-3)) (define-key map (kbd "C-c C-t 4") (quote markdown-insert-header-atx-4)) (define-key map (kbd "C-c C-t 5") (quote markdown-insert-header-atx-5)) (define-key map (kbd "C-c C-t 6") (quote markdown-insert-header-atx-6)) (define-key map (kbd "C-c C-t !") (quote markdown-insert-header-setext-1)) (define-key map (kbd "C-c C-t @") (quote markdown-insert-header-setext-2)) (define-key map (kbd "C-c C-t h") (quote markdown-insert-header-dwim)) (define-key map (kbd "C-c C-t H") (quote markdown-insert-header-setext-dwim)) (define-key map (kbd "C-c C-t s") (quote markdown-insert-header-setext-2)) (define-key map (kbd "C-c C-t t") (quote markdown-insert-header-setext-1)) (define-key map (kbd "C-c C-i i") (quote markdown-insert-image)) (define-key map (kbd "C-c C-i I") (quote markdown-insert-reference-image)) (define-key map (kbd "C-c C-i C-t") (quote markdown-toggle-inline-images)) (define-key map (kbd "C-c C-x m") (quote markdown-insert-list-item)) (define-key map (kbd "C-c C-x C-x") (quote markdown-toggle-gfm-checkbox)) (define-key map (kbd "C-c -") (quote markdown-insert-hr)) map)) nil [241984 248156])
            ("markdown-mode-mouse-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [follow-link] (quote mouse-face)) (define-key map [mouse-2] (quote markdown-follow-link-at-point)) map)) nil [248158 248387])
            ("gfm-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map markdown-mode-map) (define-key map (kbd "C-c C-s d") (quote markdown-insert-strike-through)) (define-key map "`" (quote markdown-electric-backquote)) map)) nil [248389 248683])
            ("easy-menu-define" code nil nil [248764 254385])
            ("markdown-imenu-create-nested-index" function nil nil [254470 256719])
            ("markdown-imenu-create-flat-index" function nil nil [256721 257604])
            ("markdown-reference-goto-definition" function (:user-visible-flag t) nil [257689 258279])
            ("markdown-reference-find-links" function (:arguments ("reference")) nil [258281 259218])
            ("markdown-get-undefined-refs" function nil nil [259220 260453])
            ("markdown-reference-check-buffer" variable
               (:constant-flag t
                :default-value "*Undefined references for %buffer%*")
                nil [260455 260689])
            ("markdown-reference-check-buffer" function (:arguments ("buffer-name")) nil [260691 261274])
            ("markdown-reference-links-buffer" variable
               (:constant-flag t
                :default-value "*Reference links for %buffer%*")
                nil [261276 261479])
            ("markdown-reference-links-buffer" function (:arguments ("buffer-name")) nil [261481 262074])
            ("define-button-type" code nil nil [262223 262782])
            ("define-button-type" code nil nil [262891 263326])
            ("define-button-type" code nil nil [263448 263822])
            ("markdown-insert-undefined-reference-button" function (:arguments ("reference" "oldbuf")) nil [263824 264713])
            ("markdown-insert-link-button" function (:arguments ("link" "oldbuf")) nil [264715 265253])
            ("markdown-reference-goto-link" function
               (:user-visible-flag t
                :arguments ("reference"))
                nil [265255 266261])
            ("markdown-check-refs" function
               (:user-visible-flag t
                :arguments ("silent"))
                nil [266263 267229])
            ("markdown-insert-list-item" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [267314 272027])
            ("markdown-move-list-item-up" function (:user-visible-flag t) nil [272029 272821])
            ("markdown-move-list-item-down" function (:user-visible-flag t) nil [272823 273591])
            ("markdown-demote-list-item" function
               (:user-visible-flag t
                :arguments ("bounds"))
                nil [273593 274194])
            ("markdown-promote-list-item" function
               (:user-visible-flag t
                :arguments ("bounds"))
                nil [274196 275097])
            ("markdown-cleanup-list-numbers-level" function (:arguments ("pfx")) nil [275099 276421])
            ("markdown-cleanup-list-numbers" function (:user-visible-flag t) nil [276423 276614])
            ("markdown-beginning-of-defun" function (:arguments ("arg")) nil [276699 278267])
            ("markdown-end-of-defun" function nil nil [278269 278956])
            ("make-obsolete" code nil nil [278958 279043])
            ("markdown-beginning-of-text-block" function (:user-visible-flag t) nil [279045 279691])
            ("make-obsolete" code nil nil [279693 279766])
            ("markdown-end-of-text-block" function (:user-visible-flag t) nil [279768 280308])
            ("markdown-backward-block" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [280310 282022])
            ("markdown-forward-block" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [282024 283590])
            ("markdown-backward-page" function
               (:user-visible-flag t
                :arguments ("count"))
                nil [283592 284282])
            ("markdown-forward-page" function
               (:user-visible-flag t
                :arguments ("count"))
                nil [284284 284876])
            ("markdown-next-link" function (:user-visible-flag t) nil [284878 285827])
            ("markdown-previous-link" function (:user-visible-flag t) nil [285829 286417])
            ("markdown-move-heading-common" function (:arguments ("move-fn" "arg")) nil [286502 287248])
            ("markdown-next-visible-heading" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [287250 287542])
            ("markdown-previous-visible-heading" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [287544 287852])
            ("markdown-next-heading" function nil nil [287854 287989])
            ("markdown-previous-heading" function nil nil [287991 288138])
            ("markdown-back-to-heading-over-code-block" function (:arguments ("invisible-ok" "no-error")) nil [288140 289174])
            ("markdown-forward-same-level" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [289176 289472])
            ("markdown-backward-same-level" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [289474 290073])
            ("markdown-up-heading" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [290075 290402])
            ("markdown-back-to-heading" function (:arguments ("invisible-ok")) nil [290404 290681])
            ("defalias" code nil nil [290683 290742])
            ("markdown-on-heading-p" function nil nil [290744 290881])
            ("markdown-end-of-subtree" function (:arguments ("invisible-OK")) nil [290883 291619])
            ("markdown-outline-fix-visibility" function nil nil [291621 292876])
            ("markdown-cycle-global-status" variable (:default-value 1) nil [292878 292917])
            ("markdown-cycle-subtree-status" variable nil nil [292918 292960])
            ("markdown-next-preface" function nil nil [292962 293360])
            ("markdown-show-entry" function nil nil [293362 293737])
            ("markdown-cycle" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [293739 296457])
            ("markdown-shifttab" function (:user-visible-flag t) nil [296459 296595])
            ("markdown-outline-level" function nil nil [296597 296916])
            ("markdown-promote-subtree" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [296918 298070])
            ("markdown-demote-subtree" function (:user-visible-flag t) nil [298072 298201])
            ("markdown-move-subtree-up" function (:user-visible-flag t) nil [298203 298333])
            ("markdown-move-subtree-down" function (:user-visible-flag t) nil [298335 298471])
            ("markdown-mark-block" function (:user-visible-flag t) nil [298556 299243])
            ("markdown-narrow-to-block" function (:user-visible-flag t) nil [299245 299553])
            ("markdown-mark-text-block" function (:user-visible-flag t) nil [299555 300275])
            ("markdown-mark-page" function (:user-visible-flag t) nil [300277 300983])
            ("markdown-narrow-to-page" function (:user-visible-flag t) nil [300985 301304])
            ("markdown-mark-subtree" function (:user-visible-flag t) nil [301306 301679])
            ("markdown-narrow-to-subtree" function (:user-visible-flag t) nil [301681 302047])
            ("markdown-move-up" function (:user-visible-flag t) nil [302132 302456])
            ("markdown-move-down" function (:user-visible-flag t) nil [302458 302794])
            ("markdown-promote" function (:user-visible-flag t) nil [302796 303776])
            ("markdown-demote" function (:user-visible-flag t) nil [303778 304754])
            ("markdown" function
               (:user-visible-flag t
                :arguments ("output-buffer-name"))
                nil [304839 306277])
            ("markdown-standalone" function
               (:user-visible-flag t
                :arguments ("output-buffer-name"))
                nil [306279 306777])
            ("markdown-other-window" function
               (:user-visible-flag t
                :arguments ("output-buffer-name"))
                nil [306779 307096])
            ("markdown-output-standalone-p" function nil nil [307098 307551])
            ("markdown-stylesheet-link-string" function (:arguments ("stylesheet-path")) nil [307553 307733])
            ("markdown-add-xhtml-header-and-footer" function (:arguments ("title")) nil [307735 309146])
            ("markdown-preview" function
               (:user-visible-flag t
                :arguments ("output-buffer-name"))
                nil [309148 309480])
            ("markdown-export-file-name" function (:arguments ("extension")) nil [309482 310203])
            ("markdown-export" function
               (:user-visible-flag t
                :arguments ("output-file"))
                nil [310205 311340])
            ("markdown-export-and-preview" function (:user-visible-flag t) nil [311342 311512])
            ("markdown-live-preview-buffer" variable nil nil [311514 311633])
            ("make-variable-buffer-local" code nil nil [311634 311692])
            ("markdown-live-preview-source-buffer" variable nil nil [311694 311856])
            ("make-variable-buffer-local" code nil nil [311857 311922])
            ("markdown-live-preview-currently-exporting" variable nil nil [311924 311978])
            ("markdown-live-preview-get-filename" function nil nil [311980 312136])
            ("markdown-live-preview-window-eww" function (:arguments ("file")) nil [312138 312441])
            ("markdown-visual-lines-between-points" function (:arguments ("beg" "end")) nil [312443 312750])
            ("markdown-live-preview-window-serialize" function (:arguments ("buf")) nil [312752 313425])
            ("markdown-get-point-back-lines" function (:arguments ("pt" "num-lines")) nil [313427 313831])
            ("markdown-live-preview-window-deserialize" function (:arguments ("window-posns")) nil [313833 314577])
            ("markdown-live-preview-export" function (:user-visible-flag t) nil [314579 316316])
            ("markdown-live-preview-remove" function nil nil [316318 316799])
            ("markdown-get-other-window" function nil nil [316801 317215])
            ("markdown-display-buffer-other-window" function (:arguments ("buf")) nil [317217 317469])
            ("markdown-live-preview-if-markdown" function nil nil [317471 317841])
            ("markdown-live-preview-remove-on-kill" function nil nil [317843 318240])
            ("markdown-live-preview-switch-to-output" function (:user-visible-flag t) nil [318242 318590])
            ("markdown-live-preview-re-export" function (:user-visible-flag t) nil [318592 319006])
            ("markdown-open" function (:user-visible-flag t) nil [319008 319377])
            ("markdown-kill-ring-save" function (:user-visible-flag t) nil [319379 319631])
            ("markdown-link-p" function nil nil [319716 320232])
            ("make-obsolete" code nil nil [320234 320295])
            ("markdown-link-at-pos" function (:arguments ("pos")) nil [320297 321865])
            ("markdown-link-url" function nil nil [321867 322359])
            ("markdown-follow-link-at-point" function (:user-visible-flag t) nil [322361 323325])
            ("markdown-fontify-inline-links" function (:arguments ("last")) nil [323327 325237])
            ("markdown-fontify-reference-links" function (:arguments ("last")) nil [325239 326891])
            ("markdown-fontify-angle-uris" function (:arguments ("last")) nil [326893 327667])
            ("markdown-fontify-plain-uris" function (:arguments ("last")) nil [327669 328156])
            ("markdown-toggle-url-hiding" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [328158 328693])
            ("markdown-wiki-link-p" function nil nil [328778 329550])
            ("markdown-wiki-link-link" function nil nil [329552 329893])
            ("markdown-wiki-link-alias" function nil nil [329895 330247])
            ("markdown-convert-wiki-link-to-filename" function (:arguments ("name")) nil [330249 332088])
            ("markdown-follow-wiki-link" function (:arguments ("name" "other")) nil [332090 332732])
            ("markdown-follow-wiki-link-at-point" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [332734 333094])
            ("markdown-highlight-wiki-link" function (:arguments ("from" "to" "face")) nil [333096 333272])
            ("markdown-unfontify-region-wiki-links" function
               (:user-visible-flag t
                :arguments ("from" "to"))
                nil [333274 333780])
            ("markdown-fontify-region-wiki-links" function (:arguments ("from" "to")) nil [333782 334680])
            ("markdown-extend-changed-region" function (:arguments ("from" "to")) nil [334682 335321])
            ("markdown-check-change-for-wiki-link" function
               (:user-visible-flag t
                :arguments ("from" "to"))
                nil [335323 336877])
            ("markdown-check-change-for-wiki-link-after-change" function (:arguments ("from" "to" "_")) nil [336879 337135])
            ("markdown-fontify-buffer-wiki-links" function (:user-visible-flag t) nil [337137 337306])
            ("markdown-follow-thing-at-point" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [337391 337966])
            ("make-obsolete" code nil nil [337968 338018])
            ("markdown-do" function (:user-visible-flag t) nil [338020 338868])
            ("markdown-compress-whitespace-string" function (:arguments ("str")) nil [338953 339333])
            ("markdown-line-number-at-pos" function (:arguments ("pos")) nil [339335 339761])
            ("markdown-inside-link-p" function nil nil [339763 339923])
            ("markdown-line-is-reference-definition-p" function nil nil [339925 340205])
            ("markdown-adaptive-fill-function" function nil nil [340207 340883])
            ("markdown-fill-paragraph" function
               (:user-visible-flag t
                :arguments ("justify"))
                nil [340885 341572])
            ("make-obsolete" code nil nil [341574 341686])
            ("markdown-fill-forward-paragraph" function (:arguments ("arg")) nil [341688 343236])
            ("markdown-reload-extensions" function (:user-visible-flag t) nil [343321 344191])
            ("markdown-handle-local-variables" function nil nil [344193 344657])
            ("markdown-toggle-wiki-links" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [344742 345315])
            ("markdown-setup-wiki-link-hooks" function nil nil [345317 346450])
            ("markdown-mode-font-lock-keywords-wiki-links" function nil nil [346452 346875])
            ("make-obsolete" code nil nil [346960 347026])
            ("markdown-toggle-math" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [347028 347654])
            ("markdown-mode-font-lock-keywords-math" function nil nil [347656 348647])
            ("define-button-type" code nil nil [348732 348922])
            ("markdown-gfm-task-list-item-at-point" function (:arguments ("bounds")) nil [348924 349374])
            ("markdown-toggle-gfm-checkbox" function (:user-visible-flag t) nil [349376 350181])
            ("markdown-toggle-gfm-checkbox-button" function (:arguments ("button")) nil [350183 350394])
            ("markdown-make-gfm-checkboxes-buttons" function (:arguments ("start" "end")) nil [350396 350801])
            ("markdown-gfm-checkbox-after-change-function" function (:arguments ("beg" "end" "_")) nil [350859 351321])
            ("markdown-inline-image-overlays" variable nil nil [351401 351444])
            ("make-variable-buffer-local" code nil nil [351445 351505])
            ("markdown-remove-inline-images" function (:user-visible-flag t) nil [351507 351824])
            ("markdown-display-inline-images" function (:user-visible-flag t) nil [351826 352876])
            ("markdown-toggle-inline-images" function (:user-visible-flag t) nil [352878 353095])
            ("markdown-fontify-code-blocks-natively" variable nil nil [353180 353581])
            ("markdown-toggle-fontify-code-blocks-natively" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [353583 354231])
            ("markdown-code-lang-modes" variable (:default-value (quote (("ocaml" . tuareg-mode) ("elisp" . emacs-lisp-mode) ("ditaa" . artist-mode) ("asymptote" . asy-mode) ("dot" . fundamental-mode) ("sqlite" . sql-mode) ("calc" . fundamental-mode) ("C" . c-mode) ("cpp" . c++-mode) ("C++" . c++-mode) ("screen" . shell-script-mode) ("shell" . sh-mode) ("bash" . sh-mode)))) nil [354290 355111])
            ("markdown-get-lang-mode" function (:arguments ("lang")) nil [355113 355497])
            ("markdown-fontify-code-blocks-generic" function (:arguments ("matcher" "last")) nil [355499 356826])
            ("markdown-fontify-gfm-code-blocks" function (:arguments ("last")) nil [356828 357020])
            ("markdown-fontify-fenced-code-blocks" function (:arguments ("last")) nil [357022 357229])
            ("markdown-fontify-code-block-natively" function (:arguments ("lang" "start" "end")) nil [357294 359010])
            ("edit-indirect" include nil nil [359012 359042])
            ("edit-indirect-guess-mode-function" variable nil nil [359043 359085])
            ("markdown-edit-code-block" function (:user-visible-flag t) nil [359087 360150])
            ("markdown-eldoc-function" function nil nil [360173 361319])
            ("markdown-show-version" function (:user-visible-flag t) nil [361404 361561])
            ("markdown-mode-info" function (:user-visible-flag t) nil [361563 361708])
            ("define-derived-mode" code nil nil [361725 367658])
            ("add-to-list" code nil nil [367675 367743])
            ("add-to-list" code nil nil [367759 367821])
            ("gfm-mode-hook" variable nil nil [367906 367969])
            ("gfm-font-lock-keywords" variable (:default-value markdown-mode-font-lock-keywords-basic) nil [367971 368181])
            ("define-derived-mode" code nil nil [368198 368567])
            ("define-minor-mode" code nil nil [368639 369081])
            ("markdown-mode" package nil nil [369085 369109]))          
      :file "markdown-mode.el"
      :pointmax 369194
      :fsize 369319
      :lastmodtime '(22858 4835 0 0)
      :unmatched-syntax '((close-paren 123310 . 123311) (symbol 122548 . 122564) (open-paren 122547 . 122548) (close-paren 122477 . 122478) (symbol 122246 . 122262) (open-paren 122245 . 122246))))
  :file "!Users!ric!.emacs.d!elpa!markdown-mode-20170620.2048!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
