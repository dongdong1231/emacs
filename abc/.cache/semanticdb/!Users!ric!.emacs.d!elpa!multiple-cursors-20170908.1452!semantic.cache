;; Object semanticdb-project-database-file
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file"
  :tables
  (list
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags nil
      :file "multiple-cursors-autoloads.el"
      :pointmax 327
      :fsize 10515
      :lastmodtime '(22976 36013 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [988 1005])
            ("rect" include nil nil [1006 1021])
            ("mc--read-char" variable nil nil [1023 1045])
            ("mc/cursor-face" variable
               (:default-value (quote ((t (:inverse-video t))))
                :type "face")
                nil [1047 1161])
            ("mc/cursor-bar-face" variable
               (:default-value (\` ((t (:height 1 :background (\, (face-attribute (quote cursor) :background))))))
                :type "face")
                nil [1163 1350])
            ("mc/region-face" variable
               (:default-value (quote ((t :inherit region)))
                :type "face")
                nil [1352 1463])
            ("mc/add-fake-cursor-to-undo-list" function (:arguments ("forms")) nil [1465 2143])
            ("mc/all-fake-cursors" function (:arguments ("start" "end")) nil [2145 2346])
            ("mc/for-each-fake-cursor" function (:arguments ("forms")) nil [2348 2530])
            ("mc/save-excursion" function (:arguments ("forms")) nil [2532 2923])
            ("mc--compare-by-overlay-start" function (:arguments ("o1" "o2")) nil [2925 3013])
            ("mc/for-each-cursor-ordered" function (:arguments ("forms")) nil [3015 3521])
            ("mc/save-window-scroll" function (:arguments ("forms")) nil [3523 4026])
            ("mc/cursor-is-bar" function nil nil [4028 4194])
            ("mc/make-cursor-overlay-at-eol" function (:arguments ("pos")) nil [4196 4551])
            ("mc/make-cursor-overlay-inline" function (:arguments ("pos")) nil [4553 4879])
            ("mc/make-cursor-overlay-at-point" function nil nil [4881 5171])
            ("mc/make-region-overlay-between-point-and-mark" function nil nil [5173 5447])
            ("mc/cursor-specific-vars" variable (:default-value (quote (transient-mark-mode kill-ring kill-ring-yank-pointer mark-ring mark-active yank-undo-function autopair-action autopair-wrap-action er/history))) nil [5449 5964])
            ("mc/store-current-state-in-overlay" function (:arguments ("o")) nil [5966 6304])
            ("mc/restore-state-from-overlay" function (:arguments ("o")) nil [6306 6596])
            ("mc/remove-fake-cursor" function (:arguments ("o")) nil [6598 6839])
            ("mc/pop-state-from-overlay" function (:arguments ("o")) nil [6841 7017])
            ("mc/delete-region-overlay" function (:arguments ("o")) nil [7019 7194])
            ("mc--current-cursor-id" variable nil nil [7196 7313])
            ("mc/create-cursor-id" function nil nil [7315 7410])
            ("mc--max-cursors-original" variable nil nil [7412 7745])
            ("mc/max-cursors" variable nil nil [7747 8167])
            ("mc/create-fake-cursor-at-point" function (:arguments ("id")) nil [8169 9172])
            ("mc/execute-command" function (:arguments ("cmd")) nil [9174 9499])
            ("mc--executing-command-for-fake-cursor" variable nil nil [9501 9551])
            ("mc/execute-command-for-fake-cursor" function (:arguments ("cmd" "cursor")) nil [9553 9943])
            ("mc/execute-command-for-all-fake-cursors" function (:arguments ("cmd")) nil [9945 10413])
            ("mc/execute-command-for-all-cursors" function (:arguments ("cmd")) nil [10415 10601])
            ("mc--read-char" variable nil nil [10699 10725])
            ("multiple-cursors-mode" variable nil nil [10726 10760])
            ("read-char" function (:arguments ("around" "mc-support" "activate")) nil [10761 10965])
            ("mc--read-quoted-char" variable nil nil [10967 11000])
            ("read-quoted-char" function (:arguments ("around" "mc-support" "activate")) nil [11001 11233])
            ("mc--reset-read-prompts" function nil nil [11235 11329])
            ("mc--reset-read-prompts" code nil nil [11331 11355])
            ("mc/fake-cursor-p" function (:arguments ("o")) nil [11357 11481])
            ("mc/cursor-with-id" function (:arguments ("id")) nil [11483 11732])
            ("mc--stored-state-for-undo" variable nil nil [11734 11847])
            ("activate-cursor-for-undo" function (:arguments ("id")) nil [11849 12236])
            ("deactivate-cursor-after-undo" function (:arguments ("id")) nil [12238 12532])
            ("mc/always-run-for-all" variable nil nil [12534 12695])
            ("mc/always-repeat-command" variable nil nil [12697 12842])
            ("mc/prompt-for-inclusion-in-whitelist" function (:arguments ("original-command")) nil [12844 13235])
            ("mc/num-cursors" function nil nil [13237 13415])
            ("mc--this-command" variable nil nil [13417 13496])
            ("make-variable-buffer-local" code nil nil [13497 13543])
            ("mc/make-a-note-of-the-command-being-run" function nil nil [13545 14284])
            ("mc/execute-this-command-for-all-cursors" function nil nil [14286 14622])
            ("execute-kbd-macro" function (:arguments ("around" "skip-fake-cursors" "activate")) nil [14836 14963])
            ("mc/execute-this-command-for-all-cursors-1" function nil nil [14965 17615])
            ("mc/remove-fake-cursors" function nil nil [17617 17969])
            ("mc/keyboard-quit" function (:user-visible-flag t) nil [17971 18179])
            ("mc/repeat-command" function (:user-visible-flag t) nil [18181 18658])
            ("mc/keymap" variable nil nil [18660 18820])
            ("unless" code nil nil [18821 19237])
            ("mc--all-equal" function (:arguments ("list")) nil [19239 19479])
            ("mc--kill-ring-entries" function nil nil [19481 19782])
            ("mc--maybe-set-killed-rectangle" function nil nil [19784 20091])
            ("mc/unsupported-minor-modes" variable (:default-value (quote (company-mode auto-complete-mode flyspell-mode jedi-mode))) nil [20093 20322])
            ("mc/temporarily-disabled-minor-modes" variable nil nil [20324 20422])
            ("make-variable-buffer-local" code nil nil [20423 20488])
            ("mc/temporarily-disable-minor-mode" function (:arguments ("mode")) nil [20490 20732])
            ("mc/temporarily-disable-unsupported-minor-modes" function nil nil [20734 20862])
            ("mc/enable-minor-mode" function (:arguments ("mode")) nil [20864 20918])
            ("mc/enable-temporarily-disabled-minor-modes" function nil nil [20920 21089])
            ("mc/mode-line" variable (:default-value (\` (" mc:" (:eval (format (\, (propertize "%d" (quote face) (quote font-lock-warning-face))) (mc/num-cursors)))))) nil [21091 21339])
            ("put" code nil nil [21340 21383])
            ("define-minor-mode" code nil nil [21400 22196])
            ("add-hook" code nil nil [22198 22267])
            ("mc/maybe-multiple-cursors-mode" function nil nil [22269 22486])
            ("unsupported-cmd" function (:arguments ("cmd" "msg")) nil [22488 22901])
            ("unsupported-cmd" code nil nil [22956 23032])
            ("unsupported-cmd" code nil nil [23033 23110])
            ("current-kill" function (:arguments ("before" "interprogram-paste-for-all-cursors" "n" "activate")) nil [23193 24491])
            ("mc/list-file" variable (:default-value (locate-user-emacs-file ".mc-lists.el")) nil [24493 24708])
            ("mc/dump-list" function (:arguments ("list-symbol")) nil [24710 25240])
            ("mc/save-lists" function nil nil [25242 25729])
            ("mc/cmds-to-run-once" variable nil nil [25731 25819])
            ("mc--default-cmds-to-run-once" variable nil nil [25821 25933])
            ("setq" code nil nil [25935 30908])
            ("mc--default-cmds-to-run-for-all" variable nil nil [30910 31021])
            ("setq" code nil nil [31023 35311])
            ("mc/cmds-to-run-for-all" variable nil nil [35313 35409])
            ("load" code nil nil [35499 35538])
            ("multiple-cursors-core" package nil nil [35540 35572]))          
      :file "multiple-cursors-core.el"
      :pointmax 35659
      :fsize 35658
      :lastmodtime '(22976 36013 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("multiple-cursors-core" include nil nil [1045 1077])
            ("rrm/anchor" variable (:default-value (make-marker)) nil [1079 1180])
            ("rectangular-region-mode-map" variable (:default-value (make-sparse-keymap)) nil [1182 1301])
            ("define-key" code nil nil [1303 1374])
            ("define-key" code nil nil [1375 1464])
            ("rectangular-region-mode" variable nil nil [1466 1502])
            ("rrm/keyboard-quit" function (:user-visible-flag t) nil [1504 1675])
            ("set-rectangular-region-anchor" function (:user-visible-flag t) nil [1768 2109])
            ("rrm/remove-rectangular-region-overlays" function nil nil [2111 2399])
            ("rrm/repaint" function nil nil [2401 3663])
            ("rrm/switch-to-multiple-cursors" function
               (:user-visible-flag t
                :arguments ("forms"))
                nil [3665 3857])
            ("er/expand-region" function (:arguments ("before" "switch-from-rrm-to-mc" "activate")) nil [3859 3997])
            ("kill-ring-save" function (:arguments ("before" "switch-from-rrm-to-mc" "activate")) nil [3999 4135])
            ("define-minor-mode" code nil nil [4152 4627])
            ("rectangular-region-mode" package nil nil [4629 4663]))          
      :file "rectangular-region-mode.el"
      :pointmax 4706
      :fsize 4705
      :lastmodtime '(22976 36013 0 0)
      :unmatched-syntax nil))
  :file "!Users!ric!.emacs.d!elpa!multiple-cursors-20170908.1452!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
