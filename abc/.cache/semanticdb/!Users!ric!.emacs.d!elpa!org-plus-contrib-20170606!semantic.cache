;; Object semanticdb-project-database-file
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file"
  :tables
  (list
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [3190 3207])
            ("org-macs" include nil nil [3208 3227])
            ("org-compat" include nil nil [3228 3249])
            ("org-M-RET-may-split-line" variable nil nil [3251 3284])
            ("org-auto-align-tags" variable nil nil [3285 3313])
            ("org-blank-before-new-entry" variable nil nil [3314 3349])
            ("org-clock-string" variable nil nil [3350 3375])
            ("org-closed-string" variable nil nil [3376 3402])
            ("org-deadline-string" variable nil nil [3403 3431])
            ("org-description-max-indent" variable nil nil [3432 3467])
            ("org-done-keywords" variable nil nil [3468 3494])
            ("org-drawer-regexp" variable nil nil [3495 3521])
            ("org-element-all-objects" variable nil nil [3522 3554])
            ("org-inhibit-startup" variable nil nil [3555 3583])
            ("org-odd-levels-only" variable nil nil [3584 3612])
            ("org-outline-regexp-bol" variable nil nil [3613 3644])
            ("org-scheduled-string" variable nil nil [3645 3674])
            ("org-todo-line-regexp" variable nil nil [3675 3704])
            ("org-ts-regexp" variable nil nil [3705 3727])
            ("org-ts-regexp-both" variable nil nil [3728 3755])
            ("declare-function" code nil nil [3757 3823])
            ("declare-function" code nil nil [3824 3893])
            ("declare-function" code nil nil [3894 3948])
            ("declare-function" code nil nil [3949 4007])
            ("declare-function" code nil nil [4008 4053])
            ("declare-function" code nil nil [4054 4110])
            ("declare-function" code nil nil [4111 4183])
            ("declare-function" code nil nil [4184 4250])
            ("declare-function" code nil nil [4251 4337])
            ("declare-function" code nil nil [4338 4411])
            ("declare-function" code nil nil [4412 4535])
            ("declare-function" code nil nil [4536 4601])
            ("declare-function" code nil nil [4602 4700])
            ("declare-function" code nil nil [4701 4773])
            ("declare-function" code nil nil [4774 4860])
            ("declare-function" code nil nil [4861 4927])
            ("declare-function" code nil nil [4928 4987])
            ("declare-function" code nil nil [4988 5049])
            ("declare-function" code nil nil [5050 5137])
            ("declare-function" code nil nil [5138 5202])
            ("declare-function" code nil nil [5203 5275])
            ("declare-function" code nil nil [5276 5329])
            ("declare-function" code nil nil [5330 5423])
            ("declare-function" code nil nil [5424 5503])
            ("declare-function" code nil nil [5504 5594])
            ("declare-function" code nil nil [5595 5646])
            ("declare-function" code nil nil [5647 5708])
            ("declare-function" code nil nil [5709 5755])
            ("declare-function" code nil nil [5756 5803])
            ("declare-function" code nil nil [5804 5873])
            ("declare-function" code nil nil [5874 5942])
            ("declare-function" code nil nil [5943 6005])
            ("declare-function" code nil nil [6006 6069])
            ("declare-function" code nil nil [6070 6138])
            ("declare-function" code nil nil [6139 6186])
            ("declare-function" code nil nil [6187 6236])
            ("declare-function" code nil nil [6237 6282])
            ("declare-function" code nil nil [6283 6336])
            ("declare-function" code nil nil [6337 6383])
            ("declare-function" code nil nil [6384 6450])
            ("declare-function" code nil nil [6451 6495])
            ("declare-function" code nil nil [6496 6550])
            ("declare-function" code nil nil [6551 6606])
            ("declare-function" code nil nil [6607 6665])
            ("declare-function" code nil nil [6666 6727])
            ("declare-function" code nil nil [6728 6785])
            ("declare-function" code nil nil [6786 6830])
            ("declare-function" code nil nil [6831 6894])
            ("declare-function" code nil nil [6895 6959])
            ("declare-function" code nil nil [6960 7012])
            ("declare-function" code nil nil [7013 7069])
            ("org-plain-lists" customgroup (:user-visible-flag t) nil [7103 7230])
            ("org-cycle-include-plain-lists" variable (:default-value t) nil [7232 8246])
            ("org-list-demote-modify-bullet" variable nil nil [8248 9188])
            ("org-plain-list-ordered-item-terminator" variable (:default-value t) nil [9190 9850])
            ("org-list-allow-alphabetical" variable nil nil [9852 10512])
            ("org-list-two-spaces-after-bullet-regexp" variable nil nil [10514 11043])
            ("org-list-automatic-rules" variable (:default-value (quote ((checkbox . t) (indent . t)))) nil [11045 12120])
            ("org-list-use-circular-motion" variable nil nil [12122 12568])
            ("org-checkbox-statistics-hook" variable nil nil [12570 12860])
            ("org-checkbox-hierarchical-statistics" variable (:default-value t) nil [12862 13199])
            ("org-list-description-max-indent" variable (:default-value 20) nil [13201 13442])
            ("org-list-indent-offset" variable nil nil [13444 13698])
            ("org-list-radio-list-templates" variable (:default-value (quote ((latex-mode "% BEGIN RECEIVE ORGLST %n
% END RECEIVE ORGLST %n
\\begin{comment}
#+ORGLST: SEND %n org-list-to-latex
-
\\end{comment}
") (texinfo-mode "@c BEGIN RECEIVE ORGLST %n
@c END RECEIVE ORGLST %n
@ignore
#+ORGLST: SEND %n org-list-to-texinfo
-
@end ignore
") (html-mode "<!-- BEGIN RECEIVE ORGLST %n -->
<!-- END RECEIVE ORGLST %n -->
<!--
#+ORGLST: SEND %n org-list-to-html
-
-->
")))) nil [13700 14422])
            ("org-list-forbidden-blocks" variable (:default-value (quote ("example" "verse" "src" "export"))) nil [14424 14572])
            ("org-list-export-context" variable (:default-value (quote (block inlinetask))) nil [14574 14836])
            ("org-list-end-re" variable
               (:constant-flag t
                :default-value "^[ 	]*
[ 	]*
")
                nil [14869 14959])
            ("org-list-full-item-re" variable
               (:constant-flag t
                :default-value (concat "^[ 	]*\\(\\(?:[-+*]\\|\\(?:[0-9]+\\|[A-Za-z]\\)[.)]\\)\\(?:[ 	]+\\|$\\)\\)" "\\(?:\\[@\\(?:start:\\)?\\([0-9]+\\|[A-Za-z]\\)\\][ 	]*\\)?" "\\(?:\\(\\[[ X-]\\]\\)\\(?:[ 	]+\\|$\\)\\)?" "\\(?:\\(.*\\)[ 	]+::\\(?:[ 	]+\\|$\\)\\)?"))
                nil [14961 15381])
            ("org-item-re" function nil nil [15383 15861])
            ("org-item-beginning-re" function nil nil [15863 15983])
            ("org-list-at-regexp-after-bullet-p" function (:arguments ("regexp")) nil [15985 16453])
            ("org-list-in-valid-context-p" function nil nil [16455 16595])
            ("org-in-item-p" function nil nil [16597 19096])
            ("org-at-item-p" function nil nil [19098 19287])
            ("org-at-item-bullet-p" function nil nil [19289 19472])
            ("org-at-item-timer-p" function nil nil [19474 19652])
            ("org-at-item-description-p" function nil nil [19654 19808])
            ("org-at-item-checkbox-p" function nil nil [19810 19974])
            ("org-at-item-counter-p" function nil nil [19976 20164])
            ("org-list-context" function nil nil [20206 22740])
            ("org-list-struct" function nil nil [22742 29505])
            ("org-list-struct-assoc-end" function (:arguments ("struct" "end-list")) nil [29507 30182])
            ("org-list-prevs-alist" function (:arguments ("struct")) nil [30184 30484])
            ("org-list-parents-alist" function (:arguments ("struct")) nil [30486 32089])
            ("org-list-get-nth" function (:arguments ("n" "key" "struct")) nil [32109 32222])
            ("org-list-set-nth" function (:arguments ("n" "key" "struct" "new")) nil [32224 32391])
            ("org-list-get-ind" function (:arguments ("item" "struct")) nil [32393 32511])
            ("org-list-set-ind" function (:arguments ("item" "struct" "ind")) nil [32513 32673])
            ("org-list-get-bullet" function (:arguments ("item" "struct")) nil [32675 32791])
            ("org-list-set-bullet" function (:arguments ("item" "struct" "bullet")) nil [32793 32960])
            ("org-list-get-counter" function (:arguments ("item" "struct")) nil [32962 33080])
            ("org-list-get-checkbox" function (:arguments ("item" "struct")) nil [33082 33209])
            ("org-list-set-checkbox" function (:arguments ("item" "struct" "checkbox")) nil [33211 33388])
            ("org-list-get-tag" function (:arguments ("item" "struct")) nil [33390 33509])
            ("org-list-get-item-end" function (:arguments ("item" "struct")) nil [33511 33632])
            ("org-list-get-item-end-before-blank" function (:arguments ("item" "struct")) nil [33634 33916])
            ("org-list-get-parent" function (:arguments ("item" "struct" "parents")) nil [33918 34201])
            ("org-list-has-child-p" function (:arguments ("item" "struct")) nil [34203 34581])
            ("org-list-get-next-item" function (:arguments ("item" "_struct" "prevs")) nil [34583 34824])
            ("org-list-get-prev-item" function (:arguments ("item" "_struct" "prevs")) nil [34826 35070])
            ("org-list-get-subtree" function (:arguments ("item" "struct")) nil [35072 35502])
            ("org-list-get-all-items" function (:arguments ("item" "struct" "prevs")) nil [35504 36062])
            ("org-list-get-children" function (:arguments ("item" "_struct" "parents")) nil [36064 36439])
            ("org-list-get-top-point" function (:arguments ("struct")) nil [36441 36565])
            ("org-list-get-bottom-point" function (:arguments ("struct")) nil [36567 36761])
            ("org-list-get-list-begin" function (:arguments ("item" "struct" "prevs")) nil [36763 37143])
            ("defalias" code nil nil [37145 37205])
            ("org-list-get-last-item" function (:arguments ("item" "struct" "prevs")) nil [37207 37582])
            ("org-list-get-list-end" function (:arguments ("item" "struct" "prevs")) nil [37584 37867])
            ("org-list-get-list-type" function (:arguments ("item" "struct" "prevs")) nil [37869 38434])
            ("org-list-get-item-number" function (:arguments ("item" "struct" "prevs" "parents")) nil [38436 39814])
            ("org-list-search-generic" function (:arguments ("search" "re" "bound" "noerr")) nil [39834 40418])
            ("org-list-search-backward" function (:arguments ("regexp" "bound" "noerror")) nil [40420 40737])
            ("org-list-search-forward" function (:arguments ("regexp" "bound" "noerror")) nil [40739 41052])
            ("org-list-bullet-string" function (:arguments ("bullet")) nil [41084 41585])
            ("org-list-swap-items" function (:arguments ("beg-A" "beg-B" "struct")) nil [41587 44971])
            ("org-list-separating-blank-lines-number" function (:arguments ("pos" "struct" "prevs")) nil [44973 46980])
            ("org-list-insert-item" function (:arguments ("pos" "struct" "prevs" "checkbox" "after-bullet")) nil [46982 52116])
            ("org-list-delete-item" function (:arguments ("item" "struct")) nil [52118 53232])
            ("org-list-send-item" function (:arguments ("item" "dest" "struct")) nil [53234 57479])
            ("org-list-struct-outdent" function (:arguments ("start" "end" "struct" "parents")) nil [57481 58559])
            ("org-list-struct-indent" function (:arguments ("start" "end" "struct" "parents" "prevs")) nil [58561 60700])
            ("org-list-use-alpha-bul-p" function (:arguments ("first" "struct" "prevs")) nil [60731 61683])
            ("org-list-inc-bullet-maybe" function (:arguments ("bullet")) nil [61685 62239])
            ("org-list-struct-fix-bul" function (:arguments ("struct" "prevs")) nil [62241 64879])
            ("org-list-struct-fix-ind" function (:arguments ("struct" "parents" "bullet-size")) nil [64881 65925])
            ("org-list-struct-fix-box" function (:arguments ("struct" "parents" "prevs" "ordered")) nil [65927 68427])
            ("org-list-struct-fix-item-end" function (:arguments ("struct")) nil [68429 69411])
            ("org-list-struct-apply-struct" function (:arguments ("struct" "old-struct")) nil [69413 74911])
            ("org-list-write-struct" function (:arguments ("struct" "parents" "old-struct")) nil [74913 76270])
            ("org-apply-on-list" function (:arguments ("function" "init-value" "args")) nil [76291 77195])
            ("org-list-set-item-visibility" function (:arguments ("item" "struct" "view")) nil [77197 78117])
            ("org-list-item-body-column" function (:arguments ("item")) nil [78119 78946])
            ("defalias" code nil nil [78978 79028])
            ("org-beginning-of-item" function (:user-visible-flag t) nil [79030 79250])
            ("org-beginning-of-item-list" function (:user-visible-flag t) nil [79252 79650])
            ("org-end-of-item-list" function (:user-visible-flag t) nil [79652 80031])
            ("org-end-of-item" function (:user-visible-flag t) nil [80033 80345])
            ("org-previous-item" function (:user-visible-flag t) nil [80347 80967])
            ("org-next-item" function (:user-visible-flag t) nil [80969 81580])
            ("org-move-item-down" function (:user-visible-flag t) nil [81582 82490])
            ("org-move-item-up" function (:user-visible-flag t) nil [82492 83299])
            ("org-insert-item" function (:arguments ("checkbox")) nil [83301 84751])
            ("org-list-repair" function (:user-visible-flag t) nil [84753 85042])
            ("org-cycle-list-bullet" function
               (:user-visible-flag t
                :arguments ("which"))
                nil [85044 87711])
            ("org-toggle-checkbox" function
               (:user-visible-flag t
                :arguments ("toggle-presence"))
                nil [87713 91922])
            ("org-reset-checkbox-state-subtree" function (:user-visible-flag t) nil [91924 92416])
            ("org-update-checkbox-count" function
               (:user-visible-flag t
                :arguments ("all"))
                nil [92418 97085])
            ("org-get-checkbox-statistics-face" function nil nil [97087 97569])
            ("org-update-checkbox-count-maybe" function (:arguments ("all")) nil [97571 97885])
            ("org-last-indent-begin-marker" variable (:default-value (make-marker)) nil [97887 97938])
            ("org-last-indent-end-marker" variable (:default-value (make-marker)) nil [97939 97988])
            ("org-list-indent-item-generic" function (:arguments ("arg" "no-subtree" "struct")) nil [97989 101421])
            ("org-outdent-item" function (:user-visible-flag t) nil [101423 102032])
            ("org-indent-item" function (:user-visible-flag t) nil [102034 102640])
            ("org-outdent-item-tree" function (:user-visible-flag t) nil [102642 103259])
            ("org-indent-item-tree" function (:user-visible-flag t) nil [103261 103875])
            ("org-tab-ind-state" variable nil nil [103877 103903])
            ("org-adapt-indentation" variable nil nil [103904 103934])
            ("org-cycle-item-indentation" function nil nil [103935 105859])
            ("org-sort-list" function
               (:user-visible-flag t
                :arguments ("with-case" "sorting-type" "getkey-func" "compare-func" "interactive?"))
                nil [105861 110298])
            ("org-toggle-item" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [110300 115734])
            ("org-list-to-lisp" function (:arguments ("delete")) nil [115766 118553])
            ("org-list-make-subtree" function (:user-visible-flag t) nil [118555 118841])
            ("org-list-insert-radio-list" function (:user-visible-flag t) nil [118843 119354])
            ("org-list-send-list" function
               (:user-visible-flag t
                :arguments ("maybe"))
                nil [119356 121404])
            ("org-list-to-generic" function (:arguments ("list" "params")) nil [121406 125686])
            ("org-list--depth" function (:arguments ("element")) nil [125688 125948])
            ("org-list--trailing-newlines" function (:arguments ("string")) nil [125950 126181])
            ("org-list--generic-eval" function (:arguments ("value" "args")) nil [126183 126504])
            ("org-list--to-generic-plain-list" function (:arguments ("params")) nil [126506 127823])
            ("org-list--to-generic-item" function (:arguments ("params")) nil [127825 130308])
            ("org-list-to-latex" function (:arguments ("list" "params")) nil [130310 130672])
            ("org-list-to-html" function (:arguments ("list" "params")) nil [130674 131032])
            ("org-list-to-texinfo" function (:arguments ("list" "params")) nil [131034 131404])
            ("org-list-to-subtree" function (:arguments ("list" "params")) nil [131406 132452])
            ("org-list" package nil nil [132454 132473]))          
      :file "org-list.el"
      :pointmax 132501
      :fsize 132500
      :lastmodtime '(22842 50887 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("org-with-gensyms" function (:arguments ("symbols" "body")) nil [1297 1514])
            ("org-string-nw-p" function (:arguments ("s")) nil [1516 1698])
            ("org-not-nil" function (:arguments ("v")) nil [1700 1845])
            ("org-preserve-lc" function (:arguments ("body")) nil [1847 2108])
            ("org-unmodified" function (:arguments ("body")) nil [2234 2605])
            ("org-without-partial-completion" function (:arguments ("body")) nil [2607 2931])
            ("org-with-point-at" function (:arguments ("pom" "body")) nil [2933 3304])
            ("org-with-remote-undo" function (:arguments ("buffer" "body")) nil [3306 4291])
            ("org-no-read-only" function (:arguments ("body")) nil [4293 4432])
            ("org-rm-props" variable
               (:constant-flag t
                :default-value (quote (invisible t face t keymap t intangible t mouse-face t rear-nonsticky t mouse-map t fontified t org-emphasis t)))
                nil [4434 4653])
            ("org-no-properties" function (:arguments ("s" "restricted")) nil [4655 4955])
            ("org-get-alist-option" function (:arguments ("option" "key")) nil [4957 5173])
            ("org-check-external-command" function (:arguments ("cmd" "use" "no-error")) nil [5175 5688])
            ("org-last" function (:arguments ("list")) nil [5690 5773])
            ("org-let" function (:arguments ("list" "body")) nil [5775 5846])
            ("put" code nil nil [5847 5885])
            ("org-let2" function (:arguments ("list1" "list2" "body")) nil [5887 5999])
            ("put" code nil nil [6000 6039])
            ("org-call-with-arg" function (:arguments ("command" "arg")) nil [6041 6211])
            ("org-current-line" function (:arguments ("pos")) nil [6213 6428])
            ("org-goto-line" function (:arguments ("N")) nil [6430 6545])
            ("org-current-line-string" function (:arguments ("to-here")) nil [6547 6673])
            ("org-pos-in-match-range" function (:arguments ("pos" "n")) nil [6675 6810])
            ("org-match-line" function (:arguments ("regexp")) nil [6812 6965])
            ("org-plist-delete" function (:arguments ("plist" "property")) nil [6967 7250])
            ("org-save-outline-visibility" function (:arguments ("use-markers" "body")) nil [7252 7999])
            ("org-with-wide-buffer" function (:arguments ("body")) nil [8001 8201])
            ("org-with-limited-levels" function (:arguments ("body")) nil [8203 8734])
            ("org-outline-regexp" variable nil nil [8736 8763])
            ("org-odd-levels-only" variable nil nil [8784 8812])
            ("org-inlinetask-min-level" variable nil nil [8833 8866])
            ("org-get-limited-outline-regexp" function nil nil [8898 9359])
            ("org-eval-in-environment" function (:arguments ("environment" "form")) nil [9361 9499])
            ("org-make-parameter-alist" function (:arguments ("flat")) nil [9501 9815])
            ("org-load-noerror-mustsuffix" function (:arguments ("file")) nil [9832 9984])
            ("org-unbracket-string" function (:arguments ("pre" "post" "string")) nil [9986 10303])
            ("org-read-function" function (:arguments ("prompt" "allow-empty?")) nil [10305 10673])
            ("org-macs" package nil nil [10675 10694]))          
      :file "org-macs.el"
      :pointmax 10722
      :fsize 10721
      :lastmodtime '(22842 50887 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [1157 1174])
            ("org-macs" include nil nil [1175 1194])
            ("declare-function" code nil nil [1196 1261])
            ("declare-function" code nil nil [1262 1318])
            ("declare-function" code nil nil [1319 1378])
            ("declare-function" code nil nil [1379 1445])
            ("declare-function" code nil nil [1446 1501])
            ("declare-function" code nil nil [1502 1583])
            ("org-table-any-border-regexp" variable nil nil [1585 1621])
            ("org-table-dataline-regexp" variable nil nil [1622 1656])
            ("org-table-tab-recognizes-table.el" variable nil nil [1657 1699])
            ("org-table1-hline-regexp" variable nil nil [1700 1732])
            ("when" code nil nil [1918 2467])
            ("define-obsolete-function-alias" code nil nil [2588 2654])
            ("define-obsolete-function-alias" code nil nil [2655 2721])
            ("define-obsolete-function-alias" code nil nil [2722 2804])
            ("define-obsolete-function-alias" code nil nil [2805 2887])
            ("define-obsolete-function-alias" code nil nil [2888 2960])
            ("define-obsolete-function-alias" code nil nil [2961 3039])
            ("define-obsolete-function-alias" code nil nil [3040 3114])
            ("define-obsolete-function-alias" code nil nil [3115 3185])
            ("define-obsolete-function-alias" code nil nil [3186 3264])
            ("define-obsolete-function-alias" code nil nil [3265 3347])
            ("define-obsolete-function-alias" code nil nil [3348 3422])
            ("define-obsolete-function-alias" code nil nil [3423 3497])
            ("define-obsolete-function-alias" code nil nil [3498 3600])
            ("define-obsolete-function-alias" code nil nil [3601 3671])
            ("define-obsolete-function-alias" code nil nil [3672 3778])
            ("org-re" function (:arguments ("s")) nil [3780 3936])
            ("define-obsolete-function-alias" code nil nil [4014 4077])
            ("define-obsolete-function-alias" code nil nil [4078 4141])
            ("define-obsolete-function-alias" code nil nil [4142 4209])
            ("define-obsolete-function-alias" code nil nil [4210 4275])
            ("define-obsolete-function-alias" code nil nil [4276 4347])
            ("define-obsolete-function-alias" code nil nil [4348 4427])
            ("define-obsolete-function-alias" code nil nil [4428 4489])
            ("define-obsolete-function-alias" code nil nil [4490 4554])
            ("org-sublist" function (:arguments ("list" "start" "end")) nil [4556 4697])
            ("make-obsolete" code nil nil [4698 4797])
            ("define-obsolete-function-alias" code nil nil [4842 4926])
            ("define-obsolete-function-alias" code nil nil [4927 5021])
            ("define-obsolete-function-alias" code nil nil [5022 5100])
            ("define-obsolete-function-alias" code nil nil [5101 5183])
            ("define-obsolete-function-alias" code nil nil [5184 5262])
            ("define-obsolete-function-alias" code nil nil [5263 5346])
            ("define-obsolete-function-alias" code nil nil [5347 5424])
            ("define-obsolete-function-alias" code nil nil [5425 5505])
            ("define-obsolete-function-alias" code nil nil [5506 5606])
            ("define-obsolete-function-alias" code nil nil [5607 5685])
            ("define-obsolete-function-alias" code nil nil [5753 5853])
            ("define-obsolete-variable-alias" code nil nil [5854 5974])
            ("define-obsolete-variable-alias" code nil nil [5975 6080])
            ("define-obsolete-variable-alias" code nil nil [6081 6200])
            ("define-obsolete-variable-alias" code nil nil [6201 6315])
            ("define-obsolete-function-alias" code nil nil [6316 6387])
            ("define-obsolete-function-alias" code nil nil [6388 6466])
            ("define-obsolete-function-alias" code nil nil [6467 6541])
            ("define-obsolete-function-alias" code nil nil [6542 6646])
            ("define-obsolete-function-alias" code nil nil [6647 6755])
            ("define-obsolete-function-alias" code nil nil [6756 6852])
            ("define-obsolete-function-alias" code nil nil [6853 6939])
            ("define-obsolete-function-alias" code nil nil [6940 7027])
            ("define-obsolete-function-alias" code nil nil [7028 7111])
            ("define-obsolete-function-alias" code nil nil [7112 7191])
            ("define-obsolete-function-alias" code nil nil [7192 7277])
            ("define-obsolete-variable-alias" code nil nil [7278 7389])
            ("define-obsolete-function-alias" code nil nil [7390 7489])
            ("define-obsolete-function-alias" code nil nil [7490 7607])
            ("define-obsolete-function-alias" code nil nil [7608 7699])
            ("define-obsolete-variable-alias" code nil nil [7700 7798])
            ("define-obsolete-variable-alias" code nil nil [7799 7894])
            ("define-obsolete-variable-alias" code nil nil [7895 7975])
            ("define-obsolete-variable-alias" code nil nil [7976 8073])
            ("define-obsolete-function-alias" code nil nil [8074 8175])
            ("define-obsolete-function-alias" code nil nil [8176 8266])
            ("define-obsolete-function-alias" code nil nil [8267 8392])
            ("define-obsolete-variable-alias" code nil nil [8393 8496])
            ("define-obsolete-variable-alias" code nil nil [8497 8594])
            ("define-obsolete-function-alias" code nil nil [8595 8676])
            ("define-obsolete-variable-alias" code nil nil [8677 8778])
            ("define-obsolete-variable-alias" code nil nil [8779 8875])
            ("make-obsolete-variable" code nil nil [8876 8945])
            ("define-obsolete-function-alias" code nil nil [8946 9051])
            ("define-obsolete-function-alias" code nil nil [9052 9135])
            ("define-obsolete-function-alias" code nil nil [9136 9236])
            ("define-obsolete-function-alias" code nil nil [9237 9305])
            ("define-obsolete-variable-alias" code nil nil [9306 9413])
            ("define-obsolete-variable-alias" code nil nil [9414 9527])
            ("define-obsolete-variable-alias" code nil nil [9528 9598])
            ("define-obsolete-function-alias" code nil nil [9599 9697])
            ("org-in-fixed-width-region-p" function nil nil [9699 9867])
            ("make-obsolete" code nil nil [9868 9966])
            ("org-read-date-minibuffer-setup-hook" variable nil nil [9968 10195])
            ("make-obsolete-variable" code nil nil [10196 10321])
            ("org-compatible-face" function (:arguments ("inherits" "specs")) nil [10323 10669])
            ("make-obsolete" code nil nil [10670 10737])
            ("org-add-link-type" function (:arguments ("type" "follow" "export")) nil [10739 12062])
            ("make-obsolete" code nil nil [12064 12149])
            ("org-table-recognize-table.el" function nil nil [12151 12836])
            ("make-obsolete" code nil nil [12895 13029])
            ("define-obsolete-function-alias" code nil nil [13031 13136])
            ("org-remove-angle-brackets" function (:arguments ("s")) nil [13138 13210])
            ("make-obsolete" code nil nil [13211 13285])
            ("org-remove-double-quotes" function (:arguments ("s")) nil [13287 13360])
            ("make-obsolete" code nil nil [13361 13434])
            ("define-obsolete-function-alias" code nil nil [13436 13529])
            ("eval-after-load" code nil nil [13560 13694])
            ("org-version-check" function (:arguments ("version" "feature" "level")) nil [13743 14445])
            ("org-get-x-clipboard" function (:arguments ("value")) nil [14447 14927])
            ("org-add-props" function (:arguments ("string" "plist" "props")) nil [14929 15287])
            ("put" code nil nil [15288 15332])
            ("org-fit-window-to-buffer" function (:arguments ("window" "max-height" "min-height" "shrink-only")) nil [15334 16156])
            ("defalias" code nil nil [16206 16331])
            ("org-ignore-region" variable nil nil [16359 16446])
            ("org-region-active-p" function nil nil [16448 16634])
            ("org-cursor-to-region-beginning" function nil nil [16636 16781])
            ("org-remove-from-invisibility-spec" function (:arguments ("arg")) nil [16815 17125])
            ("org-in-invisibility-spec-p" function (:arguments ("arg")) nil [17127 17302])
            ("org-move-to-column" function (:arguments ("column" "force" "_buffer")) nil [17304 17629])
            ("org-find-library-dir" function (:arguments ("library")) nil [17631 17731])
            ("org-count-lines" function (:arguments ("s")) nil [17733 17988])
            ("org-kill-new" function (:arguments ("string" "args")) nil [17990 18150])
            ("defalias" code nil nil [18208 18387])
            ("defalias" code nil nil [18435 18646])
            ("org-no-popups" function (:arguments ("body")) nil [18648 19069])
            ("org-check-version" function nil nil [19086 19793])
            ("org-with-silent-modifications" function (:arguments ("body")) nil [19795 19963])
            ("def-edebug-spec" code nil nil [19964 20018])
            ("org-define-error" function (:arguments ("name" "message")) nil [20064 20470])
            ("unless" code nil nil [20472 20919])
            ("org-compat" package nil nil [20921 20942]))          
      :file "org-compat.el"
      :pointmax 20972
      :fsize 20971
      :lastmodtime '(22842 50887 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [952 969])
            ("ob-eval" include nil nil [970 988])
            ("org-macs" include nil nil [989 1008])
            ("org-compat" include nil nil [1009 1030])
            ("org-babel-exeext" variable
               (:constant-flag t
                :default-value (if (memq system-type (quote (windows-nt cygwin))) ".exe" nil))
                nil [1032 1127])
            ("org-babel-library-of-babel" variable nil nil [1129 1164])
            ("org-edit-src-content-indentation" variable nil nil [1165 1206])
            ("org-src-lang-modes" variable nil nil [1207 1234])
            ("org-src-preserve-indentation" variable nil nil [1235 1272])
            ("declare-function" code nil nil [1274 1320])
            ("declare-function" code nil nil [1321 1383])
            ("declare-function" code nil nil [1384 1442])
            ("declare-function" code nil nil [1443 1506])
            ("declare-function" code nil nil [1507 1565])
            ("declare-function" code nil nil [1566 1626])
            ("declare-function" code nil nil [1627 1682])
            ("declare-function" code nil nil [1683 1748])
            ("declare-function" code nil nil [1749 1827])
            ("declare-function" code nil nil [1828 1885])
            ("declare-function" code nil nil [1886 1931])
            ("declare-function" code nil nil [1932 1982])
            ("declare-function" code nil nil [1983 2047])
            ("declare-function" code nil nil [2048 2128])
            ("declare-function" code nil nil [2129 2179])
            ("declare-function" code nil nil [2180 2236])
            ("declare-function" code nil nil [2237 2309])
            ("declare-function" code nil nil [2310 2375])
            ("declare-function" code nil nil [2376 2448])
            ("declare-function" code nil nil [2449 2508])
            ("declare-function" code nil nil [2509 2592])
            ("declare-function" code nil nil [2593 2657])
            ("declare-function" code nil nil [2658 2719])
            ("declare-function" code nil nil [2720 2781])
            ("declare-function" code nil nil [2782 2855])
            ("declare-function" code nil nil [2856 2899])
            ("declare-function" code nil nil [2900 2971])
            ("declare-function" code nil nil [2972 3031])
            ("declare-function" code nil nil [3032 3080])
            ("declare-function" code nil nil [3081 3144])
            ("declare-function" code nil nil [3145 3210])
            ("declare-function" code nil nil [3211 3281])
            ("declare-function" code nil nil [3282 3353])
            ("declare-function" code nil nil [3354 3420])
            ("declare-function" code nil nil [3421 3470])
            ("declare-function" code nil nil [3471 3548])
            ("declare-function" code nil nil [3549 3624])
            ("declare-function" code nil nil [3625 3705])
            ("declare-function" code nil nil [3706 3779])
            ("declare-function" code nil nil [3780 3852])
            ("declare-function" code nil nil [3853 3919])
            ("declare-function" code nil nil [3920 3972])
            ("declare-function" code nil nil [3973 4033])
            ("declare-function" code nil nil [4034 4091])
            ("declare-function" code nil nil [4092 4163])
            ("declare-function" code nil nil [4164 4225])
            ("declare-function" code nil nil [4226 4299])
            ("declare-function" code nil nil [4300 4349])
            ("declare-function" code nil nil [4350 4417])
            ("declare-function" code nil nil [4418 4476])
            ("declare-function" code nil nil [4477 4541])
            ("declare-function" code nil nil [4542 4599])
            ("declare-function" code nil nil [4600 4660])
            ("declare-function" code nil nil [4661 4705])
            ("declare-function" code nil nil [4706 4769])
            ("declare-function" code nil nil [4770 4832])
            ("declare-function" code nil nil [4833 4881])
            ("declare-function" code nil nil [4882 4973])
            ("org-babel" customgroup (:user-visible-flag t) nil [4975 5094])
            ("org-confirm-babel-evaluate" variable (:default-value t) nil [5096 6167])
            ("put" code nil nil [6233 6309])
            ("org-babel-no-eval-on-ctrl-c-ctrl-c" variable nil nil [6311 6513])
            ("org-babel-results-keyword" variable (:default-value "RESULTS") nil [6515 6886])
            ("org-babel-noweb-wrap-start" variable (:default-value "<<") nil [6888 7064])
            ("org-babel-noweb-wrap-end" variable (:default-value ">>") nil [7066 7240])
            ("org-babel-inline-result-wrap" variable (:default-value "=%s=") nil [7242 7445])
            ("put" code nil nil [7446 7591])
            ("org-babel-hash-show-time" variable nil nil [7593 7822])
            ("org-babel-noweb-wrap" function (:arguments ("regexp")) nil [7824 7989])
            ("org-babel-src-name-regexp" variable (:default-value "^[ 	]*#\\+name:[ 	]*") nil [7991 8109])
            ("org-babel-multi-line-header-regexp" variable (:default-value "^[ 	]*#\\+headers?:[ 	]*\\([^
]*\\)$") nil [8111 8264])
            ("org-babel-src-block-regexp" variable (:default-value (concat "^\\([ 	]*\\)#\\+begin_src[ 	]+\\([^ 	
]+\\)[ 	]*" "\\([^\":
]*\"[^\"
*]*\"[^\":
]*\\|[^\":
]*\\)" "\\([^
]*\\)
" "\\([^ ]*?
\\)??[ 	]*#\\+end_src")) nil [8266 8643])
            ("org-babel--get-vars" function (:arguments ("params")) nil [8645 8975])
            ("org-babel-exp-reference-buffer" variable nil nil [8977 9192])
            ("org-babel-check-confirm-evaluate" function (:arguments ("info")) nil [9194 10156])
            ("org-babel-check-evaluate" function (:arguments ("info")) nil [10158 10642])
            ("org-babel-confirm-evaluate-answer-no" variable nil nil [10691 10736])
            ("org-babel-confirm-evaluate" function (:arguments ("info")) nil [10738 11890])
            ("org-babel-execute-safely-maybe" function nil nil [11907 12024])
            ("org-babel-execute-maybe" function nil nil [12041 12170])
            ("org-babel-when-in-src-block" function (:arguments ("body")) nil [12172 12451])
            ("org-babel-execute-src-block-maybe" function (:user-visible-flag t) nil [12453 12775])
            ("org-babel-view-src-block-info" function (:user-visible-flag t) nil [12792 14181])
            ("org-babel-expand-src-block-maybe" function (:user-visible-flag t) nil [14198 14482])
            ("org-babel-load-in-session-maybe" function (:user-visible-flag t) nil [14499 14791])
            ("add-hook" code nil nil [14793 14853])
            ("org-babel-pop-to-session-maybe" function (:user-visible-flag t) nil [14870 15149])
            ("add-hook" code nil nil [15151 15212])
            ("org-babel-common-header-args-w-values" variable
               (:constant-flag t
                :default-value (quote ((cache (no yes)) (cmdline . :any) (colnames (nil no yes)) (comments (no link yes org both noweb)) (dir . :any) (eval (yes no no-export strip-export never-export eval never query)) (exports (code results both none)) (epilogue . :any) (file . :any) (file-desc . :any) (file-ext . :any) (hlines (no yes)) (mkdirp (yes no)) (no-expand) (noeval) (noweb (yes no tangle no-export strip-export)) (noweb-ref . :any) (noweb-sep . :any) (output-dir . :any) (padline (yes no)) (post . :any) (prologue . :any) (results (file list vector table scalar verbatim) (raw html latex org code pp drawer) (replace silent none append prepend) (output value)) (rownames (no yes)) (sep . :any) (session . :any) (shebang . :any) (tangle (tangle yes no :any)) (tangle-mode (493 365 292 :any)) (var . :any) (wrap . :any))))
                nil [15214 16276])
            ("org-babel-header-arg-names" variable
               (:constant-flag t
                :default-value (mapcar (function car) org-babel-common-header-args-w-values))
                nil [16278 16513])
            ("org-babel-safe-header-args" variable
               (:constant-flag t
                :default-value (quote (:cache :colnames :comments :exports :epilogue :hlines :noeval :noweb :noweb-ref :noweb-sep :padline :prologue :rownames :sep :session :tangle :wrap (:eval "never" "query") (:results lambda (str) (not (string-match "file" str))))))
                nil [16515 17366])
            ("org-babel-header-args-safe-fn" function (:arguments ("safe-list")) nil [17368 17996])
            ("org-babel-default-header-args" variable (:default-value (quote ((:session . "none") (:results . "replace") (:exports . "code") (:cache . "no") (:noweb . "no") (:hlines . "no") (:tangle . "no")))) nil [17998 18235])
            ("put" code nil nil [18236 18357])
            ("org-babel-default-inline-header-args" variable (:default-value (quote ((:session . "none") (:results . "replace") (:exports . "results") (:hlines . "yes")))) nil [18359 18566])
            ("put" code nil nil [18567 18695])
            ("org-babel-name-regexp" variable
               (:constant-flag t
                :default-value (format "^[ 	]*#\\+%s:[ 	]*" (regexp-opt (quote ("NAME" "TBLNAME")))))
                nil [18697 18887])
            ("org-babel-result-regexp" variable
               (:constant-flag t
                :default-value (format "^[ 	]*#\\+%s\\(?:\\[\\(?:%s \\)?\\([[:alnum:]]+\\)\\]\\)?:[ 	]*" org-babel-results-keyword "<\\(?:[0-9]\\{4\\}-[0-1][0-9]-[0-3][0-9] [0-2][0-9]\\(?::[0-5][0-9]\\)\\{2\\}\\)>"))
                nil [18889 19289])
            ("org-babel-result-w-name-regexp" variable
               (:constant-flag t
                :default-value (concat org-babel-result-regexp "\\(?9:[^ 	
]+\\)"))
                nil [19291 19477])
            ("org-babel-min-lines-for-block-output" variable (:default-value 10) nil [19479 19874])
            ("org-babel-noweb-error-all-langs" variable nil nil [19876 20070])
            ("org-babel-noweb-error-langs" variable nil nil [20072 20407])
            ("org-babel-hash-show" variable (:default-value 4) nil [20409 20506])
            ("org-babel-after-execute-hook" variable nil nil [20508 20621])
            ("org-babel-named-src-block-regexp-for-name" function (:arguments ("name")) nil [20623 21088])
            ("org-babel-named-data-regexp-for-name" function (:arguments ("name")) nil [21090 21263])
            ("org-babel--normalize-body" function (:arguments ("datum")) nil [21265 22043])
            ("org-babel-current-src-block-location" variable nil nil [22059 22388])
            ("*this*" variable nil nil [22390 22405])
            ("org-babel-get-src-block-info" function (:arguments ("light" "datum")) nil [22407 24413])
            ("org-babel-execute-src-block" function
               (:user-visible-flag t
                :arguments ("arg" "info" "params"))
                nil [24430 28433])
            ("org-babel-expand-body:generic" function (:arguments ("body" "params" "var-lines")) nil [28435 28991])
            ("org-babel-expand-src-block" function
               (:user-visible-flag t
                :arguments ("_arg" "info" "params"))
                nil [29008 30194])
            ("org-babel-edit-distance" function (:arguments ("s1" "s2")) nil [30196 30957])
            ("org-babel-combine-header-arg-lists" function (:arguments ("original" "others")) nil [30959 31360])
            ("org-babel-check-src-block" function (:user-visible-flag t) nil [31377 32297])
            ("org-babel-insert-header-arg" function
               (:user-visible-flag t
                :arguments ("header-arg" "value"))
                nil [32314 33585])
            ("org-babel-header-arg-expand" function nil nil [33662 33916])
            ("org-babel-enter-header-arg-w-completion" function (:arguments ("lang")) nil [33918 34777])
            ("add-hook" code nil nil [34779 34838])
            ("org-babel-load-in-session" function
               (:user-visible-flag t
                :arguments ("_arg" "info"))
                nil [34855 35833])
            ("org-babel-initiate-session" function
               (:user-visible-flag t
                :arguments ("arg" "info"))
                nil [35850 37128])
            ("org-babel-switch-to-session" function
               (:user-visible-flag t
                :arguments ("arg" "info"))
                nil [37145 37494])
            ("defalias" code nil nil [37496 37561])
            ("org-src-window-setup" variable nil nil [37563 37592])
            ("org-babel-switch-to-session-with-code" function
               (:user-visible-flag t
                :arguments ("arg" "_info"))
                nil [37609 38186])
            ("org-babel-do-in-edit-buffer" function (:arguments ("body")) nil [38203 38580])
            ("def-edebug-spec" code nil nil [38581 38633])
            ("org-babel-do-key-sequence-in-edit-buffer" function
               (:user-visible-flag t
                :arguments ("key"))
                nil [38635 39311])
            ("org-bracket-link-regexp" variable nil nil [39313 39345])
            ("org-babel-active-location-p" function nil nil [39347 39513])
            ("org-babel-open-src-block-result" function
               (:user-visible-flag t
                :arguments ("re-run"))
                nil [39530 40549])
            ("org-babel-map-src-blocks" function (:arguments ("file" "body")) nil [40566 43231])
            ("def-edebug-spec" code nil nil [43232 43286])
            ("org-babel-map-inline-src-blocks" function (:arguments ("file" "body")) nil [43303 44352])
            ("org-babel-map-call-lines" function (:arguments ("file" "body")) nil [44369 45441])
            ("org-babel-map-executables" function (:arguments ("file" "body")) nil [45458 46605])
            ("org-babel-execute-buffer" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [46622 47096])
            ("org-babel-execute-subtree" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [47113 47431])
            ("org-babel-sha1-hash" function
               (:user-visible-flag t
                :arguments ("info"))
                nil [47448 49601])
            ("org-babel-current-result-hash" function (:arguments ("info")) nil [49603 49917])
            ("org-babel-set-current-result-hash" function (:arguments ("hash" "info")) nil [49919 50400])
            ("org-babel-hide-hash" function nil nil [50402 51127])
            ("org-babel-hide-all-hashes" function nil nil [51129 51572])
            ("add-hook" code nil nil [51573 51625])
            ("org-babel-hash-at-point" function
               (:user-visible-flag t
                :arguments ("point"))
                nil [51627 52068])
            ("org-babel-result-hide-spec" function nil nil [52070 52291])
            ("add-hook" code nil nil [52292 52345])
            ("org-babel-hide-result-overlays" variable nil nil [52347 52419])
            ("org-babel-result-hide-all" function (:user-visible-flag t) nil [52421 52742])
            ("org-babel-show-result-all" function nil nil [52744 52926])
            ("org-babel-hide-result-toggle-maybe" function (:user-visible-flag t) nil [52943 53289])
            ("org-babel-hide-result-toggle" function
               (:user-visible-flag t
                :arguments ("force"))
                nil [53320 55008])
            ("add-hook" code nil nil [55050 55116])
            ("add-hook" code nil nil [55161 55283])
            ("org-file-properties" variable nil nil [55285 55313])
            ("org-babel-params-from-properties" function (:arguments ("lang")) nil [55314 56008])
            ("org-babel-balanced-split" function (:arguments ("string" "alts")) nil [56010 58813])
            ("org-babel-join-splits-near-ch" function (:arguments ("ch" "list")) nil [58815 59271])
            ("org-babel-parse-header-arguments" function (:arguments ("arg-string")) nil [59273 59901])
            ("org-babel-parse-multiple-vars" function (:arguments ("header-arguments")) nil [59903 60429])
            ("org-babel-process-params" function (:arguments ("params")) nil [60431 61824])
            ("org-babel-del-hlines" function (:arguments ("table")) nil [61850 61944])
            ("org-babel-get-colnames" function (:arguments ("table")) nil [61946 62261])
            ("org-babel-get-rownames" function (:arguments ("table")) nil [62263 62765])
            ("org-babel-put-colnames" function (:arguments ("table" "colnames")) nil [62767 62913])
            ("org-babel-put-rownames" function (:arguments ("table" "rownames")) nil [62915 63174])
            ("org-babel-pick-name" function (:arguments ("names" "selector")) nil [63176 63691])
            ("org-babel-disassemble-tables" function (:arguments ("vars" "hlines" "colnames" "rownames")) nil [63693 64946])
            ("org-babel-reassemble-table" function (:arguments ("table" "colnames" "rownames")) nil [64948 65529])
            ("org-babel-where-is-src-block-head" function (:arguments ("src-block")) nil [65531 66441])
            ("org-babel-goto-src-block-head" function (:user-visible-flag t) nil [66458 66690])
            ("org-babel-goto-named-src-block" function
               (:user-visible-flag t
                :arguments ("name"))
                nil [66707 67950])
            ("org-babel-find-named-block" function (:arguments ("name")) nil [67952 68338])
            ("org-babel-src-block-names" function (:arguments ("file")) nil [68340 68721])
            ("org-babel-goto-named-result" function
               (:user-visible-flag t
                :arguments ("name"))
                nil [68738 69173])
            ("org-babel-find-named-result" function (:arguments ("name")) nil [69175 69817])
            ("org-babel-result-names" function (:arguments ("file")) nil [69819 70186])
            ("org-babel-next-src-block" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [70203 70432])
            ("org-babel-previous-src-block" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [70449 70687])
            ("org-babel-load-languages" variable nil nil [70689 70722])
            ("org-babel-mark-block" function (:user-visible-flag t) nil [70739 71055])
            ("org-babel-demarcate-block" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [71057 73413])
            ("org-babel--insert-results-keyword" function (:arguments ("name" "hash")) nil [73415 74346])
            ("org-babel--clear-results-maybe" function (:arguments ("hash")) nil [74348 75365])
            ("org-babel-where-is-src-block-result" function (:arguments ("insert" "_info" "hash")) nil [75367 78762])
            ("org-babel-read-element" function (:arguments ("element")) nil [78764 80216])
            ("org-babel-read-result" function nil nil [80218 80441])
            ("org-babel-read-table" function nil nil [80443 80715])
            ("org-babel-read-list" function nil nil [80717 80883])
            ("org-link-types-re" variable nil nil [80885 80911])
            ("org-babel-read-link" function nil nil [80912 81512])
            ("org-babel-format-result" function (:arguments ("result" "sep")) nil [81514 81842])
            ("org-babel-insert-result" function (:arguments ("result" "result-params" "info" "hash" "lang")) nil [81844 92612])
            ("org-babel-remove-result" function
               (:user-visible-flag t
                :arguments ("info" "keep-keyword"))
                nil [92614 93079])
            ("org-babel-remove-inline-result" function
               (:user-visible-flag t
                :arguments ("datum"))
                nil [93081 94031])
            ("org-babel-remove-result-one-or-many" function
               (:user-visible-flag t
                :arguments ("x"))
                nil [94033 94327])
            ("org-babel-result-end" function nil nil [94329 95169])
            ("org-babel-result-to-file" function (:arguments ("result" "description")) nil [95171 95769])
            ("org-babel-capitalize-example-region-markers" variable nil nil [95771 95906])
            ("org-babel-examplify-region" function
               (:user-visible-flag t
                :arguments ("beg" "end" "results-switches" "inline"))
                nil [95908 96991])
            ("org-babel-update-block-body" function (:arguments ("new-body")) nil [96993 97993])
            ("org-babel-merge-params" function (:arguments ("plists")) nil [97995 102060])
            ("org-babel-use-quick-and-dirty-noweb-expansion" variable nil nil [102062 102371])
            ("org-babel-noweb-p" function (:arguments ("params" "context")) nil [102373 102810])
            ("org-babel-expand-noweb-references" function (:arguments ("info" "parent-buffer")) nil [102812 109205])
            ("org-babel--script-escape-inner" function (:arguments ("str")) nil [109207 111347])
            ("org-babel-script-escape" function (:arguments ("str" "force")) nil [111349 112441])
            ("org-babel-read" function (:arguments ("cell" "inhibit-lisp-eval")) nil [112443 113152])
            ("org-babel--string-to-number" function (:arguments ("string")) nil [113154 113364])
            ("org-babel-import-elisp-from-file" function (:arguments ("file-name" "separator")) nil [113366 114112])
            ("org-babel-string-read" function (:arguments ("cell")) nil [114114 114381])
            ("org-babel-chomp" function (:arguments ("string" "regexp")) nil [114383 114800])
            ("org-babel-process-file-name" function (:arguments ("name" "no-quote-p")) nil [114802 115337])
            ("org-babel-temporary-directory" variable nil nil [115339 115377])
            ("unless" code nil nil [115378 115813])
            ("org-babel-remote-temporary-directory" variable (:default-value "/tmp/") nil [115815 115962])
            ("org-babel-result-cond" function (:arguments ("result-params" "scalar-form" "table-forms")) nil [115964 116666])
            ("def-edebug-spec" code nil nil [116667 116723])
            ("org-babel-temp-file" function (:arguments ("prefix" "suffix")) nil [116725 117521])
            ("org-babel-remove-temporary-directory" function nil nil [117523 118463])
            ("add-hook" code nil nil [118465 118530])
            ("org-babel-one-header-arg-safe-p" function (:arguments ("pair" "safe-list")) nil [118532 119097])
            ("org-babel-generate-file-param" function (:arguments ("src-name" "params")) nil [119099 120533])
            ("org-babel-graphical-output-file" function (:arguments ("params")) nil [120535 121095])
            ("org-babel-make-language-alias" function (:arguments ("new" "old")) nil [121097 122021])
            ("org-babel-strip-quotes" function (:arguments ("string")) nil [122023 122157])
            ("ob-core" package nil nil [122159 122177]))          
      :file "ob-core.el"
      :pointmax 122279
      :fsize 122278
      :lastmodtime '(22842 50887 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("org-macs" include nil nil [1063 1082])
            ("org-babel-error-buffer-name" variable (:default-value "*Org-Babel Error Output*") nil [1084 1147])
            ("declare-function" code nil nil [1148 1222])
            ("org-babel-eval-error-notify" function (:arguments ("exit-code" "stderr")) nil [1224 1606])
            ("org-babel-eval" function (:arguments ("cmd" "body")) nil [1608 2550])
            ("org-babel-eval-read-file" function (:arguments ("file")) nil [2552 2707])
            ("org-babel--shell-command-on-region" function (:arguments ("start" "end" "command" "error-buffer")) nil [2709 5205])
            ("org-babel-eval-wipe-error-buffer" function nil nil [5207 5515])
            ("ob-eval" package nil nil [5517 5535]))          
      :file "ob-eval.el"
      :pointmax 5564
      :fsize 5563
      :lastmodtime '(22842 50887 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("org-inhibit-highlight-removal" variable nil nil [2810 2852])
            ("defvar-local" code nil nil [2880 2984])
            ("cl-lib" include nil nil [3015 3032])
            ("gnus-sum" include nil nil [3053 3072])
            ("calendar" include nil nil [3075 3094])
            ("find-func" include nil nil [3095 3115])
            ("format-spec" include nil nil [3116 3138])
            ("or" code nil nil [3140 3535])
            ("org-macs" include nil nil [3537 3556])
            ("org-compat" include nil nil [3557 3578])
            ("org-outline-regexp" variable (:default-value "\\*+ ") nil [3953 4023])
            ("org-outline-regexp-bol" variable (:default-value "^\\*+ ") nil [4025 4210])
            ("org-heading-regexp" variable (:default-value "^\\(\\*+\\)\\(?: +\\(.*?\\)\\)?[ 	]*$") nil [4212 4398])
            ("declare-function" code nil nil [4400 4460])
            ("declare-function" code nil nil [4461 4532])
            ("declare-function" code nil nil [4533 4606])
            ("declare-function" code nil nil [4607 4669])
            ("declare-function" code nil nil [4670 4745])
            ("declare-function" code nil nil [4746 4834])
            ("declare-function" code nil nil [4835 4898])
            ("declare-function" code nil nil [4899 4970])
            ("declare-function" code nil nil [4971 5057])
            ("declare-function" code nil nil [5058 5125])
            ("declare-function" code nil nil [5126 5193])
            ("declare-function" code nil nil [5194 5287])
            ("declare-function" code nil nil [5288 5373])
            ("declare-function" code nil nil [5374 5467])
            ("declare-function" code nil nil [5468 5544])
            ("declare-function" code nil nil [5545 5615])
            ("declare-function" code nil nil [5616 5684])
            ("declare-function" code nil nil [5685 5746])
            ("declare-function" code nil nil [5747 5806])
            ("declare-function" code nil nil [5807 5863])
            ("declare-function" code nil nil [5864 5928])
            ("declare-function" code nil nil [5929 6001])
            ("declare-function" code nil nil [6002 6065])
            ("declare-function" code nil nil [6066 6138])
            ("declare-function" code nil nil [6139 6196])
            ("declare-function" code nil nil [6197 6263])
            ("declare-function" code nil nil [6264 6349])
            ("declare-function" code nil nil [6350 6409])
            ("declare-function" code nil nil [6410 6479])
            ("declare-function" code nil nil [6480 6574])
            ("declare-function" code nil nil [6575 6647])
            ("declare-function" code nil nil [6648 6730])
            ("declare-function" code nil nil [6731 6800])
            ("declare-function" code nil nil [6801 6860])
            ("declare-function" code nil nil [6861 6922])
            ("declare-function" code nil nil [6923 6975])
            ("declare-function" code nil nil [6976 7039])
            ("declare-function" code nil nil [7040 7103])
            ("declare-function" code nil nil [7104 7172])
            ("declare-function" code nil nil [7173 7244])
            ("declare-function" code nil nil [7245 7310])
            ("declare-function" code nil nil [7311 7360])
            ("declare-function" code nil nil [7361 7430])
            ("declare-function" code nil nil [7431 7504])
            ("declare-function" code nil nil [7505 7560])
            ("declare-function" code nil nil [7561 7636])
            ("declare-function" code nil nil [7637 7713])
            ("declare-function" code nil nil [7714 7775])
            ("declare-function" code nil nil [7776 7833])
            ("declare-function" code nil nil [7834 7901])
            ("declare-function" code nil nil [7902 7969])
            ("declare-function" code nil nil [7970 8037])
            ("declare-function" code nil nil [8038 8114])
            ("declare-function" code nil nil [8115 8177])
            ("declare-function" code nil nil [8178 8244])
            ("declare-function" code nil nil [8245 8297])
            ("declare-function" code nil nil [8298 8357])
            ("declare-function" code nil nil [8358 8434])
            ("declare-function" code nil nil [8435 8493])
            ("declare-function" code nil nil [8494 8567])
            ("declare-function" code nil nil [8568 8632])
            ("declare-function" code nil nil [8633 8691])
            ("declare-function" code nil nil [8692 8745])
            ("declare-function" code nil nil [8746 8835])
            ("declare-function" code nil nil [8836 8924])
            ("org-uniquify" function (:arguments ("list")) nil [8926 9070])
            ("org-get-at-bol" function (:arguments ("property")) nil [9072 9211])
            ("org-trim" function (:arguments ("s" "keep-lead")) nil [9213 9592])
            ("org-babel-load-languages" variable nil nil [9657 9690])
            ("org-babel-do-load-languages" function (:arguments ("sym" "value")) nil [9707 10155])
            ("declare-function" code nil nil [10157 10243])
            ("org-babel-load-file" function
               (:user-visible-flag t
                :arguments ("file" "compile"))
                nil [10259 11465])
            ("org-babel-load-languages" variable (:default-value (quote ((emacs-lisp . t)))) nil [11467 13614])
            ("org-clone-delete-id" variable nil nil [13645 13913])
            ("org-check-version" code nil nil [13927 13946])
            ("org-version" function
               (:user-visible-flag t
                :arguments ("here" "full" "message"))
                nil [13963 15263])
            ("org-version" variable
               (:constant-flag t
                :default-value (org-version))
                nil [15265 15301])
            ("org-block-regexp" variable
               (:constant-flag t
                :default-value "^[ 	]*#\\+begin_?\\([^ 
]+\\)\\(\\([^
]+\\)\\)?
\\([^ ]+?\\)#\\+end_?\\1[ 	]*$")
                nil [15339 15499])
            ("org-dblock-start-re" variable
               (:constant-flag t
                :default-value "^[ 	]*#\\+\\(?:BEGIN\\|begin\\):[ 	]+\\(\\S-+\\)\\([ 	]+\\(.*\\)\\)?")
                nil [15501 15671])
            ("org-dblock-end-re" variable
               (:constant-flag t
                :default-value "^[ 	]*#\\+\\(?:END\\|end\\)\\([: 	
]\\|$\\)")
                nil [15673 15792])
            ("org-clock-string" variable
               (:constant-flag t
                :default-value "CLOCK:")
                nil [15819 15928])
            ("org-closed-string" variable (:default-value "CLOSED:") nil [15930 16041])
            ("org-deadline-string" variable (:default-value "DEADLINE:") nil [16043 16309])
            ("org-scheduled-string" variable (:default-value "SCHEDULED:") nil [16311 16585])
            ("org-ds-keyword-length" variable
               (:constant-flag t
                :default-value (+ 2 (apply (function max) (mapcar (function length) (list org-deadline-string org-scheduled-string org-clock-string org-closed-string)))))
                nil [16587 16822])
            ("org-planning-line-re" variable
               (:constant-flag t
                :default-value (concat "^[ 	]*" (regexp-opt (list org-closed-string org-deadline-string org-scheduled-string) t)))
                nil [16824 17038])
            ("org-clock-line-re" variable
               (:constant-flag t
                :default-value (concat "^[ 	]*" org-clock-string))
                nil [17040 17142])
            ("org-deadline-regexp" variable
               (:constant-flag t
                :default-value (concat "\\<" org-deadline-string))
                nil [17144 17243])
            ("org-deadline-time-regexp" variable
               (:constant-flag t
                :default-value (concat "\\<" org-deadline-string " *<\\([^>]+\\)>"))
                nil [17245 17396])
            ("org-deadline-time-hour-regexp" variable
               (:constant-flag t
                :default-value (concat "\\<" org-deadline-string " *<\\([^>]+[0-9]\\{1,2\\}:[0-9]\\{2\\}[0-9-+:hdwmy 	.]*\\)>"))
                nil [17398 17611])
            ("org-deadline-line-regexp" variable
               (:constant-flag t
                :default-value (concat "\\<\\(" org-deadline-string "\\).*"))
                nil [17613 17755])
            ("org-scheduled-regexp" variable
               (:constant-flag t
                :default-value (concat "\\<" org-scheduled-string))
                nil [17757 17859])
            ("org-scheduled-time-regexp" variable
               (:constant-flag t
                :default-value (concat "\\<" org-scheduled-string " *<\\([^>]+\\)>"))
                nil [17861 18015])
            ("org-scheduled-time-hour-regexp" variable
               (:constant-flag t
                :default-value (concat "\\<" org-scheduled-string " *<\\([^>]+[0-9]\\{1,2\\}:[0-9]\\{2\\}[0-9-+:hdwmy 	.]*\\)>"))
                nil [18017 18233])
            ("org-closed-time-regexp" variable
               (:constant-flag t
                :default-value (concat "\\<" org-closed-string " *\\[\\([^]]+\\)\\]"))
                nil [18235 18384])
            ("org-keyword-time-regexp" variable
               (:constant-flag t
                :default-value (concat "\\<" (regexp-opt (list org-scheduled-string org-deadline-string org-closed-string org-clock-string) t) " *[[<]\\([^]>]+\\)[]>]"))
                nil [18386 18642])
            ("org-keyword-time-not-clock-regexp" variable
               (:constant-flag t
                :default-value (concat "\\<" (regexp-opt (list org-scheduled-string org-deadline-string org-closed-string) t) " *[[<]\\([^]>]+\\)[]>]"))
                nil [18644 18889])
            ("org-maybe-keyword-time-regexp" variable
               (:constant-flag t
                :default-value (concat "\\(\\<" (regexp-opt (list org-scheduled-string org-deadline-string org-closed-string org-clock-string) t) "\\)?" " *\\([[<][0-9]\\{4\\}-[0-9]\\{2\\}-[0-9]\\{2\\} ?[^]
>]*?[]>]" "\\|" "<%%([^
>]*>\\)"))
                nil [18891 19232])
            ("org-all-time-keywords" variable
               (:constant-flag t
                :default-value (mapcar (lambda (w) (substring w 0 -1)) (list org-scheduled-string org-deadline-string org-clock-string org-closed-string)))
                nil [19234 19424])
            ("org-drawer-regexp" variable
               (:constant-flag t
                :default-value "^[ 	]*:\\(\\(?:\\w\\|[-_]\\)+\\):[ 	]*$")
                nil [19439 19604])
            ("org-property-start-re" variable
               (:constant-flag t
                :default-value "^[ 	]*:PROPERTIES:[ 	]*$")
                nil [19606 19736])
            ("org-property-end-re" variable
               (:constant-flag t
                :default-value "^[ 	]*:END:[ 	]*$")
                nil [19738 19858])
            ("org-clock-drawer-start-re" variable
               (:constant-flag t
                :default-value "^[ 	]*:CLOCK:[ 	]*$")
                nil [19860 19986])
            ("org-clock-drawer-end-re" variable
               (:constant-flag t
                :default-value "^[ 	]*:END:[ 	]*$")
                nil [19988 20109])
            ("org-property-drawer-re" variable
               (:constant-flag t
                :default-value (concat "^[ 	]*:PROPERTIES:[ 	]*
" "\\(?:[ 	]*:\\S-+:\\(?: .*\\)?[ 	]*
\\)*?" "[ 	]*:END:[ 	]*$"))
                nil [20111 20297])
            ("org-clock-drawer-re" variable
               (:constant-flag t
                :default-value (concat "\\(" org-clock-drawer-start-re "\\)[^ ]*?\\(" org-clock-drawer-end-re "\\)
?"))
                nil [20299 20462])
            ("org-heading-keyword-regexp-format" variable
               (:constant-flag t
                :default-value "^\\(\\*+\\)\\(?: +%s\\)\\(?: +\\(.*?\\)\\)?[ 	]*$")
                nil [20479 20829])
            ("org-heading-keyword-maybe-regexp-format" variable
               (:constant-flag t
                :default-value "^\\(\\*+\\)\\(?: +%s\\)?\\(?: +\\(.*?\\)\\)?[ 	]*$")
                nil [20831 21178])
            ("org-archive-tag" variable
               (:constant-flag t
                :default-value "ARCHIVE")
                nil [21180 21371])
            ("org-comment-string" variable
               (:constant-flag t
                :default-value "COMMENT")
                nil [21373 21574])
            ("org-latex-regexps" variable
               (:constant-flag t
                :default-value (quote (("begin" "^[ 	]*\\(\\\\begin{\\([a-zA-Z0-9\\*]+\\)[^ ]+?\\\\end{\\2}\\)" 1 t) ("$1" "\\([^$]\\|^\\)\\(\\$[^ 	
,;.$]\\$\\)\\(\\s.\\|\\s-\\|\\s(\\|\\s)\\|\\s\"\\| \\|'\\|$\\)" 2 nil) ("$" "\\([^$]\\|^\\)\\(\\(\\$\\([^ 	
,;.$][^$
]*?\\(
[^$
]*?\\)\\{0,2\\}[^ 	
,.$]\\)\\$\\)\\)\\(\\s.\\|\\s-\\|\\s(\\|\\s)\\|\\s\"\\| \\|'\\|$\\)" 2 nil) ("\\(" "\\\\([^ ]*?\\\\)" 0 nil) ("\\[" "\\\\\\[[^ ]*?\\\\\\]" 0 nil) ("$$" "\\$\\$[^ ]*?\\$\\$" 0 nil))))
                nil [21616 22409])
            ("org-effort-property" variable
               (:constant-flag t
                :default-value "Effort")
                nil [22431 22611])
            ("org-table-any-line-regexp" variable
               (:constant-flag t
                :default-value "^[ 	]*\\(|\\|\\+-[-+]\\)")
                nil [22625 22733])
            ("org-table-line-regexp" variable
               (:constant-flag t
                :default-value "^[ 	]*|")
                nil [22735 22813])
            ("org-table-dataline-regexp" variable
               (:constant-flag t
                :default-value "^[ 	]*|[^-]")
                nil [22815 22901])
            ("org-table-hline-regexp" variable
               (:constant-flag t
                :default-value "^[ 	]*|-")
                nil [22903 22984])
            ("org-table1-hline-regexp" variable
               (:constant-flag t
                :default-value "^[ 	]*\\+-[-+]")
                nil [22986 23075])
            ("org-table-any-border-regexp" variable
               (:constant-flag t
                :default-value "^[ 	]*[^|+ 	]")
                nil [23077 23239])
            ("org-TBLFM-regexp" variable
               (:constant-flag t
                :default-value "^[ 	]*#\\+TBLFM: ")
                nil [23241 23316])
            ("org-ts-regexp" variable
               (:constant-flag t
                :default-value "<\\([0-9]\\{4\\}-[0-9]\\{2\\}-[0-9]\\{2\\} ?[^
>]*?\\)>")
                nil [23334 23472])
            ("org-ts-regexp-inactive" variable
               (:constant-flag t
                :default-value "\\[\\([0-9]\\{4\\}-[0-9]\\{2\\}-[0-9]\\{2\\} ?[^
>]*?\\)\\]")
                nil [23474 23636])
            ("org-ts-regexp-both" variable
               (:constant-flag t
                :default-value "[[<]\\([0-9]\\{4\\}-[0-9]\\{2\\}-[0-9]\\{2\\} ?[^]
>]*?\\)[]>]")
                nil [23638 23788])
            ("org-ts-regexp0" variable
               (:constant-flag t
                :default-value "\\(\\([0-9]\\{4\\}\\)-\\([0-9]\\{2\\}\\)-\\([0-9]\\{2\\}\\)\\( +[^]+0-9>
 -]+\\)?\\( +\\([0-9]\\{1,2\\}\\):\\([0-9]\\{2\\}\\)\\)?\\)")
                nil [23790 24140])
            ("org-ts-regexp1" variable
               (:constant-flag t
                :default-value "\\(\\([0-9]\\{4\\}\\)-\\([0-9]\\{2\\}\\)-\\([0-9]\\{2\\}\\) *\\([^]+0-9>
 -]*\\)\\( \\([0-9]\\{1,2\\}\\):\\([0-9]\\{2\\}\\)\\)?\\)")
                nil [24142 24362])
            ("org-ts-regexp2" variable
               (:constant-flag t
                :default-value (concat "<" org-ts-regexp1 "[^>
]\\{0,16\\}>"))
                nil [24364 24495])
            ("org-ts-regexp3" variable
               (:constant-flag t
                :default-value (concat "[[<]" org-ts-regexp1 "[^]>
]\\{0,16\\}[]>]"))
                nil [24497 24647])
            ("org-tr-regexp" variable
               (:constant-flag t
                :default-value (concat org-ts-regexp "--?-?" org-ts-regexp))
                nil [24649 24770])
            ("org-tr-regexp-both" variable
               (:constant-flag t
                :default-value (concat org-ts-regexp-both "--?-?" org-ts-regexp-both))
                nil [24772 24910])
            ("org-tsr-regexp" variable
               (:constant-flag t
                :default-value (concat org-ts-regexp "\\(--?-?" org-ts-regexp "\\)?"))
                nil [24912 25063])
            ("org-tsr-regexp-both" variable
               (:constant-flag t
                :default-value (concat org-ts-regexp-both "\\(--?-?" org-ts-regexp-both "\\)?"))
                nil [25065 25281])
            ("org-repeat-re" variable
               (:constant-flag t
                :default-value "<[0-9]\\{4\\}-[0-9][0-9]-[0-9][0-9] [^>
]*?\\([.+]?\\+[0-9]+[hdwmy]\\(/[0-9]+[hdwmy]\\)?\\)")
                nil [25283 25514])
            ("org-time-stamp-formats" variable
               (:constant-flag t
                :default-value (quote ("<%Y-%m-%d %a>" . "<%Y-%m-%d %a %H:%M>")))
                nil [25516 25661])
            ("org" customgroup (:user-visible-flag t) nil [25691 25810])
            ("org-mode-hook" variable nil nil [25812 25931])
            ("org-load-hook" variable nil nil [25933 26041])
            ("org-log-buffer-setup-hook" variable nil nil [26043 26187])
            ("org-modules" variable nil nil [26189 26209])
            ("org-modules-loaded" variable nil nil [26227 26300])
            ("org-load-modules-maybe" function (:arguments ("force")) nil [26302 26616])
            ("org-set-modules" function (:arguments ("var" "value")) nil [26618 26843])
            ("org-modules" variable (:default-value (quote (org-w3m org-bbdb org-bibtex org-docview org-gnus org-info org-irc org-mhe org-rmail))) nil [26845 32331])
            ("org-export-registered-backends" variable nil nil [32333 32372])
            ("declare-function" code nil nil [32387 32464])
            ("declare-function" code nil nil [32465 32524])
            ("org-export-backends" variable (:default-value (quote (ascii html icalendar latex odt))) nil [32525 36765])
            ("eval-after-load" code nil nil [36767 36995])
            ("org-support-shift-select" variable nil nil [36997 39123])
            ("org-loop-over-headlines-in-active-region" variable nil nil [39125 40214])
            ("org-startup" customgroup (:user-visible-flag t) nil [40216 40321])
            ("org-startup-folded" variable (:default-value t) nil [40323 41074])
            ("org-startup-truncated" variable (:default-value t) nil [41076 41846])
            ("org-startup-indented" variable nil nil [41848 42224])
            ("org-use-sub-superscripts" variable (:default-value t) nil [42226 43658])
            ("org-startup-with-beamer-mode" variable nil nil [43660 43948])
            ("org-startup-align-all-tables" variable nil nil [43950 44394])
            ("org-startup-with-inline-images" variable nil nil [44396 44730])
            ("org-startup-with-latex-preview" variable nil nil [44732 45106])
            ("org-insert-mode-line-in-empty-file" variable nil nil [45108 45576])
            ("org-replace-disputed-keys" variable nil nil [45578 46304])
            ("org-use-extra-keys" variable nil nil [46306 46591])
            ("defvaralias" code nil nil [46593 46653])
            ("org-disputed-keys" variable (:default-value (quote (([(shift up)] . [(meta p)]) ([(shift down)] . [(meta n)]) ([(shift left)] . [(meta -)]) ([(shift right)] . [(meta +)]) ([(control shift right)] . [(meta shift +)]) ([(control shift left)] . [(meta shift -)])))) nil [46655 47339])
            ("org-key" function (:arguments ("key")) nil [47341 47698])
            ("org-defkey" function (:arguments ("keymap" "key" "def")) nil [47700 47840])
            ("org-ellipsis" variable nil nil [47842 48298])
            ("org-display-table" variable nil nil [48300 48401])
            ("org-keywords" customgroup (:user-visible-flag t) nil [48403 48492])
            ("org-closed-keep-when-no-todo" variable nil nil [48494 48720])
            ("org-structure" customgroup (:user-visible-flag t) nil [48722 48846])
            ("org-reveal-location" customgroup (:user-visible-flag t) nil [48848 48996])
            ("org-show-context-detail" variable (:default-value (quote ((agenda . local) (bookmark-jump . lineage) (isearch . lineage) (default . ancestors)))) nil [48998 51853])
            ("org-indirect-buffer-display" variable (:default-value (quote other-window)) nil [51855 52749])
            ("org-use-speed-commands" variable nil nil [52751 53339])
            ("org-speed-commands-user" variable nil nil [53341 54302])
            ("org-bookmark-names-plist" variable (:default-value (quote (:last-capture "org-capture-last-stored" :last-refile "org-refile-last-stored" :last-capture-marker "org-capture-last-stored-marker"))) nil [54304 54862])
            ("org-cycle" customgroup (:user-visible-flag t) nil [54864 54986])
            ("org-cycle-skip-children-state-if-no-children" variable (:default-value t) nil [54988 55153])
            ("org-cycle-max-level" variable nil nil [55155 55811])
            ("org-hide-block-startup" variable nil nil [55813 56062])
            ("org-cycle-global-at-bob" variable nil nil [56064 56662])
            ("org-cycle-level-after-item/entry-creation" variable (:default-value t) nil [56664 57383])
            ("org-cycle-emulate-tab" variable (:default-value t) nil [57385 58091])
            ("org-cycle-separator-lines" variable (:default-value 2) nil [58093 58855])
            ("put" code nil nil [58856 58919])
            ("org-pre-cycle-hook" variable nil nil [58921 59390])
            ("org-cycle-hook" variable (:default-value (quote (org-cycle-hide-archived-subtrees org-cycle-hide-drawers org-cycle-show-empty-lines org-optimize-window-after-visibility-change))) nil [59392 60073])
            ("org-edit-structure" customgroup (:user-visible-flag t) nil [60075 60214])
            ("org-odd-levels-only" variable nil nil [60216 60810])
            ("org-adapt-indentation" variable (:default-value t) nil [60812 61894])
            ("org-special-ctrl-a/e" variable nil nil [61896 63516])
            ("defvaralias" code nil nil [63517 63572])
            ("org-special-ctrl-k" variable nil nil [63574 64093])
            ("org-ctrl-k-protect-subtree" variable nil nil [64095 64708])
            ("org-special-ctrl-o" variable (:default-value t) nil [64710 64842])
            ("org-catch-invisible-edits" variable nil nil [64844 66009])
            ("org-yank-folded-subtrees" variable (:default-value t) nil [66011 66433])
            ("org-yank-adjusted-subtrees" variable nil nil [66435 66683])
            ("org-M-RET-may-split-line" variable (:default-value (quote ((default . t)))) nil [66685 67460])
            ("org-insert-heading-respect-content" variable nil nil [67463 67867])
            ("org-blank-before-new-entry" variable (:default-value (quote ((heading . auto) (plain-list-item . auto)))) nil [67869 68596])
            ("org-insert-heading-hook" variable nil nil [68598 68730])
            ("org-enable-fixed-width-editor" variable (:default-value t) nil [68732 69006])
            ("org-goto-auto-isearch" variable (:default-value t) nil [69008 69460])
            ("org-sparse-trees" customgroup (:user-visible-flag t) nil [69462 69592])
            ("org-highlight-sparse-tree-matches" variable (:default-value t) nil [69594 69852])
            ("org-remove-highlights-with-change" variable (:default-value t) nil [69854 70323])
            ("org-occur-case-fold-search" variable (:default-value t) nil [70325 70738])
            ("org-occur-hook" variable (:default-value (quote (org-first-headline-recenter))) nil [70740 70994])
            ("org-imenu-and-speedbar" customgroup (:user-visible-flag t) nil [70996 71144])
            ("org-imenu-depth" variable (:default-value 2) nil [71146 71321])
            ("org-table" customgroup (:user-visible-flag t) nil [71323 71423])
            ("org-enable-table-editor" variable (:default-value (quote optimized)) nil [71425 72898])
            ("org-self-insert-cluster-for-undo" variable nil nil [72900 73235])
            ("org-table-tab-recognizes-table.el" variable (:default-value t) nil [73237 73497])
            ("org-link" customgroup (:user-visible-flag t) nil [73499 73596])
            ("defvar-local" code nil nil [73598 73758])
            ("org-link-parameters" variable (:default-value (quote (("doi" :follow org--open-doi-link) ("elisp" :follow org--open-elisp-link) ("file" :complete org-file-complete-link) ("ftp" :follow (lambda (path) (browse-url (concat "ftp:" path)))) ("help" :follow org--open-help-link) ("http" :follow (lambda (path) (browse-url (concat "http:" path)))) ("https" :follow (lambda (path) (browse-url (concat "https:" path)))) ("mailto" :follow (lambda (path) (browse-url (concat "mailto:" path)))) ("message" :follow (lambda (path) (browse-url (concat "message:" path)))) ("news" :follow (lambda (path) (browse-url (concat "news:" path)))) ("shell" :follow org--open-shell-link)))) nil [73760 75814])
            ("org-link-get-parameter" function (:arguments ("type" "key")) nil [75816 76001])
            ("org-link-set-parameters" function (:arguments ("type" "parameters")) nil [76003 76382])
            ("org-link-types" function nil nil [76384 76485])
            ("org-link-abbrev-alist" variable nil nil [76487 77706])
            ("org-descriptive-links" variable (:default-value t) nil [77708 78162])
            ("org-link-file-path-type" variable (:default-value (quote adaptive)) nil [78164 78789])
            ("defvaralias" code nil nil [78791 78845])
            ("org-highlight-links" variable (:default-value (quote (bracket angle plain radio tag date footnote))) nil [78846 80249])
            ("org-make-link-description-function" variable nil nil [80251 80654])
            ("org-link-store" customgroup (:user-visible-flag t) nil [80656 80778])
            ("org-url-hexify-p" variable (:default-value t) nil [80780 80921])
            ("org-email-link-description-format" variable (:default-value "Email %c: %.30s") nil [80923 81724])
            ("org-from-is-user-regexp" variable (:default-value (let (r1 r2) (when (and user-mail-address (not (string= user-mail-address ""))) (setq r1 (concat "\\<" (regexp-quote user-mail-address) "\\>"))) (when (and user-full-name (not (string= user-full-name ""))) (setq r2 (concat "\\<" (regexp-quote user-full-name) "\\>"))) (if (and r1 r2) (concat r1 "\\|" r2) (or r1 r2)))) nil [81726 82286])
            ("org-context-in-file-links" variable (:default-value t) nil [82288 82969])
            ("org-keep-stored-link-after-insertion" variable nil nil [82971 83574])
            ("org-link-follow" customgroup (:user-visible-flag t) nil [83576 83702])
            ("org-link-translation-function" variable nil nil [83704 84412])
            ("org-follow-link-hook" variable nil nil [84414 84543])
            ("org-tab-follows-link" variable nil nil [84545 84805])
            ("org-return-follows-link" variable nil nil [84807 84997])
            ("org-mouse-1-follows-link" variable (:default-value (if (boundp (quote mouse-1-click-follows-link)) mouse-1-click-follows-link t)) nil [84999 85552])
            ("org-mark-ring-length" variable (:default-value 4) nil [85554 85754])
            ("org-link-search-must-match-exact-headline" variable (:default-value (quote query-to-create)) nil [85756 86397])
            ("org-link-frame-setup" variable (:default-value (quote ((vm . vm-visit-folder-other-frame) (vm-imap . vm-visit-imap-folder-other-frame) (gnus . org-gnus-no-new-news) (file . find-file-other-window) (wl . wl-other-frame)))) nil [86399 87972])
            ("org-display-internal-link-with-indirect-buffer" variable nil nil [87974 88565])
            ("org-open-non-existing-files" variable nil nil [88567 88936])
            ("org-open-directory-means-index-dot-org" variable nil nil [88938 89206])
            ("org-confirm-shell-link-function" variable (:default-value (quote yes-or-no-p)) nil [89208 89917])
            ("put" code nil nil [89918 90035])
            ("org-confirm-shell-link-not-regexp" variable nil nil [90037 90196])
            ("org-confirm-elisp-link-function" variable (:default-value (quote yes-or-no-p)) nil [90198 90932])
            ("put" code nil nil [90933 91050])
            ("org-confirm-elisp-link-not-regexp" variable nil nil [91052 91211])
            ("org-file-apps-defaults-gnu" variable
               (:constant-flag t
                :default-value (quote ((remote . emacs) (system . mailcap) (t . mailcap))))
                nil [91213 91395])
            ("org-file-apps-defaults-macosx" variable
               (:constant-flag t
                :default-value (quote ((remote . emacs) (system . "open %s") ("ps.gz" . "gv %s") ("eps.gz" . "gv %s") ("dvi" . "xdvi %s") ("fig" . "xfig %s") (t . "open %s"))))
                nil [91397 91811])
            ("org-file-apps-defaults-windowsnt" variable
               (:constant-flag t
                :default-value (list (quote (remote . emacs)) (cons (quote system) (lambda (file _path) (with-no-warnings (w32-shell-execute "open" file)))) (cons t (lambda (file _path) (with-no-warnings (w32-shell-execute "open" file))))))
                nil [91813 92181])
            ("org-file-apps" variable (:default-value (quote ((auto-mode . emacs) ("\\.mm\\'" . default) ("\\.x?html?\\'" . default) ("\\.pdf\\'" . default)))) nil [92183 97107])
            ("org-doi-server-url" variable (:default-value "http://dx.doi.org/") nil [97109 97251])
            ("org-refile" customgroup (:user-visible-flag t) nil [97253 97365])
            ("org-directory" variable (:default-value "~/org") nil [97367 97954])
            ("org-default-notes-file" variable (:default-value (convert-standard-filename "~/.notes")) nil [97956 98218])
            ("org-goto-interface" variable (:default-value (quote outline)) nil [98220 98893])
            ("org-goto-max-level" variable (:default-value 5) nil [98895 99037])
            ("org-reverse-note-order" variable nil nil [99039 99522])
            ("org-log-refile" variable nil nil [99524 100335])
            ("org-refile-targets" variable nil nil [100337 102661])
            ("org-refile-target-verify-function" variable nil nil [102663 103349])
            ("org-refile-use-cache" variable nil nil [103351 103980])
            ("org-refile-use-outline-path" variable nil nil [103982 104593])
            ("org-outline-path-complete-in-steps" variable (:default-value t) nil [104595 105188])
            ("org-refile-allow-creating-parent-nodes" variable nil nil [105190 105911])
            ("org-refile-active-region-within-subtree" variable nil nil [105913 106317])
            ("org-todo" customgroup (:user-visible-flag t) nil [106319 106421])
            ("org-progress" customgroup (:user-visible-flag t) nil [106423 106544])
            ("org-todo-interpretation-widgets" variable (:default-value (quote ((:tag "Sequence (cycling hits every state)" sequence) (:tag "Type     (cycling directly to DONE)" type)))) nil [106546 106823])
            ("org-todo-keywords" variable (:default-value (quote ((sequence "TODO" "DONE")))) nil [106825 109639])
            ("defvar-local" code nil nil [109641 109730])
            ("org-todo-keywords-for-agenda" variable nil nil [109731 109772])
            ("org-done-keywords-for-agenda" variable nil nil [109773 109814])
            ("org-todo-keyword-alist-for-agenda" variable nil nil [109815 109861])
            ("org-tag-alist-for-agenda" variable nil nil [109862 109944])
            ("org-tag-groups-alist-for-agenda" variable nil nil [109945 110049])
            ("defvar-local" code nil nil [110050 110089])
            ("org-agenda-contributing-files" variable nil nil [110090 110132])
            ("defvar-local" code nil nil [110133 110336])
            ("defvar-local" code nil nil [110337 110377])
            ("defvar-local" code nil nil [110378 110414])
            ("defvar-local" code nil nil [110415 110448])
            ("defvar-local" code nil nil [110449 110481])
            ("defvar-local" code nil nil [110482 110520])
            ("defvar-local" code nil nil [110521 110558])
            ("defvar-local" code nil nil [110559 110596])
            ("defvar-local" code nil nil [110597 110636])
            ("org-todo-interpretation" variable (:default-value (quote sequence)) nil [110638 111033])
            ("org-use-fast-todo-selection" variable (:default-value t) nil [111035 112018])
            ("org-provide-todo-statistics" variable (:default-value t) nil [112020 113012])
            ("org-hierarchical-todo-statistics" variable (:default-value t) nil [113014 113401])
            ("org-after-todo-state-change-hook" variable nil nil [113403 113650])
            ("org-blocker-hook" variable nil nil [113652 114000])
            ("org-trigger-hook" variable nil nil [114002 114602])
            ("org-enforce-todo-dependencies" variable nil nil [114604 115236])
            ("org-enforce-todo-checkbox-dependencies" variable nil nil [115238 115997])
            ("org-treat-insert-todo-heading-as-state-change" variable nil nil [115999 116362])
            ("org-treat-S-cursor-todo-selection-as-state-change" variable (:default-value t) nil [116364 116693])
            ("org-todo-state-tags-triggers" variable nil nil [116695 117411])
            ("org-log-done" variable nil nil [117413 118138])
            ("cond" code nil nil [118179 118318])
            ("org-log-reschedule" variable nil nil [118320 118947])
            ("org-log-redeadline" variable nil nil [118949 119691])
            ("org-log-note-clock-out" variable nil nil [119693 120026])
            ("org-log-done-with-time" variable (:default-value t) nil [120028 120214])
            ("org-log-note-headings" variable (:default-value (quote ((done . "CLOSING NOTE %t") (state . "State %-12s from %-12S %t") (note . "Note taken on %t") (reschedule . "Rescheduled from %S on %t") (delschedule . "Not scheduled, was %S on %t") (redeadline . "New deadline from %S on %t") (deldeadline . "Removed deadline, was %S on %t") (refile . "Refiled on %t") (clock-out . "")))) nil [120216 122111])
            ("unless" code nil nil [122113 122202])
            ("org-log-into-drawer" variable nil nil [122204 123239])
            ("defvaralias" code nil nil [123241 123308])
            ("org-log-into-drawer" function nil nil [123310 123805])
            ("org-log-state-notes-insert-after-drawers" variable nil nil [123807 124268])
            ("org-log-states-order-reversed" variable (:default-value t) nil [124270 124638])
            ("org-todo-repeat-to-state" variable nil nil [124640 125077])
            ("org-log-repeat" variable (:default-value (quote time)) nil [125079 126125])
            ("org-priorities" customgroup (:user-visible-flag t) nil [126128 126228])
            ("org-enable-priority-commands" variable (:default-value t) nil [126230 126452])
            ("org-highest-priority" variable (:default-value 65) nil [126454 126664])
            ("org-lowest-priority" variable (:default-value 67) nil [126666 126874])
            ("org-default-priority" variable (:default-value 66) nil [126876 127555])
            ("org-priority-start-cycle-with-default" variable (:default-value t) nil [127557 127886])
            ("org-get-priority-function" variable nil nil [127888 128389])
            ("org-time" customgroup (:user-visible-flag t) nil [128391 128508])
            ("org-time-stamp-rounding-minutes" variable (:default-value (quote (0 5))) nil [128510 129569])
            ("when" code nil nil [129621 129790])
            ("org-display-custom-times" variable nil nil [129792 130117])
            ("make-variable-buffer-local" code nil nil [130118 130172])
            ("org-time-stamp-custom-formats" variable (:default-value (quote ("<%m/%d/%y %a>" . "<%m/%d/%y %a %H:%M>"))) nil [130174 130656])
            ("org-time-stamp-format" function (:arguments ("long" "inactive")) nil [130658 130908])
            ("org-time-clocksum-format" variable (:default-value (quote (:days "%dd " :hours "%d" :require-hours t :minutes ":%02d" :require-minutes t))) nil [130910 133721])
            ("org-time-clocksum-use-fractional" variable nil nil [133723 133973])
            ("org-time-clocksum-use-effort-durations" variable nil nil [133975 134510])
            ("org-time-clocksum-fractional-format" variable (:default-value "%.2f") nil [134512 135788])
            ("org-deadline-warning-days" variable (:default-value 14) nil [135790 136248])
            ("org-scheduled-delay-days" variable nil nil [136250 136804])
            ("org-read-date-prefer-future" variable (:default-value t) nil [136806 137887])
            ("org-agenda-jump-prefer-future" variable (:default-value (quote org-read-date-prefer-future)) nil [137889 138433])
            ("org-read-date-force-compatible-dates" variable (:default-value t) nil [138435 139851])
            ("org-read-date-display-live" variable (:default-value t) nil [139853 140054])
            ("org-read-date-popup-calendar" variable (:default-value t) nil [140056 140391])
            ("defvaralias" code nil nil [140392 140473])
            ("org-extend-today-until" variable nil nil [140475 141214])
            ("org-use-effective-time" variable nil nil [141216 141551])
            ("org-use-last-clock-out-time-as-effective-time" variable nil nil [141553 141881])
            ("org-edit-timestamp-down-means-later" variable nil nil [141883 142065])
            ("org-calendar-follow-timestamp-change" variable (:default-value t) nil [142067 142321])
            ("org-tags" customgroup (:user-visible-flag t) nil [142323 142419])
            ("org-tag-alist" variable nil nil [142421 143612])
            ("org-tag-persistent-alist" variable nil nil [143614 144773])
            ("org-complete-tags-always-offer-all-agenda-tags" variable nil nil [144775 145294])
            ("org-file-tags" variable nil nil [145296 145529])
            ("org-use-fast-tag-selection" variable (:default-value (quote auto)) nil [145531 146190])
            ("org-fast-tag-selection-single-key" variable nil nil [146192 146675])
            ("org-fast-tag-selection-include-todo" variable nil nil [146677 146862])
            ("org-tags-column" variable (:default-value -77) nil [146864 147271])
            ("org-auto-align-tags" variable (:default-value t) nil [147273 147604])
            ("org-use-tag-inheritance" variable (:default-value t) nil [147606 148591])
            ("org-tags-exclude-from-inheritance" variable nil nil [148593 148924])
            ("org-tag-inherit-p" function (:arguments ("tag")) nil [148926 149375])
            ("org-tags-match-list-sublevels" variable (:default-value t) nil [149377 150360])
            ("org-tags-sort-function" variable nil nil [150362 150664])
            ("org-tags-history" variable nil nil [150666 150737])
            ("org-last-tags-completion-table" variable nil nil [150738 150826])
            ("org-after-tags-change-hook" variable nil nil [150827 150926])
            ("org-properties" customgroup (:user-visible-flag t) nil [150928 151042])
            ("org-property-format" variable (:default-value "%-10s %s") nil [151044 151372])
            ("org-properties-postprocess-alist" variable nil nil [151374 152350])
            ("org-use-property-inheritance" variable nil nil [152352 153658])
            ("org-property-inherit-p" function (:arguments ("property")) nil [153660 154130])
            ("org-columns-default-format" variable (:default-value "%25ITEM %TODO %3PRIORITY %TAGS") nil [154132 154405])
            ("org-columns-ellipses" variable (:default-value "..") nil [154407 154915])
            ("org-global-properties-fixed" variable
               (:constant-flag t
                :default-value (quote (("VISIBILITY_ALL" . "folded children content all") ("CLOCK_MODELINE_TOTAL_ALL" . "current today repeat all auto"))))
                nil [154917 155490])
            ("org-global-properties" variable nil nil [155492 156029])
            ("defvar-local" code nil nil [156031 156218])
            ("org-agenda" customgroup (:user-visible-flag t) nil [156220 156328])
            ("defvar-local" code nil nil [156330 156662])
            ("put" code nil nil [156663 156745])
            ("org-agenda-files" variable nil nil [156747 157530])
            ("org-agenda-file-regexp" variable (:default-value "\\`[^.].*\\.org\\'") nil [157532 157867])
            ("org-agenda-text-search-extra-files" variable nil nil [157869 158693])
            ("defvaralias" code nil nil [158695 158782])
            ("org-agenda-skip-unavailable-files" variable nil nil [158784 159009])
            ("org-calendar-to-agenda-key" variable (:default-value [99]) nil [159011 159352])
            ("org-calendar-insert-diary-entry-key" variable (:default-value [105]) nil [159354 159878])
            ("org-agenda-diary-file" variable (:default-value (quote diary-file)) nil [159880 160356])
            ("eval-after-load" code nil nil [160358 160706])
            ("org-latex" customgroup (:user-visible-flag t) nil [160708 160817])
            ("org-format-latex-options" variable (:default-value (quote (:foreground default :background default :scale 1.0 :html-foreground "Black" :html-background "Transparent" :html-scale 1.0 :matchers ("begin" "$1" "$" "$$" "\\(" "\\[")))) nil [160819 162268])
            ("org-format-latex-signal-error" variable (:default-value t) nil [162270 162482])
            ("org-latex-to-mathml-jar-file" variable nil nil [162484 162865])
            ("org-latex-to-mathml-convert-command" variable nil nil [162867 163660])
            ("org-preview-latex-default-process" variable (:default-value (quote dvipng)) nil [163662 163977])
            ("org-preview-latex-process-alist" variable (:default-value (quote ((dvipng :programs ("latex" "dvipng") :description "dvi > png" :message "you need to install the programs: latex and dvipng." :image-input-type "dvi" :image-output-type "png" :image-size-adjust (1.0 . 1.0) :latex-compiler ("latex -interaction nonstopmode -output-directory %o %f") :image-converter ("dvipng -fg %F -bg %B -D %D -T tight -o %O %f")) (dvisvgm :programs ("latex" "dvisvgm") :description "dvi > svg" :message "you need to install the programs: latex and dvisvgm." :use-xcolor t :image-input-type "dvi" :image-output-type "svg" :image-size-adjust (1.7 . 1.5) :latex-compiler ("latex -interaction nonstopmode -output-directory %o %f") :image-converter ("dvisvgm %f -n -b min -c %S -o %O")) (imagemagick :programs ("latex" "convert") :description "pdf > png" :message "you need to install the programs: latex and imagemagick." :use-xcolor t :image-input-type "pdf" :image-output-type "png" :image-size-adjust (1.0 . 1.0) :latex-compiler ("pdflatex -interaction nonstopmode -output-directory %o %f") :image-converter ("convert -density %D -trim -antialias %f -quality 100 %O"))))) nil [163979 168463])
            ("org-preview-latex-image-directory" variable (:default-value "ltximg/") nil [168465 168798])
            ("org-format-latex-mathml-available-p" function nil nil [168800 169301])
            ("org-format-latex-header" variable (:default-value "\\documentclass{article}
\\usepackage[usenames]{color}
[PACKAGES]
[DEFAULT-PACKAGES]
\\pagestyle{empty}             % do not remove
% The settings below are copied from fullpage.sty
\\setlength{\\textwidth}{\\paperwidth}
\\addtolength{\\textwidth}{-3cm}
\\setlength{\\oddsidemargin}{1.5cm}
\\addtolength{\\oddsidemargin}{-2.54cm}
\\setlength{\\evensidemargin}{\\oddsidemargin}
\\setlength{\\textheight}{\\paperheight}
\\addtolength{\\textheight}{-\\headheight}
\\addtolength{\\textheight}{-\\headsep}
\\addtolength{\\textheight}{-\\footskip}
\\addtolength{\\textheight}{-3cm}
\\setlength{\\topmargin}{1.5cm}
\\addtolength{\\topmargin}{-2.54cm}") nil [169303 170365])
            ("org-set-packages-alist" function (:arguments ("var" "val")) nil [170367 170607])
            ("org-get-packages-alist" function (:arguments ("var")) nil [170609 170843])
            ("org-latex-default-packages-alist" variable (:default-value (quote (("AUTO" "inputenc" t ("pdflatex")) ("T1" "fontenc" t ("pdflatex")) ("" "graphicx" t) ("" "grffile" t) ("" "longtable" nil) ("" "wrapfig" nil) ("" "rotating" nil) ("normalem" "ulem" t) ("" "amsmath" t) ("" "textcomp" t) ("" "amssymb" t) ("" "capt-of" nil) ("" "hyperref" nil)))) nil [170845 173273])
            ("org-latex-packages-alist" variable nil nil [173275 174297])
            ("org-appearance" customgroup (:user-visible-flag t) nil [174299 174404])
            ("org-level-color-stars-only" variable nil nil [174406 174697])
            ("org-hide-leading-stars" variable nil nil [174699 175284])
            ("org-hidden-keywords" variable nil nil [175286 175728])
            ("org-custom-properties" variable nil nil [175730 176063])
            ("org-fontify-done-headline" variable nil nil [176065 176406])
            ("org-fontify-emphasized-text" variable (:default-value t) nil [176408 176624])
            ("org-fontify-whole-heading-line" variable nil nil [176626 176843])
            ("org-highlight-latex-and-related" variable nil nil [176845 177504])
            ("org-hide-emphasis-markers" variable nil nil [177506 177660])
            ("org-hide-macro-markers" variable nil nil [177662 177815])
            ("org-pretty-entities" variable nil nil [177817 178013])
            ("org-pretty-entities-include-sub-superscripts" variable (:default-value t) nil [178015 178212])
            ("org-emph-re" variable nil nil [178214 178783])
            ("org-verbatim-re" variable nil nil [178784 178863])
            ("org-emphasis-regexp-components" variable nil nil [178864 178903])
            ("org-emphasis-alist" variable nil nil [178925 178952])
            ("org-set-emph-re" function (:arguments ("var" "val")) nil [178974 180747])
            ("org-emphasis-regexp-components" variable (:default-value (quote (" 	('\"{" "- 	.,:!?;'\")}\\[" " 	
" "." 1))) nil [180935 181920])
            ("org-emphasis-alist" variable (:default-value (quote (("*" bold) ("/" italic) ("_" underline) ("=" org-verbatim verbatim) ("~" org-code verbatim) ("+" (:strike-through t))))) nil [181922 182727])
            ("org-protecting-blocks" variable (:default-value (quote ("src" "example" "export"))) nil [182729 182902])
            ("mark-active" variable nil nil [182997 183017])
            ("declare-function" code nil nil [183039 183111])
            ("declare-function" code nil nil [183112 183168])
            ("declare-function" code nil nil [183169 183224])
            ("declare-function" code nil nil [183225 183277])
            ("declare-function" code nil nil [183278 183340])
            ("declare-function" code nil nil [183341 183401])
            ("declare-function" code nil nil [183402 183460])
            ("declare-function" code nil nil [183461 183508])
            ("declare-function" code nil nil [183509 183603])
            ("declare-function" code nil nil [183604 183737])
            ("declare-function" code nil nil [183738 183852])
            ("declare-function" code nil nil [183853 183969])
            ("declare-function" code nil nil [183970 184038])
            ("declare-function" code nil nil [184039 184171])
            ("declare-function" code nil nil [184172 184228])
            ("declare-function" code nil nil [184229 184298])
            ("declare-function" code nil nil [184299 184390])
            ("declare-function" code nil nil [184391 184471])
            ("declare-function" code nil nil [184472 184522])
            ("declare-function" code nil nil [184523 184594])
            ("declare-function" code nil nil [184595 184671])
            ("declare-function" code nil nil [184672 184735])
            ("declare-function" code nil nil [184736 184804])
            ("declare-function" code nil nil [184805 184867])
            ("declare-function" code nil nil [184868 184931])
            ("declare-function" code nil nil [184932 185002])
            ("declare-function" code nil nil [185003 185069])
            ("declare-function" code nil nil [185070 185128])
            ("declare-function" code nil nil [185129 185200])
            ("align-mode-rules-list" variable nil nil [185202 185232])
            ("calc-embedded-close-formula" variable nil nil [185233 185269])
            ("calc-embedded-open-formula" variable nil nil [185270 185305])
            ("calc-embedded-open-mode" variable nil nil [185306 185338])
            ("font-lock-unfontify-region-function" variable nil nil [185339 185383])
            ("iswitchb-temp-buflist" variable nil nil [185384 185414])
            ("org-agenda-tags-todo-honor-ignore-options" variable nil nil [185415 185465])
            ("remember-data-file" variable nil nil [185466 185493])
            ("texmathp-why" variable nil nil [185494 185515])
            ("turn-on-orgtbl" function nil nil [185532 185641])
            ("org-at-table-p" function (:arguments ("table-type")) nil [185643 186188])
            ("org-at-table.el-p" function nil nil [186190 186490])
            ("org-at-table-hline-p" function nil nil [186492 186794])
            ("org-table-map-tables" function (:arguments ("function" "quietly")) nil [186796 187565])
            ("declare-function" code nil nil [187567 187648])
            ("declare-function" code nil nil [187649 187709])
            ("declare-function" code nil nil [187710 187813])
            ("org-at-TBLFM-p" function (:arguments ("pos")) nil [187815 188106])
            ("org-clock-start-time" variable nil nil [188108 188137])
            ("org-clock-marker" variable (:default-value (make-marker)) nil [188138 188217])
            ("org-clock-hd-marker" variable (:default-value (make-marker)) nil [188218 188327])
            ("org-clock-heading" variable nil nil [188328 188401])
            ("org-clock-is-active" function nil nil [188402 188562])
            ("org-check-running-clock" function nil nil [188564 188977])
            ("org-clocktable-try-shift" function (:arguments ("dir" "n")) nil [188979 189192])
            ("org-clock-persistence-insinuate" function nil nil [189209 189404])
            ("org-archive" customgroup (:user-visible-flag t) nil [189406 189523])
            ("org-archive-location" variable (:default-value "%s_archive::") nil [189525 191934])
            ("org-agenda-skip-archived-trees" variable (:default-value t) nil [191936 192332])
            ("org-columns-skip-archived-trees" variable (:default-value t) nil [192334 192510])
            ("org-cycle-open-archived-trees" variable nil nil [192512 192877])
            ("org-sparse-tree-open-archived-trees" variable nil nil [192879 193165])
            ("org-sparse-tree-default-date-type" variable nil nil [193167 193997])
            ("org-cycle-hide-archived-subtrees" function (:arguments ("state")) nil [193999 194669])
            ("org-force-cycle-archived" function (:user-visible-flag t) nil [194671 194877])
            ("org-hide-archived-subtrees" function (:arguments ("beg" "end")) nil [194879 195374])
            ("declare-function" code nil nil [195376 195430])
            ("declare-function" code nil nil [195431 195494])
            ("org-flag-subtree" function (:arguments ("flag")) nil [195495 195688])
            ("defalias" code nil nil [195690 195753])
            ("declare-function" code nil nil [195784 195856])
            ("declare-function" code nil nil [195857 195920])
            ("declare-function" code nil nil [195942 195987])
            ("declare-function" code nil nil [195988 196037])
            ("declare-function" code nil nil [196038 196087])
            ("org-id-track-globally" variable nil nil [196088 196118])
            ("defvar-local" code nil nil [196190 196393])
            ("defvar-local" code nil nil [196395 196622])
            ("defvar-local" code nil nil [196624 196841])
            ("defvar-local" code nil nil [196843 197075])
            ("defvar-local" code nil nil [197077 197415])
            ("defvar-local" code nil nil [197417 197689])
            ("defvar-local" code nil nil [197691 197851])
            ("org-plain-time-of-day-regexp" variable
               (:constant-flag t
                :default-value (concat "\\(\\<[012]?[0-9]" "\\(\\(:\\([0-5][0-9]\\([AaPp][Mm]\\)?\\)\\)\\|\\([AaPp][Mm]\\)\\)\\>\\)" "\\(--?" "\\(\\<[012]?[0-9]" "\\(\\(:\\([0-5][0-9]\\([AaPp][Mm]\\)?\\)\\)\\|\\([AaPp][Mm]\\)\\)\\>\\)" "\\)?"))
                nil [197853 198385])
            ("org-plain-time-extension-regexp" variable
               (:constant-flag t
                :default-value (concat "\\(\\<[012]?[0-9]" "\\(\\(:\\([0-5][0-9]\\([AaPp][Mm]\\)?\\)\\)\\|\\([AaPp][Mm]\\)\\)\\>\\)" "\\+\\([0-9]+\\)\\(:\\([0-5][0-9]\\)\\)?"))
                nil [198387 198835])
            ("org-stamp-time-of-day-regexp" variable
               (:constant-flag t
                :default-value (concat "<\\([0-9]\\{4\\}-[0-9]\\{2\\}-[0-9]\\{2\\} +\\sw+ +\\)" "\\([012][0-9]:[0-5][0-9]\\(-\\([012][0-9]:[0-5][0-9]\\)\\)?[^
>]*?\\)>" "\\(--?" "<\\1\\([012][0-9]:[0-5][0-9]\\)>\\)?"))
                nil [198837 199384])
            ("org-startup-options" variable
               (:constant-flag t
                :default-value (quote (("fold" org-startup-folded t) ("overview" org-startup-folded t) ("nofold" org-startup-folded nil) ("showall" org-startup-folded nil) ("showeverything" org-startup-folded showeverything) ("content" org-startup-folded content) ("indent" org-startup-indented t) ("noindent" org-startup-indented nil) ("hidestars" org-hide-leading-stars t) ("showstars" org-hide-leading-stars nil) ("odd" org-odd-levels-only t) ("oddeven" org-odd-levels-only nil) ("align" org-startup-align-all-tables t) ("noalign" org-startup-align-all-tables nil) ("inlineimages" org-startup-with-inline-images t) ("noinlineimages" org-startup-with-inline-images nil) ("latexpreview" org-startup-with-latex-preview t) ("nolatexpreview" org-startup-with-latex-preview nil) ("customtime" org-display-custom-times t) ("logdone" org-log-done time) ("lognotedone" org-log-done note) ("nologdone" org-log-done nil) ("lognoteclock-out" org-log-note-clock-out t) ("nolognoteclock-out" org-log-note-clock-out nil) ("logrepeat" org-log-repeat state) ("lognoterepeat" org-log-repeat note) ("logdrawer" org-log-into-drawer t) ("nologdrawer" org-log-into-drawer nil) ("logstatesreversed" org-log-states-order-reversed t) ("nologstatesreversed" org-log-states-order-reversed nil) ("nologrepeat" org-log-repeat nil) ("logreschedule" org-log-reschedule time) ("lognotereschedule" org-log-reschedule note) ("nologreschedule" org-log-reschedule nil) ("logredeadline" org-log-redeadline time) ("lognoteredeadline" org-log-redeadline note) ("nologredeadline" org-log-redeadline nil) ("logrefile" org-log-refile time) ("lognoterefile" org-log-refile note) ("nologrefile" org-log-refile nil) ("fninline" org-footnote-define-inline t) ("nofninline" org-footnote-define-inline nil) ("fnlocal" org-footnote-section nil) ("fnauto" org-footnote-auto-label t) ("fnprompt" org-footnote-auto-label nil) ("fnconfirm" org-footnote-auto-label confirm) ("fnplain" org-footnote-auto-label plain) ("fnadjust" org-footnote-auto-adjust t) ("nofnadjust" org-footnote-auto-adjust nil) ("constcgs" constants-unit-system cgs) ("constSI" constants-unit-system SI) ("noptag" org-tag-persistent-alist nil) ("hideblocks" org-hide-block-startup t) ("nohideblocks" org-hide-block-startup nil) ("beamer" org-startup-with-beamer-mode t) ("entitiespretty" org-pretty-entities t) ("entitiesplain" org-pretty-entities nil))))
                nil [199386 202312])
            ("org-group-tags" variable (:default-value t) nil [202314 202508])
            ("org-inhibit-startup" variable nil nil [202510 202542])
            ("org-toggle-tags-groups" function (:user-visible-flag t) nil [202579 203062])
            ("org-set-regexps-and-options" function (:arguments ("tags-only")) nil [203064 209466])
            ("org--setup-collect-keywords" function (:arguments ("regexp" "files" "alist")) nil [209468 213769])
            ("org-tag-string-to-alist" function (:arguments ("s")) nil [213771 215121])
            ("org-tag-alist-to-string" function (:arguments ("alist" "skip-key")) nil [215123 215942])
            ("org-tag-alist-to-groups" function (:arguments ("alist")) nil [215944 216792])
            ("org-file-contents" function (:arguments ("file" "noerror")) nil [216794 217218])
            ("org-extract-log-state-settings" function (:arguments ("x")) nil [217220 217748])
            ("org-remove-keyword-keys" function (:arguments ("list")) nil [217750 217970])
            ("org-assign-fast-keys" function (:arguments ("alist")) nil [217972 218617])
            ("org-window-configuration" variable nil nil [218662 218759])
            ("org-selected-window" variable nil nil [218760 218852])
            ("org-finish-function" variable nil nil [218853 218992])
            ("org-last-state" variable nil nil [218993 219016])
            ("org-entities" variable nil nil [219081 219102])
            ("org-struct-menu" variable nil nil [219137 219161])
            ("org-org-menu" variable nil nil [219162 219183])
            ("org-tbl-menu" variable nil nil [219184 219205])
            ("org-table-may-need-update" variable (:default-value t) nil [219313 219491])
            ("org-before-change-function" function (:arguments ("_beg" "_end")) nil [219492 219637])
            ("org-mode-map" variable nil nil [219638 219659])
            ("org-inhibit-startup-visibility-stuff" variable nil nil [219660 219709])
            ("org-agenda-keep-modes" variable nil nil [219738 219772])
            ("org-inhibit-logging" variable nil nil [219806 219838])
            ("org-inhibit-blocking" variable nil nil [219874 219907])
            ("org-table-buffer-is-an" variable nil nil [219942 219977])
            ("bidi-paragraph-direction" variable nil nil [219979 220012])
            ("buffer-face-mode-face" variable nil nil [220013 220043])
            ("outline" include nil nil [220045 220063])
            ("time-date" include nil nil [220089 220109])
            ("unless" code nil nil [220110 220184])
            ("easymenu" include nil nil [220185 220204])
            ("easy-menu-add" function (:prototype-flag t) nil [220205 220241])
            ("overlay" include nil nil [220242 220260])
            ("org-entities" include nil nil [220337 220360])
            ("org-faces" include nil nil [220438 220458])
            ("org-list" include nil nil [220459 220478])
            ("org-pcomplete" include nil nil [220479 220503])
            ("org-src" include nil nil [220504 220522])
            ("org-footnote" include nil nil [220523 220546])
            ("org-macro" include nil nil [220547 220567])
            ("ob" include nil nil [220578 220591])
            ("define-derived-mode" code nil nil [220608 226602])
            ("add-to-list" code nil nil [226654 226868])
            ("org-mode-transpose-word-syntax-table" variable (:default-value (let ((st (make-syntax-table text-mode-syntax-table))) (dolist (c org-emphasis-alist st) (modify-syntax-entry (string-to-char (car c)) "w p" st)))) nil [226870 227074])
            ("when" code nil nil [227076 227198])
            ("org-find-invisible-foreground" function nil nil [227200 227681])
            ("org-current-time" function (:arguments ("rounding-minutes" "past")) nil [227683 228404])
            ("org-today" function nil nil [228406 228585])
            ("org-mouse-map" variable (:default-value (make-sparse-keymap)) nil [228635 228678])
            ("org-defkey" code nil nil [228679 228734])
            ("org-defkey" code nil nil [228735 228795])
            ("when" code nil nil [228796 228882])
            ("when" code nil nil [228883 229021])
            ("font-lock" include nil nil [229023 229043])
            ("org-non-link-chars" variable
               (:constant-flag t
                :default-value "]	
<>")
                nil [229045 229086])
            ("org-link-types-re" variable nil nil [229087 229178])
            ("org-link-re-with-space" variable nil nil [229179 229283])
            ("org-link-re-with-space2" variable nil nil [229284 229389])
            ("org-link-re-with-space3" variable nil nil [229390 229499])
            ("org-angle-link-re" variable nil nil [229500 229590])
            ("org-plain-link-re" variable nil nil [229591 229661])
            ("org-bracket-link-regexp" variable nil nil [229662 229737])
            ("org-bracket-link-analytic-regexp" variable nil nil [229738 229925])
            ("org-bracket-link-analytic-regexp++" variable nil nil [229926 230053])
            ("org-any-link-re" variable nil nil [230054 230124])
            ("org-match-sexp-depth" variable
               (:constant-flag t
                :default-value 3)
                nil [230126 230218])
            ("org-create-multibrace-regexp" function (:arguments ("left" "right" "n")) nil [230220 231021])
            ("org-match-substring-regexp" variable
               (:constant-flag t
                :default-value (concat "\\(\\S-\\)\\([_^]\\)\\(" "\\(?:" (org-create-multibrace-regexp "{" "}" org-match-sexp-depth) "\\)" "\\|" "\\(?:" (org-create-multibrace-regexp "(" ")" org-match-sexp-depth) "\\)" "\\|" "\\(?:\\*\\|[+-]?[[:alnum:].,\\]*[[:alnum:]]\\)\\)"))
                nil [231023 231386])
            ("org-match-substring-with-braces-regexp" variable
               (:constant-flag t
                :default-value (concat "\\(\\S-\\)\\([_^]\\)" "\\(" (org-create-multibrace-regexp "{" "}" org-match-sexp-depth) "\\)"))
                nil [231388 231624])
            ("org-make-link-regexps" function nil nil [231626 233187])
            ("org-make-link-regexps" code nil nil [233189 233212])
            ("org-emph-face" variable nil nil [233214 233240])
            ("org-do-emphasis-faces" function (:arguments ("limit")) nil [233242 234366])
            ("org-emphasize" function
               (:user-visible-flag t
                :arguments ("char"))
                nil [234368 236050])
            ("org-nonsticky-props" variable
               (:constant-flag t
                :default-value (quote (mouse-face highlight keymap invisible intangible help-echo org-linked-text htmlize-link)))
                nil [236052 236175])
            ("org-rear-nonsticky-at" function (:arguments ("pos")) nil [236177 236295])
            ("org-activate-links" function (:arguments ("limit")) nil [236297 238914])
            ("org-activate-code" function (:arguments ("limit")) nil [238916 239207])
            ("org-src-fontify-natively" variable (:default-value t) nil [239209 239439])
            ("org-allow-promoting-top-level-subtree" variable nil nil [239441 239677])
            ("org-fontify-meta-lines-and-blocks" function (:arguments ("limit")) nil [239679 239916])
            ("org-fontify-meta-lines-and-blocks-1" function (:arguments ("limit")) nil [239918 244158])
            ("org-fontify-drawers" function (:arguments ("limit")) nil [244160 244469])
            ("org-fontify-macros" function (:arguments ("limit")) nil [244471 244974])
            ("org-activate-footnote-links" function (:arguments ("limit")) nil [244976 245720])
            ("org-activate-dates" function (:arguments ("limit")) nil [245722 246342])
            ("defvar-local" code nil nil [246344 246446])
            ("org-target-regexp" variable
               (:constant-flag t
                :default-value (let ((border "[^<>
 	]")) (format "<<\\(%s\\|%s[^<>
]*%s\\)>>" border border border)))
                nil [246448 246636])
            ("org-radio-target-regexp" variable
               (:constant-flag t
                :default-value (format "<%s>" org-target-regexp))
                nil [246638 246754])
            ("org-any-target-regexp" variable
               (:constant-flag t
                :default-value (format "%s\\|%s" org-radio-target-regexp org-target-regexp))
                nil [246756 246895])
            ("org-activate-target-links" function (:arguments ("limit")) nil [246897 247410])
            ("org-update-radio-target-regexp" function (:user-visible-flag t) nil [247412 249009])
            ("org-hide-wide-columns" function (:arguments ("limit")) nil [249011 249306])
            ("org-latex-and-related-regexp" variable nil nil [249308 249426])
            ("org-compute-latex-and-related-regexp" function nil nil [249428 250413])
            ("org-do-latex-and-related" function (:arguments ("limit")) nil [250415 251398])
            ("org-restart-font-lock" function nil nil [251400 251590])
            ("org-activate-tags" function (:arguments ("limit")) nil [251592 251957])
            ("org-outline-level" function nil nil [251959 252425])
            ("org-font-lock-keywords" variable nil nil [252427 252462])
            ("org-re-property" function (:arguments ("property" "literal" "allow-null" "value")) nil [252464 253408])
            ("org-property-re" variable
               (:constant-flag t
                :default-value (org-re-property "\\S-+" (quote literal) t))
                nil [253410 253773])
            ("org-font-lock-hook" variable nil nil [253775 253862])
            ("org-font-lock-extra-keywords" variable nil nil [253864 253905])
            ("org-font-lock-set-keywords-hook" variable nil nil [253928 254258])
            ("org-font-lock-hook" function (:arguments ("limit")) nil [254260 254386])
            ("org-set-font-lock-defaults" function nil nil [254388 258410])
            ("org-toggle-pretty-entities" function (:user-visible-flag t) nil [258412 258855])
            ("defvar-local" code nil nil [258857 258955])
            ("org-toggle-custom-properties-visibility" function (:user-visible-flag t) nil [258957 260199])
            ("org-fontify-entities" function (:arguments ("limit")) nil [260201 261085])
            ("org-fontify-like-in-org-mode" function (:arguments ("s" "odd-levels")) nil [261087 261336])
            ("org-m" variable nil nil [261338 261356])
            ("org-l" variable nil nil [261357 261375])
            ("org-f" variable nil nil [261376 261394])
            ("org-get-level-face" function (:arguments ("n")) nil [261395 261923])
            ("org-face-from-face-or-color" function (:arguments ("context" "inherit" "face-or-color")) nil [261925 262272])
            ("org-get-todo-face" function (:arguments ("kwd")) nil [262274 262630])
            ("org-get-priority-face" function (:arguments ("priority")) nil [262632 262863])
            ("org-get-tag-face" function (:arguments ("tag")) nil [262865 263139])
            ("org-font-lock-add-priority-faces" function (:arguments ("limit")) nil [263141 263463])
            ("org-font-lock-add-tag-faces" function (:arguments ("limit")) nil [263465 263814])
            ("org-unfontify-region" function (:arguments ("beg" "end" "_maybe_loudly")) nil [263816 264386])
            ("org-script-display" variable
               (:constant-flag t
                :default-value (quote (((raise -0.3) (height 0.7)) ((raise 0.3) (height 0.7)) ((raise -0.5)) ((raise 0.5)))))
                nil [264388 264582])
            ("org-remove-font-lock-display-properties" function (:arguments ("beg" "end")) nil [264584 265070])
            ("org-raise-scripts" function (:arguments ("limit")) nil [265072 266666])
            ("defvar-local" code nil nil [266746 266788])
            ("put" code nil nil [266789 266832])
            ("defvar-local" code nil nil [266833 266876])
            ("put" code nil nil [266877 266921])
            ("org-inlinetask-min-level" variable nil nil [266923 266956])
            ("org-unlogged-message" function (:arguments ("args")) nil [266958 267127])
            ("org-cycle" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [267144 273511])
            ("org-cycle-internal-global" function nil nil [273513 274892])
            ("org-called-with-limited-levels" variable nil nil [274894 275001])
            ("org-cycle-internal-local" function nil nil [275003 279222])
            ("org-global-cycle" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [279239 279914])
            ("org-set-startup-visibility" function nil nil [279916 280515])
            ("org-set-visibility-according-to-property" function
               (:user-visible-flag t
                :arguments ("no-cleanup"))
                nil [280517 281468])
            ("org-overview" function (:user-visible-flag t) nil [281651 282255])
            ("org-content" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [282257 282893])
            ("org-optimize-window-after-visibility-change" function (:arguments ("state")) nil [282895 283380])
            ("org-remove-empty-overlays-at" function (:arguments ("pos")) nil [283382 283688])
            ("org-clean-visibility-after-subtree-move" function nil nil [283690 284690])
            ("org-cycle-show-empty-lines" function (:arguments ("state")) nil [284692 286331])
            ("org-show-empty-lines-in-parent" function nil nil [286333 286578])
            ("org-files-list" function nil nil [286580 287021])
            ("org-entry-beginning-position" function nil nil [287023 287172])
            ("org-entry-end-position" function nil nil [287174 287310])
            ("org-cycle-hide-drawers" function (:arguments ("state" "exceptions")) nil [287312 288398])
            ("org-flag-drawer" function (:arguments ("flag" "element")) nil [288400 289332])
            ("org-subtree-end-visible-p" function nil nil [289334 289496])
            ("org-first-headline-recenter" function nil nil [289498 289821])
            ("org-outline-overlay-data" function (:arguments ("use-markers")) nil [289860 290581])
            ("org-set-outline-overlay-data" function (:arguments ("data")) nil [290583 290850])
            ("defvar-local" code nil nil [290875 290945])
            ("org-block-map" function (:arguments ("function" "start" "end")) nil [290947 291452])
            ("org-hide-block-toggle-all" function nil nil [291454 291594])
            ("org-hide-block-all" function (:user-visible-flag t) nil [291596 291754])
            ("org-show-block-all" function (:user-visible-flag t) nil [291756 291933])
            ("org-hide-block-toggle-maybe" function (:user-visible-flag t) nil [291935 292199])
            ("org-hide-block-toggle" function
               (:user-visible-flag t
                :arguments ("force"))
                nil [292201 294368])
            ("add-hook" code nil nil [294414 294534])
            ("org-goto-window-configuration" variable nil nil [294550 294592])
            ("org-goto-marker" variable nil nil [294593 294621])
            ("org-goto-map" variable nil nil [294622 294643])
            ("org-goto-map" function nil nil [294644 296218])
            ("org-goto-help" variable
               (:constant-flag t
                :default-value "Browse buffer copy, to find location or copy text.%s
RET=jump to location             C-g=quit and return to previous location
[Up]/[Down]=next/prev headline   TAB=cycle visibility   [/] org-occur")
                nil [296220 296446])
            ("org-goto-start-pos" variable nil nil [296448 296475])
            ("org-goto" function
               (:user-visible-flag t
                :arguments ("alternative-interface"))
                nil [296508 298295])
            ("org-goto-selected-point" variable nil nil [298297 298333])
            ("org-goto-exit-command" variable nil nil [298365 298399])
            ("org-goto-local-auto-isearch-map" variable nil nil [298431 298471])
            ("org-get-location" function (:arguments ("_buf" "help")) nil [298489 300141])
            ("org-goto-local-auto-isearch-map" variable (:default-value (make-sparse-keymap)) nil [300143 300204])
            ("set-keymap-parent" code nil nil [300205 300273])
            ("if" code nil nil [300333 300735])
            ("org-goto-local-search-headings" function (:arguments ("string" "bound" "noerror")) nil [300737 301251])
            ("org-goto-local-auto-isearch" function (:user-visible-flag t) nil [301253 301544])
            ("org-goto-ret" function
               (:user-visible-flag t
                :arguments ("_arg"))
                nil [301546 301755])
            ("org-goto-left" function (:user-visible-flag t) nil [301757 302042])
            ("org-goto-right" function (:user-visible-flag t) nil [302044 302308])
            ("org-goto-quit" function (:user-visible-flag t) nil [302310 302489])
            ("org-indirect-dedicated-frame" variable nil nil [302532 302633])
            ("org-last-indirect-buffer" variable nil nil [302634 302671])
            ("org-tree-to-indirect-buffer" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [302673 305348])
            ("org-get-indirect-buffer" function (:arguments ("buffer" "heading")) nil [305350 305829])
            ("org-set-frame-title" function (:arguments ("title")) nil [305831 305997])
            ("org--line-empty-p" function (:arguments ("n")) nil [306048 306320])
            ("org-previous-line-empty-p" function nil nil [306322 306472])
            ("org-next-line-empty-p" function nil nil [306474 306620])
            ("org-insert-heading" function
               (:user-visible-flag t
                :arguments ("arg" "invisible-ok" "top"))
                nil [306622 312987])
            ("org-N-empty-lines-before-current" function (:arguments ("N")) nil [312989 313356])
            ("org-get-heading" function (:arguments ("no-tags" "no-todo")) nil [313358 314117])
            ("orgstruct-mode" variable nil nil [314119 314142])
            ("org-heading-components" function nil nil [314162 315151])
            ("org-get-entry" function nil nil [315153 315342])
            ("org-edit-headline" function
               (:user-visible-flag t
                :arguments ("heading"))
                nil [315344 315985])
            ("org-insert-heading-after-current" function (:user-visible-flag t) nil [315987 316213])
            ("org-insert-heading-respect-content" function
               (:user-visible-flag t
                :arguments ("invisible-ok"))
                nil [316215 316410])
            ("org-insert-todo-heading-respect-content" function
               (:user-visible-flag t
                :arguments ("force-state"))
                nil [316412 316620])
            ("org-insert-todo-heading" function
               (:user-visible-flag t
                :arguments ("arg" "force-heading"))
                nil [316622 317993])
            ("org-insert-subheading" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [317995 318262])
            ("org-insert-todo-subheading" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [318264 318571])
            ("org-after-demote-entry-hook" variable nil nil [318601 318809])
            ("org-after-promote-entry-hook" variable nil nil [318811 319022])
            ("org-promote-subtree" function (:user-visible-flag t) nil [319024 319238])
            ("org-demote-subtree" function (:user-visible-flag t) nil [319240 319463])
            ("org-do-promote" function (:user-visible-flag t) nil [319465 319812])
            ("org-do-demote" function (:user-visible-flag t) nil [319814 320157])
            ("org-fix-position-after-promote" function nil nil [320159 320580])
            ("org-current-level" function nil nil [320582 320983])
            ("org-get-previous-line-level" function nil nil [320985 321340])
            ("org-reduced-level" function (:arguments ("l")) nil [321342 321560])
            ("org-level-increment" function nil nil [321562 321776])
            ("org-get-valid-level" function (:arguments ("level" "change")) nil [321778 322362])
            ("org-promote" function nil nil [322364 323226])
            ("org-demote" function nil nil [323228 323845])
            ("org-cycle-level" function (:user-visible-flag t) nil [323847 325363])
            ("org-map-tree" function (:arguments ("fun")) nil [325365 325688])
            ("org-map-region" function (:arguments ("fun" "beg" "end")) nil [325690 326101])
            ("org-fixup-indentation" function (:arguments ("diff")) nil [326103 330100])
            ("org-convert-to-odd-levels" function (:user-visible-flag t) nil [330102 330679])
            ("org-convert-to-oddeven-levels" function (:user-visible-flag t) nil [330681 331670])
            ("org-tr-level" function (:arguments ("n")) nil [331672 331766])
            ("org-move-subtree-up" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [331827 332017])
            ("org-move-subtree-down" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [332019 334758])
            ("org-subtree-clip" variable nil nil [334760 334980])
            ("org-subtree-clip-folded" variable nil nil [334982 335108])
            ("org-cut-subtree" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [335110 335363])
            ("org-copy-subtree" function
               (:user-visible-flag t
                :arguments ("n" "cut" "force-store-markers" "nosubtrees"))
                nil [335365 336982])
            ("org-paste-subtree" function
               (:user-visible-flag t
                :arguments ("level" "tree" "for-yank" "remove"))
                nil [336984 341207])
            ("org-kill-is-subtree-p" function (:arguments ("txt")) nil [341209 342217])
            ("org-markers-to-move" variable nil nil [342219 342408])
            ("org-save-markers-in-region" function (:arguments ("beg" "end")) nil [342410 343053])
            ("org-check-and-save-marker" function (:arguments ("marker" "beg" "end")) nil [343055 343391])
            ("org-reinstall-markers-in-region" function (:arguments ("beg")) nil [343393 343615])
            ("org-narrow-to-subtree" function (:user-visible-flag t) nil [343617 343968])
            ("org-narrow-to-block" function (:user-visible-flag t) nil [343970 344268])
            ("org-clone-subtree-with-time-shift" function
               (:user-visible-flag t
                :arguments ("n" "shift"))
                nil [344270 348562])
            ("org-sort" function
               (:user-visible-flag t
                :arguments ("with-case"))
                nil [348585 348970])
            ("org-sort-remove-invisible" function (:arguments ("s")) nil [348972 349481])
            ("org-priority-regexp" variable nil nil [349483 349511])
            ("org-after-sorting-entries-or-items-hook" variable nil nil [349541 349860])
            ("org-sort-entries" function
               (:user-visible-flag t
                :arguments ("with-case" "sorting-type" "getkey-func" "compare-func" "property" "interactive?"))
                nil [349862 358332])
            ("orgstruct-heading-prefix-regexp" variable nil nil [359315 359525])
            ("orgstruct-setup-hook" variable nil nil [359610 359775])
            ("orgstruct-initialized" variable nil nil [359777 359811])
            ("org-local-vars" variable nil nil [359813 359898])
            ("define-minor-mode" code nil nil [359915 360513])
            ("turn-on-orgstruct" function nil nil [360530 360625])
            ("defvar-local" code nil nil [360627 360722])
            ("defvar-local" code nil nil [360723 360753])
            ("orgstruct++-mode" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [360754 361891])
            ("turn-on-orgstruct++" function nil nil [361908 362009])
            ("orgstruct-error" function (:user-visible-flag t) nil [362011 362247])
            ("orgstruct-setup" function nil nil [362249 364264])
            ("orgstruct-make-binding" function (:arguments ("fun" "key" "disable-when-heading-prefix")) nil [364266 367134])
            ("org-contextualize-keys" function (:arguments ("alist" "contexts")) nil [367136 368603])
            ("org-contextualize-validate-key" function (:arguments ("key" "contexts")) nil [368605 369519])
            ("org-context-p" function (:arguments ("contexts")) nil [369521 370066])
            ("org-unique-local-variables" variable
               (:constant-flag t
                :default-value (quote (org-element--cache org-element--cache-objects org-element--cache-sync-keys org-element--cache-sync-requests org-element--cache-sync-timer)))
                nil [370068 370338])
            ("org-get-local-variables" function nil nil [370340 370910])
            ("org-clone-local-variables" function (:arguments ("from-buffer" "regexp")) nil [370912 371370])
            ("org-run-like-in-org-mode" function (:arguments ("cmd")) nil [371387 372024])
            ("org-get-category" function (:arguments ("pos" "force-refresh")) nil [372026 372376])
            ("org-refresh-properties" function (:arguments ("dprop" "tprop")) nil [372402 373397])
            ("org-refresh-property" function (:arguments ("tprop" "p" "inherit")) nil [373399 374140])
            ("org-refresh-category-properties" function nil nil [374142 375626])
            ("org-refresh-stats-properties" function nil nil [375628 376299])
            ("org-refresh-effort-properties" function nil nil [376301 376502])
            ("org-link-expand-abbrev" function (:arguments ("link")) nil [376545 377348])
            ("org-insert-link-history" variable nil nil [377383 377485])
            ("org-stored-links" variable nil nil [377487 377569])
            ("org-store-link-plist" variable nil nil [377571 377684])
            ("org-store-link-functions" function nil nil [377686 378893])
            ("org-agenda-buffer-name" variable nil nil [378895 378926])
            ("org-id-link-to-org-use-id" variable nil nil [378954 378988])
            ("org-store-link" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [379028 387319])
            ("org-store-link-props" function (:arguments ("plist")) nil [387321 388491])
            ("org-add-link-props" function (:arguments ("plist")) nil [388493 388752])
            ("org-email-link-description" function (:arguments ("fmt")) nil [388754 389870])
            ("org-make-org-heading-search-string" function (:arguments ("string")) nil [389872 390675])
            ("org-make-link-string" function (:arguments ("link" "description")) nil [390677 391678])
            ("org-link-escape-chars" variable
               (:constant-flag t
                :default-value (quote (32 91 93 37)))
                nil [391680 391881])
            ("org-link-escape" function (:arguments ("text" "table" "merge")) nil [391883 392702])
            ("org-link-unescape" function (:arguments ("str")) nil [392704 393026])
            ("org-link-unescape-compound" function (:arguments ("hex")) nil [393028 394103])
            ("org-link-unescape-single-byte-sequence" function (:arguments ("hex")) nil [394105 394335])
            ("org-xor" function (:arguments ("a" "b")) nil [394337 394395])
            ("org-fixup-message-id-for-http" function (:arguments ("s")) nil [394397 394882])
            ("org-link-prettify" function (:arguments ("link")) nil [394884 395211])
            ("org-insert-link-global" function (:user-visible-flag t) nil [395228 395459])
            ("org-insert-all-links" function
               (:user-visible-flag t
                :arguments ("arg" "pre" "post"))
                nil [395461 396253])
            ("org-insert-last-stored-link" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [396255 396408])
            ("org-link-fontify-links-to-this-file" function nil nil [396410 397170])
            ("org--links-history" variable nil nil [397172 397203])
            ("org-insert-link" function
               (:user-visible-flag t
                :arguments ("complete-file" "link-location" "default-description"))
                nil [397204 405176])
            ("org-link-try-special-completion" function (:arguments ("type")) nil [405178 405456])
            ("org-file-complete-link" function (:arguments ("arg")) nil [405458 406147])
            ("org-completing-read" function (:arguments ("args")) nil [406149 406645])
            ("org-link-search-failed" variable nil nil [406677 406712])
            ("org-open-link-functions" variable nil nil [406714 407527])
            ("org-next-link" function
               (:user-visible-flag t
                :arguments ("search-backward"))
                nil [407529 408454])
            ("org-previous-link" function (:user-visible-flag t) nil [408456 408611])
            ("org-translate-link" function (:arguments ("s")) nil [408613 408828])
            ("org-translate-link-from-planner" function (:arguments ("type" "path")) nil [408830 409771])
            ("org-find-file-at-mouse" function
               (:user-visible-flag t
                :arguments ("ev"))
                nil [409773 409919])
            ("org-open-at-mouse" function
               (:user-visible-flag t
                :arguments ("ev"))
                nil [409921 410210])
            ("org-window-config-before-follow-link" variable nil nil [410212 410368])
            ("org-open-at-point-global" function (:user-visible-flag t) nil [410385 410989])
            ("org-open-link-from-string" function
               (:user-visible-flag t
                :arguments ("s" "arg" "reference-buffer"))
                nil [411006 411539])
            ("org-open-at-point-functions" variable nil nil [411541 411790])
            ("org-link-search-inhibit-query" variable nil nil [411792 411834])
            ("clean-buffer-list-kill-buffer-names" variable nil nil [411835 411879])
            ("org--open-doi-link" function (:arguments ("path")) nil [411904 412079])
            ("org--open-elisp-link" function (:arguments ("path")) nil [412081 412684])
            ("org--open-help-link" function (:arguments ("path")) nil [412686 413004])
            ("org--open-shell-link" function (:arguments ("path")) nil [413006 413762])
            ("org-open-at-point" function
               (:user-visible-flag t
                :arguments ("arg" "reference-buffer"))
                nil [413764 420962])
            ("org-offer-links-in-entry" function (:arguments ("buffer" "marker" "nth" "zero")) nil [420964 423121])
            ("org-open-file-with-system" function (:arguments ("path")) nil [423252 423381])
            ("org-open-file-with-emacs" function (:arguments ("path")) nil [423382 423483])
            ("org-create-file-search-functions" variable nil nil [423503 424590])
            ("org-execute-file-search-functions" variable nil nil [424592 425644])
            ("org-search-radio-target" function (:arguments ("target")) nil [425646 426362])
            ("org-link-search" function (:arguments ("s" "avoid-pos" "stealth")) nil [426364 432842])
            ("org-get-buffer-for-internal-link" function (:arguments ("buffer")) nil [432844 433494])
            ("org-do-occur" function (:arguments ("regexp" "cleanup")) nil [433496 434219])
            ("org-mark-ring" variable nil nil [434256 434336])
            ("org-mark-ring-last-goto" variable nil nil [434337 434425])
            ("setq" code nil nil [434453 434505])
            ("dotimes" code nil nil [434534 434605])
            ("setcdr" code nil nil [434606 434678])
            ("org-mark-ring-push" function
               (:user-visible-flag t
                :arguments ("pos" "buffer"))
                nil [434680 435139])
            ("org-mark-ring-goto" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [435141 435888])
            ("org-add-angle-brackets" function (:arguments ("s")) nil [435890 436057])
            ("org-agenda-buffer-tmp-name" variable nil nil [436089 436124])
            ("org-agenda-start-on-weekday" variable nil nil [436125 436161])
            ("org-follow-timestamp-link" function nil nil [436162 436994])
            ("declare-function" code nil nil [437022 437096])
            ("declare-function" code nil nil [437097 437158])
            ("declare-function" code nil nil [437159 437246])
            ("org-wait" variable nil nil [437247 437268])
            ("org-open-file" function (:arguments ("path" "in-emacs" "line" "search")) nil [437269 443175])
            ("org-file-apps-entry-match-against-dlink-p" function (:arguments ("entry")) nil [443177 443841])
            ("org-default-apps" function nil nil [443843 444111])
            ("org-apps-regexp-alist" function (:arguments ("list" "add-auto-mode")) nil [444113 444768])
            ("ange-ftp-name-format" variable nil nil [444770 444799])
            ("org-file-remote-p" function (:arguments ("file")) nil [444800 445319])
            ("org-get-org-file" function nil nil [445337 445608])
            ("org-notes-order-reversed-p" function nil nil [445610 446008])
            ("org-refile-target-table" variable nil nil [446010 446103])
            ("org-agenda-new-buffers" variable nil nil [446105 446183])
            ("org-refile-cache" variable nil nil [446185 446244])
            ("org-refile-markers" variable nil nil [446246 446332])
            ("org-refile-marker" function (:arguments ("pos")) nil [446334 446567])
            ("org-refile-cache-clear" function nil nil [446569 446818])
            ("org-refile-cache-check-set" function (:arguments ("set")) nil [446820 447247])
            ("org-refile-cache-put" function (:arguments ("set" "identifiers")) nil [447249 447541])
            ("org-refile-cache-get" function (:arguments ("identifiers")) nil [447543 447916])
            ("org-outline-path-cache" variable nil nil [447918 448205])
            ("org-refile-get-targets" function (:arguments ("default-buffer")) nil [448207 451484])
            ("org-protect-slash" function (:arguments ("s")) nil [451486 451562])
            ("org--get-outline-path-1" function (:arguments ("use-cache")) nil [451564 452754])
            ("org-get-outline-path" function (:arguments ("with-self" "use-cache")) nil [452756 453719])
            ("org-format-outline-path" function (:arguments ("path" "width" "prefix" "separator")) nil [453721 454850])
            ("org-display-outline-path" function
               (:user-visible-flag t
                :arguments ("file" "current" "separator" "just-return-string"))
                nil [454852 455930])
            ("org-refile-history" variable nil nil [455932 456000])
            ("org-after-refile-insert-hook" variable nil nil [456002 456203])
            ("org-capture-last-stored-marker" variable nil nil [456205 456244])
            ("org-refile-keep" variable nil nil [456245 456333])
            ("org-copy" function (:user-visible-flag t) nil [456335 456478])
            ("org-refile" function
               (:user-visible-flag t
                :arguments ("arg" "default-buffer" "rfloc" "msg"))
                nil [456480 462927])
            ("org-refile-goto-last-stored" function (:user-visible-flag t) nil [462929 463162])
            ("org-refile--get-location" function (:arguments ("refloc" "tbl")) nil [463164 463530])
            ("org-refile-get-location" function (:arguments ("prompt" "default-buffer" "new-nodes")) nil [463532 466224])
            ("declare-function" code nil nil [466226 466275])
            ("org-refile-check-position" function (:arguments ("refile-pointer")) nil [466276 467024])
            ("org-refile-new-child" function (:arguments ("parent-target" "child")) nil [467026 467851])
            ("org-olpath-completing-read" function (:arguments ("prompt" "collection" "args")) nil [467853 468576])
            ("org-find-dblock" function (:arguments ("name")) nil [468599 469018])
            ("org-create-dblock" function (:arguments ("plist")) nil [469020 469610])
            ("org-prepare-dblock" function nil nil [469612 470550])
            ("org-map-dblocks" function (:arguments ("command")) nil [470552 471149])
            ("org-dblock-update" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [471151 471487])
            ("org-update-dblock" function (:user-visible-flag t) nil [471489 472522])
            ("org-beginning-of-dblock" function nil nil [472524 472958])
            ("org-update-all-dblocks" function (:user-visible-flag t) nil [472960 473168])
            ("declare-function" code nil nil [473188 473247])
            ("org-get-export-keywords" function nil nil [473248 473843])
            ("org-options-keywords" variable
               (:constant-flag t
                :default-value (quote ("ARCHIVE:" "AUTHOR:" "BIND:" "CATEGORY:" "COLUMNS:" "CREATOR:" "DATE:" "DESCRIPTION:" "DRAWERS:" "EMAIL:" "EXCLUDE_TAGS:" "FILETAGS:" "INCLUDE:" "INDEX:" "KEYWORDS:" "LANGUAGE:" "MACRO:" "OPTIONS:" "PROPERTY:" "PRIORITIES:" "SELECT_TAGS:" "SEQ_TODO:" "SETUPFILE:" "STARTUP:" "TAGS:" "TITLE:" "TODO:" "TYP_TODO:" "SELECT_TAGS:" "EXCLUDE_TAGS:")))
                nil [473845 474240])
            ("org-structure-template-alist" variable (:default-value (quote (("s" "#+BEGIN_SRC ?

#+END_SRC") ("e" "#+BEGIN_EXAMPLE
?
#+END_EXAMPLE") ("q" "#+BEGIN_QUOTE
?
#+END_QUOTE") ("v" "#+BEGIN_VERSE
?
#+END_VERSE") ("V" "#+BEGIN_VERBATIM
?
#+END_VERBATIM") ("c" "#+BEGIN_CENTER
?
#+END_CENTER") ("l" "#+BEGIN_EXPORT latex
?
#+END_EXPORT") ("L" "#+LaTeX: ") ("h" "#+BEGIN_EXPORT html
?
#+END_EXPORT") ("H" "#+HTML: ") ("a" "#+BEGIN_EXPORT ascii
?
#+END_EXPORT") ("A" "#+ASCII: ") ("i" "#+INDEX: ?") ("I" "#+INCLUDE: %file ?")))) nil [474242 475591])
            ("org-try-structure-completion" function nil nil [475593 476097])
            ("org-complete-expand-structure-template" function (:arguments ("start" "cell")) nil [476099 476877])
            ("org-toggle-comment" function (:user-visible-flag t) nil [476910 477526])
            ("org-last-todo-state-is-todo" variable nil nil [477528 477720])
            ("org-setting-tags" variable nil nil [477722 477751])
            ("org-todo-setup-filter-hook" variable nil nil [477775 477966])
            ("org-todo-get-default-hook" variable nil nil [477968 478179])
            ("org-agenda-headline-snapshot-before-repeat" variable nil nil [478181 478232])
            ("org-current-effective-time" function nil nil [478234 478683])
            ("org-todo-yesterday" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [478685 479055])
            ("org-block-entry-blocking" variable nil nil [479057 479143])
            ("org-cancel-repeater" function (:user-visible-flag t) nil [479145 479682])
            ("org-state" variable nil nil [479684 479702])
            ("org-blocked-by-checkboxes" variable nil nil [479703 479737])
            ("org-todo" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [479738 489767])
            ("org-block-todo-from-children-or-siblings-or-parent" function (:arguments ("change-plist")) nil [489769 492719])
            ("org-track-ordered-property-with-tag" variable nil nil [492754 493595])
            ("org-toggle-ordered-property" function (:user-visible-flag t) nil [493597 494297])
            ("org-block-todo-from-checkboxes" function (:arguments ("change-plist")) nil [494299 495553])
            ("org-entry-blocked-p" function nil nil [495570 495919])
            ("org-update-statistics-cookies" function
               (:user-visible-flag t
                :arguments ("all"))
                nil [495921 497345])
            ("org-entry-property-inherited-from" variable nil nil [497347 497389])
            ("org-update-parent-todo-statistics" function nil nil [497407 501164])
            ("org-after-todo-statistics-hook" variable nil nil [501166 501897])
            ("org-todo-statistics-hook" variable nil nil [501899 502136])
            ("org-todo-trigger-tag-changes" function (:arguments ("state")) nil [502138 502803])
            ("org-local-logging" function (:arguments ("value")) nil [502805 503392])
            ("org-get-todo-sequence-head" function (:arguments ("kwd")) nil [503394 503962])
            ("org-fast-todo-selection" function nil nil [503964 506002])
            ("org-entry-is-todo-p" function nil nil [506004 506088])
            ("org-entry-is-done-p" function nil nil [506090 506170])
            ("org-get-todo-state" function nil nil [506172 506410])
            ("org-at-date-range-p" function
               (:user-visible-flag t
                :arguments ("inactive-ok"))
                nil [506412 507190])
            ("org-get-repeat" function (:arguments ("tagline")) nil [507192 507555])
            ("org-last-changed-timestamp" variable nil nil [507557 507592])
            ("org-last-inserted-timestamp" variable nil nil [507593 507629])
            ("org-log-post-message" variable nil nil [507630 507659])
            ("org-log-note-purpose" variable nil nil [507660 507689])
            ("org-log-note-how" variable nil nil [507690 507719])
            ("org-log-note-extra" variable nil nil [507720 507747])
            ("org-auto-repeat-maybe" function (:arguments ("done-word")) nil [507748 512237])
            ("org-show-todo-tree" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [512239 513254])
            ("org--deadline-or-schedule" function (:arguments ("arg" "type" "time")) nil [513256 516212])
            ("org-deadline" function
               (:user-visible-flag t
                :arguments ("arg" "time"))
                nil [516214 517033])
            ("org-schedule" function
               (:user-visible-flag t
                :arguments ("arg" "time"))
                nil [517035 517857])
            ("org-get-scheduled-time" function (:arguments ("pom" "inherit")) nil [517859 518181])
            ("org-get-deadline-time" function (:arguments ("pom" "inherit")) nil [518183 518497])
            ("org-remove-timestamp-with-keyword" function (:arguments ("keyword")) nil [518499 519166])
            ("org-time-was-given" variable nil nil [519168 519195])
            ("org-end-time-was-given" variable nil nil [519227 519258])
            ("org-at-planning-p" function nil nil [519291 519808])
            ("org-add-planning-info" function (:arguments ("what" "time" "remove")) nil [519810 523393])
            ("org-log-note-marker" variable (:default-value (make-marker)) nil [523395 523504])
            ("org-log-note-purpose" variable nil nil [523505 523538])
            ("org-log-note-state" variable nil nil [523539 523570])
            ("org-log-note-previous-state" variable nil nil [523571 523611])
            ("org-log-note-extra" variable nil nil [523612 523643])
            ("org-log-note-window-configuration" variable nil nil [523644 523690])
            ("org-log-note-return-to" variable (:default-value (make-marker)) nil [523691 523736])
            ("org-log-note-effective-time" variable nil nil [523737 523896])
            ("org-log-post-message" variable nil nil [523898 524022])
            ("org-add-note" function (:user-visible-flag t) nil [524024 524188])
            ("org-log-beginning" function (:arguments ("create")) nil [524190 525681])
            ("org-add-log-setup" function (:arguments ("purpose" "state" "prev-state" "how" "extra")) nil [525683 526318])
            ("org-skip-over-state-notes" function nil nil [526320 527091])
            ("org-add-log-note" function (:arguments ("_purpose")) nil [527093 528750])
            ("org-note-abort" variable nil nil [528752 528779])
            ("org-store-log-note" function nil nil [528801 532510])
            ("org-remove-empty-drawer-at" function (:arguments ("pos")) nil [532512 533128])
            ("org-ts-type" variable nil nil [533130 533154])
            ("org-sparse-tree" function
               (:user-visible-flag t
                :arguments ("arg" "type"))
                nil [533155 535529])
            ("defvar-local" code nil nil [535531 535615])
            ("defvar-local" code nil nil [535616 536175])
            ("org-occur" function
               (:user-visible-flag t
                :arguments ("regexp" "keep-previous" "callback"))
                nil [536177 538136])
            ("org-occur-next-match" function (:arguments ("n" "_reset")) nil [538138 538976])
            ("org-show-context" function (:arguments ("key")) nil [538978 539387])
            ("org-show-set-visibility" function (:arguments ("detail")) nil [539389 540677])
            ("org-reveal-start-hook" variable nil nil [540679 540755])
            ("org-reveal" function
               (:user-visible-flag t
                :arguments ("siblings"))
                nil [540757 541602])
            ("org-highlight-new-match" function (:arguments ("beg" "end")) nil [541604 541883])
            ("org-remove-occur-highlights" function
               (:user-visible-flag t
                :arguments ("_beg" "_end" "noremove"))
                nil [541885 542411])
            ("org-priority-regexp" variable (:default-value ".*?\\(\\[#\\([A-Z0-9]\\)\\] ?\\)") nil [542430 542549])
            ("org-remove-priority-next-time" variable nil nil [542551 542593])
            ("org-priority-up" function (:user-visible-flag t) nil [542595 542705])
            ("org-priority-down" function (:user-visible-flag t) nil [542707 542821])
            ("org-priority" function
               (:user-visible-flag t
                :arguments ("action" "_show"))
                nil [542823 545778])
            ("org-show-priority" function (:user-visible-flag t) nil [545780 546301])
            ("org-get-priority" function (:arguments ("s")) nil [546303 546667])
            ("org-agenda-archives-mode" variable nil nil [546680 546713])
            ("org-map-continue-from" variable nil nil [546714 546873])
            ("org-scanner-tags" variable nil nil [546875 546964])
            ("org-trust-scanner-tags" variable nil nil [546966 547544])
            ("org--matcher-tags-todo-only" variable nil nil [547546 547586])
            ("org-scan-tags" function (:arguments ("action" "matcher" "todo-only" "start-level")) nil [547588 553745])
            ("org-remove-uninherited-tags" function (:arguments ("tags")) nil [553747 554412])
            ("org-match-sparse-tree" function
               (:user-visible-flag t
                :arguments ("todo-only" "match"))
                nil [554414 555069])
            ("defalias" code nil nil [555071 555126])
            ("org-cached-props" variable nil nil [555128 555157])
            ("org-cached-entry-get" function (:arguments ("pom" "property")) nil [555158 555802])
            ("org-global-tags-completion-table" function (:arguments ("files")) nil [555804 556379])
            ("org-make-tags-matcher" function (:arguments ("match")) nil [556381 562095])
            ("org-tags-expand" function (:arguments ("match" "single-as-list" "downcased" "tags-already-expanded")) nil [562097 567115])
            ("org-op-to-function" function (:arguments ("op" "stringp")) nil [567117 567661])
            ("org<>" function (:arguments ("a" "b")) nil [567663 567696])
            ("org-string<=" function (:arguments ("a" "b")) nil [567697 567756])
            ("org-string>=" function (:arguments ("a" "b")) nil [567757 567803])
            ("org-string>" function (:arguments ("a" "b")) nil [567804 567876])
            ("org-string<>" function (:arguments ("a" "b")) nil [567877 567923])
            ("org-time=" function (:arguments ("a" "b")) nil [567924 568017])
            ("org-time<" function (:arguments ("a" "b")) nil [568018 568111])
            ("org-time<=" function (:arguments ("a" "b")) nil [568112 568205])
            ("org-time>" function (:arguments ("a" "b")) nil [568206 568299])
            ("org-time>=" function (:arguments ("a" "b")) nil [568300 568393])
            ("org-time<>" function (:arguments ("a" "b")) nil [568394 568487])
            ("org-2ft" function (:arguments ("s")) nil [568488 568852])
            ("org-time-today" function nil nil [568854 569104])
            ("org-matcher-time" function (:arguments ("s")) nil [569106 569689])
            ("org-match-any-p" function (:arguments ("re" "list")) nil [569691 569842])
            ("org-add-colon-after-tag-completion" variable nil nil [569844 569891])
            ("org-tags-overlay" variable (:default-value (make-overlay 1 1)) nil [569921 569965])
            ("delete-overlay" code nil nil [569966 569999])
            ("org-get-local-tags-at" function (:arguments ("pos")) nil [570001 570133])
            ("org-get-local-tags" function nil nil [570135 570251])
            ("org-get-tags-at" function
               (:user-visible-flag t
                :arguments ("pos" "local"))
                nil [570253 571734])
            ("org-add-prop-inherited" function (:arguments ("s")) nil [571736 571828])
            ("org-toggle-tag" function (:arguments ("tag" "onoff")) nil [571830 572845])
            ("org--align-tags-here" function (:arguments ("to-col")) nil [572847 573551])
            ("org-set-tags-command" function
               (:user-visible-flag t
                :arguments ("arg" "just-align"))
                nil [573553 573958])
            ("org-set-tags-to" function
               (:user-visible-flag t
                :arguments ("data"))
                nil [573960 574979])
            ("org-align-all-tags" function (:user-visible-flag t) nil [574981 575230])
            ("org-indent-indentation-per-level" variable nil nil [575232 575273])
            ("org-set-tags" function
               (:user-visible-flag t
                :arguments ("arg" "just-align"))
                nil [575274 579580])
            ("org-change-tag-in-region" function
               (:user-visible-flag t
                :arguments ("beg" "end" "tag" "off"))
                nil [579582 581131])
            ("org-tags-completion-function" function (:arguments ("string" "_predicate" "flag")) nil [581133 581948])
            ("org-fast-tag-insert" function (:arguments ("kwd" "tags" "face" "end")) nil [581950 582206])
            ("org-fast-tag-show-exit" function (:arguments ("flag")) nil [582208 582549])
            ("org-set-current-tags-overlay" function (:arguments ("current" "prefix")) nil [582551 582853])
            ("org-last-tag-selection-key" variable nil nil [582855 582894])
            ("org-fast-tag-selection" function (:arguments ("current" "inherited" "table" "todo-table")) nil [582895 589964])
            ("org-get-tags-string" function nil nil [589966 590263])
            ("org-get-tags" function nil nil [590265 590395])
            ("org-get-buffer-tags" function nil nil [590397 590862])
            ("org-agenda-skip-comment-trees" variable nil nil [590886 590924])
            ("org-agenda-skip-function" variable nil nil [590925 590958])
            ("org-map-entries" function (:arguments ("func" "match" "scope" "skip")) nil [590959 596453])
            ("org-special-properties" variable
               (:constant-flag t
                :default-value (quote ("ALLTAGS" "BLOCKED" "CLOCKSUM" "CLOCKSUM_T" "CLOSED" "DEADLINE" "FILE" "ITEM" "PRIORITY" "SCHEDULED" "TAGS" "TIMESTAMP" "TIMESTAMP_IA" "TODO")))
                nil [596475 596794])
            ("org-default-properties" variable
               (:constant-flag t
                :default-value (quote ("ARCHIVE" "CATEGORY" "SUMMARY" "DESCRIPTION" "CUSTOM_ID" "LOCATION" "LOGGING" "COLUMNS" "VISIBILITY" "TABLE_EXPORT_FORMAT" "TABLE_EXPORT_FILE" "EXPORT_OPTIONS" "EXPORT_TEXT" "EXPORT_FILE_NAME" "EXPORT_TITLE" "EXPORT_AUTHOR" "EXPORT_DATE" "UNNUMBERED" "ORDERED" "NOBLOCKING" "COOKIE_DATA" "LOG_INTO_DRAWER" "REPEAT_TO_STATE" "CLOCK_MODELINE_TOTAL" "STYLE" "HTML_CONTAINER_CLASS")))
                nil [596796 597372])
            ("org--valid-property-p" function (:arguments ("property")) nil [597374 597549])
            ("org--update-property-plist" function (:arguments ("key" "val" "props")) nil [597551 597963])
            ("org-get-property-block" function (:arguments ("beg" "force")) nil [597965 599027])
            ("org-at-property-p" function nil nil [599029 599414])
            ("org-property-action" function (:user-visible-flag t) nil [599416 599982])
            ("org-inc-effort" function (:user-visible-flag t) nil [599984 600119])
            ("org-clock-effort" variable nil nil [600121 600146])
            ("org-clock-current-task" variable nil nil [600180 600211])
            ("org-set-effort" function
               (:user-visible-flag t
                :arguments ("value" "increment"))
                nil [600239 602106])
            ("org-entry-properties" function (:arguments ("pom" "which")) nil [602108 610112])
            ("org--property-local-values" function (:arguments ("property" "literal-nil")) nil [610114 611094])
            ("org--property-global-value" function (:arguments ("property" "literal-nil")) nil [611096 611591])
            ("org-entry-get" function (:arguments ("pom" "property" "inherit" "literal-nil")) nil [611593 613075])
            ("org-property-or-variable-value" function (:arguments ("var" "inherit")) nil [613077 613438])
            ("org-entry-delete" function (:arguments ("pom" "property")) nil [613440 614239])
            ("org-entry-add-to-multivalued-property" function (:arguments ("pom" "property" "value")) nil [614385 614833])
            ("org-entry-remove-from-multivalued-property" function (:arguments ("pom" "property" "value")) nil [614835 615280])
            ("org-entry-member-in-multivalued-property" function (:arguments ("pom" "property" "value")) nil [615282 615603])
            ("org-entry-get-multivalued-property" function (:arguments ("pom" "property")) nil [615605 615866])
            ("org-entry-put-multivalued-property" function (:arguments ("pom" "property" "values")) nil [615868 616295])
            ("org-entry-protect-space" function (:arguments ("s")) nil [616297 616525])
            ("org-entry-restore-space" function (:arguments ("s")) nil [616527 616755])
            ("org-entry-property-inherited-from" variable (:default-value (make-marker)) nil [616757 617152])
            ("org-entry-get-with-inheritance" function (:arguments ("property" "literal-nil")) nil [617154 618345])
            ("org-property-changed-functions" variable nil nil [618347 618540])
            ("org-entry-put" function (:arguments ("pom" "property" "value")) nil [618542 621597])
            ("org-buffer-property-keys" function (:arguments ("specials" "defaults" "columns" "ignore-malformed")) nil [621599 624325])
            ("org-property-values" function (:arguments ("key")) nil [624327 624662])
            ("org-insert-property-drawer" function nil nil [624664 625451])
            ("org-insert-drawer" function
               (:user-visible-flag t
                :arguments ("arg" "drawer"))
                nil [625453 627507])
            ("org-property-set-functions-alist" variable nil nil [627509 627744])
            ("org-set-property-function" function (:arguments ("property")) nil [627746 628004])
            ("org-read-property-value" function (:arguments ("property")) nil [628006 628666])
            ("org-last-set-property" variable nil nil [628668 628702])
            ("org-last-set-property-value" variable nil nil [628703 628743])
            ("org-read-property-name" function nil nil [628744 629165])
            ("org-set-property-and-value" function
               (:user-visible-flag t
                :arguments ("use-last"))
                nil [629167 629796])
            ("org-set-property" function
               (:user-visible-flag t
                :arguments ("property" "value"))
                nil [629798 631087])
            ("org-find-property" function (:arguments ("property" "value")) nil [631089 631861])
            ("org-delete-property" function
               (:user-visible-flag t
                :arguments ("property"))
                nil [631863 632456])
            ("org-delete-property-globally" function
               (:user-visible-flag t
                :arguments ("property"))
                nil [632458 633094])
            ("org-columns-current-fmt-compiled" variable nil nil [633096 633137])
            ("org-compute-property-at-point" function (:user-visible-flag t) nil [633167 633717])
            ("org-property-allowed-value-functions" variable nil nil [633719 634179])
            ("org-property-get-allowed-values" function (:arguments ("pom" "property" "table")) nil [634181 635403])
            ("org-property-previous-allowed-value" function
               (:user-visible-flag t
                :arguments ("_previous"))
                nil [635405 635580])
            ("org-property-next-allowed-value" function
               (:user-visible-flag t
                :arguments ("previous"))
                nil [635582 636992])
            ("org-find-olp" function (:arguments ("path" "this-buffer")) nil [636994 638534])
            ("org-find-exact-headline-in-buffer" function (:arguments ("heading" "buffer" "pos-only")) nil [638536 639251])
            ("org-find-exact-heading-in-directory" function (:arguments ("heading" "dir")) nil [639253 639958])
            ("org-find-entry-with-id" function
               (:user-visible-flag t
                :arguments ("ident"))
                nil [639960 640554])
            ("org-last-changed-timestamp" variable nil nil [640573 640612])
            ("org-last-inserted-timestamp" variable nil nil [640613 640716])
            ("org-ts-what" variable nil nil [640717 640737])
            ("org-time-stamp" function
               (:user-visible-flag t
                :arguments ("arg" "inactive"))
                nil [640770 643421])
            ("org-get-compact-tod" function (:arguments ("s")) nil [643502 644136])
            ("org-time-stamp-inactive" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [644138 644553])
            ("org-date-ovl" variable (:default-value (make-overlay 1 1)) nil [644555 644595])
            ("overlay-put" code nil nil [644596 644647])
            ("delete-overlay" code nil nil [644648 644677])
            ("org-ans1" variable nil nil [644679 644696])
            ("org-ans2" variable nil nil [644728 644745])
            ("org-plain-time-of-day-regexp" variable nil nil [644778 644815])
            ("org-overriding-default-time" variable nil nil [644833 644873])
            ("org-read-date-overlay" variable nil nil [644895 644929])
            ("org-dcst" variable nil nil [644930 644951])
            ("org-read-date-history" variable nil nil [644973 645007])
            ("org-read-date-final-answer" variable nil nil [645008 645047])
            ("org-read-date-analyze-futurep" variable nil nil [645048 645090])
            ("org-read-date-analyze-forced-year" variable nil nil [645091 645137])
            ("org-read-date-inactive" variable nil nil [645138 645169])
            ("org-read-date-minibuffer-local-map" variable (:default-value (let* ((map (make-sparse-keymap))) (set-keymap-parent map minibuffer-local-map) (org-defkey map (kbd ".") (lambda nil (interactive) (if (looking-back "^[^:]+: " (let ((inhibit-field-text-motion t)) (line-beginning-position))) (org-eval-in-calendar (quote (calendar-goto-today))) (insert ".")))) (org-defkey map (kbd "C-.") (lambda nil (interactive) (org-eval-in-calendar (quote (calendar-goto-today))))) (org-defkey map [(meta shift left)] (lambda nil (interactive) (org-eval-in-calendar (quote (calendar-backward-month 1))))) (org-defkey map [(meta shift right)] (lambda nil (interactive) (org-eval-in-calendar (quote (calendar-forward-month 1))))) (org-defkey map [(meta shift up)] (lambda nil (interactive) (org-eval-in-calendar (quote (calendar-backward-year 1))))) (org-defkey map [(meta shift down)] (lambda nil (interactive) (org-eval-in-calendar (quote (calendar-forward-year 1))))) (org-defkey map [27 (shift left)] (lambda nil (interactive) (org-eval-in-calendar (quote (calendar-backward-month 1))))) (org-defkey map [27 (shift right)] (lambda nil (interactive) (org-eval-in-calendar (quote (calendar-forward-month 1))))) (org-defkey map [27 (shift up)] (lambda nil (interactive) (org-eval-in-calendar (quote (calendar-backward-year 1))))) (org-defkey map [27 (shift down)] (lambda nil (interactive) (org-eval-in-calendar (quote (calendar-forward-year 1))))) (org-defkey map [(shift up)] (lambda nil (interactive) (org-eval-in-calendar (quote (calendar-backward-week 1))))) (org-defkey map [(shift down)] (lambda nil (interactive) (org-eval-in-calendar (quote (calendar-forward-week 1))))) (org-defkey map [(shift left)] (lambda nil (interactive) (org-eval-in-calendar (quote (calendar-backward-day 1))))) (org-defkey map [(shift right)] (lambda nil (interactive) (org-eval-in-calendar (quote (calendar-forward-day 1))))) (org-defkey map "!" (lambda nil (interactive) (org-eval-in-calendar (quote (diary-view-entries))) (message ""))) (org-defkey map ">" (lambda nil (interactive) (org-eval-in-calendar (quote (calendar-scroll-left 1))))) (org-defkey map "<" (lambda nil (interactive) (org-eval-in-calendar (quote (calendar-scroll-right 1))))) (org-defkey map "" (lambda nil (interactive) (org-eval-in-calendar (quote (calendar-scroll-left-three-months 1))))) (org-defkey map "\366" (lambda nil (interactive) (org-eval-in-calendar (quote (calendar-scroll-right-three-months 1))))) map)) nil [645171 648368])
            ("org-def" variable nil nil [648370 648386])
            ("org-defdecode" variable nil nil [648387 648409])
            ("org-with-time" variable nil nil [648410 648432])
            ("calendar-setup" variable nil nil [648434 648457])
            ("org-read-date" function (:arguments ("with-time" "to-time" "from-string" "prompt" "default-time" "default-input" "inactive")) nil [648482 655115])
            ("org-read-date-display" function nil nil [655117 656583])
            ("org-read-date-analyze" function (:arguments ("ans" "def" "defdecode")) nil [656585 665686])
            ("parse-time-weekdays" variable nil nil [665688 665716])
            ("org-read-date-get-relative" function (:arguments ("s" "today" "default")) nil [665717 667257])
            ("org-order-calendar-date-args" function (:arguments ("arg1" "arg2" "arg3")) nil [667259 667724])
            ("org-eval-in-calendar" function (:arguments ("form" "keepdate")) nil [667726 668408])
            ("org-calendar-select" function (:user-visible-flag t) nil [668410 668865])
            ("org-insert-time-stamp" function (:arguments ("time" "with-hm" "inactive" "pre" "post" "extra")) nil [668867 670102])
            ("org-toggle-time-stamp-overlays" function (:user-visible-flag t) nil [670104 670858])
            ("org-display-custom-time" function (:arguments ("beg" "end")) nil [670860 671793])
            ("org-fix-decoded-time" function (:arguments ("time")) nil [671795 671996])
            ("org-time-stamp-to-now" function (:arguments ("timestamp-string" "seconds")) nil [671998 672342])
            ("org-deadline-close-p" function (:arguments ("timestamp-string" "ndays")) nil [672344 672624])
            ("org-get-wdays" function (:arguments ("ts" "delay" "zero-delay")) nil [672626 673574])
            ("org-calendar-select-mouse" function
               (:user-visible-flag t
                :arguments ("ev"))
                nil [673576 674066])
            ("org-check-deadlines" function
               (:user-visible-flag t
                :arguments ("ndays"))
                nil [674068 674931])
            ("org-re-timestamp" function (:arguments ("type")) nil [674933 675729])
            ("org-check-before-date" function
               (:user-visible-flag t
                :arguments ("d"))
                nil [675731 676424])
            ("org-check-after-date" function
               (:user-visible-flag t
                :arguments ("d"))
                nil [676426 677118])
            ("org-check-dates-range" function
               (:user-visible-flag t
                :arguments ("start-date" "end-date"))
                nil [677120 678025])
            ("org-evaluate-time-range" function
               (:user-visible-flag t
                :arguments ("to-buffer"))
                nil [678027 680325])
            ("org-make-tdiff-string" function (:arguments ("y" "d" "h" "m")) nil [680327 680833])
            ("org-time-string-to-time" function (:arguments ("s" "buffer" "pos")) nil [680835 681198])
            ("org-time-string-to-seconds" function (:arguments ("s")) nil [681200 681336])
            ("org-define-error" code nil nil [681338 681410])
            ("org-time-string-to-absolute" function (:arguments ("s" "daynr" "prefer" "buffer" "pos")) nil [681412 682665])
            ("org-days-to-iso-week" function (:arguments ("days")) nil [682667 682797])
            ("org-small-year-to-year" function (:arguments ("year")) nil [682799 683333])
            ("org-time-from-absolute" function (:arguments ("d")) nil [683335 683606])
            ("org-agenda-current-date" variable nil nil [683608 683640])
            ("org-calendar-holiday" function nil nil [683641 683856])
            ("org-diary-sexp-entry" function (:arguments ("sexp" "entry" "d")) nil [683858 684634])
            ("org-diary-to-ical-string" function (:arguments ("frombuf")) nil [684636 685426])
            ("org-closest-date" function (:arguments ("start" "current" "prefer")) nil [685428 688774])
            ("org-date-to-gregorian" function (:arguments ("d")) nil [688776 689131])
            ("org-parse-time-string" function (:arguments ("s" "nodefault")) nil [689133 689978])
            ("org-timestamp-up" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [689980 690302])
            ("org-timestamp-down" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [690304 690632])
            ("org-timestamp-up-day" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [690634 690943])
            ("org-timestamp-down-day" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [690945 691262])
            ("org-at-timestamp-p" function
               (:user-visible-flag t
                :arguments ("inactive-ok"))
                nil [691264 692616])
            ("org-toggle-timestamp-type" function (:user-visible-flag t) nil [692618 693135])
            ("org-at-clock-log-p" function nil nil [693137 693286])
            ("org-clock-history" variable nil nil [693288 693314])
            ("org-clock-adjust-closest" variable nil nil [693361 693398])
            ("org-timestamp-change" function (:arguments ("n" "what" "updown" "suppress-tmp-delay")) nil [693434 699512])
            ("org-modify-ts-extra" function (:arguments ("s" "pos" "n" "dm")) nil [699514 701036])
            ("org-recenter-calendar" function (:arguments ("d")) nil [701038 701344])
            ("org-goto-calendar" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [701346 702082])
            ("org-get-date-from-calendar" function nil nil [702084 702277])
            ("org-date-from-calendar" function (:user-visible-flag t) nil [702279 702698])
            ("org-effort-durations" variable (:default-value (\` (("min" . 1) ("h" . 60) ("d" \, (* 60 8)) ("w" \, (* 60 8 5)) ("m" \, (* 60 8 5 4)) ("y" \, (* 60 8 5 40))))) nil [702700 703393])
            ("org-minutes-to-clocksum-string" function (:arguments ("m")) nil [703395 707687])
            ("org-hours-to-clocksum-string" function (:arguments ("n")) nil [707689 707773])
            ("org-hh:mm-string-to-minutes" function (:arguments ("s")) nil [707775 708336])
            ("org-image-actual-width" variable (:default-value t) nil [708338 709246])
            ("org-agenda-inhibit-startup" variable nil nil [709248 709555])
            ("org-agenda-ignore-properties" variable nil nil [709557 710168])
            ("org-duration-string-to-minutes" function (:arguments ("s" "output-to-string")) nil [710170 710948])
            ("org-save-all-org-buffers" function (:user-visible-flag t) nil [710962 711265])
            ("org-revert-all-org-buffers" function (:user-visible-flag t) nil [711267 712253])
            ("org-switchb" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [712289 712805])
            ("org-buffer-list" function (:arguments ("predicate" "exclude-tmp")) nil [712807 714041])
            ("org-agenda-files" function (:arguments ("unrestricted" "archives")) nil [714043 715171])
            ("org-agenda-file-p" function (:arguments ("file")) nil [715173 715497])
            ("org-edit-agenda-file-list" function (:user-visible-flag t) nil [715499 716421])
            ("org-store-new-agenda-file-list" function (:arguments ("list")) nil [716423 717084])
            ("org-read-agenda-file-list" function (:arguments ("pair-with-expansion")) nil [717086 717804])
            ("org-cycle-agenda-files" function (:user-visible-flag t) nil [717821 718452])
            ("org-agenda-file-to-front" function
               (:user-visible-flag t
                :arguments ("to-end"))
                nil [718454 719478])
            ("org-remove-file" function
               (:user-visible-flag t
                :arguments ("file"))
                nil [719480 720380])
            ("org-file-menu-entry" function (:arguments ("file")) nil [720382 720457])
            ("org-check-agenda-file" function (:arguments ("file")) nil [720459 720856])
            ("org-get-agenda-file-buffer" function (:arguments ("file")) nil [720858 721270])
            ("org-release-buffers" function (:arguments ("blist")) nil [721272 721743])
            ("org-agenda-prepare-buffers" function
               (:user-visible-flag t
                :arguments ("files"))
                nil [721745 724505])
            ("org-cdlatex-mode-map" variable (:default-value (make-sparse-keymap)) nil [724534 724629])
            ("org-defkey" code nil nil [724631 724698])
            ("org-defkey" code nil nil [724699 724766])
            ("org-defkey" code nil nil [724767 724825])
            ("org-defkey" code nil nil [724826 724888])
            ("org-defkey" code nil nil [724889 724962])
            ("org-cdlatex-texmathp-advice-is-done" variable nil nil [724964 725084])
            ("define-minor-mode" code nil nil [725086 726292])
            ("turn-on-org-cdlatex" function nil nil [726294 726395])
            ("org-try-cdlatex-tab" function nil nil [726397 727189])
            ("org-cdlatex-underscore-caret" function
               (:user-visible-flag t
                :arguments ("_arg"))
                nil [727191 727567])
            ("org-cdlatex-math-modify" function
               (:user-visible-flag t
                :arguments ("_arg"))
                nil [727569 727932])
            ("org-cdlatex-environment-indent" function
               (:user-visible-flag t
                :arguments ("environment" "item"))
                nil [727934 729952])
            ("org-inside-LaTeX-fragment-p" function nil nil [729978 731939])
            ("org-inside-latex-macro-p" function nil nil [731941 732141])
            ("org--format-latex-make-overlay" function (:arguments ("beg" "end" "image" "imagetype")) nil [732143 732759])
            ("org--list-latex-overlays" function (:arguments ("beg" "end")) nil [732761 733081])
            ("org-remove-latex-fragment-image-overlays" function (:arguments ("beg" "end")) nil [733083 733490])
            ("org-toggle-latex-fragment" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [733492 736168])
            ("org-format-latex" function (:arguments ("prefix" "beg" "end" "dir" "overlays" "msg" "forbuffer" "processing-type")) nil [736170 740753])
            ("org-create-math-formula" function
               (:user-visible-flag t
                :arguments ("latex-frag" "mathml-file"))
                nil [740755 743223])
            ("org-format-latex-as-mathml" function (:arguments ("latex-frag" "latex-frag-type" "prefix" "dir")) nil [743225 744360])
            ("org--get-display-dpi" function nil nil [744362 744698])
            ("org-create-formula-image" function (:arguments ("string" "tofile" "options" "buffer" "processing-type")) nil [744700 748932])
            ("org-splice-latex-header" function (:arguments ("tpl" "def-pkg" "pkg" "snippets-p" "extra")) nil [748934 750754])
            ("org-latex-packages-to-string" function (:arguments ("pkg" "snippets-p" "newline")) nil [750756 751280])
            ("org-dvipng-color" function (:arguments ("attr")) nil [751282 751425])
            ("org-dvipng-color-format" function (:arguments ("color-name")) nil [751427 751622])
            ("org-latex-color" function (:arguments ("attr")) nil [751624 751768])
            ("org-latex-color-format" function (:arguments ("color-name")) nil [751770 751949])
            ("org-normalize-color" function (:arguments ("value")) nil [751951 752086])
            ("defvar-local" code nil nil [752109 752153])
            ("org-toggle-inline-images" function
               (:user-visible-flag t
                :arguments ("include-linked"))
                nil [752155 752760])
            ("org-redisplay-inline-images" function (:user-visible-flag t) nil [752762 752992])
            ("org-display-inline-images" function
               (:user-visible-flag t
                :arguments ("include-linked" "refresh" "beg" "end"))
                nil [752994 756929])
            ("org-display-inline-remove-overlay" function (:arguments ("ov" "after" "_beg" "_end" "_len")) nil [756931 757218])
            ("org-remove-inline-images" function (:user-visible-flag t) nil [757220 757399])
            ("define-key" code nil nil [757504 757576])
            ("define-key" code nil nil [757577 757649])
            ("define-key" code nil nil [757650 757744])
            ("define-key" code nil nil [757745 757841])
            ("define-key" code nil nil [757842 757931])
            ("define-key" code nil nil [757932 758002])
            ("define-key" code nil nil [758003 758071])
            ("define-key" code nil nil [758072 758144])
            ("define-key" code nil nil [758145 758235])
            ("define-key" code nil nil [758236 758334])
            ("define-key" code nil nil [758335 758401])
            ("org-defkey" code nil nil [760077 760134])
            ("org-defkey" code nil nil [760162 760211])
            ("org-defkey" code nil nil [760212 760261])
            ("org-defkey" code nil nil [760262 760329])
            ("org-defkey" code nil nil [760330 760375])
            ("org-defkey" code nil nil [760432 760488])
            ("org-defkey" code nil nil [760489 760545])
            ("define-key" code nil nil [760546 760595])
            ("org-defkey" code nil nil [760597 760662])
            ("org-defkey" code nil nil [760663 760735])
            ("org-defkey" code nil nil [760736 760800])
            ("org-defkey" code nil nil [760832 760886])
            ("org-defkey" code nil nil [760887 760942])
            ("org-defkey" code nil nil [760943 760995])
            ("org-defkey" code nil nil [760996 761050])
            ("org-defkey" code nil nil [761052 761136])
            ("org-defkey" code nil nil [761137 761220])
            ("org-defkey" code nil nil [761221 761287])
            ("org-defkey" code nil nil [761288 761355])
            ("org-defkey" code nil nil [761356 761420])
            ("org-defkey" code nil nil [761421 761487])
            ("org-defkey" code nil nil [761489 761549])
            ("org-defkey" code nil nil [761550 761612])
            ("org-defkey" code nil nil [761613 761675])
            ("org-defkey" code nil nil [761676 761739])
            ("org-defkey" code nil nil [761741 761813])
            ("org-defkey" code nil nil [761814 761885])
            ("org-defkey" code nil nil [761886 761952])
            ("org-defkey" code nil nil [761953 762024])
            ("define-key" code nil nil [762040 762100])
            ("dolist" code nil nil [762101 762190])
            ("when" code nil nil [762323 764102])
            ("org-defkey" code nil nil [764127 764181])
            ("org-defkey" code nil nil [764211 764259])
            ("if" code nil nil [764260 764400])
            ("if" code nil nil [764401 764537])
            ("if" code nil nil [764538 764678])
            ("org-defkey" code nil nil [764679 764738])
            ("org-defkey" code nil nil [764739 764796])
            ("org-defkey" code nil nil [764797 764855])
            ("org-defkey" code nil nil [764856 764908])
            ("org-defkey" code nil nil [764909 764963])
            ("org-defkey" code nil nil [764964 765032])
            ("org-defkey" code nil nil [765033 765102])
            ("org-defkey" code nil nil [765103 765155])
            ("org-defkey" code nil nil [765156 765212])
            ("org-defkey" code nil nil [765213 765270])
            ("org-defkey" code nil nil [765271 765332])
            ("org-defkey" code nil nil [765333 765402])
            ("org-defkey" code nil nil [765403 765459])
            ("org-defkey" code nil nil [765460 765521])
            ("org-defkey" code nil nil [765522 765591])
            ("org-defkey" code nil nil [765592 765658])
            ("org-defkey" code nil nil [765659 765720])
            ("org-defkey" code nil nil [765721 765767])
            ("org-defkey" code nil nil [765768 765814])
            ("org-defkey" code nil nil [765815 765873])
            ("org-defkey" code nil nil [765874 765924])
            ("org-defkey" code nil nil [765925 765975])
            ("org-defkey" code nil nil [765976 766032])
            ("org-defkey" code nil nil [766033 766081])
            ("org-defkey" code nil nil [766082 766128])
            ("org-defkey" code nil nil [766129 766182])
            ("org-defkey" code nil nil [766207 766266])
            ("org-defkey" code nil nil [766285 766337])
            ("org-defkey" code nil nil [766338 766394])
            ("org-defkey" code nil nil [766395 766467])
            ("org-defkey" code nil nil [766468 766523])
            ("org-defkey" code nil nil [766524 766604])
            ("org-defkey" code nil nil [766605 766696])
            ("org-defkey" code nil nil [766697 766752])
            ("org-defkey" code nil nil [766753 766812])
            ("org-defkey" code nil nil [766813 766866])
            ("org-defkey" code nil nil [766867 766932])
            ("org-defkey" code nil nil [766933 766994])
            ("org-defkey" code nil nil [766995 767050])
            ("org-defkey" code nil nil [767051 767107])
            ("org-defkey" code nil nil [767108 767164])
            ("org-defkey" code nil nil [767165 767215])
            ("org-defkey" code nil nil [767239 767291])
            ("org-defkey" code nil nil [767315 767376])
            ("org-defkey" code nil nil [767393 767443])
            ("org-defkey" code nil nil [767469 767530])
            ("org-defkey" code nil nil [767531 767586])
            ("org-defkey" code nil nil [767587 767647])
            ("org-defkey" code nil nil [767648 767716])
            ("org-defkey" code nil nil [767717 767786])
            ("org-defkey" code nil nil [767787 767849])
            ("org-defkey" code nil nil [767850 767903])
            ("org-defkey" code nil nil [767904 767974])
            ("org-defkey" code nil nil [767975 768048])
            ("org-defkey" code nil nil [768049 768103])
            ("org-defkey" code nil nil [768104 768157])
            ("org-defkey" code nil nil [768158 768204])
            ("org-defkey" code nil nil [768205 768260])
            ("org-defkey" code nil nil [768261 768329])
            ("org-defkey" code nil nil [768330 768397])
            ("org-defkey" code nil nil [768398 768456])
            ("org-defkey" code nil nil [768457 768521])
            ("org-defkey" code nil nil [768522 768596])
            ("org-defkey" code nil nil [768597 768673])
            ("org-defkey" code nil nil [768674 768734])
            ("org-defkey" code nil nil [768735 768783])
            ("org-defkey" code nil nil [768784 768839])
            ("org-defkey" code nil nil [768840 768898])
            ("org-defkey" code nil nil [768899 768958])
            ("org-defkey" code nil nil [768959 769010])
            ("org-defkey" code nil nil [769011 769071])
            ("org-defkey" code nil nil [769072 769126])
            ("org-defkey" code nil nil [769127 769185])
            ("org-defkey" code nil nil [769186 769241])
            ("org-defkey" code nil nil [769242 769296])
            ("org-defkey" code nil nil [769297 769374])
            ("org-defkey" code nil nil [769375 769446])
            ("org-defkey" code nil nil [769447 769515])
            ("org-defkey" code nil nil [769516 769564])
            ("org-defkey" code nil nil [769565 769639])
            ("org-defkey" code nil nil [769640 769711])
            ("org-defkey" code nil nil [769712 769769])
            ("org-defkey" code nil nil [769770 769830])
            ("org-defkey" code nil nil [769831 769886])
            ("org-defkey" code nil nil [769887 769948])
            ("org-defkey" code nil nil [769949 770010])
            ("org-defkey" code nil nil [770011 770072])
            ("org-defkey" code nil nil [770073 770124])
            ("org-defkey" code nil nil [770125 770175])
            ("org-defkey" code nil nil [770176 770245])
            ("org-defkey" code nil nil [770329 770386])
            ("org-defkey" code nil nil [770387 770445])
            ("org-defkey" code nil nil [770446 770505])
            ("org-defkey" code nil nil [770507 770579])
            ("org-defkey" code nil nil [770580 770634])
            ("org-defkey" code nil nil [770635 770694])
            ("org-defkey" code nil nil [770695 770755])
            ("org-defkey" code nil nil [770756 770811])
            ("org-defkey" code nil nil [770812 770868])
            ("org-defkey" code nil nil [770869 770927])
            ("org-defkey" code nil nil [770928 770987])
            ("org-defkey" code nil nil [770988 771046])
            ("org-defkey" code nil nil [771047 771106])
            ("org-defkey" code nil nil [771107 771174])
            ("org-defkey" code nil nil [771175 771241])
            ("org-defkey" code nil nil [771242 771314])
            ("org-defkey" code nil nil [771315 771383])
            ("org-defkey" code nil nil [771384 771445])
            ("org-defkey" code nil nil [771446 771504])
            ("org-defkey" code nil nil [771505 771573])
            ("org-defkey" code nil nil [771574 771630])
            ("org-defkey" code nil nil [771631 771687])
            ("org-defkey" code nil nil [771688 771757])
            ("org-defkey" code nil nil [771758 771825])
            ("org-defkey" code nil nil [771826 771904])
            ("org-defkey" code nil nil [771906 771957])
            ("org-defkey" code nil nil [771958 772014])
            ("org-defkey" code nil nil [772015 772072])
            ("org-defkey" code nil nil [772073 772129])
            ("org-defkey" code nil nil [772130 772199])
            ("define-key" code nil nil [772201 772254])
            ("define-key" code nil nil [772256 772305])
            ("define-key" code nil nil [772307 772365])
            ("define-key" code nil nil [772366 772424])
            ("define-key" code nil nil [772426 772484])
            ("org-speed-commands-default" variable
               (:constant-flag t
                :default-value (quote (("Outline Navigation") ("n" org-speed-move-safe (quote org-next-visible-heading)) ("p" org-speed-move-safe (quote org-previous-visible-heading)) ("f" org-speed-move-safe (quote org-forward-heading-same-level)) ("b" org-speed-move-safe (quote org-backward-heading-same-level)) ("F" . org-next-block) ("B" . org-previous-block) ("u" org-speed-move-safe (quote outline-up-heading)) ("j" . org-goto) ("g" org-refile t) ("Outline Visibility") ("c" . org-cycle) ("C" . org-shifttab) (" " . org-display-outline-path) ("s" . org-narrow-to-subtree) ("=" . org-columns) ("Outline Structure Editing") ("U" . org-metaup) ("D" . org-metadown) ("r" . org-metaright) ("l" . org-metaleft) ("R" . org-shiftmetaright) ("L" . org-shiftmetaleft) ("i" progn (forward-char 1) (call-interactively (quote org-insert-heading-respect-content))) ("^" . org-sort) ("w" . org-refile) ("a" . org-archive-subtree-default-with-confirmation) ("@" . org-mark-subtree) ("#" . org-toggle-comment) ("Clock Commands") ("I" . org-clock-in) ("O" . org-clock-out) ("Meta Data Editing") ("t" . org-todo) ("," org-priority) ("0" org-priority 32) ("1" org-priority 65) ("2" org-priority 66) ("3" org-priority 67) (":" . org-set-tags-command) ("e" . org-set-effort) ("E" . org-inc-effort) ("W" lambda (m) (interactive "sMinutes before warning: ") (org-entry-put (point) "APPT_WARNTIME" m)) ("Agenda Views etc") ("v" . org-agenda) ("/" . org-sparse-tree) ("Misc") ("o" . org-open-at-point) ("?" . org-speed-command-help) ("<" org-agenda-set-restriction-lock (quote subtree)) (">" org-agenda-remove-restriction-lock))))
                nil [772487 774366])
            ("org-print-speed-command" function (:arguments ("e")) nil [774368 774684])
            ("org-speed-command-help" function (:user-visible-flag t) nil [774686 775297])
            ("org-speed-move-safe" function
               (:user-visible-flag t
                :arguments ("cmd"))
                nil [775299 775661])
            ("org-self-insert-command-undo-counter" variable nil nil [775663 775710])
            ("org-table-auto-blank-field" variable nil nil [775712 775747])
            ("org-speed-command" variable nil nil [775774 775804])
            ("org-speed-command-activate" function (:arguments ("keys")) nil [775806 776252])
            ("org-babel-speed-command-activate" function (:arguments ("keys")) nil [776254 776468])
            ("org-speed-command-hook" variable (:default-value (quote (org-speed-command-default-hook org-babel-speed-command-hook))) nil [776470 777190])
            ("org-self-insert-command" function
               (:user-visible-flag t
                :arguments ("N"))
                nil [777192 779549])
            ("org-check-before-invisible-edit" function (:arguments ("kind")) nil [779551 781891])
            ("org-fix-tags-on-the-fly" function nil nil [781893 782216])
            ("org-delete-backward-char" function
               (:user-visible-flag t
                :arguments ("N"))
                nil [782218 783315])
            ("org-delete-char" function
               (:user-visible-flag t
                :arguments ("N"))
                nil [783317 784374])
            ("put" code nil nil [784443 784604])
            ("put" code nil nil [784605 784769])
            ("put" code nil nil [784770 784821])
            ("put" code nil nil [784822 784882])
            ("put" code nil nil [784883 784922])
            ("put" code nil nil [784974 785024])
            ("put" code nil nil [785025 785078])
            ("put" code nil nil [785079 785121])
            ("put" code nil nil [785122 785173])
            ("put" code nil nil [785227 785289])
            ("put" code nil nil [785290 785355])
            ("org-remap" function (:arguments ("map" "commands")) nil [785357 785646])
            ("org-transpose-words" function (:user-visible-flag t) nil [785648 785965])
            ("org-remap" code nil nil [785966 786028])
            ("when" code nil nil [786030 786401])
            ("org-ctrl-c-ctrl-c-hook" variable nil nil [786403 786956])
            ("org-ctrl-c-ctrl-c-final-hook" variable nil nil [786958 787512])
            ("org-tab-first-hook" variable nil nil [787514 787983])
            ("org-tab-after-check-for-table-hook" variable nil nil [787985 788399])
            ("org-tab-after-check-for-cycling-hook" variable nil nil [788401 788761])
            ("org-tab-before-tab-emulation-hook" variable nil nil [788763 789035])
            ("org-metaleft-hook" variable nil nil [789037 789175])
            ("org-metaright-hook" variable nil nil [789176 789316])
            ("org-metaup-hook" variable nil nil [789317 789451])
            ("org-metadown-hook" variable nil nil [789452 789590])
            ("org-shiftmetaleft-hook" variable nil nil [789591 789736])
            ("org-shiftmetaright-hook" variable nil nil [789737 789884])
            ("org-shiftmetaup-hook" variable nil nil [789885 790026])
            ("org-shiftmetadown-hook" variable nil nil [790027 790172])
            ("org-metareturn-hook" variable nil nil [790173 790312])
            ("org-shiftup-hook" variable nil nil [790313 790448])
            ("org-shiftup-final-hook" variable nil nil [790449 790668])
            ("org-shiftdown-hook" variable nil nil [790669 790808])
            ("org-shiftdown-final-hook" variable nil nil [790809 791032])
            ("org-shiftleft-hook" variable nil nil [791033 791172])
            ("org-shiftleft-final-hook" variable nil nil [791173 791396])
            ("org-shiftright-hook" variable nil nil [791397 791538])
            ("org-shiftright-final-hook" variable nil nil [791539 791764])
            ("org-modifier-cursor-error" function nil nil [791766 791969])
            ("org-shiftselect-error" function nil nil [791971 792327])
            ("org-call-for-shift-select" function (:arguments ("cmd")) nil [792329 792446])
            ("org-shifttab" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [792448 793120])
            ("org-shiftmetaleft" function (:user-visible-flag t) nil [793122 793789])
            ("org-shiftmetaright" function (:user-visible-flag t) nil [793791 794455])
            ("org-shiftmetaup" function
               (:user-visible-flag t
                :arguments ("_arg"))
                nil [794457 795054])
            ("org-shiftmetadown" function
               (:user-visible-flag t
                :arguments ("_arg"))
                nil [795056 795685])
            ("org-hidden-tree-error" function nil nil [795687 795814])
            ("org-metaleft" function
               (:user-visible-flag t
                :arguments ("_arg"))
                nil [795816 797062])
            ("org-metaright" function
               (:user-visible-flag t
                :arguments ("_arg"))
                nil [797064 798526])
            ("org-check-for-hidden" function (:arguments ("what")) nil [798528 799482])
            ("org-metaup" function
               (:user-visible-flag t
                :arguments ("_arg"))
                nil [799484 800361])
            ("org-metadown" function
               (:user-visible-flag t
                :arguments ("_arg"))
                nil [800363 801252])
            ("org-shiftup" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [801254 802300])
            ("org-shiftdown" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [802302 803345])
            ("org-shiftright" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [803347 804939])
            ("org-shiftleft" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [804941 806550])
            ("org-shiftcontrolright" function (:user-visible-flag t) nil [806552 806968])
            ("org-shiftcontrolleft" function (:user-visible-flag t) nil [806970 807395])
            ("org-shiftcontrolup" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [807397 807735])
            ("org-shiftcontroldown" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [807737 808081])
            ("org-increase-number-at-point" function
               (:user-visible-flag t
                :arguments ("inc"))
                nil [808083 808773])
            ("org-decrease-number-at-point" function
               (:user-visible-flag t
                :arguments ("inc"))
                nil [808775 809012])
            ("org-ctrl-c-ret" function (:user-visible-flag t) nil [809014 809258])
            ("org-find-visible" function nil nil [809260 809423])
            ("org-find-invisible" function nil nil [809424 809595])
            ("org-copy-visible" function
               (:user-visible-flag t
                :arguments ("beg" "end"))
                nil [809597 810039])
            ("org-copy-special" function (:user-visible-flag t) nil [810041 810351])
            ("org-cut-special" function (:user-visible-flag t) nil [810353 810656])
            ("org-paste-special" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [810658 811001])
            ("org-edit-special" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [811003 813669])
            ("org-table-coordinate-overlays" variable nil nil [813671 813709])
            ("org-ctrl-c-ctrl-c" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [813736 823302])
            ("org-mode-restart" function nil nil [823304 823597])
            ("org-kill-note-or-show-branches" function (:user-visible-flag t) nil [823599 823904])
            ("org-delete-indentation" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [823906 825080])
            ("org-open-line" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [825082 825476])
            ("org-return" function
               (:user-visible-flag t
                :arguments ("indent"))
                nil [825478 828240])
            ("org-return-indent" function (:user-visible-flag t) nil [828242 828484])
            ("org-ctrl-c-star" function (:user-visible-flag t) nil [828486 828839])
            ("org-ctrl-c-minus" function (:user-visible-flag t) nil [828841 829382])
            ("org-toggle-heading" function
               (:user-visible-flag t
                :arguments ("nstars"))
                nil [829384 833059])
            ("org-meta-return" function
               (:user-visible-flag t
                :arguments ("_arg"))
                nil [833061 833507])
            ("org-in-subtree-not-table-p" function nil nil [833527 833684])
            ("easy-menu-define" code nil nil [833715 836721])
            ("easy-menu-define" code nil nil [836723 845238])
            ("org-info" function
               (:user-visible-flag t
                :arguments ("node"))
                nil [845240 845427])
            ("org-submit-bug-report" function (:user-visible-flag t) nil [845444 847867])
            ("org-install-agenda-files-menu" function nil nil [847870 848532])
            ("org-require-autoloaded-modules" function nil nil [848554 848724])
            ("org-reload" function
               (:user-visible-flag t
                :arguments ("uncompiled"))
                nil [848741 850597])
            ("org-customize" function (:user-visible-flag t) nil [850614 850796])
            ("org-create-customize-menu" function (:user-visible-flag t) nil [850798 851503])
            ("org-get-at-eol" function (:arguments ("property" "n")) nil [851563 851719])
            ("org-find-text-property-in-string" function (:arguments ("prop" "s")) nil [851721 851954])
            ("org-display-warning" function (:arguments ("message")) nil [851956 852079])
            ("org-eval" function (:arguments ("form")) nil [852081 852224])
            ("org-in-clocktable-p" function nil nil [852226 852572])
            ("org-in-verbatim-emphasis" function nil nil [852574 852772])
            ("org-overlay-display" function (:arguments ("ovl" "text" "face" "evap")) nil [852774 853000])
            ("org-overlay-before-string" function (:arguments ("ovl" "text" "face" "evap")) nil [853002 853247])
            ("org-find-overlays" function (:arguments ("prop" "pos" "delete")) nil [853249 853579])
            ("org-goto-marker-or-bmk" function (:arguments ("marker" "bookmark")) nil [853581 854070])
            ("org-quote-csv-field" function (:arguments ("s")) nil [854072 854264])
            ("org-force-self-insert" function
               (:user-visible-flag t
                :arguments ("N"))
                nil [854266 854396])
            ("org-string-width" function (:arguments ("s")) nil [854398 855440])
            ("org-shorten-string" function (:arguments ("s" "maxlength")) nil [855442 856260])
            ("org-get-indentation" function (:arguments ("line")) nil [856262 856636])
            ("org-get-string-indentation" function (:arguments ("s")) nil [856638 856996])
            ("org-remove-tabs" function (:arguments ("s" "width")) nil [856998 857358])
            ("org-fix-indentation" function (:arguments ("line" "ind")) nil [857360 857821])
            ("org-remove-indentation" function (:arguments ("code" "n")) nil [857823 858130])
            ("org-do-remove-indentation" function (:arguments ("n")) nil [858132 859125])
            ("org-fill-template" function (:arguments ("template" "alist")) nil [859127 859538])
            ("org-base-buffer" function (:arguments ("buffer")) nil [859540 859728])
            ("org-wrap" function (:arguments ("string" "width" "lines")) nil [859730 860681])
            ("org-do-wrap" function (:arguments ("words" "width")) nil [860683 861039])
            ("org-split-string" function (:arguments ("string" "separators")) nil [861041 861942])
            ("org-quote-vert" function (:arguments ("s")) nil [861944 862084])
            ("org-uuidgen-p" function (:arguments ("s")) nil [862086 862265])
            ("org-in-src-block-p" function (:arguments ("inside")) nil [862267 862695])
            ("org-context" function nil nil [862697 867243])
            ("org-in-regexp" function (:arguments ("regexp" "nlines" "visually")) nil [867245 868128])
            ("org-between-regexps-p" function (:arguments ("start-re" "end-re" "lim-up" "lim-down")) nil [868130 869363])
            ("org-in-block-p" function (:arguments ("names")) nil [869365 870074])
            ("org-occur-in-agenda-files" function
               (:user-visible-flag t
                :arguments ("regexp" "_nlines"))
                nil [870076 870962])
            ("add-hook" code nil nil [870964 871069])
            ("org-occur-link-in-agenda-files" function (:user-visible-flag t) nil [871071 871428])
            ("org-reverse-string" function (:arguments ("string")) nil [871430 871551])
            ("org-uniquify-alist" function (:arguments ("alist")) nil [871612 872105])
            ("org-delete-all" function (:arguments ("elts" "list")) nil [872107 872368])
            ("org-back-over-empty-lines" function nil nil [872370 872772])
            ("org-skip-whitespace" function nil nil [872774 872837])
            ("org-point-in-group" function (:arguments ("point" "group" "context")) nil [872839 873293])
            ("org-switch-to-buffer-other-window" function (:arguments ("args")) nil [873295 873553])
            ("org-combine-plists" function (:arguments ("plists")) nil [873555 874040])
            ("org-replace-escapes" function (:arguments ("string" "table")) nil [874042 875320])
            ("org-find-base-buffer-visiting" function (:arguments ("file")) nil [875322 875593])
            ("org-file-image-p" function (:arguments ("file")) nil [875705 875845])
            ("org-get-cursor-date" function (:arguments ("with-time")) nil [875847 876995])
            ("org-mark-subtree" function
               (:user-visible-flag t
                :arguments ("up"))
                nil [876997 877637])
            ("org-file-newer-than-p" function (:arguments ("file" "time")) nil [877639 878173])
            ("org-compile-file" function (:arguments ("source" "process" "ext" "err-msg" "log-buf" "spec")) nil [878175 880546])
            ("org-element-greater-elements" variable nil nil [880565 880602])
            ("org--get-expected-indentation" function (:arguments ("element" "contentsp")) nil [880603 884787])
            ("org--align-node-property" function nil nil [884789 885151])
            ("org-indent-line" function (:user-visible-flag t) nil [885153 888441])
            ("org-indent-region" function
               (:user-visible-flag t
                :arguments ("start" "end"))
                nil [888443 893262])
            ("org-indent-drawer" function (:user-visible-flag t) nil [893264 893787])
            ("org-indent-block" function (:user-visible-flag t) nil [893789 894465])
            ("org-element-paragraph-separate" variable nil nil [895051 895090])
            ("org-setup-filling" function nil nil [895108 895937])
            ("org-fill-line-break-nobreak-p" function nil nil [895939 896179])
            ("org-fill-paragraph-with-timestamp-nobreak-p" function nil nil [896181 896373])
            ("declare-function" code nil nil [896375 896424])
            ("orgtbl-line-start-regexp" variable nil nil [896425 896458])
            ("org-adaptive-fill-function" function nil nil [896479 899037])
            ("declare-function" code nil nil [899039 899088])
            ("message-cite-prefix-regexp" variable nil nil [899089 899124])
            ("org-fill-paragraph" function
               (:user-visible-flag t
                :arguments ("justify"))
                nil [899143 904486])
            ("org-auto-fill-function" function nil nil [904488 904914])
            ("org-comment-line-break-function" function (:arguments ("soft")) nil [904916 905377])
            ("org-toggle-fixed-width" function (:user-visible-flag t) nil [905403 910487])
            ("org-setup-comments-handling" function nil nil [911248 911644])
            ("org-insert-comment" function nil nil [911646 912464])
            ("comment-empty-lines" variable nil nil [912466 912494])
            ("org-comment-or-uncomment-region" function (:arguments ("beg" "end" "_")) nil [912518 915186])
            ("org-comment-dwim" function
               (:user-visible-flag t
                :arguments ("_arg"))
                nil [915188 915441])
            ("org-timestamp--to-internal-time" function (:arguments ("timestamp" "end")) nil [915576 916008])
            ("org-timestamp-has-time-p" function (:arguments ("timestamp")) nil [916010 916150])
            ("org-timestamp-format" function (:arguments ("timestamp" "format" "end" "utc")) nil [916152 916598])
            ("org-timestamp-split-range" function (:arguments ("timestamp" "end")) nil [916600 917791])
            ("org-timestamp-translate" function (:arguments ("timestamp" "boundary")) nil [917793 918803])
            ("reftex-docstruct-symbol" variable nil nil [918825 918857])
            ("org--rds" variable nil nil [918858 918875])
            ("org-reftex-citation" function (:user-visible-flag t) nil [918877 919865])
            ("org-beginning-of-line" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [919915 922380])
            ("org-end-of-line" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [922382 924360])
            ("define-key" code nil nil [924362 924417])
            ("define-key" code nil nil [924418 924467])
            ("org-backward-sentence" function
               (:user-visible-flag t
                :arguments ("_arg"))
                nil [924469 925268])
            ("org-forward-sentence" function
               (:user-visible-flag t
                :arguments ("_arg"))
                nil [925270 926181])
            ("define-key" code nil nil [926183 926238])
            ("define-key" code nil nil [926239 926293])
            ("org-kill-line" function
               (:user-visible-flag t
                :arguments ("_arg"))
                nil [926295 927054])
            ("define-key" code nil nil [927056 927103])
            ("org-yank" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [927105 928387])
            ("org-yank-generic" function (:arguments ("command" "arg")) nil [928389 930143])
            ("org-yank-folding-would-swallow-text" function (:arguments ("beg" "end")) nil [930145 930662])
            ("define-key" code nil nil [930664 930706])
            ("org-truely-invisible-p" function nil nil [930708 931018])
            ("org-invisible-p2" function nil nil [931020 931275])
            ("org-back-to-heading" function (:arguments ("invisible-ok")) nil [931277 931570])
            ("org-before-first-heading-p" function nil nil [931572 931733])
            ("org-at-heading-p" function (:arguments ("ignored")) nil [931735 931806])
            ("org-in-commented-heading-p" function (:arguments ("no-inheritance")) nil [931808 932390])
            ("org-at-comment-p" function nil nil [932392 932553])
            ("org-at-drawer-p" function nil nil [932555 932702])
            ("org-at-block-p" function nil nil [932704 932848])
            ("org-point-at-end-of-empty-headline" function nil nil [932850 933249])
            ("org-at-heading-or-item-p" function nil nil [933251 933328])
            ("org-at-target-p" function nil nil [933330 933443])
            ("defalias" code nil nil [933494 933538])
            ("org-up-heading-all" function (:arguments ("arg")) nil [933540 933774])
            ("org-up-heading-safe" function nil nil [933776 934432])
            ("org-first-sibling-p" function (:user-visible-flag t) nil [934434 934812])
            ("org-goto-sibling" function (:arguments ("previous")) nil [934814 935544])
            ("org-show-siblings" function nil nil [935546 935783])
            ("org-goto-first-child" function nil nil [935785 936249])
            ("org-show-hidden-entry" function nil nil [936251 936375])
            ("org-flag-heading" function (:arguments ("flag" "entry")) nil [936377 936881])
            ("org-get-next-sibling" function nil nil [936883 937319])
            ("org-get-last-sibling" function nil nil [937321 937776])
            ("org-end-of-subtree" function (:arguments ("invisible-ok" "to-heading")) nil [937778 939233])
            ("org-end-of-meta-data" function (:arguments ("full")) nil [939235 940078])
            ("org-forward-heading-same-level" function
               (:user-visible-flag t
                :arguments ("arg" "invisible-ok"))
                nil [940080 941250])
            ("org-backward-heading-same-level" function
               (:user-visible-flag t
                :arguments ("arg" "invisible-ok"))
                nil [941252 941540])
            ("org-next-visible-heading" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [941542 941874])
            ("org-previous-visible-heading" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [941876 942224])
            ("org-next-block" function
               (:user-visible-flag t
                :arguments ("arg" "backward" "block-regexp"))
                nil [942226 943670])
            ("org-previous-block" function
               (:user-visible-flag t
                :arguments ("arg" "block-regexp"))
                nil [943672 943945])
            ("org-forward-paragraph" function (:user-visible-flag t) nil [943947 947979])
            ("org-backward-paragraph" function (:user-visible-flag t) nil [947981 950855])
            ("org-forward-element" function (:user-visible-flag t) nil [950857 951649])
            ("org-backward-element" function (:user-visible-flag t) nil [951651 952931])
            ("org-up-element" function (:user-visible-flag t) nil [952933 953442])
            ("org-down-element" function (:user-visible-flag t) nil [953444 954067])
            ("org-drag-element-backward" function (:user-visible-flag t) nil [954069 955308])
            ("org-drag-element-forward" function (:user-visible-flag t) nil [955310 956746])
            ("org-drag-line-forward" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [956748 957093])
            ("org-drag-line-backward" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [957095 957232])
            ("org-mark-element" function (:user-visible-flag t) nil [957234 957942])
            ("org-narrow-to-element" function (:user-visible-flag t) nil [957944 958516])
            ("org-transpose-element" function (:user-visible-flag t) nil [958518 958819])
            ("org-unindent-buffer" function (:user-visible-flag t) nil [958821 959630])
            ("org-show-children" function
               (:user-visible-flag t
                :arguments ("level"))
                nil [959632 961146])
            ("org-show-subtree" function (:user-visible-flag t) nil [961148 961340])
            ("org-show-entry" function (:user-visible-flag t) nil [961342 961825])
            ("org-make-options-regexp" function (:arguments ("kwds" "extra")) nil [961827 962167])
            ("defvar-local" code nil nil [962240 962317])
            ("org-imenu-new-marker" function (:arguments ("pos")) nil [962319 962532])
            ("org-imenu-get-tree" function nil nil [962534 963532])
            ("eval-after-load" code nil nil [963534 963700])
            ("org-link-display-format" function (:arguments ("s")) nil [963702 964054])
            ("org-toggle-link-display" function (:user-visible-flag t) nil [964056 964436])
            ("org-speedbar-restriction-lock-overlay" variable (:default-value (make-overlay 1 1)) nil [964459 964585])
            ("overlay-put" code nil nil [964586 964678])
            ("overlay-put" code nil nil [964679 964793])
            ("delete-overlay" code nil nil [964794 964848])
            ("org-speedbar-set-agenda-restriction" function (:user-visible-flag t) nil [964850 966216])
            ("speedbar-file-key-map" variable nil nil [966218 966248])
            ("declare-function" code nil nil [966249 966323])
            ("eval-after-load" code nil nil [966324 966874])
            ("org--flyspell-object-check-p" function (:arguments ("element")) nil [966930 967774])
            ("org-mode-flyspell-verify" function nil nil [967776 970158])
            ("put" code nil nil [970159 970225])
            ("org-remove-flyspell-overlays-in" function (:arguments ("beg" "end")) nil [970227 970456])
            ("flyspell-delayed-commands" variable nil nil [970458 970492])
            ("eval-after-load" code nil nil [970493 970590])
            ("eval-after-load" code nil nil [970658 971003])
            ("eval-after-load" code nil nil [971064 971234])
            ("eval-after-load" code nil nil [971289 971528])
            ("org-bookmark-jump-unhide" function nil nil [971530 971831])
            ("org-mark-jump-unhide" function nil nil [971833 972046])
            ("eval-after-load" code nil nil [972048 972226])
            ("eval-after-load" code nil nil [972228 972410])
            ("eval-after-load" code nil nil [972412 972586])
            ("session-globals-exclude" variable nil nil [972636 972668])
            ("eval-after-load" code nil nil [972669 972753])
            ("org" package nil nil [972771 972785])
            ("run-hooks" code nil nil [972787 972813]))          
      :file "org.el"
      :pointmax 972836
      :fsize 972835
      :lastmodtime '(22842 50887 0 0)
      :unmatched-syntax '((close-paren 3072 . 3073) (symbol 3035 . 3052) (open-paren 3034 . 3035)))
    (semanticdb-table "semanticdb-table"
      :file "org-entities.el"
      :fsize 29706
      :lastmodtime '(22842 50887 0 0))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("org-faces" customgroup (:user-visible-flag t) nil [1099 1190])
            ("org-default" variable
               (:default-value (quote ((t :inherit default)))
                :type "face")
                nil [1192 1289])
            ("org-hide" variable
               (:default-value (quote ((((background light)) (:foreground "white")) (((background dark)) (:foreground "black"))))
                :type "face")
                nil [1291 1565])
            ("org-level-1" variable
               (:default-value (quote ((t :inherit outline-1)))
                :type "face")
                nil [1567 1671])
            ("org-level-2" variable
               (:default-value (quote ((t :inherit outline-2)))
                :type "face")
                nil [1673 1777])
            ("org-level-3" variable
               (:default-value (quote ((t :inherit outline-3)))
                :type "face")
                nil [1779 1883])
            ("org-level-4" variable
               (:default-value (quote ((t :inherit outline-4)))
                :type "face")
                nil [1885 1989])
            ("org-level-5" variable
               (:default-value (quote ((t :inherit outline-5)))
                :type "face")
                nil [1991 2095])
            ("org-level-6" variable
               (:default-value (quote ((t :inherit outline-6)))
                :type "face")
                nil [2097 2201])
            ("org-level-7" variable
               (:default-value (quote ((t :inherit outline-7)))
                :type "face")
                nil [2203 2307])
            ("org-level-8" variable
               (:default-value (quote ((t :inherit outline-8)))
                :type "face")
                nil [2309 2413])
            ("org-special-keyword" variable
               (:default-value (quote ((t :inherit font-lock-keyword-face)))
                :type "face")
                nil [2415 2539])
            ("org-drawer" variable
               (:default-value (quote ((((class color) (min-colors 88) (background light)) (:foreground "Blue1")) (((class color) (min-colors 88) (background dark)) (:foreground "LightSkyBlue")) (((class color) (min-colors 16) (background light)) (:foreground "Blue")) (((class color) (min-colors 16) (background dark)) (:foreground "LightSkyBlue")) (((class color) (min-colors 8)) (:foreground "blue" :bold t)) (t (:bold t))))
                :type "face")
                nil [2541 3067])
            ("org-property-value" variable (:type "face") nil [3069 3164])
            ("org-column" variable
               (:default-value (quote ((((class color) (min-colors 16) (background light)) (:background "grey90" :weight normal :slant normal :strike-through nil :underline nil)) (((class color) (min-colors 16) (background dark)) (:background "grey30" :weight normal :slant normal :strike-through nil :underline nil)) (((class color) (min-colors 8)) (:background "cyan" :foreground "black" :weight normal :slant normal :strike-through nil :underline nil)) (t (:inverse-video t))))
                :type "face")
                nil [3166 4713])
            ("org-column-title" variable
               (:default-value (quote ((((class color) (min-colors 16) (background light)) (:background "grey90" :underline t :weight bold)) (((class color) (min-colors 16) (background dark)) (:background "grey30" :underline t :weight bold)) (((class color) (min-colors 8)) (:background "cyan" :foreground "black" :underline t :weight bold)) (t (:inverse-video t))))
                :type "face")
                nil [4715 5168])
            ("org-agenda-column-dateline" variable
               (:default-value (quote ((t :inherit org-column)))
                :type "face")
                nil [5170 5319])
            ("org-warning" variable
               (:default-value (quote ((t :inherit font-lock-warning-face)))
                :type "face")
                nil [5321 5443])
            ("org-archived" variable
               (:default-value (quote ((t :inherit shadow)))
                :type "face")
                nil [5445 5554])
            ("org-link" variable
               (:default-value (quote ((t :inherit link)))
                :type "face")
                nil [5556 5635])
            ("org-footnote" variable
               (:default-value (quote ((((class color) (background light)) (:foreground "Purple" :underline t)) (((class color) (background dark)) (:foreground "Cyan" :underline t)) (t (:underline t))))
                :type "face")
                nil [5637 5878])
            ("org-ellipsis" variable
               (:default-value (quote ((((class color) (background light)) (:foreground "DarkGoldenrod" :underline t)) (((class color) (background dark)) (:foreground "LightGoldenrod" :underline t)) (t (:strike-through t))))
                :type "face")
                nil [5880 6161])
            ("org-target" variable
               (:default-value (quote ((((class color) (background light)) (:underline t)) (((class color) (background dark)) (:underline t)) (t (:underline t))))
                :type "face")
                nil [6163 6365])
            ("org-date" variable
               (:default-value (quote ((((class color) (background light)) (:foreground "Purple" :underline t)) (((class color) (background dark)) (:foreground "Cyan" :underline t)) (t (:underline t))))
                :type "face")
                nil [6367 6611])
            ("org-date-selected" variable
               (:default-value (quote ((((class color) (min-colors 16) (background light)) (:foreground "Red1" :inverse-video t)) (((class color) (min-colors 16) (background dark)) (:foreground "Pink" :inverse-video t)) (((class color) (min-colors 8) (background light)) (:foreground "red" :inverse-video t)) (((class color) (min-colors 8) (background dark)) (:foreground "red" :inverse-video t)) (t (:inverse-video t))))
                :type "face")
                nil [6613 7219])
            ("org-sexp-date" variable
               (:default-value (quote ((((class color) (background light)) (:foreground "Purple")) (((class color) (background dark)) (:foreground "Cyan")) (t (:underline t))))
                :type "face")
                nil [7221 7463])
            ("org-tag" variable
               (:default-value (quote ((t (:bold t))))
                :type "face")
                nil [7465 7638])
            ("org-list-dt" variable
               (:default-value (quote ((t (:bold t))))
                :type "face")
                nil [7640 7746])
            ("org-todo" variable
               (:default-value (quote ((((class color) (min-colors 16) (background light)) (:foreground "Red1" :bold t)) (((class color) (min-colors 16) (background dark)) (:foreground "Pink" :bold t)) (((class color) (min-colors 8) (background light)) (:foreground "red" :bold t)) (((class color) (min-colors 8) (background dark)) (:foreground "red" :bold t)) (t (:inverse-video t :bold t))))
                :type "face")
                nil [7748 8234])
            ("org-done" variable
               (:default-value (quote ((((class color) (min-colors 16) (background light)) (:foreground "ForestGreen" :bold t)) (((class color) (min-colors 16) (background dark)) (:foreground "PaleGreen" :bold t)) (((class color) (min-colors 8)) (:foreground "green")) (t (:bold t))))
                :type "face")
                nil [8236 8633])
            ("org-agenda-done" variable
               (:default-value (quote ((((class color) (min-colors 16) (background light)) (:foreground "ForestGreen")) (((class color) (min-colors 16) (background dark)) (:foreground "PaleGreen")) (((class color) (min-colors 8)) (:foreground "green")) (t (:bold nil))))
                :type "face")
                nil [8635 9350])
            ("org-headline-done" variable
               (:default-value (quote ((((class color) (min-colors 16) (background light)) (:foreground "RosyBrown")) (((class color) (min-colors 16) (background dark)) (:foreground "LightSalmon")) (((class color) (min-colors 8) (background light)) (:bold nil))))
                :type "face")
                nil [9352 9852])
            ("org-faces-easy-properties" variable (:default-value (quote ((todo . :foreground) (tag . :foreground) (priority . :foreground)))) nil [9854 10400])
            ("org-todo-keyword-faces" variable nil nil [10402 11059])
            ("org-priority" variable
               (:default-value (quote ((t :inherit font-lock-keyword-face)))
                :type "face")
                nil [11061 11178])
            ("org-priority-faces" variable nil nil [11180 11790])
            ("org-tags-special-faces-re" variable nil nil [11792 11830])
            ("org-set-tag-faces" function (:arguments ("var" "value")) nil [11831 12040])
            ("org-checkbox" variable
               (:default-value (quote ((t :inherit bold)))
                :type "face")
                nil [12042 12130])
            ("org-checkbox-statistics-todo" variable
               (:default-value (quote ((t (:inherit org-todo))))
                :type "face")
                nil [12132 12267])
            ("org-checkbox-statistics-done" variable
               (:default-value (quote ((t (:inherit org-done))))
                :type "face")
                nil [12269 12402])
            ("org-tag-faces" variable nil nil [12404 13132])
            ("org-table" variable
               (:default-value (quote ((((class color) (min-colors 88) (background light)) (:foreground "Blue1")) (((class color) (min-colors 88) (background dark)) (:foreground "LightSkyBlue")) (((class color) (min-colors 16) (background light)) (:foreground "Blue")) (((class color) (min-colors 16) (background dark)) (:foreground "LightSkyBlue")) (((class color) (min-colors 8) (background light)) (:foreground "blue")) (((class color) (min-colors 8) (background dark)))))
                :type "face")
                nil [13134 13708])
            ("org-formula" variable
               (:default-value (quote ((((class color) (min-colors 88) (background light)) (:foreground "Firebrick")) (((class color) (min-colors 88) (background dark)) (:foreground "chocolate1")) (((class color) (min-colors 8) (background light)) (:foreground "red")) (((class color) (min-colors 8) (background dark)) (:foreground "red")) (t (:bold t :italic t))))
                :type "face")
                nil [13710 14122])
            ("org-code" variable
               (:default-value (quote ((t :inherit shadow)))
                :type "face")
                nil [14124 14253])
            ("org-meta-line" variable
               (:default-value (quote ((t :inherit font-lock-comment-face)))
                :type "face")
                nil [14255 14401])
            ("org-document-title" variable
               (:default-value (quote ((((class color) (background light)) (:foreground "midnight blue" :weight bold)) (((class color) (background dark)) (:foreground "pale turquoise" :weight bold)) (t (:weight bold))))
                :type "face")
                nil [14403 14718])
            ("org-document-info" variable
               (:default-value (quote ((((class color) (background light)) (:foreground "midnight blue")) (((class color) (background dark)) (:foreground "pale turquoise")) (t nil)))
                :type "face")
                nil [14720 15034])
            ("org-document-info-keyword" variable
               (:default-value (quote ((t :inherit shadow)))
                :type "face")
                nil [15036 15179])
            ("org-block" variable
               (:default-value (quote ((t :inherit shadow)))
                :type "face")
                nil [15181 15409])
            ("org-block-begin-line" variable
               (:default-value (quote ((t (:inherit org-meta-line))))
                :type "face")
                nil [15411 15559])
            ("org-block-end-line" variable
               (:default-value (quote ((t (:inherit org-block-begin-line))))
                :type "face")
                nil [15561 15712])
            ("org-verbatim" variable
               (:default-value (quote ((t (:inherit shadow))))
                :type "face")
                nil [15714 15847])
            ("org-quote" variable
               (:default-value (quote ((t (:inherit org-block))))
                :type "face")
                nil [15849 15967])
            ("org-verse" variable
               (:default-value (quote ((t (:inherit org-block))))
                :type "face")
                nil [15969 16087])
            ("org-fontify-quote-and-verse-blocks" variable nil nil [16089 16407])
            ("org-clock-overlay" variable
               (:default-value (quote ((((class color) (min-colors 88) (background light)) (:background "LightGray" :foreground "black")) (((class color) (min-colors 88) (background dark)) (:background "SkyBlue4" :foreground "white")) (((class color) (min-colors 16) (background light)) (:background "gray" :foreground "black")) (((class color) (min-colors 16) (background dark)) (:background "SkyBlue4" :foreground "white")) (((class color) (min-colors 8)) (:background "cyan" :foreground "black")) (t (:inverse-video t))))
                :type "face")
                nil [16409 17084])
            ("org-agenda-structure" variable
               (:default-value (quote ((((class color) (min-colors 88) (background light)) (:foreground "Blue1")) (((class color) (min-colors 88) (background dark)) (:foreground "LightSkyBlue")) (((class color) (min-colors 16) (background light)) (:foreground "Blue")) (((class color) (min-colors 16) (background dark)) (:foreground "LightSkyBlue")) (((class color) (min-colors 8)) (:foreground "blue" :bold t)) (t (:bold t))))
                :type "face")
                nil [17086 17640])
            ("org-agenda-date" variable
               (:default-value (quote ((t (:inherit org-agenda-structure))))
                :type "face")
                nil [17642 17767])
            ("org-agenda-date-today" variable
               (:default-value (quote ((t (:inherit org-agenda-date :weight bold :italic t))))
                :type "face")
                nil [17769 17914])
            ("org-agenda-clocking" variable
               (:default-value (quote ((t (:inherit secondary-selection))))
                :type "face")
                nil [17916 18058])
            ("org-agenda-date-weekend" variable
               (:default-value (quote ((t (:inherit org-agenda-date :weight bold))))
                :type "face")
                nil [18060 18300])
            ("org-scheduled" variable
               (:default-value (quote ((((class color) (min-colors 88) (background light)) (:foreground "DarkGreen")) (((class color) (min-colors 88) (background dark)) (:foreground "PaleGreen")) (((class color) (min-colors 8)) (:foreground "green")) (t (:bold t :italic t))))
                :type "face")
                nil [18302 18646])
            ("org-scheduled-today" variable
               (:default-value (quote ((((class color) (min-colors 88) (background light)) (:foreground "DarkGreen")) (((class color) (min-colors 88) (background dark)) (:foreground "PaleGreen")) (((class color) (min-colors 8)) (:foreground "green")) (t (:bold t :italic t))))
                :type "face")
                nil [18648 18998])
            ("org-agenda-dimmed-todo-face" variable
               (:default-value (quote ((((background light)) (:foreground "grey50")) (((background dark)) (:foreground "grey50"))))
                :type "face")
                nil [19000 19207])
            ("org-scheduled-previously" variable
               (:default-value (quote ((((class color) (min-colors 88) (background light)) (:foreground "Firebrick")) (((class color) (min-colors 88) (background dark)) (:foreground "chocolate1")) (((class color) (min-colors 8) (background light)) (:foreground "red")) (((class color) (min-colors 8) (background dark)) (:foreground "red" :bold t)) (t (:bold t))))
                :type "face")
                nil [19209 19668])
            ("org-upcoming-deadline" variable
               (:default-value (quote ((((class color) (min-colors 88) (background light)) (:foreground "Firebrick")) (((class color) (min-colors 88) (background dark)) (:foreground "chocolate1")) (((class color) (min-colors 8) (background light)) (:foreground "red")) (((class color) (min-colors 8) (background dark)) (:foreground "red" :bold t)) (t (:bold t))))
                :type "face")
                nil [19670 20126])
            ("org-agenda-deadline-faces" variable (:default-value (quote ((1.0 . org-warning) (0.5 . org-upcoming-deadline) (0.0 . default)))) nil [20128 21123])
            ("org-agenda-restriction-lock" variable
               (:default-value (quote ((((class color) (min-colors 88) (background light)) (:background "#eeeeee")) (((class color) (min-colors 88) (background dark)) (:background "#1C1C1C")) (((class color) (min-colors 16) (background light)) (:background "#eeeeee")) (((class color) (min-colors 16) (background dark)) (:background "#1C1C1C")) (((class color) (min-colors 8)) (:background "cyan" :foreground "black")) (t (:inverse-video t))))
                :type "face")
                nil [21125 21662])
            ("org-agenda-filter-tags" variable
               (:default-value (quote ((t :inherit mode-line)))
                :type "face")
                nil [21664 21806])
            ("org-agenda-filter-regexp" variable
               (:default-value (quote ((t :inherit mode-line)))
                :type "face")
                nil [21808 21955])
            ("org-agenda-filter-category" variable
               (:default-value (quote ((t :inherit mode-line)))
                :type "face")
                nil [21957 22107])
            ("org-agenda-filter-effort" variable
               (:default-value (quote ((t :inherit mode-line)))
                :type "face")
                nil [22109 22253])
            ("org-time-grid" variable
               (:default-value (quote ((((class color) (min-colors 16) (background light)) (:foreground "DarkGoldenrod")) (((class color) (min-colors 16) (background dark)) (:foreground "LightGoldenrod")) (((class color) (min-colors 8)) (:foreground "yellow" :weight light))))
                :type "face")
                nil [22255 22624])
            ("org-agenda-current-time" variable
               (:default-value (quote ((t (:inherit org-time-grid))))
                :type "face")
                nil [22626 22768])
            ("org-agenda-diary" variable
               (:default-value (quote ((t :inherit default)))
                :type "face")
                nil [22770 22905])
            ("org-agenda-calendar-event" variable
               (:default-value (quote ((t :inherit default)))
                :type "face")
                nil [22907 23047])
            ("org-agenda-calendar-sexp" variable
               (:default-value (quote ((t :inherit default)))
                :type "face")
                nil [23049 23186])
            ("org-level-faces" variable
               (:constant-flag t
                :default-value (quote (org-level-1 org-level-2 org-level-3 org-level-4 org-level-5 org-level-6 org-level-7 org-level-8)))
                nil [23188 23317])
            ("org-n-level-faces" variable (:default-value (length org-level-faces)) nil [23319 23612])
            ("org-cycle-level-faces" variable (:default-value t) nil [23614 23941])
            ("org-latex-and-related" variable
               (:default-value (let ((font (cond ((assq :inherit custom-face-attributes) (quote (:inherit underline))) (t (quote (:underline t)))))) (\` ((((class grayscale) (background light)) (:foreground "DimGray" (\,@ font))) (((class grayscale) (background dark)) (:foreground "LightGray" (\,@ font))) (((class color) (background light)) (:foreground "SaddleBrown")) (((class color) (background dark)) (:foreground "burlywood")) (t ((\,@ font))))))
                :type "face")
                nil [23943 24579])
            ("org-macro" variable
               (:default-value (quote ((t :inherit org-latex-and-related)))
                :type "face")
                nil [24581 24731])
            ("org-tag-group" variable
               (:default-value (quote ((t :inherit org-tag)))
                :type "face")
                nil [24733 24877])
            ("org-mode-line-clock" variable
               (:default-value (quote ((t (:inherit mode-line))))
                :type "face")
                nil [24879 25002])
            ("org-mode-line-clock-overrun" variable
               (:default-value (quote ((t (:inherit mode-line :background "red"))))
                :type "face")
                nil [25004 25173])
            ("org-faces" package nil nil [25175 25195]))          
      :file "org-faces.el"
      :pointmax 25224
      :fsize 25223
      :lastmodtime '(22842 50887 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("org-macs" include nil nil [1120 1139])
            ("org-compat" include nil nil [1140 1161])
            ("pcomplete" include nil nil [1162 1182])
            ("declare-function" code nil nil [1184 1262])
            ("declare-function" code nil nil [1263 1310])
            ("declare-function" code nil nil [1311 1351])
            ("declare-function" code nil nil [1352 1460])
            ("declare-function" code nil nil [1461 1528])
            ("declare-function" code nil nil [1529 1604])
            ("org-complete" customgroup (:user-visible-flag t) nil [1636 1740])
            ("org-drawer-regexp" variable nil nil [1742 1768])
            ("org-property-re" variable nil nil [1769 1793])
            ("org-current-tag-alist" variable nil nil [1794 1824])
            ("org-thing-at-point" function nil nil [1826 3723])
            ("org-command-at-point" function nil nil [3725 4216])
            ("org-parse-arguments" function nil nil [4218 4764])
            ("org-pcomplete-initial" function nil nil [4766 5006])
            ("org-options-keywords" variable nil nil [5008 5037])
            ("org-element-affiliated-keywords" variable nil nil [5054 5094])
            ("declare-function" code nil nil [5117 5168])
            ("pcomplete/org-mode/file-option" function nil nil [5169 6089])
            ("pcomplete/org-mode/file-option/author" function nil nil [6091 6233])
            ("org-time-stamp-formats" variable nil nil [6235 6266])
            ("pcomplete/org-mode/file-option/date" function nil nil [6267 6440])
            ("pcomplete/org-mode/file-option/email" function nil nil [6442 6585])
            ("org-export-exclude-tags" variable nil nil [6587 6619])
            ("pcomplete/org-mode/file-option/exclude_tags" function nil nil [6620 6859])
            ("org-file-tags" variable nil nil [6861 6883])
            ("pcomplete/org-mode/file-option/filetags" function nil nil [6884 7068])
            ("org-export-default-language" variable nil nil [7070 7106])
            ("pcomplete/org-mode/file-option/language" function nil nil [7107 7319])
            ("org-default-priority" variable nil nil [7321 7350])
            ("org-highest-priority" variable nil nil [7351 7380])
            ("org-lowest-priority" variable nil nil [7381 7409])
            ("pcomplete/org-mode/file-option/priorities" function nil nil [7410 7639])
            ("org-export-select-tags" variable nil nil [7641 7672])
            ("pcomplete/org-mode/file-option/select_tags" function nil nil [7673 7908])
            ("org-startup-options" variable nil nil [7910 7938])
            ("pcomplete/org-mode/file-option/startup" function nil nil [7939 8427])
            ("pcomplete/org-mode/file-option/tags" function nil nil [8429 8603])
            ("pcomplete/org-mode/file-option/title" function nil nil [8605 8946])
            ("declare-function" code nil nil [8949 9008])
            ("pcomplete/org-mode/file-option/options" function nil nil [9009 9761])
            ("pcomplete/org-mode/file-option/infojs_opt" function nil nil [9763 10033])
            ("pcomplete/org-mode/file-option/bind" function nil nil [10035 10288])
            ("org-link-abbrev-alist-local" variable nil nil [10290 10326])
            ("org-link-abbrev-alist" variable nil nil [10327 10357])
            ("pcomplete/org-mode/link" function nil nil [10358 10603])
            ("org-entities" variable nil nil [10605 10626])
            ("pcomplete/org-mode/tex" function nil nil [10627 10868])
            ("org-todo-keywords-1" variable nil nil [10870 10898])
            ("pcomplete/org-mode/todo" function nil nil [10899 11055])
            ("org-todo-line-regexp" variable nil nil [11057 11086])
            ("pcomplete/org-mode/searchhead" function nil nil [11087 11596])
            ("pcomplete/org-mode/tag" function nil nil [11598 12126])
            ("pcomplete/org-mode/prop" function nil nil [12128 12526])
            ("pcomplete/org-mode/block-option/src" function nil nil [12528 13138])
            ("pcomplete/org-mode/block-option/clocktable" function nil nil [13140 13517])
            ("org-pcomplete-case-double" function (:arguments ("list")) nil [13519 13763])
            ("org-pcomplete" package nil nil [13781 13805]))          
      :file "org-pcomplete.el"
      :pointmax 13838
      :fsize 13837
      :lastmodtime '(22842 50887 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [1245 1262])
            ("org-macs" include nil nil [1263 1282])
            ("org-compat" include nil nil [1283 1304])
            ("ob-keys" include nil nil [1305 1323])
            ("ob-comint" include nil nil [1324 1344])
            ("declare-function" code nil nil [1346 1395])
            ("declare-function" code nil nil [1396 1460])
            ("declare-function" code nil nil [1461 1517])
            ("declare-function" code nil nil [1518 1593])
            ("declare-function" code nil nil [1594 1666])
            ("declare-function" code nil nil [1667 1756])
            ("declare-function" code nil nil [1757 1829])
            ("declare-function" code nil nil [1830 1889])
            ("declare-function" code nil nil [1890 1983])
            ("declare-function" code nil nil [1984 2045])
            ("declare-function" code nil nil [2046 2117])
            ("declare-function" code nil nil [2118 2175])
            ("org-inhibit-startup" variable nil nil [2177 2205])
            ("org-edit-src-turn-on-auto-save" variable nil nil [2207 2693])
            ("org-edit-src-auto-save-idle-delay" variable nil nil [2695 3129])
            ("org-coderef-label-format" variable (:default-value "(ref:%s)") nil [3131 3816])
            ("org-edit-fixed-width-region-mode" variable (:default-value (quote artist-mode)) nil [3818 4155])
            ("org-src-preserve-indentation" variable nil nil [4157 4764])
            ("org-edit-src-content-indentation" variable (:default-value 2) nil [4766 5164])
            ("org-edit-src-persistent-message" variable (:default-value t) nil [5166 5460])
            ("org-src-ask-before-returning-to-edit-buffer" variable (:default-value t) nil [5462 5902])
            ("org-src-window-setup" variable (:default-value (quote reorganize-frame)) nil [5904 6717])
            ("org-src-mode-hook" variable nil nil [6719 7205])
            ("org-src-lang-modes" variable (:default-value (quote (("ocaml" . tuareg) ("elisp" . emacs-lisp) ("ditaa" . artist) ("asymptote" . asy) ("dot" . fundamental) ("sqlite" . sql) ("calc" . fundamental) ("C" . c) ("cpp" . c++) ("C++" . c++) ("screen" . shell-script) ("shell" . sh) ("bash" . sh)))) nil [7207 7991])
            ("org-src-block-faces" variable nil nil [7993 8708])
            ("org-src-tab-acts-natively" variable nil nil [8710 8915])
            ("org-src--allow-write-back" variable (:default-value t) nil [8958 8994])
            ("org-src--auto-save-timer" variable nil nil [8995 9032])
            ("org-src--babel-info" variable nil nil [9033 9065])
            ("org-src--beg-marker" variable nil nil [9066 9098])
            ("org-src--block-indentation" variable nil nil [9099 9138])
            ("org-src--end-marker" variable nil nil [9139 9171])
            ("org-src--from-org-mode" variable nil nil [9172 9207])
            ("org-src--overlay" variable nil nil [9208 9237])
            ("org-src--preserve-indentation" variable nil nil [9238 9280])
            ("org-src--remote" variable nil nil [9281 9309])
            ("org-src--saved-temp-window-config" variable nil nil [9310 9356])
            ("org-src--source-type" variable nil nil [9357 9437])
            ("org-src--tab-width" variable nil nil [9438 9594])
            ("org-src--construct-edit-buffer-name" function (:arguments ("org-buffer-name" "lang")) nil [9596 9776])
            ("org-src--edit-buffer" function (:arguments ("beg" "end")) nil [9778 10239])
            ("org-src--source-buffer" function nil nil [10241 10507])
            ("org-src--get-lang-mode" function (:arguments ("lang")) nil [10509 10797])
            ("org-src--coordinates" function (:arguments ("pos" "beg" "end")) nil [10799 11384])
            ("org-src--goto-coordinates" function (:arguments ("coord" "beg" "end")) nil [11386 11947])
            ("org-src--contents-area" function (:arguments ("datum")) nil [11949 13884])
            ("org-src--make-source-overlay" function (:arguments ("beg" "end" "edit-buffer")) nil [13886 14852])
            ("org-src--remove-overlay" function nil nil [14854 15006])
            ("org-src--on-datum-p" function (:arguments ("datum")) nil [15008 15457])
            ("org-src--contents-for-write-back" function nil nil [15459 16856])
            ("org-src--edit-element" function (:arguments ("datum" "name" "major" "write-back" "contents" "remote")) nil [16858 21005])
            ("org-src-font-lock-fontify-block" function (:arguments ("lang" "start" "end")) nil [21046 22676])
            ("org-escape-code-in-region" function
               (:user-visible-flag t
                :arguments ("beg" "end"))
                nil [22701 23070])
            ("org-escape-code-in-string" function (:arguments ("s")) nil [23072 23317])
            ("org-unescape-code-in-region" function
               (:user-visible-flag t
                :arguments ("beg" "end"))
                nil [23319 23706])
            ("org-unescape-code-in-string" function (:arguments ("s")) nil [23708 23974])
            ("org-src-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map "'" (quote org-edit-src-exit)) (define-key map "" (quote org-edit-src-abort)) (define-key map "" (quote org-edit-src-save)) map)) nil [24003 24224])
            ("define-minor-mode" code nil nil [24226 25736])
            ("org-src-mode-configure-edit-buffer" function nil nil [25738 26209])
            ("add-hook" code nil nil [26211 26277])
            ("org-src-associate-babel-session" function
               (:user-visible-flag t
                :arguments ("info"))
                nil [26311 26727])
            ("org-src-babel-configure-edit-buffer" function nil nil [26729 26862])
            ("add-hook" code nil nil [26864 26931])
            ("org-src-do-at-code-block" function (:arguments ("body")) nil [26951 27244])
            ("org-src-do-key-sequence-at-code-block" function
               (:user-visible-flag t
                :arguments ("key"))
                nil [27246 28242])
            ("org-src-edit-buffer-p" function (:arguments ("buffer")) nil [28244 28588])
            ("org-src-switch-to-buffer" function (:arguments ("buffer" "context")) nil [28590 29438])
            ("org-src-coderef-format" function (:arguments ("element")) nil [29440 30009])
            ("org-src-coderef-regexp" function (:arguments ("fmt" "label")) nil [30011 30629])
            ("org-edit-footnote-reference" function (:user-visible-flag t) nil [30631 32733])
            ("org-edit-table.el" function (:user-visible-flag t) nil [32735 33566])
            ("org-edit-export-block" function (:user-visible-flag t) nil [33568 34544])
            ("org-edit-src-code" function
               (:user-visible-flag t
                :arguments ("code" "edit-buffer-name"))
                nil [34546 36510])
            ("org-edit-inline-src-code" function (:user-visible-flag t) nil [36512 37818])
            ("org-edit-fixed-width-region" function (:user-visible-flag t) nil [37820 38772])
            ("org-edit-src-abort" function (:user-visible-flag t) nil [38774 38939])
            ("org-edit-src-continue" function
               (:user-visible-flag t
                :arguments ("e"))
                nil [38941 39294])
            ("org-edit-src-save" function (:user-visible-flag t) nil [39296 40212])
            ("org-edit-src-exit" function (:user-visible-flag t) nil [40214 42026])
            ("org-src" package nil nil [42029 42047]))          
      :file "org-src.el"
      :pointmax 42074
      :fsize 42073
      :lastmodtime '(22842 50887 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [1152 1169])
            ("org-macs" include nil nil [1170 1189])
            ("org-compat" include nil nil [1190 1211])
            ("declare-function" code nil nil [1213 1257])
            ("declare-function" code nil nil [1258 1319])
            ("declare-function" code nil nil [1320 1373])
            ("declare-function" code nil nil [1374 1433])
            ("declare-function" code nil nil [1434 1490])
            ("declare-function" code nil nil [1491 1566])
            ("declare-function" code nil nil [1567 1639])
            ("declare-function" code nil nil [1640 1725])
            ("declare-function" code nil nil [1726 1798])
            ("declare-function" code nil nil [1799 1858])
            ("declare-function" code nil nil [1859 1939])
            ("declare-function" code nil nil [1940 2003])
            ("declare-function" code nil nil [2004 2051])
            ("declare-function" code nil nil [2052 2121])
            ("declare-function" code nil nil [2122 2174])
            ("declare-function" code nil nil [2175 2230])
            ("declare-function" code nil nil [2231 2283])
            ("declare-function" code nil nil [2284 2350])
            ("declare-function" code nil nil [2351 2408])
            ("declare-function" code nil nil [2409 2466])
            ("declare-function" code nil nil [2467 2516])
            ("electric-indent-mode" variable nil nil [2518 2547])
            ("org-blank-before-new-entry" variable nil nil [2548 2583])
            ("org-bracket-link-regexp" variable nil nil [2604 2636])
            ("org-complex-heading-regexp" variable nil nil [2657 2692])
            ("org-odd-levels-only" variable nil nil [2713 2741])
            ("org-outline-regexp" variable nil nil [2763 2790])
            ("org-outline-regexp-bol" variable nil nil [2812 2843])
            ("org-footnote-re" variable
               (:constant-flag t
                :default-value "\\[fn:\\(?:\\(?1:[-_[:word:]]+\\)?\\(:\\)\\|\\(?1:[-_[:word:]]+\\)\\]\\)")
                nil [2884 3205])
            ("org-footnote-definition-re" variable
               (:constant-flag t
                :default-value "^\\[fn:\\([-_[:word:]]+\\)\\]")
                nil [3207 3381])
            ("org-footnote-forbidden-blocks" variable
               (:constant-flag t
                :default-value (quote ("comment" "example" "export" "src")))
                nil [3383 3514])
            ("org-footnote" customgroup (:user-visible-flag t) nil [3538 3628])
            ("org-footnote-section" variable (:default-value "Footnotes") nil [3630 4677])
            ("org-footnote-define-inline" variable nil nil [4679 5021])
            ("org-footnote-auto-label" variable (:default-value t) nil [5023 5704])
            ("org-footnote-auto-adjust" variable nil nil [5706 6344])
            ("org-footnote-fill-after-inline-note-extraction" variable nil nil [6346 6690])
            ("org-footnote-in-valid-context-p" function nil nil [6711 7137])
            ("org-footnote-at-reference-p" function nil nil [7139 8582])
            ("org-footnote-at-definition-p" function nil nil [8584 9878])
            ("org-footnote--allow-reference-p" function nil nil [9907 12147])
            ("org-footnote--clear-footnote-section" function nil nil [12149 13087])
            ("org-footnote--set-label" function (:arguments ("label")) nil [13089 13404])
            ("org-footnote--collect-references" function (:arguments ("anonymous")) nil [13406 15924])
            ("org-footnote--collect-definitions" function (:arguments ("delete")) nil [15926 17210])
            ("org-footnote--goto-local-insertion-point" function nil nil [17212 17765])
            ("org-footnote-get-next-reference" function (:arguments ("label" "backward" "limit")) nil [17786 18572])
            ("org-footnote-next-reference-or-definition" function (:arguments ("limit")) nil [18574 19537])
            ("org-footnote-goto-definition" function
               (:user-visible-flag t
                :arguments ("label" "location"))
                nil [19539 20666])
            ("org-footnote-goto-previous-reference" function
               (:user-visible-flag t
                :arguments ("label"))
                nil [20668 21334])
            ("org-footnote-normalize-label" function (:arguments ("label")) nil [21352 21634])
            ("org-footnote-get-definition" function (:arguments ("label")) nil [21636 22550])
            ("org-footnote-all-labels" function nil nil [22552 23099])
            ("org-footnote-unique-label" function (:arguments ("current")) nil [23101 23514])
            ("org-footnote-new" function (:user-visible-flag t) nil [23551 25356])
            ("org-footnote-create-definition" function (:arguments ("label")) nil [25358 26203])
            ("org-footnote-delete-references" function (:arguments ("label")) nil [26205 26567])
            ("org-footnote-delete-definitions" function (:arguments ("label")) nil [26569 27193])
            ("org-footnote-delete" function (:arguments ("label")) nil [27195 28468])
            ("org-footnote-renumber-fn:N" function (:user-visible-flag t) nil [28512 29504])
            ("org-footnote-sort" function nil nil [29506 31281])
            ("org-footnote-normalize" function (:user-visible-flag t) nil [31283 34480])
            ("org-footnote-auto-adjust-maybe" function nil nil [34482 34984])
            ("org-footnote-action" function
               (:user-visible-flag t
                :arguments ("special"))
                nil [35028 37168])
            ("org-footnote" package nil nil [37171 37194]))          
      :file "org-footnote.el"
      :pointmax 37301
      :fsize 37300
      :lastmodtime '(22842 50887 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [1855 1872])
            ("org-macs" include nil nil [1873 1892])
            ("org-compat" include nil nil [1893 1914])
            ("declare-function" code nil nil [1916 1972])
            ("declare-function" code nil nil [1973 2045])
            ("declare-function" code nil nil [2046 2106])
            ("declare-function" code nil nil [2107 2179])
            ("declare-function" code nil nil [2180 2239])
            ("declare-function" code nil nil [2240 2307])
            ("declare-function" code nil nil [2308 2344])
            ("declare-function" code nil nil [2345 2389])
            ("declare-function" code nil nil [2390 2451])
            ("declare-function" code nil nil [2452 2507])
            ("defvar-local" code nil nil [2524 2860])
            ("org-macro--collect-macros" function nil nil [2877 4492])
            ("org-macro-initialize-templates" function nil nil [4494 6162])
            ("org-macro-expand" function (:arguments ("macro" "templates")) nil [6164 7231])
            ("org-macro-replace-all" function (:arguments ("templates" "finalize" "keywords")) nil [7233 9430])
            ("org-macro-escape-arguments" function (:arguments ("args")) nil [9432 10222])
            ("org-macro-extract-arguments" function (:arguments ("s")) nil [10224 10781])
            ("org-macro--vc-modified-time" function (:arguments ("file")) nil [10783 11513])
            ("org-macro" package nil nil [11516 11536]))          
      :file "org-macro.el"
      :pointmax 11564
      :fsize 11563
      :lastmodtime '(22842 50887 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :file "ob.el"
      :fsize 1262
      :lastmodtime '(22842 50887 0 0))
    (semanticdb-table "semanticdb-table"
      :file "ob-keys.el"
      :fsize 3963
      :lastmodtime '(22842 50887 0 0))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("ob-core" include nil nil [1190 1208])
            ("org-compat" include nil nil [1209 1230])
            ("comint" include nil nil [1231 1248])
            ("tramp" include nil nil [1249 1265])
            ("org-babel-comint-buffer-livep" function (:arguments ("buffer")) nil [1267 1499])
            ("org-babel-comint-in-buffer" function (:arguments ("buffer" "body")) nil [1501 2036])
            ("def-edebug-spec" code nil nil [2037 2093])
            ("org-babel-comint-with-output" function (:arguments ("meta" "body")) nil [2095 4319])
            ("def-edebug-spec" code nil nil [4320 4378])
            ("org-babel-comint-input-command" function (:arguments ("buffer" "cmd")) nil [4380 4669])
            ("org-babel-comint-wait-for-output" function (:arguments ("buffer")) nil [4671 5274])
            ("org-babel-comint-eval-invisibly-and-wait-for-file" function (:arguments ("buffer" "file" "string" "period")) nil [5276 6083])
            ("ob-comint" package nil nil [6085 6105]))          
      :file "ob-comint.el"
      :pointmax 6136
      :fsize 6135
      :lastmodtime '(22842 50887 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("org" include nil nil [5578 5592])
            ("avl-tree" include nil nil [5593 5612])
            ("cl-lib" include nil nil [5613 5630])
            ("org-element-paragraph-separate" variable nil nil [5941 6219])
            ("org-element--object-regexp" variable nil nil [6221 6545])
            ("org-element--set-regexps" function nil nil [6547 9173])
            ("org-element--set-regexps" code nil nil [9175 9201])
            ("org-element-update-syntax" function (:user-visible-flag t) nil [9218 9361])
            ("org-element-all-elements" variable
               (:constant-flag t
                :default-value (quote (babel-call center-block clock comment comment-block diary-sexp drawer dynamic-block example-block export-block fixed-width footnote-definition headline horizontal-rule inlinetask item keyword latex-environment node-property paragraph plain-list planning property-drawer quote-block section special-block src-block table table-row verse-block)))
                nil [9363 9821])
            ("org-element-greater-elements" variable
               (:constant-flag t
                :default-value (quote (center-block drawer dynamic-block footnote-definition headline inlinetask item plain-list property-drawer quote-block section special-block table)))
                nil [9823 10077])
            ("org-element-all-objects" variable
               (:constant-flag t
                :default-value (quote (bold code entity export-snippet footnote-reference inline-babel-call inline-src-block italic line-break latex-fragment link macro radio-target statistics-cookie strike-through subscript superscript table-cell target timestamp underline verbatim)))
                nil [10079 10404])
            ("org-element-recursive-objects" variable
               (:constant-flag t
                :default-value (quote (bold footnote-reference italic link subscript radio-target strike-through superscript table-cell underline)))
                nil [10406 10596])
            ("org-element-object-containers" variable
               (:constant-flag t
                :default-value (append org-element-recursive-objects (quote (paragraph table-row verse-block))))
                nil [10598 10785])
            ("org-element-affiliated-keywords" variable
               (:constant-flag t
                :default-value (quote ("CAPTION" "DATA" "HEADER" "HEADERS" "LABEL" "NAME" "PLOT" "RESNAME" "RESULT" "RESULTS" "SOURCE" "SRCNAME" "TBLNAME")))
                nil [10787 11122])
            ("org-element-keyword-translation-alist" variable
               (:constant-flag t
                :default-value (quote (("DATA" . "NAME") ("LABEL" . "NAME") ("RESNAME" . "NAME") ("SOURCE" . "NAME") ("SRCNAME" . "NAME") ("TBLNAME" . "NAME") ("RESULT" . "RESULTS") ("HEADERS" . "HEADER"))))
                nil [11124 11524])
            ("org-element-multiple-keywords" variable
               (:constant-flag t
                :default-value (quote ("CAPTION" "HEADER")))
                nil [11526 12004])
            ("org-element-parsed-keywords" variable
               (:constant-flag t
                :default-value (quote ("CAPTION")))
                nil [12006 12304])
            ("org-element--parsed-properties-alist" variable
               (:constant-flag t
                :default-value (mapcar (lambda (k) (cons k (intern (concat ":" (downcase k))))) org-element-parsed-keywords))
                nil [12306 12573])
            ("org-element-dual-keywords" variable
               (:constant-flag t
                :default-value (quote ("CAPTION" "RESULTS")))
                nil [12575 13014])
            ("org-element--affiliated-re" variable
               (:constant-flag t
                :default-value (format "[ 	]*#\\+\\(?:%s\\):[ 	]*" (concat (format "\\(?1:%s\\)\\(?:\\[\\(.*\\)\\]\\)?" (regexp-opt org-element-dual-keywords)) "\\|" (format "\\(?1:%s\\)" (regexp-opt (cl-remove-if (lambda (k) (member k org-element-dual-keywords)) org-element-affiliated-keywords))) "\\|" "\\(?1:ATTR_[-_A-Za-z0-9]+\\)")))
                nil [13016 13759])
            ("org-element-object-restrictions" variable
               (:constant-flag t
                :default-value (let* ((standard-set (remq (quote table-cell) org-element-all-objects)) (standard-set-no-line-break (remq (quote line-break) standard-set))) (\` ((bold (\,@ standard-set)) (footnote-reference (\,@ standard-set)) (headline (\,@ standard-set-no-line-break)) (inlinetask (\,@ standard-set-no-line-break)) (italic (\,@ standard-set)) (item (\,@ standard-set-no-line-break)) (keyword (\,@ (remq (quote footnote-reference) standard-set))) (link bold code entity export-snippet inline-babel-call inline-src-block italic latex-fragment macro simple-link statistics-cookie strike-through subscript superscript underline verbatim) (paragraph (\,@ standard-set)) (radio-target bold code entity italic latex-fragment strike-through subscript superscript underline superscript) (strike-through (\,@ standard-set)) (subscript (\,@ standard-set)) (superscript (\,@ standard-set)) (table-cell bold code entity export-snippet footnote-reference italic latex-fragment link macro radio-target strike-through subscript superscript target timestamp underline verbatim) (table-row table-cell) (underline (\,@ standard-set)) (verse-block (\,@ standard-set))))))
                nil [13761 15896])
            ("org-element-secondary-value-alist" variable
               (:constant-flag t
                :default-value (quote ((headline :title) (inlinetask :title) (item :tag))))
                nil [15898 16072])
            ("org-element--pair-round-table" variable
               (:constant-flag t
                :default-value (let ((table (make-syntax-table))) (modify-syntax-entry 40 "()" table) (modify-syntax-entry 41 ")(" table) (dolist (char (quote (123 125 91 93 60 62)) table) (modify-syntax-entry char " " table))))
                nil [16074 16423])
            ("org-element--pair-square-table" variable
               (:constant-flag t
                :default-value (let ((table (make-syntax-table))) (modify-syntax-entry 91 "(]" table) (modify-syntax-entry 93 ")[" table) (dolist (char (quote (123 125 40 41 60 62)) table) (modify-syntax-entry char " " table))))
                nil [16425 16776])
            ("org-element--pair-curly-table" variable
               (:constant-flag t
                :default-value (let ((table (make-syntax-table))) (modify-syntax-entry 123 "(}" table) (modify-syntax-entry 125 "){" table) (dolist (char (quote (91 93 40 41 60 62)) table) (modify-syntax-entry char " " table))))
                nil [16778 17127])
            ("org-element--parse-paired-brackets" function (:arguments ("char")) nil [17129 17800])
            ("org-element-type" function (:arguments ("element")) nil [18679 19092])
            ("org-element-property" function (:arguments ("property" "element")) nil [19094 19304])
            ("org-element-contents" function (:arguments ("element")) nil [19306 19481])
            ("org-element-restriction" function (:arguments ("element")) nil [19483 19773])
            ("org-element-put-property" function (:arguments ("element" "property" "value")) nil [19775 20048])
            ("org-element-set-contents" function (:arguments ("element" "contents")) nil [20050 20330])
            ("org-element-secondary-p" function (:arguments ("object")) nil [20332 20766])
            ("org-element-class" function (:arguments ("datum" "parent")) nil [20768 21835])
            ("org-element-adopt-elements" function (:arguments ("parent" "children")) nil [21837 22606])
            ("org-element-extract-element" function (:arguments ("element")) nil [22608 23236])
            ("org-element-insert-before" function (:arguments ("element" "location")) nil [23238 24662])
            ("org-element-set-element" function (:arguments ("old" "new")) nil [24664 25750])
            ("org-element-create" function (:arguments ("type" "props" "children")) nil [25752 26058])
            ("org-element-copy" function (:arguments ("datum")) nil [26060 26498])
            ("org-element-center-block-parser" function (:arguments ("limit" "affiliated")) nil [27952 29505])
            ("org-element-center-block-interpreter" function (:arguments ("_" "contents")) nil [29507 29710])
            ("org-element-drawer-parser" function (:arguments ("limit" "affiliated")) nil [29726 31370])
            ("org-element-drawer-interpreter" function (:arguments ("drawer" "contents")) nil [31372 31598])
            ("org-element-dynamic-block-parser" function (:arguments ("limit" "affiliated")) nil [31621 33342])
            ("org-element-dynamic-block-interpreter" function (:arguments ("dynamic-block" "contents")) nil [33344 33709])
            ("org-element--footnote-separator" variable
               (:constant-flag t
                :default-value (concat org-outline-regexp-bol "\\|" org-footnote-definition-re "\\|" "^\\([ 	]*
\\)\\{2,\\}"))
                nil [33738 33937])
            ("org-element-footnote-definition-parser" function (:arguments ("limit" "affiliated")) nil [33939 35875])
            ("org-element-footnote-definition-interpreter" function (:arguments ("footnote-definition" "contents")) nil [35877 36168])
            ("org-element--get-node-properties" function nil nil [36186 36908])
            ("org-element--get-time-properties" function nil nil [36910 37632])
            ("org-element-headline-parser" function (:arguments ("limit" "raw-secondary-p")) nil [37634 41103])
            ("org-element-headline-interpreter" function (:arguments ("headline" "contents")) nil [41105 42544])
            ("org-element-inlinetask-parser" function (:arguments ("limit" "raw-secondary-p")) nil [42564 45767])
            ("org-element-inlinetask-interpreter" function (:arguments ("inlinetask" "contents")) nil [45769 47019])
            ("org-element-item-parser" function (:arguments ("_" "struct" "raw-secondary-p")) nil [47033 49525])
            ("org-element-item-interpreter" function (:arguments ("item" "contents")) nil [49527 50703])
            ("org-element--list-struct" function (:arguments ("limit")) nil [50723 53571])
            ("org-element-plain-list-parser" function (:arguments ("limit" "affiliated" "structure")) nil [53573 55159])
            ("org-element-plain-list-interpreter" function (:arguments ("_" "contents")) nil [55161 55418])
            ("org-element-property-drawer-parser" function (:arguments ("limit")) nil [55443 56452])
            ("org-element-property-drawer-interpreter" function (:arguments ("_" "contents")) nil [56454 56657])
            ("org-element-quote-block-parser" function (:arguments ("limit" "affiliated")) nil [56678 58183])
            ("org-element-quote-block-interpreter" function (:arguments ("_" "contents")) nil [58185 58382])
            ("org-element-section-parser" function (:arguments ("_")) nil [58399 59156])
            ("org-element-section-interpreter" function (:arguments ("_" "contents")) nil [59158 59307])
            ("org-element-special-block-parser" function (:arguments ("limit" "affiliated")) nil [59330 60997])
            ("org-element-special-block-interpreter" function (:arguments ("special-block" "contents")) nil [60999 61296])
            ("org-element-babel-call-parser" function (:arguments ("limit" "affiliated")) nil [61745 63253])
            ("org-element-babel-call-interpreter" function (:arguments ("babel-call" "_")) nil [63255 63674])
            ("org-element-clock-parser" function (:arguments ("limit")) nil [63689 64787])
            ("org-element-clock-interpreter" function (:arguments ("clock" "_")) nil [64789 65165])
            ("org-element-comment-parser" function (:arguments ("limit" "affiliated")) nil [65182 66576])
            ("org-element-comment-interpreter" function (:arguments ("comment" "_")) nil [66578 66767])
            ("org-element-comment-block-parser" function (:arguments ("limit" "affiliated")) nil [66790 68160])
            ("org-element-comment-block-interpreter" function (:arguments ("comment-block" "_")) nil [68162 68434])
            ("org-element-diary-sexp-parser" function (:arguments ("limit" "affiliated")) nil [68454 69421])
            ("org-element-diary-sexp-interpreter" function (:arguments ("diary-sexp" "_")) nil [69423 69563])
            ("org-element-example-block-parser" function (:arguments ("limit" "affiliated")) nil [69586 72369])
            ("org-element-example-block-interpreter" function (:arguments ("example-block" "_")) nil [72371 72921])
            ("org-element-export-block-parser" function (:arguments ("limit" "affiliated")) nil [72943 74583])
            ("org-element-export-block-interpreter" function (:arguments ("export-block" "_")) nil [74585 74834])
            ("org-element-fixed-width-parser" function (:arguments ("limit" "affiliated")) nil [74855 76076])
            ("org-element-fixed-width-interpreter" function (:arguments ("fixed-width" "_")) nil [76078 76369])
            ("org-element-horizontal-rule-parser" function (:arguments ("limit" "affiliated")) nil [76394 77249])
            ("org-element-horizontal-rule-interpreter" function (:arguments ("_")) nil [77251 77371])
            ("org-element-keyword-parser" function (:arguments ("limit" "affiliated")) nil [77388 78653])
            ("org-element-keyword-interpreter" function (:arguments ("keyword" "_")) nil [78655 78853])
            ("org-element--latex-begin-environment" variable
               (:constant-flag t
                :default-value "^[ 	]*\\\\begin{\\([A-Za-z0-9*]+\\)}")
                nil [78880 79123])
            ("org-element--latex-end-environment" variable
               (:constant-flag t
                :default-value "\\\\end{%s}[ 	]*$")
                nil [79125 79304])
            ("org-element-latex-environment-parser" function (:arguments ("limit" "affiliated")) nil [79306 80662])
            ("org-element-latex-environment-interpreter" function (:arguments ("latex-environment" "_")) nil [80664 80840])
            ("org-element-node-property-parser" function (:arguments ("limit")) nil [80863 81559])
            ("org-element-node-property-interpreter" function (:arguments ("node-property" "_")) nil [81561 81822])
            ("org-element-paragraph-parser" function (:arguments ("limit" "affiliated")) nil [81841 84254])
            ("org-element-paragraph-interpreter" function (:arguments ("_" "contents")) nil [84256 84409])
            ("org-element-planning-parser" function (:arguments ("limit")) nil [84427 85604])
            ("org-element-planning-interpreter" function (:arguments ("planning" "_")) nil [85606 86293])
            ("org-element-src-block-parser" function (:arguments ("limit" "affiliated")) nil [86312 89573])
            ("org-element-src-block-interpreter" function (:arguments ("src-block" "_")) nil [89575 90519])
            ("org-element-table-parser" function (:arguments ("limit" "affiliated")) nil [90534 92293])
            ("org-element-table-interpreter" function (:arguments ("table" "contents")) nil [92295 92798])
            ("org-element-table-row-parser" function (:arguments ("_")) nil [92817 93693])
            ("org-element-table-row-interpreter" function (:arguments ("table-row" "contents")) nil [93695 93935])
            ("org-element-verse-block-parser" function (:arguments ("limit" "affiliated")) nil [93956 95314])
            ("org-element-verse-block-interpreter" function (:arguments ("_" "contents")) nil [95316 95506])
            ("org-element-bold-parser" function nil nil [96090 96871])
            ("org-element-bold-interpreter" function (:arguments ("_" "contents")) nil [96873 97030])
            ("org-element-code-parser" function nil nil [97044 97714])
            ("org-element-code-interpreter" function (:arguments ("code" "_")) nil [97716 97855])
            ("org-element-entity-parser" function nil nil [97871 99059])
            ("org-element-entity-interpreter" function (:arguments ("entity" "_")) nil [99061 99269])
            ("org-element-export-snippet-parser" function nil nil [99293 100235])
            ("org-element-export-snippet-interpreter" function (:arguments ("export-snippet" "_")) nil [100237 100475])
            ("org-element-footnote-reference-parser" function nil nil [100503 101524])
            ("org-element-footnote-reference-interpreter" function (:arguments ("footnote-reference" "contents")) nil [101526 101835])
            ("org-element-inline-babel-call-parser" function nil nil [101862 103369])
            ("org-element-inline-babel-call-interpreter" function (:arguments ("inline-babel-call" "_")) nil [103371 103829])
            ("org-element-inline-src-block-parser" function nil nil [103855 104957])
            ("org-element-inline-src-block-interpreter" function (:arguments ("inline-src-block" "_")) nil [104959 105373])
            ("org-element-italic-parser" function nil nil [105388 106181])
            ("org-element-italic-interpreter" function (:arguments ("_" "contents")) nil [106183 106344])
            ("org-element-latex-fragment-parser" function nil nil [106368 107700])
            ("org-element-latex-fragment-interpreter" function (:arguments ("latex-fragment" "_")) nil [107702 107865])
            ("org-element-line-break-parser" function nil nil [107884 108351])
            ("org-element-line-break-interpreter" function (:arguments ("_")) nil [108353 108463])
            ("org-element-link-parser" function nil nil [108477 113376])
            ("org-element-link-interpreter" function (:arguments ("link" "contents")) nil [113378 114802])
            ("org-element-macro-parser" function nil nil [114817 115684])
            ("org-element-macro-interpreter" function (:arguments ("macro" "_")) nil [115686 115813])
            ("org-element-radio-target-parser" function nil nil [115835 116668])
            ("org-element-radio-target-interpreter" function (:arguments ("_" "contents")) nil [116670 116842])
            ("org-element-statistics-cookie-parser" function nil nil [116869 117615])
            ("org-element-statistics-cookie-interpreter" function (:arguments ("statistics-cookie" "_")) nil [117617 117792])
            ("org-element-strike-through-parser" function nil nil [117816 118651])
            ("org-element-strike-through-interpreter" function (:arguments ("_" "contents")) nil [118653 118830])
            ("org-element-subscript-parser" function nil nil [118849 119787])
            ("org-element-subscript-interpreter" function (:arguments ("subscript" "contents")) nil [119789 120031])
            ("org-element-superscript-parser" function nil nil [120052 120995])
            ("org-element-superscript-interpreter" function (:arguments ("superscript" "contents")) nil [120997 121247])
            ("org-element-table-cell-parser" function nil nil [121267 121807])
            ("org-element-table-cell-interpreter" function (:arguments ("_" "contents")) nil [121809 121988])
            ("org-element-target-parser" function nil nil [122004 122614])
            ("org-element-target-interpreter" function (:arguments ("target" "_")) nil [122616 122765])
            ("org-element--timestamp-regexp" variable
               (:constant-flag t
                :default-value (concat org-ts-regexp-both "\\|" "\\(?:<[0-9]+-[0-9]+-[0-9]+[^>
]+?\\+[0-9]+[dwmy]>\\)" "\\|" "\\(?:<%%\\(?:([^>
]+)\\)>\\)"))
                nil [122784 123013])
            ("org-element-timestamp-parser" function nil nil [123015 126763])
            ("org-element-timestamp-interpreter" function (:arguments ("timestamp" "_")) nil [126765 130462])
            ("org-element-underline-parser" function nil nil [130481 131293])
            ("org-element-underline-interpreter" function (:arguments ("_" "contents")) nil [131295 131462])
            ("org-element-verbatim-parser" function nil nil [131480 132175])
            ("org-element-verbatim-interpreter" function (:arguments ("verbatim" "_")) nil [132177 132332])
            ("org-element--current-element" function (:arguments ("limit" "granularity" "mode" "structure")) nil [132839 138373])
            ("org-element--collect-affiliated-keywords" function (:arguments ("limit")) nil [138646 141323])
            ("org-element-parse-buffer" function (:arguments ("granularity" "visible-only")) nil [141873 144091])
            ("org-element-parse-secondary-string" function (:arguments ("string" "restriction" "parent")) nil [144093 144941])
            ("org-element-map" function (:arguments ("data" "types" "fun" "info" "first-match" "no-recursion" "with-affiliated")) nil [144943 151267])
            ("put" code nil nil [151268 151314])
            ("org-element--next-mode" function (:arguments ("type" "parentp")) nil [151668 152351])
            ("org-element--parse-elements" function (:arguments ("beg" "end" "mode" "structure" "granularity" "visible-only" "acc")) nil [152353 155229])
            ("org-element--object-lex" function (:arguments ("restriction")) nil [155231 159475])
            ("org-element--parse-objects" function (:arguments ("beg" "end" "acc" "restriction" "parent")) nil [159477 161534])
            ("org-element-interpret-data" function (:arguments ("data")) nil [161925 164377])
            ("org-element--interpret-affiliated-keywords" function (:arguments ("element")) nil [164379 165954])
            ("org-element-normalize-string" function (:arguments ("s")) nil [166459 166856])
            ("org-element-normalize-contents" function (:arguments ("element" "ignore-first")) nil [166858 170333])
            ("org-element-use-cache" variable nil nil [172630 172881])
            ("org-element-cache-sync-idle-time" variable (:default-value 0.6) nil [172883 172987])
            ("org-element-cache-sync-duration" variable (:default-value (seconds-to-time 0.04)) nil [172989 173250])
            ("org-element-cache-sync-break" variable (:default-value (seconds-to-time 0.3)) nil [173252 173441])
            ("org-element--cache" variable nil nil [173465 173678])
            ("org-element--cache-objects" variable nil nil [173680 174488])
            ("org-element--cache-sync-requests" variable nil nil [174490 175723])
            ("org-element--cache-sync-timer" variable nil nil [175725 175809])
            ("org-element--cache-sync-keys" variable nil nil [175811 175961])
            ("org-element--cache-key" function (:arguments ("element")) nil [175963 177245])
            ("org-element--cache-generate-key" function (:arguments ("lower" "upper")) nil [177247 179499])
            ("org-element--cache-key-less-p" function (:arguments ("a" "b")) nil [179501 180234])
            ("org-element--cache-compare" function (:arguments ("a" "b")) nil [180236 180425])
            ("org-element--cache-root" function nil nil [180427 180625])
            ("org-element--cache-active-p" function nil nil [180640 180823])
            ("org-element--cache-find" function (:arguments ("pos" "side")) nil [180825 182752])
            ("org-element--cache-put" function (:arguments ("element" "data")) nil [182754 183914])
            ("org-element--cache-remove" function (:arguments ("element")) nil [183916 184147])
            ("org-element--cache-set-timer" function (:arguments ("buffer")) nil [184172 184604])
            ("org-element--cache-interrupt-p" function (:arguments ("time-limit")) nil [184606 184852])
            ("org-element--cache-shift-positions" function (:arguments ("element" "offset" "props")) nil [184854 185996])
            ("org-element--cache-sync" function (:arguments ("buffer" "threshold" "future-change")) nil [185998 187718])
            ("org-element--cache-process-request" function (:arguments ("request" "next" "threshold" "time-limit" "future-change")) nil [187720 195235])
            ("org-element--parse-to" function (:arguments ("pos" "syncp" "time-limit")) nil [195237 200811])
            ("org-element--cache-sensitive-re" variable
               (:constant-flag t
                :default-value (concat org-outline-regexp-bol "\\|" "\\\\end{[A-Za-z0-9*]+}[ 	]*$" "\\|" "^[ 	]*\\(?:" "#\\+\\(?:BEGIN[:_]\\|END\\(?:_\\|:?[ 	]*$\\)\\)" "\\|" "\\\\begin{[A-Za-z0-9*]+}" "\\|" ":\\(?:\\w\\|[-_]\\)+:[ 	]*$" "\\)"))
                nil [200843 201402])
            ("org-element--cache-change-warning" variable nil nil [201404 201552])
            ("org-element--cache-before-change" function (:arguments ("beg" "end")) nil [201554 202263])
            ("org-element--cache-after-change" function (:arguments ("beg" "end" "pre")) nil [202265 203847])
            ("org-element--cache-for-removal" function (:arguments ("beg" "end" "offset")) nil [203849 205759])
            ("org-element--cache-submit-request" function (:arguments ("beg" "end" "offset")) nil [205761 208799])
            ("org-element-cache-reset" function
               (:user-visible-flag t
                :arguments ("all"))
                nil [208840 209743])
            ("org-element-cache-refresh" function (:arguments ("pos")) nil [209760 210026])
            ("org-element-at-point" function nil nil [210747 212199])
            ("org-element-context" function (:arguments ("element")) nil [212216 219786])
            ("org-element-lineage" function (:arguments ("blob" "types" "with-self")) nil [219788 220675])
            ("org-element-nested-p" function (:arguments ("elem-A" "elem-B")) nil [220677 221056])
            ("org-element-swap-A-B" function (:arguments ("elem-A" "elem-B")) nil [221058 223844])
            ("org-element" package nil nil [223847 223869]))          
      :file "org-element.el"
      :pointmax 223975
      :fsize 223974
      :lastmodtime '(22842 50887 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("org" include nil nil [2880 2894])
            ("declare-function" code nil nil [2896 2945])
            ("org-id" customgroup (:user-visible-flag t) nil [2966 3078])
            ("org-id-link-to-org-use-id" variable nil nil [3080 4695])
            ("org-id-uuid-program" variable (:default-value "uuidgen") nil [4697 4796])
            ("org-id-method" variable (:default-value (quote uuid)) nil [4798 5579])
            ("org-id-prefix" variable nil nil [5581 5918])
            ("org-id-include-domain" variable nil nil [5920 6427])
            ("org-id-track-globally" variable (:default-value t) nil [6429 6952])
            ("org-id-locations-file" variable (:default-value (convert-standard-filename (concat user-emacs-directory ".org-id-locations"))) nil [6954 7232])
            ("org-id-locations" variable nil nil [7234 7306])
            ("org-id-files" variable nil nil [7308 7369])
            ("org-id-extra-files" variable (:default-value (quote org-agenda-text-search-extra-files)) nil [7371 7980])
            ("org-id-search-archives" variable (:default-value t) nil [7982 8317])
            ("org-id-get-create" function
               (:user-visible-flag t
                :arguments ("force"))
                nil [8357 8667])
            ("org-id-copy" function (:user-visible-flag t) nil [8684 8847])
            ("org-id-get" function (:arguments ("pom" "create" "prefix")) nil [8864 9531])
            ("org-id-get-with-outline-path-completion" function (:arguments ("targets")) nil [9548 10298])
            ("org-id-get-with-outline-drilling" function nil nil [10315 10757])
            ("org-id-goto" function
               (:user-visible-flag t
                :arguments ("id"))
                nil [10774 11147])
            ("org-id-find" function (:arguments ("id" "markerp")) nil [11164 11864])
            ("org-id-new" function (:arguments ("prefix")) nil [11926 13046])
            ("org-id-uuid" function nil nil [13048 13610])
            ("org-id-int-to-b36-one-digit" function (:arguments ("i")) nil [13612 13821])
            ("org-id-b36-to-int-one-digit" function (:arguments ("i")) nil [13823 14160])
            ("org-id-int-to-b36" function (:arguments ("i" "length")) nil [14162 14559])
            ("org-id-b36-to-int" function (:arguments ("s")) nil [14561 14756])
            ("org-id-time-to-b36" function (:arguments ("time")) nil [14758 15102])
            ("org-id-decode" function (:arguments ("id")) nil [15104 15751])
            ("org-id-update-id-locations" function
               (:user-visible-flag t
                :arguments ("files" "silent"))
                nil [15801 18724])
            ("org-id-locations-save" function nil nil [18726 19118])
            ("org-id-locations-load" function nil nil [19120 19694])
            ("org-id-add-location" function (:arguments ("id" "file")) nil [19696 20088])
            ("unless" code nil nil [20090 20166])
            ("org-id-hash-to-alist" function (:arguments ("hash")) nil [20168 20439])
            ("org-id-alist-to-hash" function (:arguments ("list")) nil [20441 20755])
            ("org-id-paste-tracker" function (:arguments ("txt" "buffer-or-file")) nil [20757 21421])
            ("org-id-find-id-file" function (:arguments ("id")) nil [21476 21857])
            ("org-id-find-id-in-file" function (:arguments ("id" "file" "markerp")) nil [21859 22500])
            ("org-id-store-link" function (:user-visible-flag t) nil [22664 23205])
            ("org-id-open" function (:arguments ("id")) nil [23207 23913])
            ("org-link-set-parameters" code nil nil [23915 23967])
            ("org-id" package nil nil [23969 23986]))          
      :file "org-id.el"
      :pointmax 24087
      :fsize 24086
      :lastmodtime '(22842 50887 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("ob-core" include nil nil [1676 1694])
            ("cl-lib" include nil nil [1695 1712])
            ("declare-function" code nil nil [1714 1782])
            ("declare-function" code nil nil [1783 1839])
            ("declare-function" code nil nil [1840 1912])
            ("declare-function" code nil nil [1913 1972])
            ("declare-function" code nil nil [1973 2035])
            ("declare-function" code nil nil [2036 2105])
            ("declare-function" code nil nil [2106 2158])
            ("declare-function" code nil nil [2159 2237])
            ("declare-function" code nil nil [2238 2316])
            ("declare-function" code nil nil [2317 2366])
            ("declare-function" code nil nil [2367 2424])
            ("declare-function" code nil nil [2425 2482])
            ("org-babel-ref-split-regexp" variable (:default-value "[ 	
]*\\(.+?\\)[ 	
]*=[ 	
]*\\(.+\\)[ 	
]*") nil [2484 2598])
            ("org-babel-update-intermediate" variable nil nil [2600 2722])
            ("org-babel-ref-parse" function (:arguments ("assignment")) nil [2724 3804])
            ("org-babel-ref-goto-headline-id" function (:arguments ("id")) nil [3806 4202])
            ("org-babel-ref-headline-body" function nil nil [4204 4422])
            ("org-babel-library-of-babel" variable nil nil [4424 4459])
            ("org-babel-ref-resolve" function (:arguments ("ref")) nil [4460 7587])
            ("org-babel-ref-index-list" function (:arguments ("index" "lis")) nil [7589 9220])
            ("org-babel-ref-split-args" function (:arguments ("arg-string")) nil [9222 9401])
            ("ob-ref" package nil nil [9404 9421]))          
      :file "ob-ref.el"
      :pointmax 9447
      :fsize 9446
      :lastmodtime '(22842 50887 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("org" include nil nil [2114 2128])
            ("org-annotate-file" customgroup (:user-visible-flag t) nil [2130 2193])
            ("org-annotate-file-storage-file" variable (:default-value "~/.org-annotate-file.org") nil [2195 2345])
            ("org-annotate-file-add-search" variable nil nil [2347 2510])
            ("org-annotate-file-always-open" variable (:default-value t) nil [2512 2679])
            ("org-annotate-file-ellipsify-desc" function (:arguments ("string" "after")) nil [2681 3373])
            ("org-annotate-file" function (:user-visible-flag t) nil [3390 3780])
            ("org-annotate-file-show-section" function (:arguments ("storage-file" "annotated-buffer")) nil [3797 4397])
            ("org-annotate-file-annotate" function (:arguments ("filename" "line")) nil [4399 5306])
            ("org-annotate-file-add-upper-level" function (:arguments ("link")) nil [5308 5475])
            ("org-annotate-file-add-second-level" function (:arguments ("link")) nil [5477 5654])
            ("org-annotate-file" package nil nil [5656 5684]))          
      :file "org-annotate-file.el"
      :pointmax 5721
      :fsize 5720
      :lastmodtime '(22842 50887 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("org" include nil nil [1910 1924])
            ("declare-function" code nil nil [1972 2039])
            ("declare-function" code nil nil [2040 2078])
            ("declare-function" code nil nil [2079 2125])
            ("declare-function" code nil nil [2126 2174])
            ("declare-function" code nil nil [2175 2244])
            ("declare-function" code nil nil [2245 2290])
            ("declare-function" code nil nil [2291 2347])
            ("declare-function" code nil nil [2348 2409])
            ("org-irc-client" variable (:default-value (quote erc)) nil [2411 2469])
            ("org-irc-link-to-logs" variable nil nil [2470 2581])
            ("erc-default-port" variable nil nil [2583 2608])
            ("erc-session-port" variable nil nil [2644 2669])
            ("erc-session-server" variable nil nil [2713 2740])
            ("org-link-set-parameters" code nil nil [2845 2928])
            ("org-irc-visit" function (:arguments ("link")) nil [2930 3201])
            ("org-irc-parse-link" function (:arguments ("link")) nil [3203 3682])
            ("org-irc-store-link" function nil nil [3699 3873])
            ("org-irc-ellipsify-description" function (:arguments ("string" "after")) nil [3875 4441])
            ("org-irc-erc-get-line-from-log" function (:arguments ("erc-line")) nil [4470 5335])
            ("org-irc-erc-store-link" function nil nil [5337 6597])
            ("org-irc-get-erc-link" function nil nil [6599 7174])
            ("org-irc-get-current-erc-port" function nil nil [7176 7493])
            ("org-irc-visit-erc" function (:arguments ("link")) nil [7495 8982])
            ("org-irc" package nil nil [8984 9002]))          
      :file "org-irc.el"
      :pointmax 9104
      :fsize 9103
      :lastmodtime '(22842 50887 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("org" include nil nil [1324 1338])
            ("gnus-util" include nil nil [1339 1359])
            ("gnus-sum" include nil nil [1379 1398])
            ("declare-function" code nil nil [1446 1521])
            ("declare-function" code nil nil [1522 1579])
            ("declare-function" code nil nil [1580 1639])
            ("declare-function" code nil nil [1640 1702])
            ("defvaralias" code nil nil [1732 1804])
            ("org-gnus-prefer-web-links" variable nil nil [1806 2160])
            ("org-gnus-nnimap-query-article-no-from-file" variable nil nil [2162 2678])
            ("org-gnus-no-server" variable nil nil [2680 2853])
            ("org-link-set-parameters" code nil nil [2880 2965])
            ("org-gnus-nnimap-cached-article-number" function (:arguments ("group" "server" "message-id")) nil [2986 3854])
            ("org-gnus-group-link" function (:arguments ("group")) nil [3856 4593])
            ("org-gnus-article-link" function (:arguments ("group" "newsgroups" "message-id" "x-no-archive")) nil [4595 5575])
            ("org-gnus-store-link" function nil nil [5577 9165])
            ("org-gnus-open-nntp" function (:arguments ("path")) nil [9167 9482])
            ("org-gnus-open" function (:arguments ("path")) nil [9484 9939])
            ("org-gnus-follow-link" function (:arguments ("group" "article")) nil [9941 11538])
            ("org-gnus-no-new-news" function nil nil [11540 11699])
            ("org-gnus" package nil nil [11701 11720]))          
      :file "org-gnus.el"
      :pointmax 11749
      :fsize 11748
      :lastmodtime '(22842 50887 0 0)
      :unmatched-syntax '((close-paren 1398 . 1399) (symbol 1361 . 1378) (open-paren 1360 . 1361)))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [1078 1095])
            ("ox-html" include nil nil [1096 1114])
            ("ox-publish" include nil nil [1115 1136])
            ("org-export-md" customgroup (:user-visible-flag t) nil [1173 1346])
            ("org-md-headline-style" variable (:default-value (quote atx)) nil [1348 1604])
            ("org-md-footnotes-section" variable (:default-value "%s%s") nil [1623 1942])
            ("org-md-footnote-format" variable (:default-value "<sup>%s</sup>") nil [1944 2190])
            ("org-export-define-derived-backend" code nil nil [2215 3829])
            ("org-md-separate-elements" function (:arguments ("tree" "_backend" "info")) nil [3846 4874])
            ("org-md-bold" function (:arguments ("_bold" "contents" "_info")) nil [4915 5125])
            ("org-md-verbatim" function (:arguments ("verbatim" "_contents" "_info")) nil [5152 5558])
            ("org-md-example-block" function (:arguments ("example-block" "_contents" "info")) nil [5609 5920])
            ("org-md-export-block" function (:arguments ("export-block" "contents" "info")) nil [5922 6357])
            ("org-md-headline" function (:arguments ("headline" "contents" "info")) nil [6375 8324])
            ("org-md--headline-referred-p" function (:arguments ("headline" "info")) nil [8327 8841])
            ("org-md--headline-title" function (:arguments ("style" "level" "title" "anchor" "tags")) nil [8843 9692])
            ("org-md-horizontal-rule" function (:arguments ("_horizontal-rule" "_contents" "_info")) nil [9716 9941])
            ("org-md-italic" function (:arguments ("_italic" "contents" "_info")) nil [9957 10173])
            ("org-md-item" function (:arguments ("item" "contents" "info")) nil [10187 11117])
            ("org-md-keyword" function (:arguments ("keyword" "contents" "info")) nil [11135 11475])
            ("org-md-line-break" function (:arguments ("_line-break" "_contents" "_info")) nil [11495 11680])
            ("org-md-link" function (:arguments ("link" "contents" "info")) nil [11694 14620])
            ("org-md-node-property" function (:arguments ("node-property" "_contents" "_info")) nil [14643 15015])
            ("org-md-paragraph" function (:arguments ("paragraph" "contents" "_info")) nil [15034 15450])
            ("org-md-plain-list" function (:arguments ("_plain-list" "contents" "_info")) nil [15470 15677])
            ("org-md-plain-text" function (:arguments ("text" "info")) nil [15697 16712])
            ("org-md-property-drawer" function (:arguments ("_property-drawer" "contents" "_info")) nil [16737 17044])
            ("org-md-quote-block" function (:arguments ("_quote-block" "contents" "_info")) nil [17065 17356])
            ("org-md-section" function (:arguments ("_section" "contents" "_info")) nil [17373 17568])
            ("org-md--footnote-formatted" function (:arguments ("footnote" "info")) nil [17586 18152])
            ("org-md--footnote-section" function (:arguments ("info")) nil [18154 18898])
            ("org-md-inner-template" function (:arguments ("contents" "info")) nil [18900 19436])
            ("org-md-template" function (:arguments ("contents" "_info")) nil [19438 19646])
            ("org-md-export-as-markdown" function
               (:user-visible-flag t
                :arguments ("async" "subtreep" "visible-only"))
                nil [19692 20593])
            ("org-md-convert-region-to-md" function (:user-visible-flag t) nil [20610 20923])
            ("org-md-export-to-markdown" function
               (:user-visible-flag t
                :arguments ("async" "subtreep" "visible-only"))
                nil [20941 21747])
            ("org-md-publish-to-md" function (:arguments ("plist" "filename" "pub-dir")) nil [21764 22084])
            ("ox-md" package nil nil [22086 22102]))          
      :file "ox-md.el"
      :pointmax 22202
      :fsize 22201
      :lastmodtime '(22842 50887 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [1129 1146])
            ("format-spec" include nil nil [1147 1169])
            ("ox" include nil nil [1170 1183])
            ("ox-publish" include nil nil [1184 1205])
            ("table" include nil nil [1206 1222])
            ("declare-function" code nil nil [1253 1305])
            ("declare-function" code nil nil [1306 1363])
            ("declare-function" code nil nil [1364 1417])
            ("htmlize-css-name-prefix" variable nil nil [1419 1451])
            ("htmlize-output-type" variable nil nil [1452 1480])
            ("htmlize-output-type" variable nil nil [1481 1509])
            ("htmlize-css-name-prefix" variable nil nil [1510 1542])
            ("org-export-define-backend" code nil nil [1565 7761])
            ("org-html-format-table-no-css" variable nil nil [7789 7826])
            ("htmlize-buffer-places" variable nil nil [7827 7857])
            ("org-html--pre/postamble-class" variable (:default-value "status") nil [7878 7962])
            ("org-html-doctype-alist" variable
               (:constant-flag t
                :default-value (quote (("html4-strict" . "<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01//EN\"
\"http://www.w3.org/TR/html4/strict.dtd\">") ("html4-transitional" . "<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\"
\"http://www.w3.org/TR/html4/loose.dtd\">") ("html4-frameset" . "<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Frameset//EN\"
\"http://www.w3.org/TR/html4/frameset.dtd\">") ("xhtml-strict" . "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\"
\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">") ("xhtml-transitional" . "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"
\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">") ("xhtml-frameset" . "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Frameset//EN\"
\"http://www.w3.org/TR/xhtml1/DTD/xhtml1-frameset.dtd\">") ("xhtml-11" . "<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.1//EN\"
\"http://www.w3.org/TR/xhtml1/DTD/xhtml11.dtd\">") ("html5" . "<!DOCTYPE html>") ("xhtml5" . "<!DOCTYPE html>"))))
                nil [7964 9082])
            ("org-html-html5-elements" variable
               (:constant-flag t
                :default-value (quote ("article" "aside" "audio" "canvas" "details" "figcaption" "figure" "footer" "header" "menu" "meter" "nav" "output" "progress" "section" "video")))
                nil [9084 9401])
            ("org-html-special-string-regexps" variable
               (:constant-flag t
                :default-value (quote (("\\\\-" . "&#x00ad;") ("---\\([^-]\\)" . "&#x2014;\\1") ("--\\([^-]\\)" . "&#x2013;\\1") ("\\.\\.\\." . "&#x2026;"))))
                nil [9403 9667])
            ("org-html-scripts" variable
               (:constant-flag t
                :default-value "<script type=\"text/javascript\">
/*
@licstart  The following is the entire license notice for the
JavaScript code in this tag.

Copyright (C) 2012-2017 Free Software Foundation, Inc.

The JavaScript code in this tag is free software: you can
redistribute it and/or modify it under the terms of the GNU
General Public License (GNU GPL) as published by the Free Software
Foundation, either version 3 of the License, or (at your option)
any later version.  The code is distributed WITHOUT ANY WARRANTY;
without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE.  See the GNU GPL for more details.

As additional permission under GNU GPL version 3 section 7, you
may distribute non-source (e.g., minimized or compacted) forms of
that code without the copy of the GNU GPL normally required by
section 4, provided you include this license notice and a URL
through which recipients can access the Corresponding Source.


@licend  The above is the entire license notice
for the JavaScript code in this tag.
*/
<!--/*--><![CDATA[/*><!--*/
 function CodeHighlightOn(elem, id)
 {
   var target = document.getElementById(id);
   if(null != target) {
     elem.cacheClassElem = elem.className;
     elem.cacheClassTarget = target.className;
     target.className = \"code-highlighted\";
     elem.className   = \"code-highlighted\";
   }
 }
 function CodeHighlightOff(elem, id)
 {
   var target = document.getElementById(id);
   if(elem.cacheClassElem)
     elem.className = elem.cacheClassElem;
   if(elem.cacheClassTarget)
     target.className = elem.cacheClassTarget;
 }
/*]]>*///-->
</script>")
                nil [9669 11389])
            ("org-html-style-default" variable
               (:constant-flag t
                :default-value "<style type=\"text/css\">
 <!--/*--><![CDATA[/*><!--*/
  .title  { text-align: center;
             margin-bottom: .2em; }
  .subtitle { text-align: center;
              font-size: medium;
              font-weight: bold;
              margin-top:0; }
  .todo   { font-family: monospace; color: red; }
  .done   { font-family: monospace; color: green; }
  .priority { font-family: monospace; color: orange; }
  .tag    { background-color: #eee; font-family: monospace;
            padding: 2px; font-size: 80%; font-weight: normal; }
  .timestamp { color: #bebebe; }
  .timestamp-kwd { color: #5f9ea0; }
  .org-right  { margin-left: auto; margin-right: 0px;  text-align: right; }
  .org-left   { margin-left: 0px;  margin-right: auto; text-align: left; }
  .org-center { margin-left: auto; margin-right: auto; text-align: center; }
  .underline { text-decoration: underline; }
  #postamble p, #preamble p { font-size: 90%; margin: .2em; }
  p.verse { margin-left: 3%; }
  pre {
    border: 1px solid #ccc;
    box-shadow: 3px 3px 3px #eee;
    padding: 8pt;
    font-family: monospace;
    overflow: auto;
    margin: 1.2em;
  }
  pre.src {
    position: relative;
    overflow: visible;
    padding-top: 1.2em;
  }
  pre.src:before {
    display: none;
    position: absolute;
    background-color: white;
    top: -10px;
    right: 10px;
    padding: 3px;
    border: 1px solid black;
  }
  pre.src:hover:before { display: inline;}
  /* Languages per Org manual */
  pre.src-asymptote:before { content: 'Asymptote'; }
  pre.src-awk:before { content: 'Awk'; }
  pre.src-C:before { content: 'C'; }
  /* pre.src-C++ doesn't work in CSS */
  pre.src-clojure:before { content: 'Clojure'; }
  pre.src-css:before { content: 'CSS'; }
  pre.src-D:before { content: 'D'; }
  pre.src-ditaa:before { content: 'ditaa'; }
  pre.src-dot:before { content: 'Graphviz'; }
  pre.src-calc:before { content: 'Emacs Calc'; }
  pre.src-emacs-lisp:before { content: 'Emacs Lisp'; }
  pre.src-fortran:before { content: 'Fortran'; }
  pre.src-gnuplot:before { content: 'gnuplot'; }
  pre.src-haskell:before { content: 'Haskell'; }
  pre.src-java:before { content: 'Java'; }
  pre.src-js:before { content: 'Javascript'; }
  pre.src-latex:before { content: 'LaTeX'; }
  pre.src-ledger:before { content: 'Ledger'; }
  pre.src-lisp:before { content: 'Lisp'; }
  pre.src-lilypond:before { content: 'Lilypond'; }
  pre.src-lua:before { content: 'Lua'; }
  pre.src-matlab:before { content: 'MATLAB'; }
  pre.src-mscgen:before { content: 'Mscgen'; }
  pre.src-ocaml:before { content: 'Objective Caml'; }
  pre.src-octave:before { content: 'Octave'; }
  pre.src-org:before { content: 'Org mode'; }
  pre.src-oz:before { content: 'OZ'; }
  pre.src-plantuml:before { content: 'Plantuml'; }
  pre.src-processing:before { content: 'Processing.js'; }
  pre.src-python:before { content: 'Python'; }
  pre.src-R:before { content: 'R'; }
  pre.src-ruby:before { content: 'Ruby'; }
  pre.src-sass:before { content: 'Sass'; }
  pre.src-scheme:before { content: 'Scheme'; }
  pre.src-screen:before { content: 'Gnu Screen'; }
  pre.src-sed:before { content: 'Sed'; }
  pre.src-sh:before { content: 'shell'; }
  pre.src-sql:before { content: 'SQL'; }
  pre.src-sqlite:before { content: 'SQLite'; }
  /* additional languages in org.el's org-babel-load-languages alist */
  pre.src-forth:before { content: 'Forth'; }
  pre.src-io:before { content: 'IO'; }
  pre.src-J:before { content: 'J'; }
  pre.src-makefile:before { content: 'Makefile'; }
  pre.src-maxima:before { content: 'Maxima'; }
  pre.src-perl:before { content: 'Perl'; }
  pre.src-picolisp:before { content: 'Pico Lisp'; }
  pre.src-scala:before { content: 'Scala'; }
  pre.src-shell:before { content: 'Shell Script'; }
  pre.src-ebnf2ps:before { content: 'ebfn2ps'; }
  /* additional language identifiers per \"defun org-babel-execute\"
       in ob-*.el */
  pre.src-cpp:before  { content: 'C++'; }
  pre.src-abc:before  { content: 'ABC'; }
  pre.src-coq:before  { content: 'Coq'; }
  pre.src-groovy:before  { content: 'Groovy'; }
  /* additional language identifiers from org-babel-shell-names in
     ob-shell.el: ob-shell is the only babel language using a lambda to put
     the execution function name together. */
  pre.src-bash:before  { content: 'bash'; }
  pre.src-csh:before  { content: 'csh'; }
  pre.src-ash:before  { content: 'ash'; }
  pre.src-dash:before  { content: 'dash'; }
  pre.src-ksh:before  { content: 'ksh'; }
  pre.src-mksh:before  { content: 'mksh'; }
  pre.src-posh:before  { content: 'posh'; }
  /* Additional Emacs modes also supported by the LaTeX listings package */
  pre.src-ada:before { content: 'Ada'; }
  pre.src-asm:before { content: 'Assembler'; }
  pre.src-caml:before { content: 'Caml'; }
  pre.src-delphi:before { content: 'Delphi'; }
  pre.src-html:before { content: 'HTML'; }
  pre.src-idl:before { content: 'IDL'; }
  pre.src-mercury:before { content: 'Mercury'; }
  pre.src-metapost:before { content: 'MetaPost'; }
  pre.src-modula-2:before { content: 'Modula-2'; }
  pre.src-pascal:before { content: 'Pascal'; }
  pre.src-ps:before { content: 'PostScript'; }
  pre.src-prolog:before { content: 'Prolog'; }
  pre.src-simula:before { content: 'Simula'; }
  pre.src-tcl:before { content: 'tcl'; }
  pre.src-tex:before { content: 'TeX'; }
  pre.src-plain-tex:before { content: 'Plain TeX'; }
  pre.src-verilog:before { content: 'Verilog'; }
  pre.src-vhdl:before { content: 'VHDL'; }
  pre.src-xml:before { content: 'XML'; }
  pre.src-nxml:before { content: 'XML'; }
  /* add a generic configuration mode; LaTeX export needs an additional
     (add-to-list 'org-latex-listings-langs '(conf \" \")) in .emacs */
  pre.src-conf:before { content: 'Configuration File'; }

  table { border-collapse:collapse; }
  caption.t-above { caption-side: top; }
  caption.t-bottom { caption-side: bottom; }
  td, th { vertical-align:top;  }
  th.org-right  { text-align: center;  }
  th.org-left   { text-align: center;   }
  th.org-center { text-align: center; }
  td.org-right  { text-align: right;  }
  td.org-left   { text-align: left;   }
  td.org-center { text-align: center; }
  dt { font-weight: bold; }
  .footpara { display: inline; }
  .footdef  { margin-bottom: 1em; }
  .figure { padding: 1em; }
  .figure p { text-align: center; }
  .inlinetask {
    padding: 10px;
    border: 2px solid gray;
    margin: 10px;
    background: #ffffcc;
  }
  #org-div-home-and-up
   { text-align: right; font-size: 70%; white-space: nowrap; }
  textarea { overflow-x: auto; }
  .linenr { font-size: smaller }
  .code-highlighted { background-color: #ffff00; }
  .org-info-js_info-navigation { border-style: none; }
  #org-info-js_console-label
    { font-size: 10px; font-weight: bold; white-space: nowrap; }
  .org-info-js_search-highlight
    { background-color: #ffff00; color: #000000; font-weight: bold; }
  .org-svg { width: 90%; }
  /*]]>*/-->
</style>")
                nil [11391 18568])
            ("org-export-html" customgroup (:user-visible-flag t) nil [18606 18732])
            ("org-html-infojs-opts-table" variable (:default-value (quote ((path PATH "http://orgmode.org/org-info.js") (view VIEW "info") (toc TOC :with-toc) (ftoc FIXED_TOC "0") (tdepth TOC_DEPTH "max") (sdepth SECTION_DEPTH "max") (mouse MOUSE_HINT "underline") (buttons VIEW_BUTTONS "0") (ltoc LOCAL_TOC "1") (up LINK_UP :html-link-up) (home LINK_HOME :html-link-home)))) nil [18754 19194])
            ("org-html-use-infojs" variable (:default-value (quote when-configured)) nil [19196 19813])
            ("org-html-infojs-options" variable (:default-value (mapcar (lambda (x) (cons (car x) (nth 2 x))) org-html-infojs-opts-table)) nil [19815 20675])
            ("org-html-infojs-template" variable (:default-value "<script type=\"text/javascript\" src=\"%SCRIPT_PATH\">
/**
 *
 * @source: %SCRIPT_PATH
 *
 * @licstart  The following is the entire license notice for the
 *  JavaScript code in %SCRIPT_PATH.
 *
 * Copyright (C) 2012-2013 Free Software Foundation, Inc.
 *
 *
 * The JavaScript code in this tag is free software: you can
 * redistribute it and/or modify it under the terms of the GNU
 * General Public License (GNU GPL) as published by the Free Software
 * Foundation, either version 3 of the License, or (at your option)
 * any later version.  The code is distributed WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU GPL for more details.
 *
 * As additional permission under GNU GPL version 3 section 7, you
 * may distribute non-source (e.g., minimized or compacted) forms of
 * that code without the copy of the GNU GPL normally required by
 * section 4, provided you include this license notice and a URL
 * through which recipients can access the Corresponding Source.
 *
 * @licend  The above is the entire license notice
 * for the JavaScript code in %SCRIPT_PATH.
 *
 */
</script>

<script type=\"text/javascript\">

/*
@licstart  The following is the entire license notice for the
JavaScript code in this tag.

Copyright (C) 2012-2013 Free Software Foundation, Inc.

The JavaScript code in this tag is free software: you can
redistribute it and/or modify it under the terms of the GNU
General Public License (GNU GPL) as published by the Free Software
Foundation, either version 3 of the License, or (at your option)
any later version.  The code is distributed WITHOUT ANY WARRANTY;
without even the implied warranty of MERCHANTABILITY or FITNESS
FOR A PARTICULAR PURPOSE.  See the GNU GPL for more details.

As additional permission under GNU GPL version 3 section 7, you
may distribute non-source (e.g., minimized or compacted) forms of
that code without the copy of the GNU GPL normally required by
section 4, provided you include this license notice and a URL
through which recipients can access the Corresponding Source.


@licend  The above is the entire license notice
for the JavaScript code in this tag.
*/

<!--/*--><![CDATA[/*><!--*/
%MANAGER_OPTIONS
org_html_manager.setup();  // activate after the parameters are set
/*]]>*///-->
</script>") nil [20677 23287])
            ("org-html-infojs-install-script" function (:arguments ("exp-plist" "_backend")) nil [23289 26580])
            ("org-html-text-markup-alist" variable (:default-value (quote ((bold . "<b>%s</b>") (code . "<code>%s</code>") (italic . "<i>%s</i>") (strike-through . "<del>%s</del>") (underline . "<span class=\"underline\">%s</span>") (verbatim . "<code>%s</code>")))) nil [26599 27395])
            ("org-html-indent" variable nil nil [27397 27633])
            ("org-html-format-drawer-function" variable (:default-value (lambda (_name contents) contents)) nil [27649 28218])
            ("org-html-footnotes-section" variable (:default-value "<div id=\"footnotes\">
<h2 class=\"footnotes\">%s: </h2>
<div id=\"text-footnotes\">
%s
</div>
</div>") nil [28236 28636])
            ("org-html-footnote-format" variable (:default-value "<sup>%s</sup>") nil [28638 28829])
            ("org-html-footnote-separator" variable (:default-value "<sup>, </sup>") nil [28831 28965])
            ("org-html-toplevel-hlevel" variable (:default-value 2) nil [28982 29508])
            ("org-html-format-headline-function" variable (:default-value (quote org-html-format-headline-default-function)) nil [29510 30122])
            ("org-html-allow-name-attribute-in-anchors" variable nil nil [30144 30447])
            ("org-html-format-inlinetask-function" variable (:default-value (quote org-html-format-inlinetask-default-function)) nil [30467 31172])
            ("org-html-with-latex" variable (:default-value org-export-with-latex) nil [31186 32055])
            ("org-html-link-org-files-as-html" variable (:default-value t) nil [32080 32619])
            ("org-html-inline-images" variable (:default-value t) nil [32650 32933])
            ("org-html-inline-image-rules" variable (:default-value (quote (("file" . "\\.\\(jpeg\\|jpg\\|png\\|gif\\|svg\\)\\'") ("http" . "\\.\\(jpeg\\|jpg\\|png\\|gif\\|svg\\)\\'") ("https" . "\\.\\(jpeg\\|jpg\\|png\\|gif\\|svg\\)\\'")))) nil [32935 33520])
            ("org-html-protect-char-alist" variable (:default-value (quote (("&" . "&amp;") ("<" . "&lt;") (">" . "&gt;")))) nil [33539 33707])
            ("org-html-htmlize-output-type" variable (:default-value (quote inline-css)) nil [33725 34842])
            ("org-html-htmlize-font-prefix" variable (:default-value "org-") nil [34844 35001])
            ("org-html-table-default-attributes" variable (:default-value (quote (:border "2" :cellspacing "0" :cellpadding "6" :rules "groups" :frame "hsides"))) nil [35015 35529])
            ("org-html-table-header-tags" variable (:default-value (quote ("<th scope=\"%s\"%s>" . "</th>"))) nil [35531 36105])
            ("org-html-table-data-tags" variable (:default-value (quote ("<td%s>" . "</td>"))) nil [36107 36591])
            ("org-html-table-row-open-tag" variable (:default-value "<tr>") nil [36593 37907])
            ("org-html-table-row-close-tag" variable (:default-value "</tr>") nil [37909 38341])
            ("org-html-table-align-individual-fields" variable (:default-value t) nil [38343 38668])
            ("org-html-table-use-header-tags-for-first-column" variable nil nil [38670 38886])
            ("org-html-table-caption-above" variable (:default-value t) nil [38888 39077])
            ("org-html-tag-class-prefix" variable nil nil [39090 39472])
            ("org-html-extension" variable (:default-value "html") nil [39500 39622])
            ("org-html-xml-declaration" variable (:default-value (quote (("html" . "<?xml version=\"1.0\" encoding=\"%s\"?>") ("php" . "<?php echo \"<?xml version=\\\"1.0\\\" encoding=\\\"%s\\\" ?>\"; ?>")))) nil [39624 40241])
            ("org-html-coding-system" variable (:default-value (quote utf-8)) nil [40243 40452])
            ("org-html-doctype" variable (:default-value "xhtml-strict") nil [40454 40858])
            ("org-html-html5-fancy" variable nil nil [40860 41363])
            ("org-html-container-element" variable (:default-value "div") nil [41365 41745])
            ("org-html-divs" variable (:default-value (quote ((preamble "div" "preamble") (content "div" "content") (postamble "div" "postamble")))) nil [41747 42643])
            ("org-html-checkbox-types" variable
               (:constant-flag t
                :default-value (quote ((unicode (on . "&#x2611;") (off . "&#x2610;") (trans . "&#x2610;")) (ascii (on . "<code>[X]</code>") (off . "<code>[&#xa0;]</code>") (trans . "<code>[-]</code>")) (html (on . "<input type='checkbox' checked='checked' />") (off . "<input type='checkbox' />") (trans . "<input type='checkbox' />")))))
                nil [42645 43404])
            ("org-html-checkbox-type" variable (:default-value (quote ascii)) nil [43406 43790])
            ("org-html-metadata-timestamp-format" variable (:default-value "%Y-%m-%d %a %H:%M") nil [43792 44085])
            ("org-html-mathjax-options" variable (:default-value (quote ((path "https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS_HTML") (scale "100") (align "center") (font "TeX") (linebreaks "false") (autonumber "AMS") (indent "0em") (multlinewidth "85%") (tagindent ".8em") (tagside "right")))) nil [44113 47357])
            ("org-html-mathjax-template" variable (:default-value "<script type=\"text/x-mathjax-config\">
    MathJax.Hub.Config({
        displayAlign: \"%ALIGN\",
        displayIndent: \"%INDENT\",

        \"HTML-CSS\": { scale: %SCALE,
                        linebreaks: { automatic: \"%LINEBREAKS\" },
                        webFont: \"%FONT\"
                       },
        SVG: {scale: %SCALE,
              linebreaks: { automatic: \"%LINEBREAKS\" },
              font: \"%FONT\"},
        NativeMML: {scale: %SCALE},
        TeX: { equationNumbers: {autoNumber: \"%AUTONUMBER\"},
               MultLineWidth: \"%MULTLINEWIDTH\",
               TagSide: \"%TAGSIDE\",
               TagIndent: \"%TAGINDENT\"
             }
});
</script>
<script type=\"text/javascript\"
        src=\"%PATH\"></script>") nil [47359 48259])
            ("org-html-postamble" variable (:default-value (quote auto)) nil [48289 49159])
            ("org-html-postamble-format" variable (:default-value (quote (("en" "<p class=\"author\">Author: %a (%e)</p>
<p class=\"date\">Date: %d</p>
<p class=\"creator\">%c</p>
<p class=\"validation\">%v</p>")))) nil [49161 50210])
            ("org-html-validation-link" variable (:default-value "<a href=\"http://validator.w3.org/check?uri=referer\">Validate</a>") nil [50212 50398])
            ("org-html-creator-string" variable (:default-value (format "<a href=\"http://www.gnu.org/software/emacs/\">Emacs</a> %s (<a href=\"http://orgmode.org\">Org</a> mode %s)" emacs-version (if (fboundp (quote org-version)) (org-version) "unknown version"))) nil [50400 50868])
            ("org-html-preamble" variable (:default-value t) nil [50897 51660])
            ("org-html-preamble-format" variable (:default-value (quote (("en" "")))) nil [51662 52647])
            ("org-html-link-up" variable nil nil [52649 52805])
            ("org-html-link-home" variable nil nil [52807 52967])
            ("org-html-link-use-abs-url" variable nil nil [52969 53163])
            ("org-html-home/up-format" variable (:default-value "<div id=\"org-div-home-and-up\">
 <a accesskey=\"h\" href=\"%s\"> UP </a>
 |
 <a accesskey=\"H\" href=\"%s\"> HOME </a>
</div>") nil [53165 53613])
            ("org-html-head-include-scripts" variable (:default-value t) nil [53641 53932])
            ("org-html-head-include-default-style" variable (:default-value t) nil [53959 54311])
            ("put" code nil nil [54327 54400])
            ("org-html-head" variable nil nil [54402 55487])
            ("put" code nil nil [55503 55553])
            ("org-html-head-extra" variable nil nil [55555 55865])
            ("put" code nil nil [55881 55937])
            ("org-html-viewport" variable (:default-value (quote ((width "device-width") (initial-scale "1") (minimum-scale "") (maximum-scale "") (user-scalable "")))) nil [55966 57571])
            ("org-html-todo-kwd-class-prefix" variable nil nil [57585 57985])
            ("org-html-xhtml-p" function (:arguments ("info")) nil [58013 58133])
            ("org-html-html5-p" function (:arguments ("info")) nil [58135 58274])
            ("org-html--html5-fancy-p" function (:arguments ("info")) nil [58276 58506])
            ("org-html-close-tag" function (:arguments ("tag" "attr" "info")) nil [58508 58783])
            ("org-html-doctype" function (:arguments ("info")) nil [58785 59149])
            ("org-html--make-attribute-string" function (:arguments ("attributes")) nil [59151 59823])
            ("org-html--wrap-image" function (:arguments ("contents" "info" "caption" "label")) nil [59825 60593])
            ("org-html--format-image" function (:arguments ("source" "attributes" "info")) nil [60595 61332])
            ("org-html--svg-image" function (:arguments ("source" "attributes" "info")) nil [61334 62380])
            ("org-html--textarea-block" function (:arguments ("element")) nil [62382 62815])
            ("org-html--has-caption-p" function (:arguments ("element" "_info")) nil [62817 63156])
            ("org-html-htmlize-region-for-paste" function (:arguments ("beg" "end")) nil [63170 63762])
            ("org-html-htmlize-generate-css" function (:user-visible-flag t) nil [63779 65169])
            ("org-html--make-string" function (:arguments ("n" "string")) nil [65171 65328])
            ("org-html-fix-class-name" function (:arguments ("kwd")) nil [65330 65550])
            ("org-html-footnote-section" function (:arguments ("info")) nil [65552 66498])
            ("org-html--build-meta-info" function (:arguments ("info")) nil [66516 68973])
            ("org-html--build-head" function (:arguments ("info")) nil [68975 69755])
            ("org-html--build-mathjax-config" function (:arguments ("info")) nil [69757 70709])
            ("org-html-format-spec" function (:arguments ("info")) nil [70711 71673])
            ("org-html--build-pre/postamble" function (:arguments ("type" "info")) nil [71675 73999])
            ("org-html-inner-template" function (:arguments ("contents" "info")) nil [74001 74415])
            ("org-html-template" function (:arguments ("contents" "info")) nil [74417 76965])
            ("org-html--translate" function (:arguments ("s" "info")) nil [76967 77146])
            ("org-html--anchor" function (:arguments ("id" "desc" "attributes" "info")) nil [77161 77495])
            ("org-html--todo" function (:arguments ("todo" "info")) nil [77508 77801])
            ("org-html--priority" function (:arguments ("priority" "_info")) nil [77818 78067])
            ("org-html--tags" function (:arguments ("tags" "info")) nil [78080 78460])
            ("org-html-fontify-code" function (:arguments ("code" "lang")) nil [78477 80739])
            ("org-html-do-format-code" function (:arguments ("code" "lang" "refs" "retain-labels" "num-start")) nil [80741 82005])
            ("org-html-format-code" function (:arguments ("element" "info")) nil [82007 82642])
            ("org-html-toc" function (:arguments ("depth" "info" "scope")) nil [82670 83760])
            ("org-html--toc-text" function (:arguments ("toc-entries")) nil [83762 84572])
            ("org-html--format-toc-headline" function (:arguments ("headline" "info")) nil [84574 86146])
            ("org-html-list-of-listings" function (:arguments ("info")) nil [86148 87413])
            ("org-html-list-of-tables" function (:arguments ("info")) nil [87415 88662])
            ("org-html-bold" function (:arguments ("_bold" "contents" "info")) nil [88702 88963])
            ("org-html-center-block" function (:arguments ("_center-block" "contents" "_info")) nil [88984 89249])
            ("org-html-clock" function (:arguments ("clock" "_contents" "_info")) nil [89263 89780])
            ("org-html-code" function (:arguments ("code" "_contents" "info")) nil [89793 90087])
            ("org-html-drawer" function (:arguments ("drawer" "contents" "info")) nil [90102 90406])
            ("org-html-dynamic-block" function (:arguments ("_dynamic-block" "contents" "_info")) nil [90428 90672])
            ("org-html-entity" function (:arguments ("entity" "_contents" "_info")) nil [90687 90907])
            ("org-html-example-block" function (:arguments ("example-block" "_contents" "info")) nil [90929 91642])
            ("org-html-export-snippet" function (:arguments ("export-snippet" "_contents" "_info")) nil [91665 91964])
            ("org-html-export-block" function (:arguments ("export-block" "_contents" "_info")) nil [91985 92306])
            ("org-html-fixed-width" function (:arguments ("fixed-width" "_contents" "_info")) nil [92326 92656])
            ("org-html-footnote-reference" function (:arguments ("footnote-reference" "_contents" "info")) nil [92683 93494])
            ("org-html-headline" function (:arguments ("headline" "contents" "info")) nil [93511 97535])
            ("org-html-format-headline-default-function" function (:arguments ("todo" "_todo-type" "priority" "text" "tags" "info")) nil [97537 97973])
            ("org-html--container" function (:arguments ("headline" "info")) nil [97975 98179])
            ("org-html-horizontal-rule" function (:arguments ("_horizontal-rule" "_contents" "info")) nil [98203 98431])
            ("org-html-inline-src-block" function (:arguments ("inline-src-block" "_contents" "info")) nil [98456 99082])
            ("org-html-inlinetask" function (:arguments ("inlinetask" "contents" "info")) nil [99101 99923])
            ("org-html-format-inlinetask-default-function" function (:arguments ("todo" "todo-type" "priority" "text" "tags" "contents" "info")) nil [99925 100333])
            ("org-html-italic" function (:arguments ("_italic" "contents" "info")) nil [100348 100622])
            ("org-html-checkbox" function (:arguments ("checkbox" "info")) nil [100635 100919])
            ("org-html-format-list-item" function (:arguments ("contents" "type" "checkbox" "info" "term-counter-id" "headline")) nil [100921 102138])
            ("org-html-item" function (:arguments ("item" "contents" "info")) nil [102140 102698])
            ("org-html-keyword" function (:arguments ("keyword" "_contents" "info")) nil [102714 103470])
            ("org-html-format-latex" function (:arguments ("latex-frag" "processing-type" "info")) nil [103496 104953])
            ("org-html-latex-environment" function (:arguments ("latex-environment" "_contents" "info")) nil [104955 105928])
            ("org-html-latex-fragment" function (:arguments ("latex-fragment" "_contents" "info")) nil [105951 106675])
            ("org-html-line-break" function (:arguments ("_line-break" "_contents" "info")) nil [106694 106919])
            ("org-html-inline-image-p" function (:arguments ("link" "info")) nil [106932 107829])
            ("org-html-standalone-image-predicate" variable nil nil [107831 107875])
            ("org-html-standalone-image-p" function (:arguments ("element" "info")) nil [107876 109235])
            ("org-html-link" function (:arguments ("link" "desc" "info")) nil [109237 116228])
            ("org-html-node-property" function (:arguments ("node-property" "_contents" "_info")) nil [116250 116620])
            ("org-html-paragraph" function (:arguments ("paragraph" "contents" "info")) nil [116638 118465])
            ("org-html-begin-plain-list" function (:arguments ("type" "arg1")) nil [118597 118988])
            ("org-html-end-plain-list" function (:arguments ("type")) nil [118990 119173])
            ("org-html-plain-list" function (:arguments ("plain-list" "contents" "_info")) nil [119175 119534])
            ("org-html-convert-special-strings" function (:arguments ("string")) nil [119553 119811])
            ("org-html-encode-plain-text" function (:arguments ("text")) nil [119813 120106])
            ("org-html-plain-text" function (:arguments ("text" "info")) nil [120108 121044])
            ("org-html-planning" function (:arguments ("planning" "_contents" "info")) nil [121060 121855])
            ("org-html-property-drawer" function (:arguments ("_property-drawer" "contents" "_info")) nil [121879 122191])
            ("org-html-quote-block" function (:arguments ("quote-block" "contents" "_info")) nil [122211 122800])
            ("org-html-section" function (:arguments ("section" "contents" "info")) nil [122816 123756])
            ("org-html-radio-target" function (:arguments ("radio-target" "text" "info")) nil [123777 124068])
            ("org-html-special-block" function (:arguments ("special-block" "contents" "info")) nil [124090 125262])
            ("org-html-src-block" function (:arguments ("src-block" "_contents" "info")) nil [125280 126565])
            ("org-html-statistics-cookie" function (:arguments ("statistics-cookie" "_contents" "_info")) nil [126591 126903])
            ("org-html-strike-through" function (:arguments ("_strike-through" "contents" "info")) nil [126926 127247])
            ("org-html-subscript" function (:arguments ("_subscript" "contents" "_info")) nil [127265 127495])
            ("org-html-superscript" function (:arguments ("_superscript" "contents" "_info")) nil [127515 127751])
            ("org-html-table-cell" function (:arguments ("table-cell" "contents" "info")) nil [127770 129163])
            ("org-html-table-row" function (:arguments ("table-row" "contents" "info")) nil [129181 131086])
            ("org-html-table-first-row-data-cells" function (:arguments ("table" "info")) nil [131100 131582])
            ("org-html-table--table.el-table" function (:arguments ("table" "_info")) nil [131584 132188])
            ("org-html-table" function (:arguments ("table" "contents" "info")) nil [132190 134325])
            ("org-html-target" function (:arguments ("target" "_contents" "info")) nil [134340 134596])
            ("org-html-timestamp" function (:arguments ("timestamp" "_contents" "info")) nil [134614 135011])
            ("org-html-underline" function (:arguments ("_underline" "contents" "info")) nil [135029 135322])
            ("org-html-verbatim" function (:arguments ("verbatim" "_contents" "info")) nil [135339 135653])
            ("org-html-verse-block" function (:arguments ("_verse-block" "contents" "info")) nil [135673 136380])
            ("org-html-final-function" function (:arguments ("contents" "_backend" "info")) nil [136406 136725])
            ("org-html-export-as-html" function
               (:user-visible-flag t
                :arguments ("async" "subtreep" "visible-only" "body-only" "ext-plist"))
                nil [136768 137964])
            ("org-html-convert-region-to-html" function (:user-visible-flag t) nil [137981 138293])
            ("org-html-export-to-html" function
               (:user-visible-flag t
                :arguments ("async" "subtreep" "visible-only" "body-only" "ext-plist"))
                nil [138310 139573])
            ("org-html-publish-to-html" function (:arguments ("plist" "filename" "pub-dir")) nil [139590 140020])
            ("ox-html" package nil nil [140023 140041]))          
      :file "ox-html.el"
      :pointmax 140143
      :fsize 140142
      :lastmodtime '(22842 50887 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [1562 1579])
            ("format-spec" include nil nil [1580 1602])
            ("ox" include nil nil [1603 1616])
            ("org-publish-temp-files" variable nil nil [1636 1716])
            ("org-publish-cache" variable nil nil [1791 1933])
            ("org-publish-after-publishing-hook" variable nil nil [1935 2153])
            ("org-publish" customgroup (:user-visible-flag t) nil [2155 2262])
            ("org-publish-project-alist" variable nil nil [2264 9864])
            ("org-publish-use-timestamps-flag" variable (:default-value t) nil [9866 10094])
            ("org-publish-timestamp-directory" variable (:default-value (convert-standard-filename "~/.org-timestamps/")) nil [10096 10301])
            ("org-publish-list-skipped-files" variable (:default-value t) nil [10303 10453])
            ("org-publish-sitemap-sort-files" variable (:default-value (quote alphabetically)) nil [10455 11043])
            ("org-publish-sitemap-sort-folders" variable (:default-value (quote first)) nil [11045 11518])
            ("org-publish-sitemap-sort-ignore-case" variable nil nil [11520 11783])
            ("org-publish-sitemap-date-format" variable (:default-value "%Y-%m-%d") nil [11785 11980])
            ("org-publish-sitemap-file-entry-format" variable (:default-value "%t") nil [11982 12291])
            ("org-publish-timestamp-filename" function (:arguments ("filename" "pub-dir" "pub-func")) nil [12402 12699])
            ("org-publish-needed-p" function (:arguments ("filename" "pub-dir" "pub-func" "_true-pub-dir" "base-dir")) nil [12701 13544])
            ("org-publish-update-timestamp" function (:arguments ("filename" "pub-dir" "pub-func" "_base-dir")) nil [13546 13885])
            ("org-publish-remove-all-timestamps" function nil nil [13887 14185])
            ("org-publish-property" function (:arguments ("property" "project" "default")) nil [14331 14653])
            ("org-publish-expand-projects" function (:arguments ("projects-alist")) nil [14655 15116])
            ("org-publish-sitemap-sort-files" variable nil nil [15118 15157])
            ("org-publish-sitemap-sort-folders" variable nil nil [15158 15199])
            ("org-publish-sitemap-ignore-case" variable nil nil [15200 15240])
            ("org-publish-sitemap-requested" variable nil nil [15241 15279])
            ("org-publish-sitemap-date-format" variable nil nil [15280 15320])
            ("org-publish-sitemap-file-entry-format" variable nil nil [15321 15367])
            ("org-publish-compare-directory-files" function (:arguments ("a" "b")) nil [15368 17008])
            ("org-publish-get-base-files-1" function (:arguments ("base-dir" "recurse" "match" "skip-file" "skip-dir")) nil [17010 18447])
            ("org-publish-get-base-files" function (:arguments ("project" "exclude-regexp")) nil [18449 20713])
            ("org-publish-get-project-from-filename" function (:arguments ("filename" "up")) nil [20715 22737])
            ("org-publish-org-to" function (:arguments ("backend" "filename" "extension" "plist" "pub-dir")) nil [22864 24491])
            ("org-publish-attachment" function (:arguments ("_plist" "filename" "pub-dir")) nil [24493 25134])
            ("org-publish-file" function (:arguments ("filename" "project" "no-cache")) nil [25262 27103])
            ("org-publish-projects" function (:arguments ("projects")) nil [27105 29268])
            ("org-publish-org-sitemap" function (:arguments ("project" "sitemap-filename")) nil [29270 32400])
            ("org-publish-format-file-entry" function (:arguments ("fmt" "file" "project-plist")) nil [32402 32699])
            ("org-publish-find-title" function (:arguments ("file" "reset")) nil [32701 33541])
            ("org-publish-find-date" function (:arguments ("file")) nil [33543 34755])
            ("defalias" code nil nil [34886 34930])
            ("org-publish" function
               (:user-visible-flag t
                :arguments ("project" "force" "async"))
                nil [34947 36227])
            ("org-publish-all" function
               (:user-visible-flag t
                :arguments ("force" "async"))
                nil [36244 37060])
            ("org-publish-current-file" function
               (:user-visible-flag t
                :arguments ("force" "async"))
                nil [37078 37739])
            ("org-publish-current-project" function
               (:user-visible-flag t
                :arguments ("force" "async"))
                nil [37756 38254])
            ("org-publish-collect-index" function (:arguments ("output" "_backend" "info")) nil [38281 39857])
            ("org-publish-index-generate-theindex" function (:arguments ("project" "directory")) nil [39859 42609])
            ("org-publish--store-crossrefs" function (:arguments ("output" "_backend" "info")) nil [42783 43608])
            ("org-publish-resolve-external-link" function (:arguments ("search" "file")) nil [43610 45089])
            ("org-publish-write-cache-file" function (:arguments ("free-cache")) nil [45117 45897])
            ("org-publish-initialize-cache" function (:arguments ("project-name")) nil [45899 47066])
            ("org-publish-reset-cache" function nil nil [47068 47300])
            ("org-publish-cache-file-needs-publishing" function (:arguments ("filename" "pub-dir" "pub-func" "_base-dir")) nil [47302 49115])
            ("org-publish-cache-set-file-property" function (:arguments ("filename" "property" "value" "project-name")) nil [49117 49690])
            ("org-publish-cache-get-file-property" function (:arguments ("filename" "property" "default" "no-create" "project-name")) nil [49692 50387])
            ("org-publish-cache-get" function (:arguments ("key")) nil [50389 50704])
            ("org-publish-cache-set" function (:arguments ("key" "value")) nil [50706 51013])
            ("org-publish-cache-ctime-of-src" function (:arguments ("file")) nil [51015 51343])
            ("ox-publish" package nil nil [51346 51367]))          
      :file "ox-publish.el"
      :pointmax 51472
      :fsize 51471
      :lastmodtime '(22842 50887 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("org" include nil nil [1308 1322])
            ("ob-core" include nil nil [1323 1341])
            ("eldoc" include nil nil [1342 1358])
            ("declare-function" code nil nil [1360 1416])
            ("declare-function" code nil nil [1417 1489])
            ("declare-function" code nil nil [1490 1549])
            ("org-eldoc" customgroup (:user-visible-flag t) nil [1551 1590])
            ("org-eldoc-breadcrumb-separator" variable (:default-value "/") nil [1592 1700])
            ("org-eldoc-test-buffer-name" variable (:default-value " *Org-eldoc test buffer*") nil [1702 1877])
            ("org-eldoc-get-breadcrumb" function nil nil [1879 2309])
            ("org-eldoc-get-src-header" function nil nil [2311 3208])
            ("org-eldoc-get-src-lang" function nil nil [3210 3736])
            ("org-eldoc-local-functions-cache" variable (:default-value (make-hash-table :size 40 :test (quote equal))) nil [3738 3937])
            ("org-eldoc-get-mode-local-documentation-function" function (:arguments ("lang")) nil [3939 4607])
            ("declare-function" code nil nil [4609 4674])
            ("declare-function" code nil nil [4675 4727])
            ("declare-function" code nil nil [4728 4780])
            ("declare-function" code nil nil [4781 4846])
            ("org-eldoc-documentation-function" function nil nil [4848 6448])
            ("org-eldoc-load" function (:user-visible-flag t) nil [6465 6630])
            ("add-hook" code nil nil [6647 6689])
            ("org-eldoc" package nil nil [6691 6711]))          
      :file "org-eldoc.el"
      :pointmax 6773
      :fsize 6774
      :lastmodtime '(22842 50887 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("url-parse" include nil nil [1784 1804])
            ("url-handlers" include nil nil [1805 1828])
            ("url-file-local-copy" function (:prototype-flag t) nil [1829 1875])
            ("url-generic-parse-url" function (:prototype-flag t) nil [1876 1921])
            ("org-track" customgroup (:user-visible-flag t) nil [1942 2378])
            ("org-track-directory" variable (:default-value (concat user-emacs-directory "org/lisp")) nil [2380 2577])
            ("org-track-compile-sources" variable (:default-value t) nil [2579 2853])
            ("org-track-org-url" variable (:default-value "http://orgmode.org/") nil [2855 3001])
            ("org-track-org-package" variable (:default-value "org-latest.tar.gz") nil [3003 3245])
            ("org-track-remove-package" variable nil nil [3247 3348])
            ("org-track-update" function (:user-visible-flag t) nil [3367 4236])
            ("org-track-fetch-package" function
               (:user-visible-flag t
                :arguments ("directory"))
                nil [4500 5837])
            ("org-track-compile-org" function
               (:user-visible-flag t
                :arguments ("directory"))
                nil [5888 7222])
            ("org-track" package nil nil [7224 7244]))          
      :file "org-track.el"
      :pointmax 7273
      :fsize 7272
      :lastmodtime '(22842 50887 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [2932 2949])
            ("ob-exp" include nil nil [2950 2967])
            ("org-element" include nil nil [2968 2990])
            ("org-macro" include nil nil [2991 3011])
            ("tabulated-list" include nil nil [3012 3037])
            ("declare-function" code nil nil [3039 3110])
            ("declare-function" code nil nil [3111 3184])
            ("declare-function" code nil nil [3185 3260])
            ("declare-function" code nil nil [3261 3332])
            ("declare-function" code nil nil [3333 3413])
            ("declare-function" code nil nil [3414 3497])
            ("org-publish-project-alist" variable nil nil [3499 3533])
            ("org-table-number-fraction" variable nil nil [3534 3568])
            ("org-table-number-regexp" variable nil nil [3569 3601])
            ("org-export-max-depth" variable
               (:constant-flag t
                :default-value 19)
                nil [3824 3916])
            ("org-export-options-alist" variable
               (:constant-flag t
                :default-value (quote ((:title "TITLE" nil nil parse) (:date "DATE" nil nil parse) (:author "AUTHOR" nil user-full-name parse) (:email "EMAIL" nil user-mail-address t) (:language "LANGUAGE" nil org-export-default-language t) (:select-tags "SELECT_TAGS" nil org-export-select-tags split) (:exclude-tags "EXCLUDE_TAGS" nil org-export-exclude-tags split) (:creator "CREATOR" nil org-export-creator-string) (:headline-levels nil "H" org-export-headline-levels) (:preserve-breaks nil "\\n" org-export-preserve-breaks) (:section-numbers nil "num" org-export-with-section-numbers) (:time-stamp-file nil "timestamp" org-export-time-stamp-file) (:with-archived-trees nil "arch" org-export-with-archived-trees) (:with-author nil "author" org-export-with-author) (:with-broken-links nil "broken-links" org-export-with-broken-links) (:with-clocks nil "c" org-export-with-clocks) (:with-creator nil "creator" org-export-with-creator) (:with-date nil "date" org-export-with-date) (:with-drawers nil "d" org-export-with-drawers) (:with-email nil "email" org-export-with-email) (:with-emphasize nil "*" org-export-with-emphasize) (:with-entities nil "e" org-export-with-entities) (:with-fixed-width nil ":" org-export-with-fixed-width) (:with-footnotes nil "f" org-export-with-footnotes) (:with-inlinetasks nil "inline" org-export-with-inlinetasks) (:with-latex nil "tex" org-export-with-latex) (:with-planning nil "p" org-export-with-planning) (:with-priority nil "pri" org-export-with-priority) (:with-properties nil "prop" org-export-with-properties) (:with-smart-quotes nil "'" org-export-with-smart-quotes) (:with-special-strings nil "-" org-export-with-special-strings) (:with-statistics-cookies nil "stat" org-export-with-statistics-cookies) (:with-sub-superscript nil "^" org-export-with-sub-superscripts) (:with-toc nil "toc" org-export-with-toc) (:with-tables nil "|" org-export-with-tables) (:with-tags nil "tags" org-export-with-tags) (:with-tasks nil "tasks" org-export-with-tasks) (:with-timestamps nil "<" org-export-with-timestamps) (:with-title nil "title" org-export-with-title) (:with-todo-keywords nil "todo" org-export-with-todo-keywords))))
                nil [3918 7638])
            ("org-export-special-keywords" variable
               (:constant-flag t
                :default-value (quote ("FILETAGS" "SETUPFILE" "OPTIONS")))
                nil [7640 7930])
            ("org-export-filters-alist" variable
               (:constant-flag t
                :default-value (quote ((:filter-body . org-export-filter-body-functions) (:filter-bold . org-export-filter-bold-functions) (:filter-babel-call . org-export-filter-babel-call-functions) (:filter-center-block . org-export-filter-center-block-functions) (:filter-clock . org-export-filter-clock-functions) (:filter-code . org-export-filter-code-functions) (:filter-diary-sexp . org-export-filter-diary-sexp-functions) (:filter-drawer . org-export-filter-drawer-functions) (:filter-dynamic-block . org-export-filter-dynamic-block-functions) (:filter-entity . org-export-filter-entity-functions) (:filter-example-block . org-export-filter-example-block-functions) (:filter-export-block . org-export-filter-export-block-functions) (:filter-export-snippet . org-export-filter-export-snippet-functions) (:filter-final-output . org-export-filter-final-output-functions) (:filter-fixed-width . org-export-filter-fixed-width-functions) (:filter-footnote-definition . org-export-filter-footnote-definition-functions) (:filter-footnote-reference . org-export-filter-footnote-reference-functions) (:filter-headline . org-export-filter-headline-functions) (:filter-horizontal-rule . org-export-filter-horizontal-rule-functions) (:filter-inline-babel-call . org-export-filter-inline-babel-call-functions) (:filter-inline-src-block . org-export-filter-inline-src-block-functions) (:filter-inlinetask . org-export-filter-inlinetask-functions) (:filter-italic . org-export-filter-italic-functions) (:filter-item . org-export-filter-item-functions) (:filter-keyword . org-export-filter-keyword-functions) (:filter-latex-environment . org-export-filter-latex-environment-functions) (:filter-latex-fragment . org-export-filter-latex-fragment-functions) (:filter-line-break . org-export-filter-line-break-functions) (:filter-link . org-export-filter-link-functions) (:filter-node-property . org-export-filter-node-property-functions) (:filter-options . org-export-filter-options-functions) (:filter-paragraph . org-export-filter-paragraph-functions) (:filter-parse-tree . org-export-filter-parse-tree-functions) (:filter-plain-list . org-export-filter-plain-list-functions) (:filter-plain-text . org-export-filter-plain-text-functions) (:filter-planning . org-export-filter-planning-functions) (:filter-property-drawer . org-export-filter-property-drawer-functions) (:filter-quote-block . org-export-filter-quote-block-functions) (:filter-radio-target . org-export-filter-radio-target-functions) (:filter-section . org-export-filter-section-functions) (:filter-special-block . org-export-filter-special-block-functions) (:filter-src-block . org-export-filter-src-block-functions) (:filter-statistics-cookie . org-export-filter-statistics-cookie-functions) (:filter-strike-through . org-export-filter-strike-through-functions) (:filter-subscript . org-export-filter-subscript-functions) (:filter-superscript . org-export-filter-superscript-functions) (:filter-table . org-export-filter-table-functions) (:filter-table-cell . org-export-filter-table-cell-functions) (:filter-table-row . org-export-filter-table-row-functions) (:filter-target . org-export-filter-target-functions) (:filter-timestamp . org-export-filter-timestamp-functions) (:filter-underline . org-export-filter-underline-functions) (:filter-verbatim . org-export-filter-verbatim-functions) (:filter-verse-block . org-export-filter-verse-block-functions))))
                nil [7932 12024])
            ("org-export-default-inline-image-rule" variable
               (:constant-flag t
                :default-value (\` (("file" \, (format "\\.%s\\'" (regexp-opt (quote ("png" "jpeg" "jpg" "gif" "tiff" "tif" "xbm" "xpm" "pbm" "pgm" "ppm")) t))))))
                nil [12026 12595])
            ("org-export-ignored-local-variables" variable
               (:constant-flag t
                :default-value (quote (org-font-lock-keywords org-element--cache org-element--cache-objects org-element--cache-sync-keys org-element--cache-sync-requests org-element--cache-sync-timer)))
                nil [12597 13103])
            ("org-export-async-debug" variable nil nil [13105 13470])
            ("org-export-stack-contents" variable nil nil [13472 13892])
            ("org-export-registered-backends" variable nil nil [13894 14100])
            ("org-export-dispatch-last-action" variable nil nil [14102 14297])
            ("org-export-dispatch-last-position" variable (:default-value (make-marker)) nil [14299 14586])
            ("org-export-current-backend" variable nil nil [14622 14992])
            ("org-export" customgroup (:user-visible-flag t) nil [15254 15355])
            ("org-export-general" customgroup (:user-visible-flag t) nil [15357 15478])
            ("org-export-with-archived-trees" variable (:default-value (quote headline)) nil [15480 16072])
            ("org-export-with-author" variable (:default-value t) nil [16074 16311])
            ("org-export-with-clocks" variable nil nil [16313 16525])
            ("org-export-with-creator" variable nil nil [16527 16894])
            ("org-export-with-date" variable (:default-value t) nil [16896 17124])
            ("org-export-date-timestamp-format" variable nil nil [17126 17600])
            ("org-export-creator-string" variable (:default-value (format "Emacs %s (Org mode %s)" emacs-version (if (fboundp (quote org-version)) (org-version) "unknown version"))) nil [17602 17950])
            ("org-export-with-drawers" variable (:default-value (quote (not "LOGBOOK"))) nil [17952 18962])
            ("org-export-with-email" variable nil nil [18964 19200])
            ("org-export-with-emphasize" variable (:default-value t) nil [19202 19582])
            ("org-export-exclude-tags" variable (:default-value (quote ("noexport"))) nil [19584 20046])
            ("org-export-with-fixed-width" variable (:default-value t) nil [20048 20328])
            ("org-export-with-footnotes" variable (:default-value t) nil [20330 20556])
            ("org-export-with-latex" variable (:default-value t) nil [20558 21159])
            ("org-export-headline-levels" variable (:default-value 3) nil [21161 21507])
            ("org-export-default-language" variable (:default-value "en") nil [21509 21899])
            ("org-export-preserve-breaks" variable nil nil [21901 22137])
            ("org-export-with-entities" variable (:default-value t) nil [22139 22546])
            ("org-export-with-inlinetasks" variable (:default-value t) nil [22548 22831])
            ("org-export-with-planning" variable nil nil [22833 23225])
            ("org-export-with-priority" variable nil nil [23227 23456])
            ("org-export-with-properties" variable nil nil [23458 24044])
            ("org-export-with-section-numbers" variable (:default-value t) nil [24046 24408])
            ("org-export-select-tags" variable (:default-value (quote ("export"))) nil [24410 24931])
            ("org-export-with-smart-quotes" variable nil nil [24933 25423])
            ("org-export-with-special-strings" variable (:default-value t) nil [25425 25938])
            ("org-export-with-statistics-cookies" variable (:default-value t) nil [25940 26233])
            ("org-export-with-sub-superscripts" variable (:default-value t) nil [26235 27786])
            ("org-export-with-toc" variable (:default-value t) nil [27788 28499])
            ("org-export-with-tables" variable (:default-value t) nil [28501 28757])
            ("org-export-with-tags" variable (:default-value t) nil [28759 29261])
            ("org-export-with-tasks" variable (:default-value t) nil [29263 30096])
            ("org-export-with-title" variable (:default-value t) nil [30098 30378])
            ("org-export-time-stamp-file" variable (:default-value t) nil [30380 30674])
            ("org-export-with-timestamps" variable (:default-value t) nil [30676 31440])
            ("org-export-with-todo-keywords" variable (:default-value t) nil [31442 31710])
            ("org-export-allow-bind-keywords" variable nil nil [31712 32053])
            ("org-export-with-broken-links" variable nil nil [32055 32720])
            ("org-export-snippet-translation-alist" variable nil nil [32722 33402])
            ("org-export-coding-system" variable nil nil [33404 33589])
            ("org-export-copy-to-kill-ring" variable nil nil [33591 33967])
            ("org-export-initial-scope" variable (:default-value (quote buffer)) nil [33969 34279])
            ("org-export-show-temporary-export-buffer" variable (:default-value t) nil [34281 34703])
            ("org-export-in-background" variable nil nil [34705 35043])
            ("org-export-async-init-file" variable nil nil [35045 35699])
            ("org-export-dispatch-use-expert-ui" variable nil nil [35701 36353])
            ("cl-defstruct" code nil nil [37628 37778])
            ("org-export-get-backend" function (:arguments ("name")) nil [37795 38047])
            ("org-export-register-backend" function (:arguments ("backend")) nil [38049 38964])
            ("org-export-barf-if-invalid-backend" function (:arguments ("backend")) nil [38966 39169])
            ("org-export-derived-backend-p" function (:arguments ("backend" "backends")) nil [39171 39832])
            ("org-export-get-all-transcoders" function (:arguments ("backend")) nil [39834 40629])
            ("org-export-get-all-options" function (:arguments ("backend")) nil [40631 41371])
            ("org-export-get-all-filters" function (:arguments ("backend")) nil [41373 42101])
            ("org-export-define-backend" function (:arguments ("backend" "transcoders" "body")) nil [42103 46631])
            ("org-export-define-derived-backend" function (:arguments ("child" "parent" "body")) nil [46633 48684])
            ("org-export-get-environment" function (:arguments ("backend" "subtreep" "ext-plist")) nil [50283 51354])
            ("org-export--parse-option-keyword" function (:arguments ("options" "backend")) nil [51356 52237])
            ("org-export--get-subtree-options" function (:arguments ("backend")) nil [52239 54298])
            ("org-export--get-inbuffer-options" function (:arguments ("backend")) nil [54300 58538])
            ("org-export--get-export-attributes" function (:arguments ("backend" "subtreep" "visible-only" "body-only")) nil [58540 59121])
            ("org-export--get-buffer-attributes" function nil nil [59123 59342])
            ("org-export--get-global-options" function (:arguments ("backend")) nil [59344 60163])
            ("org-export--list-bound-variables" function nil nil [60165 61696])
            ("org-export-get-parent" function (:arguments ("blob")) nil [61817 61967])
            ("org-export--collect-tree-properties" function (:arguments ("data" "info")) nil [62632 64052])
            ("org-export--get-min-level" function (:arguments ("data" "options")) nil [64054 64798])
            ("org-export--collect-headline-numbering" function (:arguments ("data" "options")) nil [64800 65800])
            ("org-export--selected-trees" function (:arguments ("data" "info")) nil [65802 67299])
            ("org-export--skip-p" function (:arguments ("datum" "options" "selected")) nil [67301 71557])
            ("org-export-transcoder" function (:arguments ("blob" "info")) nil [72250 72667])
            ("org-export-data" function (:arguments ("data" "info")) nil [72669 76460])
            ("org-export-data-with-backend" function (:arguments ("data" "backend" "info")) nil [76462 77686])
            ("org-export-expand" function (:arguments ("blob" "contents" "with-affiliated")) nil [77688 78254])
            ("org-export-before-processing-hook" variable nil nil [80844 81273])
            ("org-export-before-parsing-hook" variable nil nil [81275 81699])
            ("org-export-filter-options-functions" variable nil nil [81724 81989])
            ("org-export-filter-parse-tree-functions" variable nil nil [81991 82319])
            ("org-export-filter-plain-text-functions" variable nil nil [82321 82603])
            ("org-export-filter-body-functions" variable nil nil [82605 82886])
            ("org-export-filter-final-output-functions" variable nil nil [82888 83210])
            ("org-export-filter-babel-call-functions" variable nil nil [83236 83526])
            ("org-export-filter-center-block-functions" variable nil nil [83528 83822])
            ("org-export-filter-clock-functions" variable nil nil [83824 84104])
            ("org-export-filter-diary-sexp-functions" variable nil nil [84106 84396])
            ("org-export-filter-drawer-functions" variable nil nil [84398 84680])
            ("org-export-filter-dynamic-block-functions" variable nil nil [84682 84978])
            ("org-export-filter-example-block-functions" variable nil nil [84980 85276])
            ("org-export-filter-export-block-functions" variable nil nil [85278 85572])
            ("org-export-filter-fixed-width-functions" variable nil nil [85574 85866])
            ("org-export-filter-footnote-definition-functions" variable nil nil [85868 86176])
            ("org-export-filter-headline-functions" variable nil nil [86178 86464])
            ("org-export-filter-horizontal-rule-functions" variable nil nil [86466 86766])
            ("org-export-filter-inlinetask-functions" variable nil nil [86768 87058])
            ("org-export-filter-item-functions" variable nil nil [87060 87338])
            ("org-export-filter-keyword-functions" variable nil nil [87340 87624])
            ("org-export-filter-latex-environment-functions" variable nil nil [87626 87930])
            ("org-export-filter-node-property-functions" variable nil nil [87932 88228])
            ("org-export-filter-paragraph-functions" variable nil nil [88230 88518])
            ("org-export-filter-plain-list-functions" variable nil nil [88520 88810])
            ("org-export-filter-planning-functions" variable nil nil [88812 89098])
            ("org-export-filter-property-drawer-functions" variable nil nil [89100 89400])
            ("org-export-filter-quote-block-functions" variable nil nil [89402 89700])
            ("org-export-filter-section-functions" variable nil nil [89702 89986])
            ("org-export-filter-special-block-functions" variable nil nil [89988 90284])
            ("org-export-filter-src-block-functions" variable nil nil [90286 90574])
            ("org-export-filter-table-functions" variable nil nil [90576 90856])
            ("org-export-filter-table-cell-functions" variable nil nil [90858 91148])
            ("org-export-filter-table-row-functions" variable nil nil [91150 91438])
            ("org-export-filter-verse-block-functions" variable nil nil [91440 91732])
            ("org-export-filter-bold-functions" variable nil nil [91757 92038])
            ("org-export-filter-code-functions" variable nil nil [92040 92321])
            ("org-export-filter-entity-functions" variable nil nil [92323 92605])
            ("org-export-filter-export-snippet-functions" variable nil nil [92607 92905])
            ("org-export-filter-footnote-reference-functions" variable nil nil [92907 93213])
            ("org-export-filter-inline-babel-call-functions" variable nil nil [93215 93519])
            ("org-export-filter-inline-src-block-functions" variable nil nil [93521 93823])
            ("org-export-filter-italic-functions" variable nil nil [93825 94110])
            ("org-export-filter-latex-fragment-functions" variable nil nil [94112 94410])
            ("org-export-filter-line-break-functions" variable nil nil [94412 94702])
            ("org-export-filter-link-functions" variable nil nil [94704 94982])
            ("org-export-filter-radio-target-functions" variable nil nil [94984 95278])
            ("org-export-filter-statistics-cookie-functions" variable nil nil [95280 95584])
            ("org-export-filter-strike-through-functions" variable nil nil [95586 95887])
            ("org-export-filter-subscript-functions" variable nil nil [95889 96177])
            ("org-export-filter-superscript-functions" variable nil nil [96179 96471])
            ("org-export-filter-target-functions" variable nil nil [96473 96755])
            ("org-export-filter-timestamp-functions" variable nil nil [96757 97045])
            ("org-export-filter-underline-functions" variable nil nil [97047 97338])
            ("org-export-filter-verbatim-functions" variable nil nil [97340 97629])
            ("org-export-filter-apply-functions" function (:arguments ("filters" "value" "info")) nil [98079 98992])
            ("org-export-install-filters" function (:arguments ("info")) nil [98994 100172])
            ("org-export-copy-buffer" function nil nil [101354 101740])
            ("org-export-with-buffer-copy" function (:arguments ("body")) nil [101742 102398])
            ("org-export--generate-copy-script" function (:arguments ("buffer")) nil [102400 104616])
            ("org-export--delete-comment-trees" function nil nil [104618 105158])
            ("org-export--prune-tree" function (:arguments ("data" "info")) nil [105160 108064])
            ("org-export--missing-definitions" function (:arguments ("tree" "definitions")) nil [108066 111043])
            ("org-export--install-footnote-definitions" function (:arguments ("definitions" "tree")) nil [111045 113241])
            ("org-export--remove-uninterpreted-data" function (:arguments ("data" "info")) nil [113243 115514])
            ("org-export-as" function (:arguments ("backend" "subtreep" "visible-only" "body-only" "ext-plist")) nil [115531 122365])
            ("org-export-string-as" function (:arguments ("string" "backend" "body-only" "ext-plist")) nil [122382 123071])
            ("org-export-replace-region-by" function (:arguments ("backend")) nil [123088 123514])
            ("org-export-insert-default-template" function
               (:user-visible-flag t
                :arguments ("backend" "subtreep"))
                nil [123531 126892])
            ("org-export-expand-include-keyword" function (:arguments ("included" "dir" "footnotes")) nil [126894 132080])
            ("org-export--inclusion-absolute-lines" function (:arguments ("file" "location" "only-contents" "lines")) nil [132082 134434])
            ("org-export--prepare-file-contents" function (:arguments ("file" "lines" "ind" "minlevel" "id" "footnotes")) nil [134436 139708])
            ("org-export--copy-to-kill-ring-p" function nil nil [139710 140015])
            ("org-export-read-attribute" function (:arguments ("attribute" "element" "property")) nil [140627 142019])
            ("org-export-get-caption" function (:arguments ("element" "shortp")) nil [142021 142531])
            ("org-export-with-backend" function (:arguments ("backend" "data" "contents" "info")) nil [142801 144107])
            ("org-export-snippet-backend" function (:arguments ("export-snippet")) nil [144421 144762])
            ("org-export-get-footnote-definition" function (:arguments ("footnote-reference" "info")) nil [145370 146748])
            ("org-export--footnote-reference-map" function (:arguments ("function" "data" "info" "body-first")) nil [146750 148614])
            ("org-export-collect-footnote-definitions" function (:arguments ("info" "data" "body-first")) nil [148616 149750])
            ("org-export-footnote-first-reference-p" function (:arguments ("footnote-reference" "info" "data" "body-first")) nil [149752 150803])
            ("org-export-get-footnote-number" function (:arguments ("footnote" "info" "data" "body-first")) nil [150805 152047])
            ("org-export-get-relative-level" function (:arguments ("headline" "info")) nil [153052 153307])
            ("org-export-low-level-p" function (:arguments ("headline" "info")) nil [153309 153870])
            ("org-export-get-headline-number" function (:arguments ("headline" "info")) nil [153872 154156])
            ("org-export-numbered-headline-p" function (:arguments ("headline" "info")) nil [154158 154635])
            ("org-export-number-to-roman" function (:arguments ("n")) nil [154637 155103])
            ("org-export-get-tags" function (:arguments ("element" "info" "tags" "inherited")) nil [155105 156182])
            ("org-export-get-node-property" function (:arguments ("property" "blob" "inherited")) nil [156184 156921])
            ("org-export-get-category" function (:arguments ("blob" "info")) nil [156923 157617])
            ("org-export-get-alt-title" function (:arguments ("headline" "_")) nil [157619 158004])
            ("org-export-first-sibling-p" function (:arguments ("blob" "info")) nil [158006 158360])
            ("org-export-last-sibling-p" function (:arguments ("blob" "info")) nil [158362 158595])
            ("org-export-get-date" function (:arguments ("info" "fmt")) nil [158791 159495])
            ("org-define-error" code nil nil [160627 160697])
            ("org-export-custom-protocol-maybe" function (:arguments ("link" "desc" "backend")) nil [160699 161458])
            ("org-export-get-coderef-format" function (:arguments ("path" "desc")) nil [161460 161765])
            ("org-export-inline-image-p" function (:arguments ("link" "rules")) nil [161767 162613])
            ("org-export-resolve-coderef" function (:arguments ("ref" "info")) nil [162615 163573])
            ("org-export-search-cells" function (:arguments ("datum")) nil [163575 164911])
            ("org-export-string-to-search-cell" function (:arguments ("s")) nil [164913 165397])
            ("org-export-match-search-cell-p" function (:arguments ("datum" "cells")) nil [165399 165733])
            ("org-export-resolve-fuzzy-link" function (:arguments ("link" "info")) nil [165735 167437])
            ("org-export-resolve-id-link" function (:arguments ("link" "info")) nil [167439 168248])
            ("org-export-resolve-radio-link" function (:arguments ("link" "info")) nil [168250 168874])
            ("org-export-file-uri" function (:arguments ("filename")) nil [168876 169274])
            ("org-export-new-reference" function (:arguments ("references")) nil [169657 170346])
            ("org-export-format-reference" function (:arguments ("reference")) nil [170348 170564])
            ("org-export-get-reference" function (:arguments ("datum" "info")) nil [170566 172578])
            ("org-export-get-ordinal" function (:arguments ("element" "info" "types" "predicate")) nil [172580 174924])
            ("org-export-get-loc" function (:arguments ("element" "info")) nil [175932 177088])
            ("org-export-unravel-code" function (:arguments ("element")) nil [177090 178388])
            ("org-export-format-code" function (:arguments ("code" "fun" "num-lines" "ref-alist")) nil [178390 179593])
            ("org-export-format-code-default" function (:arguments ("element" "info")) nil [179595 181280])
            ("org-export-table-has-special-column-p" function (:arguments ("table")) nil [182432 183258])
            ("org-export-table-has-header-p" function (:arguments ("table" "info")) nil [183260 184088])
            ("org-export-table-row-is-special-p" function (:arguments ("table-row" "_")) nil [184090 185420])
            ("org-export-table-row-group" function (:arguments ("table-row" "info")) nil [185422 186368])
            ("org-export-table-cell-width" function (:arguments ("table-cell" "info")) nil [186370 187889])
            ("org-export-table-cell-alignment" function (:arguments ("table-cell" "info")) nil [187891 190948])
            ("org-export-table-cell-borders" function (:arguments ("table-cell" "info")) nil [190950 194511])
            ("org-export-table-cell-starts-colgroup-p" function (:arguments ("table-cell" "info")) nil [194513 195041])
            ("org-export-table-cell-ends-colgroup-p" function (:arguments ("table-cell" "info")) nil [195043 195494])
            ("org-export-table-row-starts-rowgroup-p" function (:arguments ("table-row" "info")) nil [195496 195952])
            ("org-export-table-row-ends-rowgroup-p" function (:arguments ("table-row" "info")) nil [195954 196405])
            ("org-export-table-row-in-header-p" function (:arguments ("table-row" "info")) nil [196407 196776])
            ("org-export-table-row-starts-header-p" function (:arguments ("table-row" "info")) nil [196778 197069])
            ("org-export-table-row-ends-header-p" function (:arguments ("table-row" "info")) nil [197071 197357])
            ("org-export-table-row-number" function (:arguments ("table-row" "info")) nil [197359 197982])
            ("org-export-table-dimensions" function (:arguments ("table" "info")) nil [197984 198662])
            ("org-export-table-cell-address" function (:arguments ("table-cell" "info")) nil [198664 199361])
            ("org-export-get-table-cell-at" function (:arguments ("address" "table" "info")) nil [199363 200216])
            ("org-export-collect-headlines" function (:arguments ("info" "n" "scope")) nil [200687 202159])
            ("org-export-collect-elements" function (:arguments ("type" "info" "predicate")) nil [202161 202897])
            ("org-export-collect-tables" function (:arguments ("info")) nil [202899 203109])
            ("org-export-collect-figures" function (:arguments ("info" "predicate")) nil [203111 203669])
            ("org-export-collect-listings" function (:arguments ("info")) nil [203671 203896])
            ("org-export-smart-quotes-alist" variable
               (:constant-flag t
                :default-value (quote (("da" (primary-opening :utf-8 "»" :html "&raquo;" :latex ">>" :texinfo "@guillemetright{}") (primary-closing :utf-8 "«" :html "&laquo;" :latex "<<" :texinfo "@guillemetleft{}") (secondary-opening :utf-8 "›" :html "&rsaquo;" :latex "\\frq{}" :texinfo "@guilsinglright{}") (secondary-closing :utf-8 "‹" :html "&lsaquo;" :latex "\\flq{}" :texinfo "@guilsingleft{}") (apostrophe :utf-8 "’" :html "&rsquo;")) ("de" (primary-opening :utf-8 "„" :html "&bdquo;" :latex "\"`" :texinfo "@quotedblbase{}") (primary-closing :utf-8 "“" :html "&ldquo;" :latex "\"'" :texinfo "@quotedblleft{}") (secondary-opening :utf-8 "‚" :html "&sbquo;" :latex "\\glq{}" :texinfo "@quotesinglbase{}") (secondary-closing :utf-8 "‘" :html "&lsquo;" :latex "\\grq{}" :texinfo "@quoteleft{}") (apostrophe :utf-8 "’" :html "&rsquo;")) ("en" (primary-opening :utf-8 "“" :html "&ldquo;" :latex "``" :texinfo "``") (primary-closing :utf-8 "”" :html "&rdquo;" :latex "''" :texinfo "''") (secondary-opening :utf-8 "‘" :html "&lsquo;" :latex "`" :texinfo "`") (secondary-closing :utf-8 "’" :html "&rsquo;" :latex "'" :texinfo "'") (apostrophe :utf-8 "’" :html "&rsquo;")) ("es" (primary-opening :utf-8 "«" :html "&laquo;" :latex "\\guillemotleft{}" :texinfo "@guillemetleft{}") (primary-closing :utf-8 "»" :html "&raquo;" :latex "\\guillemotright{}" :texinfo "@guillemetright{}") (secondary-opening :utf-8 "“" :html "&ldquo;" :latex "``" :texinfo "``") (secondary-closing :utf-8 "”" :html "&rdquo;" :latex "''" :texinfo "''") (apostrophe :utf-8 "’" :html "&rsquo;")) ("fr" (primary-opening :utf-8 "« " :html "&laquo;&nbsp;" :latex "\\og " :texinfo "@guillemetleft{}@tie{}") (primary-closing :utf-8 " »" :html "&nbsp;&raquo;" :latex "\\fg{}" :texinfo "@tie{}@guillemetright{}") (secondary-opening :utf-8 "« " :html "&laquo;&nbsp;" :latex "\\og " :texinfo "@guillemetleft{}@tie{}") (secondary-closing :utf-8 " »" :html "&nbsp;&raquo;" :latex "\\fg{}" :texinfo "@tie{}@guillemetright{}") (apostrophe :utf-8 "’" :html "&rsquo;")) ("is" (primary-opening :utf-8 "„" :html "&bdquo;" :latex "\"`" :texinfo "@quotedblbase{}") (primary-closing :utf-8 "“" :html "&ldquo;" :latex "\"'" :texinfo "@quotedblleft{}") (secondary-opening :utf-8 "‚" :html "&sbquo;" :latex "\\glq{}" :texinfo "@quotesinglbase{}") (secondary-closing :utf-8 "‘" :html "&lsquo;" :latex "\\grq{}" :texinfo "@quoteleft{}") (apostrophe :utf-8 "’" :html "&rsquo;")) ("no" (primary-opening :utf-8 "«" :html "&laquo;" :latex "\\guillemotleft{}" :texinfo "@guillemetleft{}") (primary-closing :utf-8 "»" :html "&raquo;" :latex "\\guillemotright{}" :texinfo "@guillemetright{}") (secondary-opening :utf-8 "‘" :html "&lsquo;" :latex "`" :texinfo "`") (secondary-closing :utf-8 "’" :html "&rsquo;" :latex "'" :texinfo "'") (apostrophe :utf-8 "’" :html "&rsquo;")) ("nb" (primary-opening :utf-8 "«" :html "&laquo;" :latex "\\guillemotleft{}" :texinfo "@guillemetleft{}") (primary-closing :utf-8 "»" :html "&raquo;" :latex "\\guillemotright{}" :texinfo "@guillemetright{}") (secondary-opening :utf-8 "‘" :html "&lsquo;" :latex "`" :texinfo "`") (secondary-closing :utf-8 "’" :html "&rsquo;" :latex "'" :texinfo "'") (apostrophe :utf-8 "’" :html "&rsquo;")) ("nn" (primary-opening :utf-8 "«" :html "&laquo;" :latex "\\guillemotleft{}" :texinfo "@guillemetleft{}") (primary-closing :utf-8 "»" :html "&raquo;" :latex "\\guillemotright{}" :texinfo "@guillemetright{}") (secondary-opening :utf-8 "‘" :html "&lsquo;" :latex "`" :texinfo "`") (secondary-closing :utf-8 "’" :html "&rsquo;" :latex "'" :texinfo "'") (apostrophe :utf-8 "’" :html "&rsquo;")) ("ru" (primary-opening :utf-8 "«" :html "&laquo;" :latex "{}<<" :texinfo "@guillemetleft{}") (primary-closing :utf-8 "»" :html "&raquo;" :latex ">>{}" :texinfo "@guillemetright{}") (secondary-opening :utf-8 "„" :html "&bdquo;" :latex "\\glqq{}" :texinfo "@quotedblbase{}") (secondary-closing :utf-8 "“" :html "&ldquo;" :latex "\\grqq{}" :texinfo "@quotedblleft{}") (apostrophe :utf-8 "’" :html: "&#39;")) ("sv" (primary-opening :utf-8 "”" :html "&rdquo;" :latex "’’" :texinfo "’’") (primary-closing :utf-8 "”" :html "&rdquo;" :latex "’’" :texinfo "’’") (secondary-opening :utf-8 "’" :html "&rsquo;" :latex "’" :texinfo "`") (secondary-closing :utf-8 "’" :html "&rsquo;" :latex "’" :texinfo "'") (apostrophe :utf-8 "’" :html "&rsquo;")))))
                nil [204197 210281])
            ("org-export--smart-quote-status" function (:arguments ("s" "info")) nil [210283 213122])
            ("org-export-activate-smart-quotes" function (:arguments ("s" "encoding" "info" "original")) nil [213124 214013])
            ("org-export-get-parent-headline" function (:arguments ("blob")) nil [214589 214763])
            ("org-export-get-parent-element" function (:arguments ("object")) nil [214765 214952])
            ("org-export-get-parent-table" function (:arguments ("object")) nil [214954 215141])
            ("org-export-get-previous-element" function (:arguments ("blob" "info" "n")) nil [215143 216087])
            ("org-export-get-next-element" function (:arguments ("blob" "info" "n")) nil [216089 217042])
            ("org-export-dictionary" variable
               (:constant-flag t
                :default-value (quote (("%e %n: %c" ("fr" :default "%e %n : %c" :html "%e&nbsp;%n&nbsp;: %c")) ("Author" ("ca" :default "Autor") ("cs" :default "Autor") ("da" :default "Forfatter") ("de" :default "Autor") ("eo" :html "A&#365;toro") ("es" :default "Autor") ("et" :default "Autor") ("fi" :html "Tekij&auml;") ("fr" :default "Auteur") ("hu" :default "Szerz&otilde;") ("is" :html "H&ouml;fundur") ("it" :default "Autore") ("ja" :default "著者" :html "&#33879;&#32773;") ("nl" :default "Auteur") ("no" :default "Forfatter") ("nb" :default "Forfatter") ("nn" :default "Forfattar") ("pl" :default "Autor") ("pt_BR" :default "Autor") ("ru" :html "&#1040;&#1074;&#1090;&#1086;&#1088;" :utf-8 "Автор") ("sv" :html "F&ouml;rfattare") ("uk" :html "&#1040;&#1074;&#1090;&#1086;&#1088;" :utf-8 "Автор") ("zh-CN" :html "&#20316;&#32773;" :utf-8 "作者") ("zh-TW" :html "&#20316;&#32773;" :utf-8 "作者")) ("Continued from previous page" ("de" :default "Fortsetzung von vorheriger Seite") ("es" :html "Contin&uacute;a de la p&aacute;gina anterior" :ascii "Continua de la pagina anterior" :default "Continúa de la página anterior") ("fr" :default "Suite de la page précédente") ("it" :default "Continua da pagina precedente") ("ja" :default "前ページからの続き") ("nl" :default "Vervolg van vorige pagina") ("pt" :default "Continuação da página anterior") ("ru" :html "(&#1055;&#1088;&#1086;&#1076;&#1086;&#1083;&#1078;&#1077;&#1085;&#1080;&#1077;)" :utf-8 "(Продолжение)")) ("Continued on next page" ("de" :default "Fortsetzung nächste Seite") ("es" :html "Contin&uacute;a en la siguiente p&aacute;gina" :ascii "Continua en la siguiente pagina" :default "Continúa en la siguiente página") ("fr" :default "Suite page suivante") ("it" :default "Continua alla pagina successiva") ("ja" :default "次ページに続く") ("nl" :default "Vervolg op volgende pagina") ("pt" :default "Continua na página seguinte") ("ru" :html "(&#1055;&#1088;&#1086;&#1076;&#1086;&#1083;&#1078;&#1077;&#1085;&#1080;&#1077; &#1089;&#1083;&#1077;&#1076;&#1091;&#1077;&#1090;)" :utf-8 "(Продолжение следует)")) ("Date" ("ca" :default "Data") ("cs" :default "Datum") ("da" :default "Dato") ("de" :default "Datum") ("eo" :default "Dato") ("es" :default "Fecha") ("et" :html "Kuup&#228;ev" :utf-8 "Kuupäev") ("fi" :html "P&auml;iv&auml;m&auml;&auml;r&auml;") ("hu" :html "D&aacute;tum") ("is" :default "Dagsetning") ("it" :default "Data") ("ja" :default "日付" :html "&#26085;&#20184;") ("nl" :default "Datum") ("no" :default "Dato") ("nb" :default "Dato") ("nn" :default "Dato") ("pl" :default "Data") ("pt_BR" :default "Data") ("ru" :html "&#1044;&#1072;&#1090;&#1072;" :utf-8 "Дата") ("sv" :default "Datum") ("uk" :html "&#1044;&#1072;&#1090;&#1072;" :utf-8 "Дата") ("zh-CN" :html "&#26085;&#26399;" :utf-8 "日期") ("zh-TW" :html "&#26085;&#26399;" :utf-8 "日期")) ("Equation" ("da" :default "Ligning") ("de" :default "Gleichung") ("es" :ascii "Ecuacion" :html "Ecuaci&oacute;n" :default "Ecuación") ("et" :html "V&#245;rrand" :utf-8 "Võrrand") ("fr" :ascii "Equation" :default "Équation") ("is" :default "Jafna") ("ja" :default "方程式") ("no" :default "Ligning") ("nb" :default "Ligning") ("nn" :default "Likning") ("pt_BR" :html "Equa&ccedil;&atilde;o" :default "Equação" :ascii "Equacao") ("ru" :html "&#1059;&#1088;&#1072;&#1074;&#1085;&#1077;&#1085;&#1080;&#1077;" :utf-8 "Уравнение") ("sv" :default "Ekvation") ("zh-CN" :html "&#26041;&#31243;" :utf-8 "方程")) ("Figure" ("da" :default "Figur") ("de" :default "Abbildung") ("es" :default "Figura") ("et" :default "Joonis") ("is" :default "Mynd") ("ja" :default "図" :html "&#22259;") ("no" :default "Illustrasjon") ("nb" :default "Illustrasjon") ("nn" :default "Illustrasjon") ("pt_BR" :default "Figura") ("ru" :html "&#1056;&#1080;&#1089;&#1091;&#1085;&#1086;&#1082;" :utf-8 "Рисунок") ("sv" :default "Illustration") ("zh-CN" :html "&#22270;" :utf-8 "图")) ("Figure %d:" ("da" :default "Figur %d") ("de" :default "Abbildung %d:") ("es" :default "Figura %d:") ("et" :default "Joonis %d:") ("fr" :default "Figure %d :" :html "Figure&nbsp;%d&nbsp;:") ("is" :default "Mynd %d") ("ja" :default "図%d: " :html "&#22259;%d: ") ("no" :default "Illustrasjon %d") ("nb" :default "Illustrasjon %d") ("nn" :default "Illustrasjon %d") ("pt_BR" :default "Figura %d:") ("ru" :html "&#1056;&#1080;&#1089;. %d.:" :utf-8 "Рис. %d.:") ("sv" :default "Illustration %d") ("zh-CN" :html "&#22270;%d&nbsp;" :utf-8 "图%d ")) ("Footnotes" ("ca" :html "Peus de p&agrave;gina") ("cs" :default "Pozn\341mky pod carou") ("da" :default "Fodnoter") ("de" :html "Fu&szlig;noten" :default "Fußnoten") ("eo" :default "Piednotoj") ("es" :ascii "Nota al pie de pagina" :html "Nota al pie de p&aacute;gina" :default "Nota al pie de página") ("et" :html "Allm&#228;rkused" :utf-8 "Allmärkused") ("fi" :default "Alaviitteet") ("fr" :default "Notes de bas de page") ("hu" :html "L&aacute;bjegyzet") ("is" :html "Aftanm&aacute;lsgreinar") ("it" :html "Note a pi&egrave; di pagina") ("ja" :default "脚注" :html "&#33050;&#27880;") ("nl" :default "Voetnoten") ("no" :default "Fotnoter") ("nb" :default "Fotnoter") ("nn" :default "Fotnotar") ("pl" :default "Przypis") ("pt_BR" :html "Notas de Rodap&eacute;" :default "Notas de Rodapé" :ascii "Notas de Rodape") ("ru" :html "&#1057;&#1085;&#1086;&#1089;&#1082;&#1080;" :utf-8 "Сноски") ("sv" :default "Fotnoter") ("uk" :html "&#1055;&#1088;&#1080;&#1084;&#1110;&#1090;&#1082;&#1080;" :utf-8 "Примітки") ("zh-CN" :html "&#33050;&#27880;" :utf-8 "脚注") ("zh-TW" :html "&#33139;&#35387;" :utf-8 "腳註")) ("List of Listings" ("da" :default "Programmer") ("de" :default "Programmauflistungsverzeichnis") ("es" :ascii "Indice de Listados de programas" :html "&Iacute;ndice de Listados de programas" :default "Índice de Listados de programas") ("et" :default "Loendite nimekiri") ("fr" :default "Liste des programmes") ("ja" :default "ソースコード目次") ("no" :default "Dataprogrammer") ("nb" :default "Dataprogrammer") ("ru" :html "&#1057;&#1087;&#1080;&#1089;&#1086;&#1082; &#1088;&#1072;&#1089;&#1087;&#1077;&#1095;&#1072;&#1090;&#1086;&#1082;" :utf-8 "Список распечаток") ("zh-CN" :html "&#20195;&#30721;&#30446;&#24405;" :utf-8 "代码目录")) ("List of Tables" ("da" :default "Tabeller") ("de" :default "Tabellenverzeichnis") ("es" :ascii "Indice de tablas" :html "&Iacute;ndice de tablas" :default "Índice de tablas") ("et" :default "Tabelite nimekiri") ("fr" :default "Liste des tableaux") ("is" :default "Töfluskrá" :html "T&ouml;fluskr&aacute;") ("ja" :default "表目次") ("no" :default "Tabeller") ("nb" :default "Tabeller") ("nn" :default "Tabeller") ("pt_BR" :default "Índice de Tabelas" :ascii "Indice de Tabelas") ("ru" :html "&#1057;&#1087;&#1080;&#1089;&#1086;&#1082; &#1090;&#1072;&#1073;&#1083;&#1080;&#1094;" :utf-8 "Список таблиц") ("sv" :default "Tabeller") ("zh-CN" :html "&#34920;&#26684;&#30446;&#24405;" :utf-8 "表格目录")) ("Listing" ("da" :default "Program") ("de" :default "Programmlisting") ("es" :default "Listado de programa") ("et" :default "Loend") ("fr" :default "Programme" :html "Programme") ("ja" :default "ソースコード") ("no" :default "Dataprogram") ("nb" :default "Dataprogram") ("pt_BR" :default "Listagem") ("ru" :html "&#1056;&#1072;&#1089;&#1087;&#1077;&#1095;&#1072;&#1090;&#1082;&#1072;" :utf-8 "Распечатка") ("zh-CN" :html "&#20195;&#30721;" :utf-8 "代码")) ("Listing %d:" ("da" :default "Program %d") ("de" :default "Programmlisting %d") ("es" :default "Listado de programa %d") ("et" :default "Loend %d") ("fr" :default "Programme %d :" :html "Programme&nbsp;%d&nbsp;:") ("ja" :default "ソースコード%d:") ("no" :default "Dataprogram %d") ("nb" :default "Dataprogram %d") ("pt_BR" :default "Listagem %d") ("ru" :html "&#1056;&#1072;&#1089;&#1087;&#1077;&#1095;&#1072;&#1090;&#1082;&#1072; %d.:" :utf-8 "Распечатка %d.:") ("zh-CN" :html "&#20195;&#30721;%d&nbsp;" :utf-8 "代码%d ")) ("References" ("fr" :ascii "References" :default "Références") ("de" :default "Quellen") ("es" :default "Referencias")) ("See figure %s" ("fr" :default "cf. figure %s" :html "cf.&nbsp;figure&nbsp;%s" :latex "cf.~figure~%s")) ("See listing %s" ("fr" :default "cf. programme %s" :html "cf.&nbsp;programme&nbsp;%s" :latex "cf.~programme~%s")) ("See section %s" ("da" :default "jævnfør afsnit %s") ("de" :default "siehe Abschnitt %s") ("es" :ascii "Vea seccion %s" :html "Vea secci&oacute;n %s" :default "Vea sección %s") ("et" :html "Vaata peat&#252;kki %s" :utf-8 "Vaata peatükki %s") ("fr" :default "cf. section %s") ("ja" :default "セクション %s を参照") ("pt_BR" :html "Veja a se&ccedil;&atilde;o %s" :default "Veja a seção %s" :ascii "Veja a secao %s") ("ru" :html "&#1057;&#1084;. &#1088;&#1072;&#1079;&#1076;&#1077;&#1083; %s" :utf-8 "См. раздел %s") ("zh-CN" :html "&#21442;&#35265;&#31532;%s&#33410;" :utf-8 "参见第%s节")) ("See table %s" ("fr" :default "cf. tableau %s" :html "cf.&nbsp;tableau&nbsp;%s" :latex "cf.~tableau~%s")) ("Table" ("de" :default "Tabelle") ("es" :default "Tabla") ("et" :default "Tabel") ("fr" :default "Tableau") ("is" :default "Tafla") ("ja" :default "表" :html "&#34920;") ("pt_BR" :default "Tabela") ("ru" :html "&#1058;&#1072;&#1073;&#1083;&#1080;&#1094;&#1072;" :utf-8 "Таблица") ("zh-CN" :html "&#34920;" :utf-8 "表")) ("Table %d:" ("da" :default "Tabel %d") ("de" :default "Tabelle %d") ("es" :default "Tabla %d") ("et" :default "Tabel %d") ("fr" :default "Tableau %d :") ("is" :default "Tafla %d") ("ja" :default "表%d:" :html "&#34920;%d:") ("no" :default "Tabell %d") ("nb" :default "Tabell %d") ("nn" :default "Tabell %d") ("pt_BR" :default "Tabela %d") ("ru" :html "&#1058;&#1072;&#1073;&#1083;&#1080;&#1094;&#1072; %d.:" :utf-8 "Таблица %d.:") ("sv" :default "Tabell %d") ("zh-CN" :html "&#34920;%d&nbsp;" :utf-8 "表%d ")) ("Table of Contents" ("ca" :html "&Iacute;ndex") ("cs" :default "Obsah") ("da" :default "Indhold") ("de" :default "Inhaltsverzeichnis") ("eo" :default "Enhavo") ("es" :ascii "Indice" :html "&Iacute;ndice" :default "Índice") ("et" :default "Sisukord") ("fi" :html "Sis&auml;llysluettelo") ("fr" :ascii "Sommaire" :default "Table des matières") ("hu" :html "Tartalomjegyz&eacute;k") ("is" :default "Efnisyfirlit") ("it" :default "Indice") ("ja" :default "目次" :html "&#30446;&#27425;") ("nl" :default "Inhoudsopgave") ("no" :default "Innhold") ("nb" :default "Innhold") ("nn" :default "Innhald") ("pl" :html "Spis tre&#x015b;ci") ("pt_BR" :html "&Iacute;ndice" :utf8 "Índice" :ascii "Indice") ("ru" :html "&#1057;&#1086;&#1076;&#1077;&#1088;&#1078;&#1072;&#1085;&#1080;&#1077;" :utf-8 "Содержание") ("sv" :html "Inneh&aring;ll") ("uk" :html "&#1047;&#1084;&#1110;&#1089;&#1090;" :utf-8 "Зміст") ("zh-CN" :html "&#30446;&#24405;" :utf-8 "目录") ("zh-TW" :html "&#30446;&#37636;" :utf-8 "目錄")) ("Unknown reference" ("da" :default "ukendt reference") ("de" :default "Unbekannter Verweis") ("es" :default "Referencia desconocida") ("et" :default "Tundmatu viide") ("fr" :ascii "Destination inconnue" :default "Référence inconnue") ("ja" :default "不明な参照先") ("pt_BR" :default "Referência desconhecida" :ascii "Referencia desconhecida") ("ru" :html "&#1053;&#1077;&#1080;&#1079;&#1074;&#1077;&#1089;&#1090;&#1085;&#1072;&#1103; &#1089;&#1089;&#1099;&#1083;&#1082;&#1072;" :utf-8 "Неизвестная ссылка") ("zh-CN" :html "&#26410;&#30693;&#24341;&#29992;" :utf-8 "未知引用")))))
                nil [217254 230266])
            ("org-export-translate" function (:arguments ("s" "encoding" "info")) nil [230268 230883])
            ("org-export-async-start" function (:arguments ("fun" "body")) nil [232101 236263])
            ("org-export-to-buffer" function (:arguments ("backend" "buffer" "async" "subtreep" "visible-only" "body-only" "ext-plist" "post-process")) nil [236280 238692])
            ("org-export-to-file" function (:arguments ("backend" "file" "async" "subtreep" "visible-only" "body-only" "ext-plist" "post-process")) nil [238709 241202])
            ("org-export-output-file-name" function (:arguments ("extension" "subtreep" "pub-dir")) nil [241204 242959])
            ("org-export-add-to-stack" function (:arguments ("source" "backend" "process")) nil [242961 243460])
            ("org-export-stack" function (:user-visible-flag t) nil [243462 243799])
            ("org-export-stack-clear" function (:user-visible-flag t) nil [243801 243931])
            ("org-export-stack-refresh" function (:user-visible-flag t) nil [243933 244041])
            ("org-export-stack-remove" function
               (:user-visible-flag t
                :arguments ("source"))
                nil [244043 244405])
            ("org-export-stack-view" function
               (:user-visible-flag t
                :arguments ("in-emacs"))
                nil [244407 244851])
            ("org-export-stack-mode-map" variable (:default-value (let ((km (make-sparse-keymap))) (set-keymap-parent km tabulated-list-mode-map) (define-key km " " (quote next-line)) (define-key km "" (quote next-line)) (define-key km [down] (quote next-line)) (define-key km "" (quote previous-line)) (define-key km "" (quote previous-line)) (define-key km [up] (quote previous-line)) (define-key km "C" (quote org-export-stack-clear)) (define-key km "v" (quote org-export-stack-view)) (define-key km (kbd "RET") (quote org-export-stack-view)) (define-key km "d" (quote org-export-stack-remove)) km)) nil [244853 245448])
            ("define-derived-mode" code nil nil [245450 246457])
            ("org-export--stack-generate" function nil nil [246459 247574])
            ("org-export--stack-num-predicate" function (:arguments ("a" "b")) nil [247576 247708])
            ("org-export--stack-source-at-point" function nil nil [247710 248379])
            ("org-export-dispatch" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [248670 251569])
            ("org-export--dispatch-ui" function (:arguments ("options" "first-key" "expertp")) nil [251571 258284])
            ("org-export--dispatch-action" function (:arguments ("prompt" "allowed-keys" "entries" "options" "first-key" "expertp")) nil [258286 261651])
            ("ox" package nil nil [261655 261668]))          
      :file "ox.el"
      :pointmax 261765
      :fsize 262336
      :lastmodtime '(22842 50887 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("ob-core" include nil nil [952 970])
            ("declare-function" code nil nil [972 1040])
            ("declare-function" code nil nil [1041 1097])
            ("declare-function" code nil nil [1098 1170])
            ("declare-function" code nil nil [1171 1243])
            ("declare-function" code nil nil [1244 1303])
            ("declare-function" code nil nil [1304 1362])
            ("declare-function" code nil nil [1363 1412])
            ("declare-function" code nil nil [1413 1472])
            ("declare-function" code nil nil [1473 1534])
            ("declare-function" code nil nil [1535 1613])
            ("org-src-preserve-indentation" variable nil nil [1615 1652])
            ("org-export-babel-evaluate" variable (:default-value t) nil [1654 2189])
            ("put" code nil nil [2190 2250])
            ("org-babel-exp--at-source" function (:arguments ("body")) nil [2252 2749])
            ("org-babel-exp-src-block" function (:user-visible-flag t) nil [2751 4254])
            ("org-babel-exp-call-line-template" variable nil nil [4256 4767])
            ("org-babel-exp-process-buffer" function (:user-visible-flag t) nil [4769 10447])
            ("org-babel-exp-do-export" function (:arguments ("info" "type" "hash")) nil [10449 11288])
            ("org-babel-exp-code-template" variable (:default-value "#+BEGIN_SRC %lang%switches%flags
%body
#+END_SRC") nil [11290 12083])
            ("org-babel-exp-inline-code-template" variable (:default-value "src_%lang[%switches%flags]{%body}") nil [12085 12927])
            ("org-babel-exp-code" function (:arguments ("info" "type")) nil [12929 13918])
            ("org-babel-exp-results" function (:arguments ("info" "type" "silent" "hash")) nil [13920 15445])
            ("ob-exp" package nil nil [15448 15465]))          
      :file "ob-exp.el"
      :pointmax 15491
      :fsize 15490
      :lastmodtime '(22842 50887 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [1109 1126])
            ("org" include nil nil [1127 1141])
            ("declare-function" code nil nil [1143 1206])
            ("declare-function" code nil nil [1207 1270])
            ("declare-function" code nil nil [1271 1349])
            ("declare-function" code nil nil [1350 1420])
            ("declare-function" code nil nil [1421 1487])
            ("declare-function" code nil nil [1488 1609])
            ("declare-function" code nil nil [1610 1715])
            ("declare-function" code nil nil [1716 1788])
            ("declare-function" code nil nil [1789 1855])
            ("declare-function" code nil nil [1856 1915])
            ("org-agenda-columns-add-appointments-to-effort-sum" variable nil nil [1917 1975])
            ("org-agenda-columns-compute-summary-properties" variable nil nil [1976 2030])
            ("org-agenda-columns-show-summaries" variable nil nil [2031 2073])
            ("org-agenda-view-columns-initially" variable nil nil [2074 2116])
            ("org-inlinetask-min-level" variable nil nil [2117 2150])
            ("org-columns-modify-value-for-display-function" variable nil nil [2173 2696])
            ("org-columns-summary-types" variable nil nil [2698 3662])
            ("org-columns-overlays" variable nil nil [3684 3764])
            ("org-columns--time" variable nil nil [3766 3863])
            ("defvar-local" code nil nil [3865 3969])
            ("defvar-local" code nil nil [3971 4128])
            ("defvar-local" code nil nil [4130 4235])
            ("org-columns-begin-marker" variable (:default-value (make-marker)) nil [4237 4360])
            ("org-columns-top-level-marker" variable (:default-value (make-marker)) nil [4362 4477])
            ("org-columns-map" variable (:default-value (make-sparse-keymap)) nil [4479 4564])
            ("org-columns-summary-types-default" variable
               (:constant-flag t
                :default-value (quote (("+" . org-columns--summary-sum) ("$" . org-columns--summary-currencies) ("X" . org-columns--summary-checkbox) ("X/" . org-columns--summary-checkbox-count) ("X%" . org-columns--summary-checkbox-percent) ("max" . org-columns--summary-max) ("mean" . org-columns--summary-mean) ("min" . org-columns--summary-min) (":" . org-columns--summary-sum-times) (":max" . org-columns--summary-max-time) (":mean" . org-columns--summary-mean-time) (":min" . org-columns--summary-min-time) ("@max" . org-columns--summary-max-age) ("@mean" . org-columns--summary-mean-age) ("@min" . org-columns--summary-min-age) ("est+" . org-columns--summary-estimate))))
                nil [4566 5431])
            ("org-columns-content" function (:user-visible-flag t) nil [5433 5563])
            ("org-defkey" code nil nil [5565 5618])
            ("org-defkey" code nil nil [5619 5665])
            ("org-defkey" code nil nil [5666 5722])
            ("org-defkey" code nil nil [5723 5780])
            ("org-defkey" code nil nil [5781 5852])
            ("org-defkey" code nil nil [5853 5915])
            ("org-defkey" code nil nil [5916 5972])
            ("org-defkey" code nil nil [5973 6023])
            ("org-defkey" code nil nil [6024 6074])
            ("org-defkey" code nil nil [6075 6125])
            ("org-defkey" code nil nil [6126 6176])
            ("org-defkey" code nil nil [6177 6227])
            ("org-defkey" code nil nil [6228 6286])
            ("org-defkey" code nil nil [6287 6348])
            ("org-defkey" code nil nil [6349 6440])
            ("org-defkey" code nil nil [6441 6533])
            ("org-defkey" code nil nil [6534 6836])
            ("org-defkey" code nil nil [6837 7137])
            ("org-defkey" code nil nil [7138 7214])
            ("org-defkey" code nil nil [7215 7279])
            ("org-defkey" code nil nil [7280 7359])
            ("org-defkey" code nil nil [7360 7428])
            ("org-defkey" code nil nil [7429 7481])
            ("org-defkey" code nil nil [7482 7533])
            ("org-defkey" code nil nil [7534 7601])
            ("org-defkey" code nil nil [7602 7667])
            ("org-defkey" code nil nil [7668 7734])
            ("org-defkey" code nil nil [7735 7803])
            ("dotimes" code nil nil [7804 7949])
            ("easy-menu-define" code nil nil [7951 8896])
            ("org-columns--displayed-value" function (:arguments ("spec" "value")) nil [8898 9749])
            ("org-columns--collect-values" function (:arguments ("compiled-fmt")) nil [9751 10896])
            ("org-columns--set-widths" function (:arguments ("cache")) nil [10898 11626])
            ("org-columns--new-overlay" function (:arguments ("beg" "end" "string" "face")) nil [11628 11927])
            ("org-columns--summarize" function (:arguments ("operator")) nil [11929 12215])
            ("org-columns--overlay-text" function (:arguments ("value" "fmt" "width" "property" "original")) nil [12217 12912])
            ("org-columns--display-here" function (:arguments ("columns" "dateline")) nil [12914 15849])
            ("org-columns-add-ellipses" function (:arguments ("string" "width")) nil [15851 16200])
            ("org-columns-full-header-line-format" variable nil nil [16202 16325])
            ("org-previous-header-line-format" variable nil nil [16326 16431])
            ("org-columns-inhibit-recalculation" variable nil nil [16432 16537])
            ("org-columns-flyspell-was-active" variable nil nil [16538 16747])
            ("header-line-format" variable nil nil [16749 16776])
            ("org-columns-previous-hscroll" variable nil nil [16777 16816])
            ("org-columns--display-here-title" function (:user-visible-flag t) nil [16818 17632])
            ("org-columns-hscroll-title" function nil nil [17634 18134])
            ("org-colview-initial-truncate-line-value" variable nil nil [18136 18247])
            ("org-columns-remove-overlays" function (:user-visible-flag t) nil [18264 19265])
            ("org-columns-compact-links" function (:arguments ("s")) nil [19267 19513])
            ("org-columns-show-value" function (:user-visible-flag t) nil [19515 19713])
            ("org-agenda-columns-active" variable nil nil [19715 19749])
            ("org-columns-quit" function (:user-visible-flag t) nil [19779 20276])
            ("org-columns-check-computed" function nil nil [20278 20615])
            ("org-columns-todo" function
               (:user-visible-flag t
                :arguments ("_arg"))
                nil [20617 20758])
            ("org-columns-set-tags-or-toggle" function
               (:user-visible-flag t
                :arguments ("_arg"))
                nil [20760 21070])
            ("org-agenda-overriding-columns-format" variable nil nil [21072 21240])
            ("org-columns-edit-value" function
               (:user-visible-flag t
                :arguments ("key"))
                nil [21242 24134])
            ("org-columns-edit-allowed" function (:user-visible-flag t) nil [24136 24898])
            ("org-columns--call" function (:arguments ("fun")) nil [24900 25255])
            ("org-columns-previous-allowed-value" function (:user-visible-flag t) nil [25257 25413])
            ("org-columns-next-allowed-value" function
               (:user-visible-flag t
                :arguments ("previous" "nth"))
                nil [25415 27870])
            ("org-colview-construct-allowed-dates" function (:arguments ("s")) nil [27872 28909])
            ("org-columns-open-link" function (:arguments ("arg")) nil [28911 29083])
            ("org-columns-get-format-and-top-level" function nil nil [29100 29229])
            ("org-columns-get-format" function
               (:user-visible-flag t
                :arguments ("fmt-string"))
                nil [29231 30062])
            ("org-columns-goto-top-level" function nil nil [30064 30440])
            ("org-columns" function
               (:user-visible-flag t
                :arguments ("global" "columns-fmt-string"))
                nil [30457 32463])
            ("org-columns-new" function
               (:user-visible-flag t
                :arguments ("spec" "attributes"))
                nil [32465 33961])
            ("org-columns-delete" function (:user-visible-flag t) nil [33963 34707])
            ("org-columns-edit-attributes" function (:user-visible-flag t) nil [34709 34886])
            ("org-columns-widen" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [34888 35291])
            ("org-columns-narrow" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [35293 35423])
            ("org-columns-move-right" function (:user-visible-flag t) nil [35425 36479])
            ("org-columns-move-left" function (:user-visible-flag t) nil [36481 36761])
            ("org-columns-store-format" function nil nil [36763 38185])
            ("org-columns-update" function (:arguments ("property")) nil [38187 39239])
            ("org-columns-redo" function (:user-visible-flag t) nil [39241 39827])
            ("org-columns-uncompile-format" function (:arguments ("compiled")) nil [39829 40359])
            ("org-columns-compile-format" function (:arguments ("fmt")) nil [40361 41832])
            ("org-columns--duration-re" variable
               (:constant-flag t
                :default-value (concat "[0-9.]+ *" (regexp-opt (mapcar (function car) org-effort-durations))))
                nil [41862 42001])
            ("org-columns--time-to-seconds" function (:arguments ("s")) nil [42003 42613])
            ("org-columns--age-to-seconds" function (:arguments ("s")) nil [42615 43329])
            ("org-columns--summary-apply-times" function (:arguments ("fun" "times")) nil [43331 44149])
            ("org-columns--compute-spec" function (:arguments ("spec" "update")) nil [44151 46979])
            ("org-columns-compute" function
               (:user-visible-flag t
                :arguments ("property"))
                nil [46996 47501])
            ("org-columns-compute-all" function nil nil [47503 48020])
            ("org-columns--summary-sum" function (:arguments ("values" "printf")) nil [48022 48229])
            ("org-columns--summary-currencies" function (:arguments ("values" "_")) nil [48231 48396])
            ("org-columns--summary-checkbox" function (:arguments ("check-boxes" "_")) nil [48398 48650])
            ("org-columns--summary-checkbox-count" function (:arguments ("check-boxes" "_")) nil [48652 48928])
            ("org-columns--summary-checkbox-percent" function (:arguments ("check-boxes" "_")) nil [48930 49187])
            ("org-columns--summary-min" function (:arguments ("values" "printf")) nil [49189 49405])
            ("org-columns--summary-max" function (:arguments ("values" "printf")) nil [49407 49623])
            ("org-columns--summary-mean" function (:arguments ("values" "printf")) nil [49625 49871])
            ("org-columns--summary-sum-times" function (:arguments ("times" "_")) nil [49873 49983])
            ("org-columns--summary-min-time" function (:arguments ("times" "_")) nil [49985 50123])
            ("org-columns--summary-max-time" function (:arguments ("times" "_")) nil [50125 50263])
            ("org-columns--summary-mean-time" function (:arguments ("times" "_")) nil [50265 50472])
            ("org-columns--summary-min-age" function (:arguments ("ages" "_")) nil [50474 50663])
            ("org-columns--summary-max-age" function (:arguments ("ages" "_")) nil [50665 50854])
            ("org-columns--summary-mean-age" function (:arguments ("ages" "_")) nil [50856 51076])
            ("org-columns--summary-estimate" function (:arguments ("estimates" "_")) nil [51078 51731])
            ("org-columns--capture-view" function (:arguments ("maxlevel" "skip-empty" "format" "local")) nil [51771 53402])
            ("org-columns--clean-item" function (:arguments ("item")) nil [53404 53959])
            ("org-dblock-write:columnview" function (:arguments ("params")) nil [53976 58436])
            ("org-columns-insert-dblock" function (:user-visible-flag t) nil [58453 58953])
            ("org-agenda-columns" function (:user-visible-flag t) nil [59004 61077])
            ("org-agenda-colview-summarize" function (:arguments ("cache")) nil [61079 63314])
            ("org-agenda-colview-compute" function (:arguments ("fmt")) nil [63316 64206])
            ("org-colview" package nil nil [64209 64231]))          
      :file "org-colview.el"
      :pointmax 64262
      :fsize 64261
      :lastmodtime '(22842 50887 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("ox-latex" include nil nil [5133 5152])
            ("unless" code nil nil [5189 5347])
            ("org-export-koma-letter" customgroup (:user-visible-flag t) nil [5384 5533])
            ("org-koma-letter-class-option-file" variable (:default-value "NF") nil [5535 5714])
            ("org-koma-letter-author" variable (:default-value (quote user-full-name)) nil [5716 6197])
            ("org-koma-letter-email" variable (:default-value (quote org-koma-letter-email)) nil [6199 6675])
            ("org-koma-letter-from-address" variable nil nil [6677 6872])
            ("org-koma-letter-phone-number" variable nil nil [6874 7065])
            ("org-koma-letter-place" variable nil nil [7067 7258])
            ("org-koma-letter-location" variable nil nil [7260 7886])
            ("org-koma-letter-opening" variable nil nil [7888 8410])
            ("org-koma-letter-closing" variable nil nil [8412 8929])
            ("org-koma-letter-signature" variable nil nil [8931 9535])
            ("org-koma-letter-prefer-special-headings" variable nil nil [9537 9792])
            ("org-koma-letter-subject-format" variable (:default-value t) nil [9794 11166])
            ("org-koma-letter-use-backaddress" variable nil nil [11168 11404])
            ("org-koma-letter-use-foldmarks" variable (:default-value t) nil [11406 13726])
            ("org-koma-letter-use-phone" variable nil nil [13728 13934])
            ("org-koma-letter-use-email" variable nil nil [13936 14143])
            ("org-koma-letter-use-place" variable (:default-value t) nil [14145 14365])
            ("org-koma-letter-default-class" variable (:default-value "default-koma-letter") nil [14367 14571])
            ("org-koma-letter-headline-is-opening-maybe" variable (:default-value t) nil [14573 14812])
            ("org-koma-letter-prefer-subject" variable nil nil [14814 15074])
            ("org-koma-letter-special-tags-in-letter" variable
               (:constant-flag t
                :default-value (quote (to from closing location)))
                nil [15076 15199])
            ("org-koma-letter-special-tags-after-closing" variable
               (:constant-flag t
                :default-value (quote (after_closing ps encl cc)))
                nil [15201 15342])
            ("org-koma-letter-special-tags-as-macro" variable
               (:constant-flag t
                :default-value (quote (ps encl cc)))
                nil [15344 15447])
            ("org-koma-letter-special-tags-after-letter" variable
               (:constant-flag t
                :default-value (quote (after_letter)))
                nil [15449 15566])
            ("org-koma-letter-special-contents" variable nil nil [15568 15652])
            ("make-obsolete-variable" code nil nil [15654 15746])
            ("org-export-define-derived-backend" code nil nil [15771 19204])
            ("org-koma-letter-email" function nil nil [19231 19327])
            ("org-koma-letter--get-tagged-contents" function (:arguments ("key")) nil [19401 19726])
            ("org-koma-letter--get-value" function (:arguments ("value")) nil [19728 20050])
            ("org-koma-letter--special-contents-inline" function (:arguments ("keywords" "info")) nil [20052 20690])
            ("org-koma-letter--add-latex-newlines" function (:arguments ("string")) nil [20693 20930])
            ("org-koma-letter-export-block" function (:arguments ("export-block" "contents" "info")) nil [20979 21331])
            ("org-koma-letter-export-snippet" function (:arguments ("export-snippet" "contents" "info")) nil [21354 21684])
            ("org-koma-letter-keyword" function (:arguments ("keyword" "contents" "info")) nil [21700 22178])
            ("org-koma-letter-headline" function (:arguments ("headline" "contents" "info")) nil [22193 22780])
            ("org-koma-letter--special-tag" function (:arguments ("headline" "info")) nil [22782 23310])
            ("org-koma-letter--keyword-or-headline" function (:arguments ("plist-key" "pred" "info")) nil [23312 24219])
            ("org-koma-letter-template" function (:arguments ("contents" "info")) nil [24236 27735])
            ("org-koma-letter--build-settings" function (:arguments ("scope" "info")) nil [27737 31494])
            ("org-koma-letter-export-as-latex" function
               (:user-visible-flag t
                :arguments ("async" "subtreep" "visible-only" "body-only" "ext-plist"))
                nil [31528 32811])
            ("org-koma-letter-export-to-latex" function
               (:user-visible-flag t
                :arguments ("async" "subtreep" "visible-only" "body-only" "ext-plist"))
                nil [32828 34083])
            ("org-koma-letter-export-to-pdf" function
               (:user-visible-flag t
                :arguments ("async" "subtreep" "visible-only" "body-only" "ext-plist"))
                nil [34100 35315])
            ("ox-koma-letter" package nil nil [35318 35343]))          
      :file "ox-koma-letter.el"
      :pointmax 35376
      :fsize 35375
      :lastmodtime '(22842 50887 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [983 1000])
            ("ox" include nil nil [1001 1014])
            ("ox-publish" include nil nil [1015 1036])
            ("org-latex-default-packages-alist" variable nil nil [1038 1079])
            ("org-latex-packages-alist" variable nil nil [1080 1113])
            ("orgtbl-exp-regexp" variable nil nil [1114 1140])
            ("org-export-define-backend" code nil nil [1166 6816])
            ("org-latex-babel-language-alist" variable
               (:constant-flag t
                :default-value (quote (("af" . "afrikaans") ("bg" . "bulgarian") ("bt-br" . "brazilian") ("ca" . "catalan") ("cs" . "czech") ("cy" . "welsh") ("da" . "danish") ("de" . "germanb") ("de-at" . "naustrian") ("de-de" . "ngerman") ("el" . "greek") ("en" . "english") ("en-au" . "australian") ("en-ca" . "canadian") ("en-gb" . "british") ("en-ie" . "irish") ("en-nz" . "newzealand") ("en-us" . "american") ("es" . "spanish") ("et" . "estonian") ("eu" . "basque") ("fi" . "finnish") ("fr" . "frenchb") ("fr-ca" . "canadien") ("gl" . "galician") ("hr" . "croatian") ("hu" . "hungarian") ("id" . "indonesian") ("is" . "icelandic") ("it" . "italian") ("la" . "latin") ("ms" . "malay") ("nl" . "dutch") ("nb" . "norsk") ("nn" . "nynorsk") ("no" . "norsk") ("pl" . "polish") ("pt" . "portuguese") ("ro" . "romanian") ("ru" . "russian") ("sa" . "sanskrit") ("sb" . "uppersorbian") ("sk" . "slovak") ("sl" . "slovene") ("sq" . "albanian") ("sr" . "serbian") ("sv" . "swedish") ("ta" . "tamil") ("tr" . "turkish") ("uk" . "ukrainian"))))
                nil [6845 8147])
            ("org-latex-polyglossia-language-alist" variable
               (:constant-flag t
                :default-value (quote (("am" "amharic") ("ast" "asturian") ("ar" "arabic") ("bo" "tibetan") ("bn" "bengali") ("bg" "bulgarian") ("br" "breton") ("bt-br" "brazilian") ("ca" "catalan") ("cop" "coptic") ("cs" "czech") ("cy" "welsh") ("da" "danish") ("de" "german" "german") ("de-at" "german" "austrian") ("de-de" "german" "german") ("dv" "divehi") ("el" "greek") ("en" "english" "usmax") ("en-au" "english" "australian") ("en-gb" "english" "uk") ("en-nz" "english" "newzealand") ("en-us" "english" "usmax") ("eo" "esperanto") ("es" "spanish") ("et" "estonian") ("eu" "basque") ("fa" "farsi") ("fi" "finnish") ("fr" "french") ("fu" "friulan") ("ga" "irish") ("gd" "scottish") ("gl" "galician") ("he" "hebrew") ("hi" "hindi") ("hr" "croatian") ("hu" "magyar") ("hy" "armenian") ("id" "bahasai") ("ia" "interlingua") ("is" "icelandic") ("it" "italian") ("kn" "kannada") ("la" "latin" "modern") ("la-modern" "latin" "modern") ("la-classic" "latin" "classic") ("la-medieval" "latin" "medieval") ("lo" "lao") ("lt" "lithuanian") ("lv" "latvian") ("mr" "maranthi") ("ml" "malayalam") ("nl" "dutch") ("nb" "norsk") ("nn" "nynorsk") ("nko" "nko") ("no" "norsk") ("oc" "occitan") ("pl" "polish") ("pms" "piedmontese") ("pt" "portuges") ("rm" "romansh") ("ro" "romanian") ("ru" "russian") ("sa" "sanskrit") ("hsb" "usorbian") ("dsb" "lsorbian") ("sk" "slovak") ("sl" "slovenian") ("se" "samin") ("sq" "albanian") ("sr" "serbian") ("sv" "swedish") ("syr" "syriac") ("ta" "tamil") ("te" "telugu") ("th" "thai") ("tk" "turkmen") ("tr" "turkish") ("uk" "ukrainian") ("ur" "urdu") ("vi" "vietnamese"))))
                nil [8149 10157])
            ("org-latex-table-matrix-macros" variable
               (:constant-flag t
                :default-value (quote (("bordermatrix" . "\\cr") ("qbordermatrix" . "\\cr") ("kbordermatrix" . "\\\\"))))
                nil [10161 10352])
            ("org-latex-math-environments-re" variable
               (:constant-flag t
                :default-value (format "\\`[ 	]*\\\\begin{%s\\*?}" (regexp-opt (quote ("equation" "eqnarray" "math" "displaymath" "align" "gather" "multline" "flalign" "alignat" "xalignat" "xxalignat" "subequations" "dmath" "dseries" "dgroup" "darray" "empheq")))))
                nil [10354 10737])
            ("org-export-latex" customgroup (:user-visible-flag t) nil [10774 10903])
            ("org-latex-caption-above" variable (:default-value (quote (table))) nil [10919 11613])
            ("org-latex-prefer-user-labels" variable nil nil [11615 13608])
            ("org-latex-default-class" variable (:default-value "article") nil [13625 13763])
            ("org-latex-classes" variable (:default-value (quote (("article" "\\documentclass[11pt]{article}" ("\\section{%s}" . "\\section*{%s}") ("\\subsection{%s}" . "\\subsection*{%s}") ("\\subsubsection{%s}" . "\\subsubsection*{%s}") ("\\paragraph{%s}" . "\\paragraph*{%s}") ("\\subparagraph{%s}" . "\\subparagraph*{%s}")) ("report" "\\documentclass[11pt]{report}" ("\\part{%s}" . "\\part*{%s}") ("\\chapter{%s}" . "\\chapter*{%s}") ("\\section{%s}" . "\\section*{%s}") ("\\subsection{%s}" . "\\subsection*{%s}") ("\\subsubsection{%s}" . "\\subsubsection*{%s}")) ("book" "\\documentclass[11pt]{book}" ("\\part{%s}" . "\\part*{%s}") ("\\chapter{%s}" . "\\chapter*{%s}") ("\\section{%s}" . "\\section*{%s}") ("\\subsection{%s}" . "\\subsection*{%s}") ("\\subsubsection{%s}" . "\\subsubsection*{%s}"))))) nil [13765 18768])
            ("org-latex-inputenc-alist" variable nil nil [18770 19173])
            ("org-latex-title-command" variable (:default-value "\\maketitle") nil [19175 19814])
            ("org-latex-subtitle-format" variable (:default-value "\\\\\\medskip
\\large %s") nil [19816 20145])
            ("org-latex-subtitle-separate" variable nil nil [20147 20350])
            ("org-latex-toc-command" variable (:default-value "\\tableofcontents

") nil [20352 20651])
            ("org-latex-hyperref-template" variable (:default-value "\\hypersetup{
 pdfauthor={%a},
 pdftitle={%t},
 pdfkeywords={%k},
 pdfsubject={%d},
 pdfcreator={%c}, 
 pdflang={%L}}
") nil [20653 21553])
            ("org-latex-format-headline-function" variable (:default-value (quote org-latex-format-headline-default-function)) nil [21570 22201])
            ("org-latex-footnote-separator" variable (:default-value "\\textsuperscript{,}\\,") nil [22220 22366])
            ("org-latex-footnote-defined-format" variable (:default-value "\\textsuperscript{\\ref{%s}}") nil [22368 22857])
            ("org-latex-active-timestamp-format" variable (:default-value "\\textit{%s}") nil [22876 23042])
            ("org-latex-inactive-timestamp-format" variable (:default-value "\\textit{%s}") nil [23044 23214])
            ("org-latex-diary-timestamp-format" variable (:default-value "\\textit{%s}") nil [23216 23380])
            ("org-latex-images-centered" variable (:default-value t) nil [23395 23588])
            ("org-latex-image-default-option" variable nil nil [23590 23761])
            ("org-latex-image-default-width" variable (:default-value ".9\\linewidth") nil [23763 23998])
            ("org-latex-image-default-height" variable nil nil [24000 24301])
            ("org-latex-default-figure-position" variable (:default-value "htbp") nil [24303 24508])
            ("org-latex-inline-image-rules" variable (:default-value (quote (("file" . "\\.\\(pdf\\|jpeg\\|jpg\\|png\\|ps\\|eps\\|tikz\\|pgf\\|svg\\)\\'")))) nil [24510 25290])
            ("org-latex-link-with-unknown-path-format" variable (:default-value "\\texttt{%s}") nil [25292 25453])
            ("org-latex-default-table-environment" variable (:default-value "tabular") nil [25469 25667])
            ("org-latex-default-table-mode" variable (:default-value (quote table)) nil [25669 26702])
            ("org-latex-tables-centered" variable (:default-value t) nil [26704 26869])
            ("org-latex-tables-booktabs" variable nil nil [26871 27288])
            ("org-latex-table-scientific-notation" variable (:default-value "%s\\,(%s)") nil [27290 27710])
            ("org-latex-text-markup-alist" variable (:default-value (quote ((bold . "\\textbf{%s}") (code . protectedtexttt) (italic . "\\emph{%s}") (strike-through . "\\sout{%s}") (underline . "\\uline{%s}") (verbatim . protectedtexttt)))) nil [27730 28724])
            ("org-latex-format-drawer-function" variable (:default-value (lambda (_ contents) contents)) nil [28741 29210])
            ("org-latex-format-inlinetask-function" variable (:default-value (quote org-latex-format-inlinetask-default-function)) nil [29231 29932])
            ("org-latex-listings" variable nil nil [29950 31492])
            ("org-latex-listings-langs" variable (:default-value (quote ((emacs-lisp "Lisp") (lisp "Lisp") (clojure "Lisp") (c "C") (cc "C++") (fortran "fortran") (perl "Perl") (cperl "Perl") (python "Python") (ruby "Ruby") (html "HTML") (xml "XML") (tex "TeX") (latex "[LaTeX]TeX") (shell-script "bash") (gnuplot "Gnuplot") (ocaml "Caml") (caml "Caml") (sql "SQL") (sqlite "sql") (makefile "make") (R "r")))) nil [31494 32473])
            ("org-latex-listings-options" variable nil nil [32475 33393])
            ("org-latex-minted-langs" variable (:default-value (quote ((emacs-lisp "common-lisp") (cc "c++") (cperl "perl") (shell-script "bash") (caml "ocaml")))) nil [33395 34198])
            ("org-latex-minted-options" variable nil nil [34200 35098])
            ("org-latex-custom-lang-environments" variable nil nil [35100 36587])
            ("org-latex-compiler-file-string" variable (:default-value "%% Intended LaTeX compiler: %s
") nil [36608 37101])
            ("org-latex-compiler" variable (:default-value "pdflatex") nil [37103 37566])
            ("org-latex-compilers" variable
               (:constant-flag t
                :default-value (quote ("pdflatex" "xelatex" "lualatex")))
                nil [37568 37691])
            ("org-latex-bib-compiler" variable (:default-value "bibtex") nil [37693 38121])
            ("org-latex-pdf-process" variable (:default-value (quote ("%latex -interaction nonstopmode -output-directory %o %f" "%latex -interaction nonstopmode -output-directory %o %f" "%latex -interaction nonstopmode -output-directory %o %f"))) nil [38123 40404])
            ("org-latex-logfiles-extensions" variable (:default-value (quote ("aux" "bcf" "blg" "fdb_latexmk" "fls" "figlist" "idx" "log" "nav" "out" "ptc" "run.xml" "snm" "toc" "vrb" "xdv"))) nil [40406 40826])
            ("org-latex-remove-logfiles" variable (:default-value t) nil [40828 41161])
            ("org-latex-known-warnings" variable (:default-value (quote (("Reference.*?undefined" . "[undefined reference]") ("Runaway argument" . "[runaway argument]") ("Underfull \\hbox" . "[underfull hbox]") ("Overfull \\hbox" . "[overfull hbox]") ("Citation.*?undefined" . "[undefined citation]") ("Undefined control sequence" . "[undefined control sequence]")))) nil [41163 41903])
            ("org-latex--caption-above-p" function (:arguments ("element" "info")) nil [41932 42277])
            ("org-latex--label" function (:arguments ("datum" "info" "force" "full")) nil [42279 43496])
            ("org-latex--caption/label-string" function (:arguments ("element" "info")) nil [43498 44885])
            ("org-latex-guess-inputenc" function (:arguments ("header")) nil [44887 45590])
            ("org-latex-guess-babel-language" function (:arguments ("header" "info")) nil [45592 47008])
            ("org-latex-guess-polyglossia-language" function (:arguments ("header" "info")) nil [47010 48750])
            ("org-latex--remove-packages" function (:arguments ("pkg-alist" "info")) nil [48752 49469])
            ("org-latex--find-verb-separator" function (:arguments ("s")) nil [49471 49850])
            ("org-latex--make-option-string" function (:arguments ("options")) nil [49852 50269])
            ("org-latex--wrap-label" function (:arguments ("element" "output" "info")) nil [50271 50722])
            ("org-latex--protect-text" function (:arguments ("text")) nil [50724 50883])
            ("org-latex--text-markup" function (:arguments ("text" "markup" "info")) nil [50885 52031])
            ("org-latex--delayed-footnotes-definitions" function (:arguments ("element" "info")) nil [52033 53354])
            ("org-latex--translate" function (:arguments ("s" "info")) nil [53356 53537])
            ("org-latex--format-spec" function (:arguments ("info")) nil [53539 54398])
            ("org-latex--insert-compiler" function (:arguments ("info")) nil [54400 54761])
            ("org-latex-matrices-tree-filter" function (:arguments ("tree" "_backend" "info")) nil [54778 54882])
            ("org-latex-math-block-tree-filter" function (:arguments ("tree" "_backend" "info")) nil [54884 54992])
            ("org-latex-math-block-options-filter" function (:arguments ("info" "_backend")) nil [54994 55196])
            ("org-latex-clean-invalid-line-breaks" function (:arguments ("data" "_backend" "_info")) nil [55198 55363])
            ("org-latex-make-preamble" function (:arguments ("info" "template" "snippet?")) nil [55396 56776])
            ("org-latex-template" function (:arguments ("contents" "info")) nil [56778 59674])
            ("org-latex-bold" function (:arguments ("_bold" "contents" "info")) nil [59715 59932])
            ("org-latex-center-block" function (:arguments ("center-block" "contents" "info")) nil [59954 60267])
            ("org-latex-clock" function (:arguments ("clock" "_contents" "info")) nil [60282 60761])
            ("org-latex-code" function (:arguments ("code" "_contents" "info")) nil [60775 61006])
            ("org-latex-drawer" function (:arguments ("drawer" "contents" "info")) nil [61022 61405])
            ("org-latex-dynamic-block" function (:arguments ("dynamic-block" "contents" "info")) nil [61428 61715])
            ("org-latex-entity" function (:arguments ("entity" "_contents" "_info")) nil [61731 61954])
            ("org-latex-example-block" function (:arguments ("example-block" "_contents" "info")) nil [61977 62562])
            ("org-latex-export-block" function (:arguments ("export-block" "_contents" "_info")) nil [62584 62916])
            ("org-latex-export-snippet" function (:arguments ("export-snippet" "_contents" "_info")) nil [62940 63242])
            ("org-latex-fixed-width" function (:arguments ("fixed-width" "_contents" "info")) nil [63263 63618])
            ("org-latex-footnote-reference" function (:arguments ("footnote-reference" "_contents" "info")) nil [63646 65572])
            ("org-latex-headline" function (:arguments ("headline" "contents" "info")) nil [65590 71008])
            ("org-latex-format-headline-default-function" function (:arguments ("todo" "_todo-type" "priority" "text" "tags" "_info")) nil [71010 71435])
            ("org-latex-horizontal-rule" function (:arguments ("horizontal-rule" "_contents" "info")) nil [71460 72283])
            ("org-latex-inline-src-block" function (:arguments ("inline-src-block" "_contents" "info")) nil [72309 73775])
            ("org-latex-inlinetask" function (:arguments ("inlinetask" "contents" "info")) nil [73795 74674])
            ("org-latex-format-inlinetask-default-function" function (:arguments ("todo" "_todo-type" "priority" "title" "tags" "contents" "_info")) nil [74676 75430])
            ("org-latex-italic" function (:arguments ("_italic" "contents" "info")) nil [75446 75673])
            ("org-latex-item" function (:arguments ("item" "contents" "info")) nil [75687 77907])
            ("org-latex-keyword" function (:arguments ("keyword" "_contents" "info")) nil [77924 79288])
            ("org-latex-latex-environment" function (:arguments ("latex-environment" "_contents" "info")) nil [79315 80034])
            ("org-latex-latex-fragment" function (:arguments ("latex-fragment" "_contents" "_info")) nil [80058 80556])
            ("org-latex-line-break" function (:arguments ("_line-break" "_contents" "_info")) nil [80576 80764])
            ("org-latex--inline-image" function (:arguments ("link" "info")) nil [80778 86117])
            ("org-latex-link" function (:arguments ("link" "desc" "info")) nil [86119 89354])
            ("org-latex-node-property" function (:arguments ("node-property" "_contents" "_info")) nil [89377 89749])
            ("org-latex-paragraph" function (:arguments ("_paragraph" "contents" "_info")) nil [89768 89995])
            ("org-latex-plain-list" function (:arguments ("plain-list" "contents" "info")) nil [90015 90724])
            ("org-latex-plain-text" function (:arguments ("text" "info")) nil [90744 92184])
            ("org-latex-planning" function (:arguments ("planning" "_contents" "info")) nil [92202 93212])
            ("org-latex-property-drawer" function (:arguments ("_property-drawer" "contents" "_info")) nil [93237 93554])
            ("org-latex--wrap-latex-matrices" function (:arguments ("data" "info")) nil [93735 95870])
            ("org-latex-matrices" function (:arguments ("matrices" "contents" "_info")) nil [95872 96223])
            ("org-latex--wrap-latex-math-block" function (:arguments ("data" "info")) nil [96342 98519])
            ("org-latex-math-block" function (:arguments ("_math-block" "contents" "_info")) nil [98521 98783])
            ("org-latex-quote-block" function (:arguments ("quote-block" "contents" "info")) nil [98803 99103])
            ("org-latex-radio-target" function (:arguments ("radio-target" "text" "info")) nil [99125 99393])
            ("org-latex-section" function (:arguments ("_section" "contents" "_info")) nil [99410 99616])
            ("org-latex-special-block" function (:arguments ("special-block" "contents" "info")) nil [99639 100287])
            ("org-latex-src-block" function (:arguments ("src-block" "_contents" "info")) nil [100306 106742])
            ("org-latex-statistics-cookie" function (:arguments ("statistics-cookie" "_contents" "_info")) nil [106769 107062])
            ("org-latex-strike-through" function (:arguments ("_strike-through" "contents" "info")) nil [107086 107353])
            ("org-latex--script-size" function (:arguments ("object" "info")) nil [107372 108633])
            ("org-latex-subscript" function (:arguments ("subscript" "_contents" "info")) nil [108635 108872])
            ("org-latex-superscript" function (:arguments ("superscript" "_contents" "info")) nil [108893 109138])
            ("org-latex-table" function (:arguments ("table" "contents" "info")) nil [109570 110707])
            ("org-latex--align-string" function (:arguments ("table" "info" "math?")) nil [110709 111815])
            ("org-latex--org-table" function (:arguments ("table" "contents" "info")) nil [111817 115867])
            ("org-latex--table.el-table" function (:arguments ("table" "info")) nil [115869 117408])
            ("org-latex--math-table" function (:arguments ("table" "info")) nil [117410 118875])
            ("org-latex-table-cell" function (:arguments ("table-cell" "contents" "info")) nil [118895 119506])
            ("org-latex-table-row" function (:arguments ("table-row" "contents" "info")) nil [119525 121743])
            ("org-latex-target" function (:arguments ("target" "_contents" "info")) nil [121759 121978])
            ("org-latex-timestamp" function (:arguments ("timestamp" "_contents" "info")) nil [121997 122518])
            ("org-latex-underline" function (:arguments ("_underline" "contents" "info")) nil [122537 122779])
            ("org-latex-verbatim" function (:arguments ("verbatim" "_contents" "info")) nil [122797 123051])
            ("org-latex-verse-block" function (:arguments ("verse-block" "contents" "info")) nil [123072 123871])
            ("org-latex-export-as-latex" function
               (:user-visible-flag t
                :arguments ("async" "subtreep" "visible-only" "body-only" "ext-plist"))
                nil [123915 125121])
            ("org-latex-convert-region-to-latex" function (:user-visible-flag t) nil [125138 125455])
            ("org-latex-export-to-latex" function
               (:user-visible-flag t
                :arguments ("async" "subtreep" "visible-only" "body-only" "ext-plist"))
                nil [125472 126563])
            ("org-latex-export-to-pdf" function
               (:user-visible-flag t
                :arguments ("async" "subtreep" "visible-only" "body-only" "ext-plist"))
                nil [126580 127762])
            ("org-latex-compile" function (:arguments ("texfile" "snippet")) nil [127764 130020])
            ("org-latex--collect-warnings" function (:arguments ("buffer")) nil [130022 130744])
            ("org-latex-publish-to-latex" function (:arguments ("plist" "filename" "pub-dir")) nil [130761 131088])
            ("org-latex-publish-to-pdf" function (:arguments ("plist" "filename" "pub-dir")) nil [131105 131938])
            ("ox-latex" package nil nil [131941 131960]))          
      :file "ox-latex.el"
      :pointmax 132063
      :fsize 132062
      :lastmodtime '(22842 50887 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [1124 1141])
            ("org" include nil nil [1142 1156])
            ("declare-function" code nil nil [1158 1218])
            ("declare-function" code nil nil [1219 1289])
            ("declare-function" code nil nil [1290 1362])
            ("declare-function" code nil nil [1363 1422])
            ("declare-function" code nil nil [1423 1477])
            ("org-frame-title-format-backup" variable (:default-value frame-title-format) nil [1479 1536])
            ("org-time-stamp-formats" variable nil nil [1537 1568])
            ("org-ts-what" variable nil nil [1569 1589])
            ("org-clock" customgroup (:user-visible-flag t) nil [1592 1716])
            ("org-clock-into-drawer" variable (:default-value t) nil [1718 2658])
            ("org-clock-into-drawer" function nil nil [2660 3365])
            ("org-clock-out-when-done" variable (:default-value t) nil [3367 3930])
            ("org-clock-rounding-minutes" variable nil nil [3932 4676])
            ("org-clock-out-remove-zero-time-clocks" variable nil nil [4678 4841])
            ("org-clock-in-switch-to-state" variable nil nil [4843 5295])
            ("org-clock-out-switch-to-state" variable nil nil [5297 5751])
            ("org-clock-history-length" variable (:default-value 5) nil [5753 5878])
            ("org-clock-goto-may-find-recent-task" variable (:default-value t) nil [5880 6043])
            ("org-clock-heading-function" variable nil nil [6045 6353])
            ("org-clock-string-limit" variable nil nil [6355 6501])
            ("org-clock-in-resume" variable nil nil [6503 6759])
            ("org-clock-persist" variable nil nil [6761 7574])
            ("org-clock-persist-file" variable (:default-value (convert-standard-filename (concat user-emacs-directory "org-clock-save.el"))) nil [7576 7763])
            ("org-clock-persist-query-save" variable nil nil [7765 7909])
            ("org-clock-persist-query-resume" variable (:default-value t) nil [7911 8060])
            ("org-clock-sound" variable nil nil [8062 8397])
            ("org-clock-mode-line-total" variable (:default-value (quote auto)) nil [8399 9144])
            ("defvaralias" code nil nil [9146 9211])
            ("org-clock-task-overrun-text" variable nil nil [9212 9718])
            ("org-show-notification-handler" variable nil nil [9720 10007])
            ("org-clocktable" customgroup (:user-visible-flag t) nil [10009 10135])
            ("org-clocktable-defaults" variable (:default-value (list :maxlevel 2 :lang (or (bound-and-true-p org-export-default-language) "en") :scope (quote file) :block nil :wstart 1 :mstart 1 :tstart nil :tend nil :step nil :stepskip0 nil :fileskip0 nil :tags nil :emphasize nil :link nil :narrow (quote 40!) :indent t :formula nil :timestamp nil :level nil :tcolumns nil :formatter nil)) nil [10137 10645])
            ("org-clock-clocktable-formatter" variable (:default-value (quote org-clocktable-write-default)) nil [10647 10887])
            ("org-clock-clocktable-language-setup" variable (:default-value (quote (("en" "File" "L" "Timestamp" "Headline" "Time" "ALL" "Total time" "File time" "Clock summary at") ("es" "Archivo" "N" "Fecha y hora" "Tarea" "Tiempo" "TODO" "Tiempo total" "Tiempo archivo" "Clock summary at") ("fr" "Fichier" "N" "Horodatage" "En-tête" "Durée" "TOUT" "Durée totale" "Durée fichier" "Horodatage sommaire à") ("nl" "Bestand" "N" "Tijdstip" "Hoofding" "Duur" "ALLES" "Totale duur" "Bestandstijd" "Clock summary at") ("de" "Datei" "E" "Zeitstempel" "Kopfzeile" "Dauer" "GESAMT" "Gesamtdauer" "Dateizeit" "Erstellt am")))) nil [10950 11705])
            ("org-clock-clocktable-default-properties" variable (:default-value (quote (:maxlevel 2 :scope file))) nil [11707 11958])
            ("org-clock-idle-time" variable nil nil [11960 12176])
            ("org-clock-auto-clock-resolution" variable (:default-value (quote when-no-clock-is-running)) nil [12178 12476])
            ("org-clock-report-include-clocking-task" variable nil nil [12478 12662])
            ("org-clock-resolve-expert" variable nil nil [12664 12832])
            ("org-clock-continuously" variable nil nil [12834 13001])
            ("org-clock-total-time-cell-format" variable (:default-value "*%s*") nil [13003 13152])
            ("org-clock-file-time-cell-format" variable (:default-value "*%s*") nil [13154 13301])
            ("org-clock-clocked-in-display" variable (:default-value (quote mode-line)) nil [13303 13863])
            ("org-clock-frame-title-format" variable (:default-value (quote (t org-mode-line-string))) nil [13865 14337])
            ("org-clock-x11idle-program-name" variable (:default-value "x11idle") nil [14339 14712])
            ("org-clock-goto-before-context" variable (:default-value 2) nil [14714 14913])
            ("org-clock-display-default-range" variable (:default-value (quote thisyear)) nil [14915 15307])
            ("org-clock-in-prepare-hook" variable nil nil [15309 15529])
            ("org-clock-in-hook" variable nil nil [15530 15598])
            ("org-clock-out-hook" variable nil nil [15599 15676])
            ("org-clock-cancel-hook" variable nil nil [15678 15759])
            ("org-clock-goto-hook" variable nil nil [15760 15852])
            ("org-clock-has-been-used" variable nil nil [15853 15951])
            ("org-clock-stored-history" variable nil nil [15953 16039])
            ("org-clock-stored-resume-clock" variable nil nil [16040 16129])
            ("org-clock--oldest-date" variable
               (:constant-flag t
                :default-value (let* ((dichotomy (lambda (min max pred) (if (funcall pred min) min (cl-incf min) (while (> (- max min) 1) (let ((mean (+ (ash min -1) (ash max -1) (logand min max 1)))) (if (funcall pred mean) (setq max mean) (setq min mean))))) max)) (high (funcall dichotomy most-negative-fixnum 0 (lambda (m) (ignore-errors (decode-time (list m 0)))))) (low (funcall dichotomy most-negative-fixnum 0 (lambda (m) (ignore-errors (decode-time (list high m))))))) (list high low)))
                nil [16131 16770])
            ("org-mode-line-string" variable nil nil [16812 16844])
            ("put" code nil nil [16845 16896])
            ("org-clock-mode-line-timer" variable nil nil [16898 16936])
            ("org-clock-idle-timer" variable nil nil [16937 16970])
            ("org-clock-heading" variable nil nil [16971 16997])
            ("org-clock-start-time" variable nil nil [17018 17050])
            ("org-clock-leftover-time" variable nil nil [17052 17163])
            ("org-clock-effort" variable nil nil [17165 17245])
            ("org-clock-total-time" variable nil nil [17247 17409])
            ("org-clock-history" variable nil nil [17411 17494])
            ("org-clock-default-task" variable (:default-value (make-marker)) nil [17496 17690])
            ("org-clock-interrupted-task" variable (:default-value (make-marker)) nil [17692 17821])
            ("org-clock-mode-line-map" variable (:default-value (make-sparse-keymap)) nil [17823 17876])
            ("define-key" code nil nil [17877 17949])
            ("define-key" code nil nil [17950 18022])
            ("org-clock-menu" function nil nil [18024 18341])
            ("org-clock-history-push" function (:arguments ("pos" "buffer")) nil [18343 19072])
            ("org-clock-save-markers-for-cut-and-paste" function (:arguments ("beg" "end")) nil [19074 19496])
            ("org-clock-drawer-name" function nil nil [19498 19802])
            ("org-clocking-buffer" function nil nil [19804 19944])
            ("org-clocking-p" function nil nil [19946 20048])
            ("org-clock-before-select-task-hook" variable nil nil [20050 20162])
            ("org-clock-select-task" function
               (:user-visible-flag t
                :arguments ("prompt"))
                nil [20164 22136])
            ("org-clock-insert-selection-line" function (:arguments ("i" "marker")) nil [22138 22943])
            ("org-clock-task-overrun" variable nil nil [22945 23052])
            ("org-clock-update-period" variable (:default-value 60) nil [23053 23150])
            ("org-clock-get-clock-string" function nil nil [23152 24213])
            ("org-clock-get-last-clock-out-time" function nil nil [24215 24538])
            ("org-clock-update-mode-line" function nil nil [24540 25480])
            ("org-clock-get-clocked-time" function nil nil [25482 25827])
            ("org-clock-modify-effort-estimate" function
               (:user-visible-flag t
                :arguments ("value"))
                nil [25829 27416])
            ("org-clock-notification-was-shown" variable nil nil [27418 27512])
            ("org-clock-notify-once-if-expired" function nil nil [27514 28284])
            ("org-notify" function (:arguments ("notification" "play-sound")) nil [28286 28535])
            ("org-show-notification" function (:arguments ("notification")) nil [28537 29402])
            ("org-clock-play-sound" function (:arguments ("clock-sound")) nil [29404 30061])
            ("org-clock-mode-line-entry" variable nil nil [30063 30160])
            ("org-find-open-clocks" function (:arguments ("file")) nil [30162 30642])
            ("org-is-active-clock" function (:arguments ("clock")) nil [30644 30805])
            ("org-with-clock-position" function (:arguments ("clock" "forms")) nil [30807 31073])
            ("def-edebug-spec" code nil nil [31074 31127])
            ("put" code nil nil [31128 31182])
            ("org-with-clock" function (:arguments ("clock" "forms")) nil [31184 31662])
            ("def-edebug-spec" code nil nil [31663 31707])
            ("put" code nil nil [31708 31753])
            ("org-clock-clock-in" function (:arguments ("clock" "resume" "start-time")) nil [31755 32055])
            ("org-clock-clock-out" function (:arguments ("clock" "fail-quietly" "at-time")) nil [32057 32430])
            ("org-clock-clock-cancel" function (:arguments ("clock")) nil [32432 32727])
            ("org-clock-clocking-in" variable nil nil [32729 32763])
            ("org-clock-resolving-clocks" variable nil nil [32764 32803])
            ("org-clock-resolving-clocks-due-to-idleness" variable nil nil [32804 32859])
            ("org-clock-resolve-clock" function (:arguments ("clock" "resolve-to" "clock-out-time" "close-p" "restart-p" "fail-quietly")) nil [32861 34035])
            ("org-clock-jump-to-current-clock" function (:arguments ("effective-clock")) nil [34037 34970])
            ("org-clock-resolve" function (:arguments ("clock" "prompt-fn" "last-valid" "fail-quietly")) nil [34972 38991])
            ("org-resolve-clocks" function
               (:user-visible-flag t
                :arguments ("only-dangling-p" "prompt-fn" "last-valid"))
                nil [39008 39858])
            ("org-emacs-idle-seconds" function nil nil [39860 40057])
            ("org-mac-idle-seconds" function nil nil [40059 40282])
            ("org-x11idle-exists-p" variable (:default-value (and (eq window-system (quote x)) (eq 0 (call-process-shell-command (format "command -v %s" org-clock-x11idle-program-name))) (eq 0 (call-process-shell-command org-clock-x11idle-program-name)))) nil [40284 40690])
            ("org-x11-idle-seconds" function nil nil [40692 40859])
            ("org-user-idle-seconds" function nil nil [40861 41183])
            ("org-clock-user-idle-seconds" variable nil nil [41185 41221])
            ("org-resolve-clocks-if-idle" function nil nil [41223 42142])
            ("org-clock-current-task" variable nil nil [42144 42208])
            ("org-clock-out-time" variable nil nil [42209 42240])
            ("org--msg-extra" variable nil nil [42280 42303])
            ("org-clock-in" function
               (:user-visible-flag t
                :arguments ("select" "start-time"))
                nil [42320 49899])
            ("org-clock-in-last" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [49916 51391])
            ("org-clock-mark-default-task" function (:user-visible-flag t) nil [51393 51582])
            ("org-clock-get-sum-start" function nil nil [51584 52941])
            ("org-clock-find-position" function (:arguments ("find-unclosed")) nil [52943 56431])
            ("org-clock-out" function
               (:user-visible-flag t
                :arguments ("switch-to-state" "fail-quietly" "at-time"))
                nil [56448 60142])
            ("add-hook" code nil nil [60144 60211])
            ("org-clock-remove-empty-clock-drawer" function nil nil [60213 60690])
            ("org-clock-timestamps-up" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [60692 60892])
            ("org-clock-timestamps-down" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [60894 61098])
            ("org-clock-timestamps-change" function (:arguments ("updown" "n")) nil [61100 62591])
            ("org-clock-cancel" function (:user-visible-flag t) nil [62608 63689])
            ("org-clock-goto" function
               (:user-visible-flag t
                :arguments ("select"))
                nil [63706 64729])
            ("defvar-local" code nil nil [64731 64853])
            ("org-clock-sum-today" function (:arguments ("headline-filter")) nil [64855 65098])
            ("org-clock-sum-custom" function (:arguments ("headline-filter" "range" "propname")) nil [65100 65596])
            ("org-clock-sum" function (:arguments ("tstart" "tend" "headline-filter" "propname")) nil [65613 69145])
            ("org-clock-sum-current-item" function (:arguments ("tstart")) nil [69147 69387])
            ("org-clock-display" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [69404 71421])
            ("defvar-local" code nil nil [71423 71460])
            ("org-clock-put-overlay" function (:arguments ("time")) nil [71462 72331])
            ("org-clock-remove-overlays" function
               (:user-visible-flag t
                :arguments ("_beg" "_end" "noremove"))
                nil [72348 72804])
            ("org-state" variable nil nil [72806 72824])
            ("org-clock-out-if-current" function nil nil [72866 73820])
            ("add-hook" code nil nil [73822 73895])
            ("org-clock-get-clocktable" function (:arguments ("props")) nil [73912 74614])
            ("org-clock-report" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [74631 75534])
            ("org-day-of-week" function (:arguments ("day" "month" "year")) nil [75536 75720])
            ("org-quarter-to-date" function (:arguments ("quarter" "year")) nil [75722 76886])
            ("org-clock-special-range" function (:arguments ("key" "time" "as-strings" "wstart" "mstart")) nil [76888 82974])
            ("org-count-quarter" function (:arguments ("n")) nil [82976 83090])
            ("org-clocktable-shift" function (:arguments ("dir" "n")) nil [83107 86399])
            ("org-dblock-write:clocktable" function (:arguments ("params")) nil [86416 89138])
            ("org-clocktable-write-default" function (:arguments ("ipos" "tables" "params")) nil [89140 97645])
            ("org-clocktable-indent-string" function (:arguments ("level")) nil [97647 97879])
            ("org-clocktable-steps" function (:arguments ("params")) nil [97881 100121])
            ("org-clock-get-table-data" function (:arguments ("file" "params")) nil [100123 104570])
            ("org-clock-loaded" variable nil nil [104605 104665])
            ("org-clock-update-time-maybe" function (:user-visible-flag t) nil [104682 105965])
            ("org-clock-save" function nil nil [105967 107491])
            ("org-clock-load" function nil nil [107493 108634])
            ("org-defkey" code nil nil [108658 108732])
            ("org-clock" package nil nil [108734 108754]))          
      :file "org-clock.el"
      :pointmax 108858
      :fsize 108863
      :lastmodtime '(22842 50887 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("org" include nil nil [3472 3486])
            ("sha1" include nil nil [3487 3502])
            ("declare-function" code nil nil [3504 3620])
            ("declare-function" code nil nil [3621 3670])
            ("declare-function" code nil nil [3671 3730])
            ("declare-function" code nil nil [3731 3790])
            ("declare-function" code nil nil [3791 3857])
            ("declare-function" code nil nil [3858 3914])
            ("declare-function" code nil nil [3916 3973])
            ("declare-function" code nil nil [3974 4057])
            ("declare-function" code nil nil [4058 4129])
            ("org-feed" customgroup (:user-visible-flag t) nil [4131 4245])
            ("org-feed-alist" variable nil nil [4247 8847])
            ("org-feed-drawer" variable (:default-value "FEEDSTATUS") nil [8849 9099])
            ("org-feed-default-template" variable (:default-value "
* %h
  %U
  %description
  %a
") nil [9101 9975])
            ("org-feed-save-after-adding" variable (:default-value t) nil [9977 10112])
            ("org-feed-retrieve-method" variable (:default-value (quote url-retrieve-synchronously)) nil [10114 10633])
            ("org-feed-before-adding-hook" variable nil nil [10635 10860])
            ("org-feed-after-adding-hook" variable nil nil [10862 11085])
            ("org-feed-buffer" variable (:default-value "*Org feed*") nil [11087 11164])
            ("org-feed-update-all" function (:user-visible-flag t) nil [11181 11584])
            ("org-feed-update" function
               (:user-visible-flag t
                :arguments ("feed" "retrieve-only"))
                nil [11601 16132])
            ("org-feed-goto-inbox" function
               (:user-visible-flag t
                :arguments ("feed"))
                nil [16149 16564])
            ("org-feed-show-raw-feed" function
               (:user-visible-flag t
                :arguments ("feed"))
                nil [16581 17022])
            ("org-feed-goto-inbox-internal" function (:arguments ("file" "heading")) nil [17024 17478])
            ("org-feed-read-previous-status" function (:arguments ("pos" "drawer")) nil [17480 17872])
            ("org-feed-write-status" function (:arguments ("pos" "drawer" "status")) nil [17874 18456])
            ("org-feed-add-items" function (:arguments ("pos" "entries")) nil [18458 18996])
            ("org-feed-format-entry" function (:arguments ("entry" "template" "formatter")) nil [18998 21675])
            ("org-feed-make-indented-block" function (:arguments ("s" "n")) nil [21677 21935])
            ("org-feed-skip-http-headers" function (:arguments ("buffer")) nil [21937 22218])
            ("org-feed-get-feed" function (:arguments ("url")) nil [22220 22885])
            ("org-feed-parse-rss-feed" function (:arguments ("buffer")) nil [22887 23702])
            ("org-feed-parse-rss-entry" function (:arguments ("entry")) nil [23704 24329])
            ("org-feed-parse-atom-feed" function (:arguments ("buffer")) nil [24331 24965])
            ("org-feed-parse-atom-entry" function (:arguments ("entry")) nil [24967 26304])
            ("org-feed" package nil nil [26306 26325]))          
      :file "org-feed.el"
      :pointmax 26428
      :fsize 26427
      :lastmodtime '(22842 50887 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("org" include nil nil [2582 2596])
            ("org-element" include nil nil [2597 2619])
            ("cl-lib" include nil nil [2620 2637])
            ("org-link-edit--on-link-p" function (:arguments ("element")) nil [2639 2962])
            ("org-link-edit--link-data" function nil nil [2964 4185])
            ("org-link-edit--forward-blob" function (:arguments ("n" "no-punctuation")) nil [4187 5281])
            ("org-link-edit-forward-slurp" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [5298 6784])
            ("org-link-edit-backward-slurp" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [6801 8184])
            ("org-link-edit--split-first-blobs" function (:arguments ("string" "n")) nil [8186 8899])
            ("org-link-edit--split-last-blobs" function (:arguments ("string" "n")) nil [8901 9619])
            ("org-link-edit-forward-barf" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [9636 10824])
            ("org-link-edit-backward-barf" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [10841 12029])
            ("org-link-edit--next-link-data" function (:arguments ("previous")) nil [12031 12326])
            ("org-link-edit-transport-next-link" function
               (:user-visible-flag t
                :arguments ("previous" "beg" "end"))
                nil [12343 14483])
            ("org-link-edit" package nil nil [14485 14509]))          
      :file "org-link-edit.el"
      :pointmax 14541
      :fsize 14540
      :lastmodtime '(22842 50887 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("org" include nil nil [3534 3548])
            ("define-derived-mode" code nil nil [3565 3674])
            ("org-passwords" customgroup (:user-visible-flag t) nil [3676 3755])
            ("org-passwords-password-property" variable (:default-value "PASSWORD") nil [3757 3896])
            ("org-passwords-username-property" variable (:default-value "USERNAME") nil [3898 4038])
            ("org-passwords-url-property" variable (:default-value "URL") nil [4040 4164])
            ("org-passwords-file" variable nil nil [4166 4302])
            ("org-passwords-time-opened" variable (:default-value "1 min") nil [4304 4487])
            ("org-passwords-default-password-size" variable (:default-value "20") nil [4489 4677])
            ("org-passwords-random-words-dictionary" variable nil nil [4679 4929])
            ("org-passwords-default-random-words-number" variable (:default-value "5") nil [4931 5114])
            ("org-passwords-random-words-separator" variable (:default-value "-") nil [5116 5229])
            ("org-passwords-random-words-substitutions" variable (:default-value (quote (("a" . "@") ("e" . "3") ("o" . "0")))) nil [5231 5504])
            ("org-passwords-copy-password" function (:user-visible-flag t) nil [5506 5944])
            ("org-passwords-copy-username" function (:user-visible-flag t) nil [5946 6391])
            ("org-passwords-open-url" function (:user-visible-flag t) nil [6393 6600])
            ("org-passwords" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [6617 7712])
            ("org-passwords-set-up-kill-password-buffer" function nil nil [7714 7955])
            ("random" code nil nil [8106 8116])
            ("org-passwords-generate-password" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [8118 8745])
            ("org-passwords-generate-password-with-symbols" function (:arguments ("previous-string" "nums-of-chars")) nil [8747 9179])
            ("org-passwords-generate-password-without-symbols" function (:arguments ("previous-string" "nums-of-chars")) nil [9181 10462])
            ("org-passwords-random-words" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [10482 11733])
            ("org-passwords-random-words-attach-number-of-words" function (:arguments ("previous-string" "number-of-words" "list-of-words" "separator")) nil [11735 12295])
            ("org-passwords-substitute" function (:arguments ("string-to-change" "list-of-substitutions")) nil [12297 13078])
            ("org-passwords-concat-this-with-string" function (:arguments ("this" "list-of-strings")) nil [13080 13547])
            ("org-passwords" package nil nil [13549 13573]))          
      :file "org-passwords.el"
      :pointmax 13606
      :fsize 13605
      :lastmodtime '(22842 50887 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("org-macs" include nil nil [1253 1272])
            ("org" include nil nil [1273 1287])
            ("org-mhe-search-all-folders" variable nil nil [1317 1751])
            ("declare-function" code nil nil [1797 1862])
            ("declare-function" code nil nil [1863 1908])
            ("declare-function" code nil nil [1909 1966])
            ("declare-function" code nil nil [1967 2033])
            ("declare-function" code nil nil [2034 2083])
            ("declare-function" code nil nil [2084 2142])
            ("declare-function" code nil nil [2143 2297])
            ("declare-function" code nil nil [2298 2411])
            ("declare-function" code nil nil [2412 2480])
            ("declare-function" code nil nil [2481 2552])
            ("declare-function" code nil nil [2553 2630])
            ("declare-function" code nil nil [2631 2686])
            ("declare-function" code nil nil [2687 2733])
            ("declare-function" code nil nil [2734 2779])
            ("declare-function" code nil nil [2780 2874])
            ("mh-progs" variable nil nil [2875 2892])
            ("mh-current-folder" variable nil nil [2893 2919])
            ("mh-show-folder-buffer" variable nil nil [2920 2950])
            ("mh-index-folder" variable nil nil [2951 2975])
            ("mh-searcher" variable nil nil [2976 2996])
            ("mh-search-regexp-builder" variable nil nil [2997 3030])
            ("org-link-set-parameters" code nil nil [3057 3139])
            ("org-mhe-store-link" function nil nil [3159 3920])
            ("org-mhe-open" function (:arguments ("path")) nil [3922 4237])
            ("org-mhe-get-message-real-folder" function nil nil [4282 5247])
            ("org-mhe-get-message-folder-from-index" function nil nil [5249 5498])
            ("org-mhe-get-message-folder" function nil nil [5500 5762])
            ("org-mhe-get-message-num" function nil nil [5764 6031])
            ("org-mhe-get-header" function (:arguments ("header")) nil [6033 6760])
            ("org-mhe-follow-link" function (:arguments ("folder" "article")) nil [6762 7872])
            ("org-mhe" package nil nil [7874 7892]))          
      :file "org-mhe.el"
      :pointmax 7919
      :fsize 7918
      :lastmodtime '(22842 50887 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("ox-html" include nil nil [2704 2722])
            ("declare-function" code nil nil [2723 2773])
            ("org-export-rss" customgroup (:user-visible-flag t) nil [2802 2966])
            ("org-rss-image-url" variable (:default-value "http://orgmode.org/img/org-mode-unicorn-logo.png") nil [2968 3135])
            ("org-rss-extension" variable (:default-value "xml") nil [3137 3254])
            ("org-rss-categories" variable (:default-value (quote from-tags)) nil [3256 3652])
            ("org-rss-use-entry-url-as-guid" variable (:default-value t) nil [3654 3843])
            ("org-export-define-derived-backend" code nil nil [3865 4998])
            ("org-rss-export-as-rss" function
               (:user-visible-flag t
                :arguments ("async" "subtreep" "visible-only"))
                nil [5037 6071])
            ("org-rss-export-to-rss" function
               (:user-visible-flag t
                :arguments ("async" "subtreep" "visible-only"))
                nil [6088 7054])
            ("org-rss-publish-to-rss" function (:arguments ("plist" "filename" "pub-dir")) nil [7071 7773])
            ("org-rss-headline" function (:arguments ("headline" "contents" "info")) nil [7807 10236])
            ("org-rss-build-categories" function (:arguments ("headline" "info")) nil [10238 10638])
            ("org-rss-template" function (:arguments ("contents" "info")) nil [10640 11548])
            ("org-rss-build-channel-info" function (:arguments ("info")) nil [11550 13147])
            ("org-rss-section" function (:arguments ("section" "contents" "info")) nil [13149 13338])
            ("org-rss-timestamp" function (:arguments ("timestamp" "contents" "info")) nil [13340 13577])
            ("org-rss-plain-text" function (:arguments ("contents" "info")) nil [13579 13807])
            ("org-rss-final-function" function (:arguments ("contents" "backend" "info")) nil [13822 14068])
            ("org-rss-add-pubdate-property" function nil nil [14089 14675])
            ("ox-rss" package nil nil [14677 14694]))          
      :file "ox-rss.el"
      :pointmax 14720
      :fsize 14719
      :lastmodtime '(22842 50887 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("org" include nil nil [4237 4251])
            ("bibtex" include nil nil [4252 4269])
            ("cl-lib" include nil nil [4270 4287])
            ("org-compat" include nil nil [4288 4309])
            ("org-agenda-overriding-header" variable nil nil [4311 4348])
            ("org-agenda-search-view-always-boolean" variable nil nil [4349 4395])
            ("org-bibtex-description" variable nil nil [4396 4431])
            ("org-id-locations" variable nil nil [4465 4490])
            ("declare-function" code nil nil [4492 4548])
            ("declare-function" code nil nil [4549 4603])
            ("declare-function" code nil nil [4604 4670])
            ("declare-function" code nil nil [4671 4735])
            ("org-bibtex-types" variable (:default-value (quote ((:article (:description . "An article from a journal or magazine") (:required :author :title :journal :year) (:optional :volume :number :pages :month :note)) (:book (:description . "A book with an explicit publisher") (:required (:editor :author) :title :publisher :year) (:optional (:volume :number) :series :address :edition :month :note)) (:booklet (:description . "A work that is printed and bound, but without a named publisher or sponsoring institution.") (:required :title) (:optional :author :howpublished :address :month :year :note)) (:conference (:description . "") (:required :author :title :booktitle :year) (:optional :editor :pages :organization :publisher :address :month :note)) (:inbook (:description . "A part of a book, which may be a chapter (or section or whatever) and/or a range of pages.") (:required (:author :editor) :title (:chapter :pages) :publisher :year) (:optional :crossref (:volume :number) :series :type :address :edition :month :note)) (:incollection (:description . "A part of a book having its own title.") (:required :author :title :booktitle :publisher :year) (:optional :crossref :editor (:volume :number) :series :type :chapter :pages :address :edition :month :note)) (:inproceedings (:description . "An article in a conference proceedings") (:required :author :title :booktitle :year) (:optional :crossref :editor (:volume :number) :series :pages :address :month :organization :publisher :note)) (:manual (:description . "Technical documentation.") (:required :title) (:optional :author :organization :address :edition :month :year :note)) (:mastersthesis (:description . "A Master’s thesis.") (:required :author :title :school :year) (:optional :type :address :month :note)) (:misc (:description . "Use this type when nothing else fits.") (:required) (:optional :author :title :howpublished :month :year :note)) (:phdthesis (:description . "A PhD thesis.") (:required :author :title :school :year) (:optional :type :address :month :note)) (:proceedings (:description . "The proceedings of a conference.") (:required :title :year) (:optional :editor (:volume :number) :series :address :month :organization :publisher :note)) (:techreport (:description . "A report published by a school or other institution.") (:required :author :title :institution :year) (:optional :type :address :month :note)) (:unpublished (:description . "A document having an author and title, but not formally published.") (:required :author :title :note) (:optional :month :year))))) nil [4755 7609])
            ("org-bibtex-fields" variable (:default-value (quote ((:address . "Usually the address of the publisher or other type of institution.  For major publishing houses, van Leunen recommends omitting the information entirely.  For small publishers, on the other hand, you can help the reader by giving the complete address.") (:annote . "An annotation.  It is not used by the standard bibliography styles, but may be used by others that produce an annotated bibliography.") (:author . "The name(s) of the author(s), in the format described in the LaTeX book.  Remember, all names are separated with the and keyword, and not commas.") (:booktitle . "Title of a book, part of which is being cited.  See the LaTeX book for how to type titles.  For book entries, use the title field instead.") (:chapter . "A chapter (or section or whatever) number.") (:crossref . "The database key of the entry being cross referenced.") (:edition . "The edition of a book for example, 'Second'.  This should be an ordinal, and should have the first letter capitalized, as shown here; the standard styles convert to lower case when necessary.") (:editor . "Name(s) of editor(s), typed as indicated in the LaTeX book.  If there is also an author field, then the editor field gives the editor of the book or collection in which the reference appears.") (:howpublished . "How something strange has been published.  The first word should be capitalized.") (:institution . "The sponsoring institution of a technical report.") (:journal . "A journal name.") (:key . "Used for alphabetizing, cross-referencing, and creating a label when the author information is missing.  This field should not be confused with the key that appears in the \\cite command and at the beginning of the database entry.") (:month . "The month in which the work was published or, for an unpublished work, in which it was written.  You should use the standard three-letter abbreviation,") (:note . "Any additional information that can help the reader.  The first word should be capitalized.") (:number . "Any additional information that can help the reader.  The first word should be capitalized.") (:organization . "The organization that sponsors a conference or that publishes a manual.") (:pages . "One or more page numbers or range of numbers, such as 42-111 or 7,41,73-97 or 43+ (the ‘+’ in this last example indicates pages following that don’t form simple range). BibTEX requires double dashes for page ranges (--).") (:publisher . "The publisher’s name.") (:school . "The name of the school where a thesis was written.") (:series . "The name of a series or set of books.  When citing an entire book, the title field gives its title and an optional series field gives the name of a series or multi-volume set in which the book is published.") (:title . "The work’s title, typed as explained in the LaTeX book.") (:type . "The type of a technical report for example, 'Research Note'.") (:volume . "The volume of a journal or multi-volume book.") (:year . "The year of publication or, for an unpublished work, the year it was written.  Generally it should consist of four numerals, such as 1984, although the standard styles can handle any year whose last four nonpunctuation characters are numerals, such as '(about 1984)'")))) nil [7611 11120])
            ("org-bibtex-entries" variable nil nil [11122 11193])
            ("org-bibtex-autogen-keys" variable nil nil [11195 11367])
            ("org-bibtex-prefix" variable nil nil [11369 11614])
            ("org-bibtex-treat-headline-as-title" variable (:default-value t) nil [11616 11937])
            ("org-bibtex-export-arbitrary-fields" variable nil nil [11939 12296])
            ("org-bibtex-key-property" variable (:default-value "CUSTOM_ID") nil [12298 12649])
            ("org-bibtex-tags" variable nil nil [12651 12820])
            ("org-bibtex-tags-are-keywords" variable nil nil [12822 13513])
            ("org-bibtex-no-export-tags" variable nil nil [13515 13771])
            ("org-bibtex-inherit-tags" variable nil nil [13773 14145])
            ("org-bibtex-type-property-name" variable (:default-value "btype") nil [14147 14317])
            ("org-bibtex-get" function (:arguments ("property")) nil [14343 14732])
            ("org-bibtex-put" function (:arguments ("property" "value")) nil [14734 15045])
            ("org-bibtex-headline" function nil nil [15047 17383])
            ("org-bibtex-ask" function (:arguments ("field")) nil [17385 17950])
            ("org-bibtex-autokey" function nil nil [17952 18597])
            ("org-bibtex-fleshout" function (:arguments ("type" "optional")) nil [18599 19939])
            ("org-link-set-parameters" code nil nil [19969 20068])
            ("org-bibtex-open" function (:arguments ("path")) nil [20070 20318])
            ("org-bibtex-store-link" function nil nil [20320 22091])
            ("org-create-file-search-in-bibtex" function nil nil [22093 23072])
            ("org-execute-file-search-in-bibtex" function (:arguments ("s")) nil [23074 24032])
            ("add-hook" code nil nil [24093 24173])
            ("org-bibtex" function
               (:user-visible-flag t
                :arguments ("filename"))
                nil [24227 25310])
            ("org-bibtex-check" function
               (:user-visible-flag t
                :arguments ("optional"))
                nil [25312 25733])
            ("org-bibtex-check-all" function
               (:user-visible-flag t
                :arguments ("optional"))
                nil [25735 25966])
            ("org-bibtex-create" function
               (:user-visible-flag t
                :arguments ("arg" "nonew"))
                nil [25968 26957])
            ("org-bibtex-create-in-current-entry" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [26959 27162])
            ("org-bibtex-read" function (:user-visible-flag t) nil [27164 28190])
            ("org-bibtex-read-buffer" function
               (:user-visible-flag t
                :arguments ("buffer"))
                nil [28192 28732])
            ("org-bibtex-read-file" function
               (:user-visible-flag t
                :arguments ("file"))
                nil [28734 28910])
            ("org-bibtex-write" function (:user-visible-flag t) nil [28912 30044])
            ("org-bibtex-yank" function (:user-visible-flag t) nil [30046 30338])
            ("org-bibtex-import-from-file" function
               (:user-visible-flag t
                :arguments ("file"))
                nil [30340 30646])
            ("org-bibtex-export-to-kill-ring" function (:user-visible-flag t) nil [30648 30833])
            ("org-bibtex-search" function
               (:user-visible-flag t
                :arguments ("string"))
                nil [30835 31267])
            ("org-bibtex" package nil nil [31269 31290]))          
      :file "org-bibtex.el"
      :pointmax 31320
      :fsize 31331
      :lastmodtime '(22842 50887 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [1448 1465])
            ("org" include nil nil [1466 1480])
            ("declare-function" code nil nil [1482 1538])
            ("declare-function" code nil nil [1539 1602])
            ("declare-function" code nil nil [1603 1673])
            ("declare-function" code nil nil [1674 1740])
            ("declare-function" code nil nil [1741 1830])
            ("declare-function" code nil nil [1831 1959])
            ("declare-function" code nil nil [1960 2058])
            ("declare-function" code nil nil [2059 2131])
            ("declare-function" code nil nil [2132 2191])
            ("declare-function" code nil nil [2193 2257])
            ("declare-function" code nil nil [2258 2330])
            ("declare-function" code nil nil [2331 2413])
            ("declare-function" code nil nil [2414 2476])
            ("declare-function" code nil nil [2477 2530])
            ("declare-function" code nil nil [2531 2624])
            ("declare-function" code nil nil [2625 2682])
            ("declare-function" code nil nil [2683 2752])
            ("declare-function" code nil nil [2753 2827])
            ("declare-function" code nil nil [2829 2901])
            ("orgtbl-mode" variable nil nil [2903 2923])
            ("orgtbl-mode-menu" variable nil nil [2940 2965])
            ("constants-unit-system" variable nil nil [3009 3039])
            ("org-export-filters-alist" variable nil nil [3040 3073])
            ("org-table-follow-field-mode" variable nil nil [3074 3110])
            ("sort-fold-case" variable nil nil [3111 3134])
            ("orgtbl-after-send-table-hook" variable nil nil [3136 3405])
            ("org-table-TBLFM-begin-regexp" variable (:default-value "^[ 	]*|.*
[ 	]*#\\+TBLFM: ") nil [3407 3476])
            ("orgtbl-optimized" variable (:default-value (eq org-enable-table-editor (quote optimized))) nil [3478 4180])
            ("orgtbl-radio-table-templates" variable (:default-value (quote ((latex-mode "% BEGIN RECEIVE ORGTBL %n
% END RECEIVE ORGTBL %n
\\begin{comment}
#+ORGTBL: SEND %n orgtbl-to-latex :splice nil :skip 0
| | |
\\end{comment}
") (texinfo-mode "@c BEGIN RECEIVE ORGTBL %n
@c END RECEIVE ORGTBL %n
@ignore
#+ORGTBL: SEND %n orgtbl-to-html :splice nil :skip 0
| | |
@end ignore
") (html-mode "<!-- BEGIN RECEIVE ORGTBL %n -->
<!-- END RECEIVE ORGTBL %n -->
<!--
#+ORGTBL: SEND %n orgtbl-to-html :splice nil :skip 0
| | |
-->
") (org-mode "#+ BEGIN RECEIVE ORGTBL %n
#+ END RECEIVE ORGTBL %n

#+ORGTBL: SEND %n orgtbl-to-orgtbl :splice nil :skip 0
| | |
")))) nil [4182 6003])
            ("org-table-settings" customgroup (:user-visible-flag t) nil [6005 6123])
            ("org-table-default-size" variable (:default-value "5x2") nil [6125 6273])
            ("org-table-number-regexp" variable (:default-value "^\\([<>]?[-+^.0-9]*[0-9][-+^.0-9eEdDx()%:]*\\|[<>]?[-+]?0[xX][0-9a-fA-F.]+\\|[<>]?[-+]?[0-9]+#[0-9a-zA-Z.]+\\|nan\\|[-+u]?inf\\)$") nil [6275 7885])
            ("org-table-number-fraction" variable (:default-value 0.5) nil [7887 8216])
            ("org-table-editing" customgroup (:user-visible-flag t) nil [8218 8348])
            ("org-table-automatic-realign" variable (:default-value t) nil [8350 8607])
            ("org-table-auto-blank-field" variable (:default-value t) nil [8609 8937])
            ("org-table-exit-follow-field-mode-when-leaving-table" variable (:default-value t) nil [8939 9402])
            ("org-table-fix-formulas-confirm" variable nil nil [9404 9697])
            ("put" code nil nil [9698 9816])
            ("org-table-tab-jumps-over-hlines" variable (:default-value t) nil [9818 10209])
            ("org-table-calculation" customgroup (:user-visible-flag t) nil [10211 10341])
            ("org-table-use-standard-references" variable (:default-value (quote from)) nil [10343 10855])
            ("org-table-copy-increment" variable (:default-value t) nil [10857 11270])
            ("org-calc-default-modes" variable (:default-value (quote (calc-internal-prec 12 calc-float-format (float 8) calc-angle-mode deg calc-prefer-frac nil calc-symbolic-mode nil calc-date-format (YYYY "-" MM "-" DD " " Www (" " hh ":" mm)) calc-display-working-message t))) nil [11272 11915])
            ("org-table-duration-custom-format" variable (:default-value (quote hours)) nil [11917 12435])
            ("org-table-formula-field-format" variable (:default-value "%s") nil [12437 12778])
            ("org-table-formula-evaluate-inline" variable (:default-value t) nil [12780 13315])
            ("org-table-formula-use-constants" variable (:default-value t) nil [13317 13658])
            ("org-table-formula-constants" variable nil nil [13660 14305])
            ("org-table-allow-automatic-line-recalculation" variable (:default-value t) nil [14307 14607])
            ("org-table-relative-ref-may-cross-hline" variable (:default-value t) nil [14609 15374])
            ("org-table-formula-create-columns" variable nil nil [15376 15994])
            ("org-table-import-export" customgroup (:user-visible-flag t) nil [15996 16147])
            ("org-table-export-default-format" variable (:default-value "orgtbl-to-tsv") nil [16149 16516])
            ("org-table-convert-region-max-lines" variable (:default-value 999) nil [16518 16839])
            ("org-table-auto-recalculate-regexp" variable
               (:constant-flag t
                :default-value "^[ 	]*| *# *\\(|\\|$\\)")
                nil [16841 16975])
            ("org-table-recalculate-regexp" variable
               (:constant-flag t
                :default-value "^[ 	]*| *[#*] *\\(|\\|$\\)")
                nil [16977 17099])
            ("org-table-calculate-mark-regexp" variable
               (:constant-flag t
                :default-value "^[ 	]*| *[!$^_#*] *\\(|\\|$\\)")
                nil [17101 17228])
            ("org-table-border-regexp" variable
               (:constant-flag t
                :default-value "^[ 	]*[^| 	]")
                nil [17230 17332])
            ("org-table-last-highlighted-reference" variable nil nil [17334 17383])
            ("org-table-formula-history" variable nil nil [17385 17423])
            ("org-table-column-names" variable nil nil [17425 17571])
            ("org-table-column-name-regexp" variable nil nil [17573 17727])
            ("org-table-local-parameters" variable nil nil [17729 17882])
            ("org-table-named-field-locations" variable nil nil [17884 18242])
            ("org-table-current-line-types" variable nil nil [18244 18378])
            ("org-table-current-begin-pos" variable nil nil [18380 18522])
            ("org-table-current-ncol" variable nil nil [18524 18654])
            ("org-table-dlines" variable nil nil [18656 18858])
            ("org-table-hlines" variable nil nil [18860 19058])
            ("org-table-range-regexp" variable
               (:constant-flag t
                :default-value "@\\([-+]?I*[-+]?[0-9]*\\)?\\(\\$[-+]?[0-9]+\\)?\\(\\.\\.@?\\([-+]?I*[-+]?[0-9]*\\)?\\(\\$[-+]?[0-9]+\\)?\\)?")
                nil [19060 19353])
            ("org-table-range-regexp2" variable
               (:constant-flag t
                :default-value (concat "\\(" "@[-0-9I$&]+" "\\|" "[a-zA-Z]\\{1,2\\}\\([0-9]+\\|&\\)" "\\|" "\\$[a-zA-Z0-9]+" "\\)" "\\.\\." "\\(" "@?[-0-9I$&]+" "\\|" "[a-zA-Z]\\{1,2\\}\\([0-9]+\\|&\\)" "\\|" "\\$[a-zA-Z0-9]+" "\\)"))
                nil [19355 19644])
            ("org-table-translate-regexp" variable
               (:constant-flag t
                :default-value (concat "\\(" "@[-0-9I$]+" "\\|" "[a-zA-Z]\\{1,2\\}\\([0-9]+\\|&\\)" "\\)"))
                nil [19646 19830])
            ("org-table-save-field" function (:arguments ("body")) nil [19832 20264])
            ("org-table-create-with-table.el" function (:user-visible-flag t) nil [20281 20773])
            ("org-table-create-or-convert-from-region" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [20790 21340])
            ("org-table-create" function
               (:user-visible-flag t
                :arguments ("size"))
                nil [21357 22369])
            ("org-table-convert-region" function
               (:user-visible-flag t
                :arguments ("beg0" "end0" "separator"))
                nil [22386 25136])
            ("org-table-import" function
               (:user-visible-flag t
                :arguments ("file" "arg"))
                nil [25153 25617])
            ("org-table-export" function
               (:user-visible-flag t
                :arguments ("file" "format"))
                nil [25635 28528])
            ("org-table-aligned-begin-marker" variable (:default-value (make-marker)) nil [28530 28711])
            ("org-table-aligned-end-marker" variable (:default-value (make-marker)) nil [28712 28885])
            ("org-table-last-alignment" variable nil nil [28886 29066])
            ("org-table-last-column-widths" variable nil nil [29067 29227])
            ("defvar-local" code nil nil [29228 29365])
            ("defvar-local" code nil nil [29366 29467])
            ("org-last-recalc-line" variable nil nil [29469 29502])
            ("org-table-do-narrow" variable (:default-value t) nil [29503 29533])
            ("org-narrow-column-arrow" variable
               (:constant-flag t
                :default-value "=>")
                nil [29558 29653])
            ("org-table-align" function (:user-visible-flag t) nil [29670 37887])
            ("org-table-begin" function (:arguments ("table-type")) nil [37904 38362])
            ("org-table-end" function (:arguments ("table-type")) nil [38379 39237])
            ("org-table-justify-field-maybe" function (:arguments ("new")) nil [39254 40838])
            ("org-table-next-field" function (:user-visible-flag t) nil [40855 41756])
            ("org-table-previous-field" function (:user-visible-flag t) nil [41773 42472])
            ("org-table-beginning-of-field" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [42474 43090])
            ("org-table-end-of-field" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [43092 43678])
            ("org-table-next-row" function (:user-visible-flag t) nil [43695 44450])
            ("org-table-copy-down" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [44467 47717])
            ("org-table-check-inside-data-field" function (:arguments ("noerror")) nil [47719 48181])
            ("org-table-clip" variable nil nil [48183 48243])
            ("org-table-get" function (:arguments ("line" "column")) nil [48245 48743])
            ("org-table-put" function (:arguments ("line" "column" "value" "align")) nil [48745 49150])
            ("org-table-current-line" function nil nil [49152 49474])
            ("org-table-goto-line" function (:arguments ("N")) nil [49476 49798])
            ("org-table-blank-field" function (:user-visible-flag t) nil [49815 50404])
            ("org-table-get-field" function (:arguments ("n" "replace")) nil [50406 51071])
            ("org-table-field-info" function
               (:user-visible-flag t
                :arguments ("_arg"))
                nil [51088 52778])
            ("org-table-current-column" function (:user-visible-flag t) nil [52780 53186])
            ("org-table-current-dline" function (:user-visible-flag t) nil [53203 53693])
            ("org-table-goto-column" function
               (:user-visible-flag t
                :arguments ("n" "on-delim" "force"))
                nil [53710 54490])
            ("org-table-insert-column" function (:user-visible-flag t) nil [54507 55254])
            ("org-table-find-dataline" function nil nil [55256 55842])
            ("org-table-line-to-dline" function (:arguments ("line" "above")) nil [55844 56624])
            ("org-table-delete-column" function (:user-visible-flag t) nil [56641 57602])
            ("org-table-move-column-right" function (:user-visible-flag t) nil [57619 57733])
            ("org-table-move-column-left" function (:user-visible-flag t) nil [57749 57863])
            ("org-table-move-column" function
               (:user-visible-flag t
                :arguments ("left"))
                nil [57880 59404])
            ("org-table-move-row-down" function (:user-visible-flag t) nil [59421 59523])
            ("org-table-move-row-up" function (:user-visible-flag t) nil [59539 59637])
            ("org-table-move-row" function
               (:user-visible-flag t
                :arguments ("up"))
                nil [59654 60815])
            ("org-table-insert-row" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [60832 61950])
            ("org-table-insert-hline" function
               (:user-visible-flag t
                :arguments ("above"))
                nil [61967 62917])
            ("org-table-hline-and-move" function
               (:user-visible-flag t
                :arguments ("same-column"))
                nil [62934 63387])
            ("org-table-clean-line" function (:arguments ("s")) nil [63389 63917])
            ("org-table-kill-row" function (:user-visible-flag t) nil [63934 64555])
            ("org-table-sort-lines" function
               (:user-visible-flag t
                :arguments ("with-case" "sorting-type" "getkey-func" "compare-func" "interactive?"))
                nil [64572 69128])
            ("org-table-cut-region" function
               (:user-visible-flag t
                :arguments ("beg" "end"))
                nil [69145 69483])
            ("org-table-copy-region" function
               (:user-visible-flag t
                :arguments ("beg" "end" "cut"))
                nil [69500 70710])
            ("org-table-paste-rectangle" function (:user-visible-flag t) nil [70727 71744])
            ("org-table-convert" function (:user-visible-flag t) nil [71761 73524])
            ("org-table-transpose-table-at-point" function (:user-visible-flag t) nil [73526 74516])
            ("org-table-wrap-region" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [74533 77114])
            ("org-field-marker" variable nil nil [77116 77145])
            ("org-table-edit-field" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [77162 79123])
            ("org-table-finish-edit-field" function nil nil [79125 79932])
            ("define-minor-mode" code nil nil [79934 80735])
            ("org-table-follow-fields-with-editor" function nil nil [80737 81139])
            ("org-timecnt" variable nil nil [81141 81161])
            ("org-table-sum" function
               (:user-visible-flag t
                :arguments ("beg" "end" "nlast"))
                nil [81209 83340])
            ("org-table-get-number-for-summing" function (:arguments ("s")) nil [83342 84108])
            ("org-table-current-field-formula" function (:arguments ("key" "noerror")) nil [84110 85111])
            ("org-table-get-formula" function (:arguments ("equation" "named")) nil [85113 87022])
            ("org-table-store-formulas" function (:arguments ("alist" "location")) nil [87024 87845])
            ("org-table-formula-make-cmp-string" function (:arguments ("a")) nil [87847 88572])
            ("org-table-formula-less-p" function (:arguments ("a" "b")) nil [88574 88791])
            ("org-table-get-stored-formulas" function (:arguments ("noerror" "location")) nil [88808 90298])
            ("org-table-fix-formulas" function (:arguments ("key" "replace" "limit" "delta" "remove")) nil [90300 91753])
            ("org-table-maybe-eval-formula" function nil nil [91770 92394])
            ("org-recalc-commands" variable nil nil [92396 92530])
            ("org-recalc-marks" variable (:default-value (quote ((" " . "Unmarked: no special line, no automatic recalculation") ("#" . "Automatically recalculate this line upon TAB, RET, and C-c C-c in the line") ("*" . "Recalculate only when entire table is recalculated with `C-u C-c *'") ("!" . "Column name definition line.  Reference in formula as $name.") ("$" . "Parameter definition line name=value.  Reference in formula as $name.") ("_" . "Names for values in row below this one.") ("^" . "Names for values in row above this one.")))) nil [92532 93064])
            ("org-table-rotate-recalc-marks" function
               (:user-visible-flag t
                :arguments ("newchar"))
                nil [93081 95737])
            ("org-table-analyze" function nil nil [95754 99886])
            ("org-table-goto-field" function (:arguments ("ref" "create-column-p")) nil [99888 101111])
            ("org-table-maybe-recalculate-line" function (:user-visible-flag t) nil [101128 101570])
            ("org-tbl-calc-modes" variable nil nil [101572 101599])
            ("org-set-calc-mode" function (:arguments ("var" "value")) nil [101649 102081])
            ("org-table-eval-formula" function
               (:user-visible-flag t
                :arguments ("arg" "equation" "suppress-align" "suppress-const" "suppress-store" "suppress-analysis"))
                nil [102098 112789])
            ("org-table-put-field-property" function (:arguments ("prop" "value")) nil [112791 112997])
            ("org-table-get-range" function (:arguments ("desc" "tbeg" "col" "highlight" "corners-only")) nil [112999 116076])
            ("org-table--descriptor-line" function (:arguments ("desc" "cline")) nil [116078 117416])
            ("org-table--row-type" function (:arguments ("type" "n" "i" "backwards" "relative" "desc")) nil [117418 118616])
            ("org-table--error-on-old-row-references" function (:arguments ("s")) nil [118618 118792])
            ("org-table-make-reference" function (:arguments ("elements" "keep-empty" "numbers" "lispp")) nil [118794 120655])
            ("org-table-message-once-per-second" function (:arguments ("t1" "args")) nil [120657 121096])
            ("org-table-recalculate" function
               (:user-visible-flag t
                :arguments ("all" "noalign"))
                nil [121113 127604])
            ("org-table-iterate" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [127621 128389])
            ("org-table-recalculate-buffer-tables" function (:user-visible-flag t) nil [128406 128801])
            ("org-table-iterate-buffer-tables" function (:user-visible-flag t) nil [128818 129521])
            ("org-table-calc-current-TBLFM" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [129523 130340])
            ("org-table-TBLFM-begin" function nil nil [130342 130648])
            ("org-table-expand-lhs-ranges" function (:arguments ("equations")) nil [130650 132012])
            ("org-table-formula-handle-first/last-rc" function (:arguments ("s")) nil [132014 133279])
            ("org-table-formula-substitute-names" function (:arguments ("f")) nil [133281 134335])
            ("org-table-get-constant" function (:arguments ("const")) nil [134337 134838])
            ("org-table-fedit-map" variable (:default-value (let ((map (make-sparse-keymap))) (org-defkey map "" (quote org-table-fedit-finish)) (org-defkey map "" (quote org-table-fedit-finish)) (org-defkey map "" (quote org-table-fedit-finish)) (org-defkey map "'" (quote org-table-fedit-finish)) (org-defkey map "" (quote org-table-fedit-abort)) (org-defkey map "?" (quote org-table-show-reference)) (org-defkey map [(meta shift up)] (quote org-table-fedit-line-up)) (org-defkey map [(meta shift down)] (quote org-table-fedit-line-down)) (org-defkey map [(shift up)] (quote org-table-fedit-ref-up)) (org-defkey map [(shift down)] (quote org-table-fedit-ref-down)) (org-defkey map [(shift left)] (quote org-table-fedit-ref-left)) (org-defkey map [(shift right)] (quote org-table-fedit-ref-right)) (org-defkey map [(meta up)] (quote org-table-fedit-scroll-down)) (org-defkey map [(meta down)] (quote org-table-fedit-scroll)) (org-defkey map [(meta tab)] (quote lisp-complete-symbol)) (org-defkey map "\211" (quote lisp-complete-symbol)) (org-defkey map [(tab)] (quote org-table-fedit-lisp-indent)) (org-defkey map "	" (quote org-table-fedit-lisp-indent)) (org-defkey map "" (quote org-table-fedit-toggle-ref-type)) (org-defkey map "}" (quote org-table-fedit-toggle-coordinates)) map)) nil [134840 136164])
            ("easy-menu-define" code nil nil [136166 137329])
            ("org-pos" variable nil nil [137331 137347])
            ("org-table--fedit-source" variable nil nil [137348 137429])
            ("org-table-edit-formulas" function (:user-visible-flag t) nil [137446 139968])
            ("org-table-fedit-post-command" function nil nil [139970 140192])
            ("org-table-formula-to-user" function (:arguments ("s")) nil [140194 140384])
            ("org-table-formula-from-user" function (:arguments ("s")) nil [140386 140571])
            ("org-table-convert-refs-to-rc" function (:arguments ("s")) nil [140573 141731])
            ("org-table-convert-refs-to-an" function (:arguments ("s")) nil [141733 142371])
            ("org-letters-to-number" function (:arguments ("s")) nil [142373 142653])
            ("org-number-to-letters" function (:arguments ("n")) nil [142655 142911])
            ("org-table-time-string-to-seconds" function (:arguments ("s")) nil [142913 144038])
            ("org-table-time-seconds-to-string" function (:arguments ("secs" "output-format")) nil [144040 144646])
            ("org-table-fedit-convert-buffer" function (:arguments ("function")) nil [144648 145071])
            ("org-table-fedit-toggle-ref-type" function (:user-visible-flag t) nil [145073 145497])
            ("org-table-fedit-ref-up" function (:user-visible-flag t) nil [145499 145639])
            ("org-table-fedit-ref-down" function (:user-visible-flag t) nil [145640 145786])
            ("org-table-fedit-ref-left" function (:user-visible-flag t) nil [145787 145936])
            ("org-table-fedit-ref-right" function (:user-visible-flag t) nil [145937 146089])
            ("org-table-fedit-shift-reference" function (:arguments ("dir")) nil [146091 146806])
            ("org-rematch-and-replace" function (:arguments ("n" "decr" "hline")) nil [146808 147186])
            ("org-table-shift-refpart" function (:arguments ("ref" "decr" "hline")) nil [147188 148298])
            ("org-table-fedit-toggle-coordinates" function (:user-visible-flag t) nil [148300 148596])
            ("org-table-fedit-finish" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [148598 149884])
            ("org-table-fedit-abort" function (:user-visible-flag t) nil [149886 150286])
            ("org-table-fedit-lisp-indent" function (:user-visible-flag t) nil [150288 151589])
            ("org-show-positions" variable nil nil [151591 151622])
            ("org-table-show-reference" function
               (:user-visible-flag t
                :arguments ("local"))
                nil [151624 156735])
            ("org-table-force-dataline" function nil nil [156737 157292])
            ("org-table-fedit-line-up" function (:user-visible-flag t) nil [157294 157445])
            ("org-table-fedit-line-down" function (:user-visible-flag t) nil [157447 157598])
            ("org-table-fedit-move" function (:arguments ("command")) nil [157600 158176])
            ("org-table-fedit-scroll" function (:arguments ("N")) nil [158178 158323])
            ("org-table-fedit-scroll-down" function (:arguments ("N")) nil [158325 158417])
            ("org-table-rectangle-overlays" variable nil nil [158419 158460])
            ("org-table-add-rectangle-overlay" function (:arguments ("beg" "end" "face")) nil [158462 158688])
            ("org-table-highlight-rectangle" function (:arguments ("beg" "end" "face")) nil [158690 160081])
            ("org-table-remove-rectangle-highlight" function (:arguments ("_ignore")) nil [160083 160400])
            ("defvar-local" code nil nil [160402 160522])
            ("org-table-overlay-coordinates" function (:user-visible-flag t) nil [160524 161696])
            ("org-table-toggle-coordinate-overlays" function (:user-visible-flag t) nil [161713 162242])
            ("org-table-toggle-formula-debugger" function (:user-visible-flag t) nil [162259 162520])
            ("orgtbl-mode-map" variable (:default-value (make-keymap)) nil [164010 164078])
            ("org-old-auto-fill-inhibit-regexp" variable nil nil [164080 164167])
            ("orgtbl-line-start-regexp" variable
               (:constant-flag t
                :default-value "[ 	]*\\(|\\|#\\+\\(tblfm\\|orgtbl\\|tblname\\):\\)")
                nil [164169 164303])
            ("orgtbl-extra-font-lock-keywords" variable
               (:constant-flag t
                :default-value (list (list (concat "^" orgtbl-line-start-regexp ".*") 0 (quote (quote org-table)) (quote prepend))))
                nil [164305 164516])
            ("put" code nil nil [164549 164579])
            ("put" code nil nil [164580 164625])
            ("define-minor-mode" code nil nil [164642 166476])
            ("org-table-cleanup-narrow-column-properties" function nil nil [166478 167081])
            ("orgtbl-make-binding" function (:arguments ("fun" "n" "keys")) nil [167083 167916])
            ("orgtbl-error" function (:user-visible-flag t) nil [167918 168074])
            ("orgtbl-setup" function nil nil [168076 174775])
            ("orgtbl-ctrl-c-ctrl-c" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [174777 175838])
            ("orgtbl-create-or-convert-from-region" function
               (:user-visible-flag t
                :arguments ("_arg"))
                nil [175840 176259])
            ("orgtbl-tab" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [176261 176458])
            ("orgtbl-ret" function (:user-visible-flag t) nil [176460 176642])
            ("orgtbl-self-insert-command" function
               (:user-visible-flag t
                :arguments ("N"))
                nil [176644 178335])
            ("orgtbl-exp-regexp" variable (:default-value "^\\([-+]?[0-9][0-9.]*\\)[eE]\\([-+]?[0-9]+\\)$") nil [178352 178493])
            ("orgtbl-gather-send-defs" function nil nil [178495 179125])
            ("orgtbl-send-replace-tbl" function (:arguments ("name" "text")) nil [179127 179885])
            ("org-table-to-lisp" function (:arguments ("txt")) nil [179902 180558])
            ("orgtbl-send-table" function
               (:user-visible-flag t
                :arguments ("maybe"))
                nil [180560 181724])
            ("org-remove-by-index" function (:arguments ("list" "indices" "i0")) nil [181726 182103])
            ("orgtbl-toggle-comment" function (:user-visible-flag t) nil [182105 182841])
            ("orgtbl-insert-radio-table" function (:user-visible-flag t) nil [182843 183360])
            ("orgtbl-to-generic" function (:arguments ("table" "params")) nil [183377 190166])
            ("org-table--generic-apply" function (:arguments ("value" "name" "with-cons" "args")) nil [190168 190758])
            ("org-table--to-generic-table" function (:arguments ("params")) nil [190760 191405])
            ("org-table--to-generic-row" function (:arguments ("params")) nil [191407 194466])
            ("org-table--to-generic-cell" function (:arguments ("params")) nil [194468 196921])
            ("orgtbl-to-tsv" function (:arguments ("table" "params")) nil [196938 197104])
            ("orgtbl-to-csv" function (:arguments ("table" "params")) nil [197121 197388])
            ("orgtbl-to-latex" function (:arguments ("table" "params")) nil [197405 198433])
            ("orgtbl-to-html" function (:arguments ("table" "params")) nil [198450 199452])
            ("orgtbl-to-texinfo" function (:arguments ("table" "params")) nil [199469 200473])
            ("orgtbl-to-orgtbl" function (:arguments ("table" "params")) nil [200490 201134])
            ("orgtbl-to-table.el" function (:arguments ("table" "params")) nil [201136 201698])
            ("orgtbl-to-unicode" function (:arguments ("table" "params")) nil [201700 202697])
            ("orgtbl-ascii-draw" function (:arguments ("value" "min" "max" "width" "characters")) nil [202930 204050])
            ("orgtbl-ascii-plot" function
               (:user-visible-flag t
                :arguments ("ask"))
                nil [204067 205493])
            ("orgtbl-uc-draw-grid" function (:arguments ("value" "min" "max" "width")) nil [205967 206424])
            ("orgtbl-uc-draw-cont" function (:arguments ("value" "min" "max" "width")) nil [206426 206783])
            ("org-table-get-remote-range" function (:arguments ("name-or-id" "form")) nil [206785 209141])
            ("org-table-remote-reference-indirection" function (:arguments ("form")) nil [209143 209969])
            ("org-define-lookup-function" function (:arguments ("mode")) nil [209971 211108])
            ("org-define-lookup-function" code nil nil [211110 211144])
            ("org-define-lookup-function" code nil nil [211145 211178])
            ("org-define-lookup-function" code nil nil [211179 211211])
            ("org-table" package nil nil [211213 211233]))          
      :file "org-table.el"
      :pointmax 211337
      :fsize 211336
      :lastmodtime '(22842 50887 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [1924 1941])
            ("org" include nil nil [1942 1956])
            ("org-macs" include nil nil [1957 1976])
            ("declare-function" code nil nil [1978 2103])
            ("declare-function" code nil nil [2104 2172])
            ("declare-function" code nil nil [2173 2251])
            ("declare-function" code nil nil [2252 2330])
            ("declare-function" code nil nil [2331 2409])
            ("declare-function" code nil nil [2410 2488])
            ("declare-function" code nil nil [2489 2567])
            ("declare-function" code nil nil [2568 2646])
            ("declare-function" code nil nil [2647 2715])
            ("declare-function" code nil nil [2716 2794])
            ("declare-function" code nil nil [2795 2873])
            ("declare-function" code nil nil [2874 2952])
            ("declare-function" code nil nil [2953 3021])
            ("declare-function" code nil nil [3022 3100])
            ("declare-function" code nil nil [3101 3179])
            ("declare-function" code nil nil [3180 3258])
            ("declare-function" code nil nil [3259 3325])
            ("declare-function" code nil nil [3327 3390])
            ("declare-function" code nil nil [3391 3492])
            ("declare-function" code nil nil [3493 3558])
            ("declare-function" code nil nil [3559 3637])
            ("declare-function" code nil nil [3638 3711])
            ("declare-function" code nil nil [3712 3799])
            ("declare-function" code nil nil [3800 3861])
            ("declare-function" code nil nil [3862 3929])
            ("declare-function" code nil nil [3930 4008])
            ("declare-function" code nil nil [4009 4063])
            ("declare-function" code nil nil [4064 4126])
            ("declare-function" code nil nil [4127 4193])
            ("calendar-mode-map" variable nil nil [4195 4221])
            ("org-clock-current-task" variable nil nil [4222 4253])
            ("org-current-tag-alist" variable nil nil [4254 4284])
            ("org-mobile-force-id-on-agenda-items" variable nil nil [4285 4329])
            ("org-habit-show-habits" variable nil nil [4330 4360])
            ("org-habit-show-habits-only-for-today" variable nil nil [4361 4406])
            ("org-habit-show-all-today" variable nil nil [4407 4440])
            ("org-agenda-buffer-name" variable (:default-value "*Org Agenda*") nil [4505 4551])
            ("org-agenda-overriding-header" variable nil nil [4552 4593])
            ("org-agenda-title-append" variable nil nil [4594 4630])
            ("with-no-warnings" code nil nil [4631 4664])
            ("with-no-warnings" code nil nil [4697 4729])
            ("original-date" variable nil nil [4763 4785])
            ("org-agenda-undo-list" variable nil nil [4837 4936])
            ("org-agenda-pending-undo-list" variable nil nil [4937 5054])
            ("org-agenda-confirm-kill" variable (:default-value 1) nil [5056 5454])
            ("org-agenda-compact-blocks" variable nil nil [5456 5698])
            ("org-agenda-block-separator" variable (:default-value 61) nil [5700 6171])
            ("org-agenda-export" customgroup (:user-visible-flag t) nil [6173 6312])
            ("org-agenda-with-colors" variable (:default-value t) nil [6314 6441])
            ("org-agenda-exporter-settings" variable nil nil [6443 6989])
            ("org-agenda-before-write-hook" variable (:default-value (quote (org-agenda-add-entry-text))) nil [6991 7286])
            ("org-agenda-add-entry-text-maxlines" variable nil nil [7288 7922])
            ("org-agenda-add-entry-text-descriptive-links" variable (:default-value t) nil [7924 8265])
            ("org-agenda-export-html-style" variable nil nil [8267 9625])
            ("org-agenda-persistent-filter" variable nil nil [9627 9770])
            ("org-agenda-custom-commands" customgroup (:user-visible-flag t) nil [9772 9919])
            ("org-sorting-choice" variable
               (:constant-flag t
                :default-value (quote (choice (const time-up) (const time-down) (const timestamp-up) (const timestamp-down) (const scheduled-up) (const scheduled-down) (const deadline-up) (const deadline-down) (const ts-up) (const ts-down) (const tsia-up) (const tsia-down) (const category-keep) (const category-up) (const category-down) (const tag-down) (const tag-up) (const priority-up) (const priority-down) (const todo-state-up) (const todo-state-down) (const effort-up) (const effort-down) (const habit-up) (const habit-down) (const alpha-up) (const alpha-down) (const user-defined-up) (const user-defined-down))))
                nil [9921 10612])
            ("defvaralias" code nil nil [10735 10804])
            ("defvaralias" code nil nil [10805 10860])
            ("org-agenda-entry-types" variable (:default-value (quote (:deadline :scheduled :timestamp :sexp))) nil [10862 12738])
            ("org-agenda-custom-commands-local-options" variable
               (:constant-flag t
                :default-value (\` (repeat :tag "Local settings for this command.  Remember to quote values" (choice :tag "Setting" (list :tag "Heading for this block" (const org-agenda-overriding-header) (string :tag "Headline")) (list :tag "Files to be searched" (const org-agenda-files) (list (const :format "" quote) (repeat (file)))) (list :tag "Sorting strategy" (const org-agenda-sorting-strategy) (list (const :format "" quote) (repeat (\, org-sorting-choice)))) (list :tag "Prefix format" (const org-agenda-prefix-format :value "  %-12:c%?-12t% s") (string)) (list :tag "Number of days in agenda" (const org-agenda-span) (choice (const :tag "Day" day) (const :tag "Week" week) (const :tag "Fortnight" fortnight) (const :tag "Month" month) (const :tag "Year" year) (integer :tag "Custom"))) (list :tag "Fixed starting date" (const org-agenda-start-day) (string :value "2007-11-01")) (list :tag "Start on day of week" (const org-agenda-start-on-weekday) (choice :value 1 (const :tag "Today" nil) (integer :tag "Weekday No."))) (list :tag "Include data from diary" (const org-agenda-include-diary) (boolean)) (list :tag "Deadline Warning days" (const org-deadline-warning-days) (integer :value 1)) (list :tag "Category filter preset" (const org-agenda-category-filter-preset) (list (const :format "" quote) (repeat (string :tag "+category or -category")))) (list :tag "Tags filter preset" (const org-agenda-tag-filter-preset) (list (const :format "" quote) (repeat (string :tag "+tag or -tag")))) (list :tag "Effort filter preset" (const org-agenda-effort-filter-preset) (list (const :format "" quote) (repeat (string :tag "+=10 or -=10 or +<10 or ->10")))) (list :tag "Regexp filter preset" (const org-agenda-regexp-filter-preset) (list (const :format "" quote) (repeat (string :tag "+regexp or -regexp")))) (list :tag "Set daily/weekly entry types" (const org-agenda-entry-types) (list (const :format "" quote) (set :greedy t :value (\, org-agenda-entry-types) (const :deadline) (const :scheduled) (const :deadline*) (const :scheduled*) (const :timestamp) (const :sexp)))) (list :tag "Standard skipping condition" :value (org-agenda-skip-function (quote (org-agenda-skip-entry-if))) (const org-agenda-skip-function) (list (const :format "" quote) (list (choice :tag "Skipping range" (const :tag "Skip entry" org-agenda-skip-entry-if) (const :tag "Skip subtree" org-agenda-skip-subtree-if)) (repeat :inline t :tag "Conditions for skipping" (choice :tag "Condition type" (list :tag "Regexp matches" :inline t (const :format "" (quote regexp)) (regexp)) (list :tag "Regexp does not match" :inline t (const :format "" (quote notregexp)) (regexp)) (list :tag "TODO state is" :inline t (const (quote todo)) (choice (const :tag "Any not-done state" (quote todo)) (const :tag "Any done state" (quote done)) (const :tag "Any state" (quote any)) (list :tag "Keyword list" (const :format "" quote) (repeat (string :tag "Keyword"))))) (list :tag "TODO state is not" :inline t (const (quote nottodo)) (choice (const :tag "Any not-done state" (quote todo)) (const :tag "Any done state" (quote done)) (const :tag "Any state" (quote any)) (list :tag "Keyword list" (const :format "" quote) (repeat (string :tag "Keyword"))))) (const :tag "scheduled" (quote scheduled)) (const :tag "not scheduled" (quote notscheduled)) (const :tag "deadline" (quote deadline)) (const :tag "no deadline" (quote notdeadline)) (const :tag "timestamp" (quote timestamp)) (const :tag "no timestamp" (quote nottimestamp))))))) (list :tag "Non-standard skipping condition" :value (org-agenda-skip-function) (const org-agenda-skip-function) (sexp :tag "Function or form (quoted!)")) (list :tag "Any variable" (variable :tag "Variable") (sexp :tag "Value (sexp)"))))))
                nil [12740 17209])
            ("org-agenda-custom-commands" variable (:default-value (quote (("n" "Agenda and all TODOs" ((agenda "") (alltodo "")))))) nil [17212 23328])
            ("org-agenda-query-register" variable (:default-value 111) nil [23330 23600])
            ("org-stuck-projects" variable (:default-value (quote ("+LEVEL=2/-DONE" ("TODO" "NEXT" "NEXTACTION") nil ""))) nil [23602 25554])
            ("org-agenda-skip" customgroup (:user-visible-flag t) nil [25556 25687])
            ("org-agenda-skip-function-global" variable nil nil [25689 26459])
            ("org-agenda-daily/weekly" customgroup (:user-visible-flag t) nil [26461 26601])
            ("org-agenda-todo-list" customgroup (:user-visible-flag t) nil [26602 26745])
            ("org-agenda-match-view" customgroup (:user-visible-flag t) nil [26746 26907])
            ("org-agenda-search-view" customgroup (:user-visible-flag t) nil [26908 27045])
            ("org-agenda-archives-mode" variable nil nil [27047 27382])
            ("org-agenda-restriction-lock-highlight-subtree" variable (:default-value t) nil [27384 27692])
            ("org-agenda-skip-comment-trees" variable (:default-value t) nil [27694 27905])
            ("org-agenda-todo-list-sublevels" variable (:default-value t) nil [27907 28209])
            ("org-agenda-todo-ignore-with-date" variable nil nil [28211 28772])
            ("org-agenda-todo-ignore-timestamp" variable nil nil [28774 30423])
            ("org-agenda-todo-ignore-scheduled" variable nil nil [30425 31791])
            ("org-agenda-todo-ignore-deadlines" variable nil nil [31793 33544])
            ("org-agenda-todo-ignore-time-comparison-use-seconds" variable nil nil [33546 34228])
            ("org-agenda-tags-todo-honor-ignore-options" variable nil nil [34230 34887])
            ("org-agenda-skip-scheduled-if-done" variable nil nil [34889 35312])
            ("org-agenda-skip-scheduled-if-deadline-is-shown" variable nil nil [35314 36282])
            ("org-agenda-skip-timestamp-if-deadline-is-shown" variable nil nil [36284 36906])
            ("org-agenda-skip-deadline-if-done" variable nil nil [36908 37379])
            ("org-agenda-skip-deadline-prewarning-if-scheduled" variable nil nil [37381 38520])
            ("org-agenda-skip-scheduled-delay-if-deadline" variable nil nil [38522 39307])
            ("org-agenda-skip-additional-timestamps-same-entry" variable nil nil [39309 39616])
            ("org-agenda-skip-timestamp-if-done" variable nil nil [39618 39818])
            ("org-agenda-dim-blocked-tasks" variable (:default-value t) nil [39820 40889])
            ("org-timeline-show-empty-dates" variable (:default-value 3) nil [40891 41394])
            ("org-agenda-startup" customgroup (:user-visible-flag t) nil [41396 41545])
            ("org-agenda-menu-show-matcher" variable (:default-value t) nil [41547 41992])
            ("org-agenda-menu-two-columns" variable nil nil [41994 42252])
            ("org-agenda-finalize-hook" variable nil nil [42254 42627])
            ("org-agenda-mouse-1-follows-link" variable nil nil [42629 42879])
            ("org-agenda-start-with-follow-mode" variable nil nil [42881 43047])
            ("org-agenda-follow-indirect" variable nil nil [43049 43252])
            ("org-agenda-show-outline-path" variable (:default-value t) nil [43254 43410])
            ("org-agenda-start-with-entry-text-mode" variable nil nil [43412 43586])
            ("org-agenda-entry-text-maxlines" variable (:default-value 5) nil [43588 43907])
            ("org-agenda-entry-text-exclude-regexps" variable nil nil [43909 44193])
            ("org-agenda-entry-text-leaders" variable (:default-value "    > ") nil [44195 44390])
            ("org-agenda-entry-text-cleanup-hook" variable nil nil [44392 44828])
            ("org-agenda-include-inactive-timestamps" variable nil nil [44830 44972])
            ("org-agenda-windows" customgroup (:user-visible-flag t) nil [44974 45123])
            ("org-agenda-window-setup" variable (:default-value (quote reorganize-frame)) nil [45125 45962])
            ("org-agenda-window-frame-fractions" variable (:default-value (quote (0.5 . 0.75))) nil [45964 46338])
            ("org-agenda-restore-windows-after-quit" variable nil nil [46340 46793])
            ("org-agenda-span" variable (:default-value (quote week)) nil [46795 47221])
            ("org-agenda-start-on-weekday" variable (:default-value 1) nil [47223 47589])
            ("org-agenda-show-all-dates" variable (:default-value t) nil [47591 47814])
            ("org-agenda-format-date" variable (:default-value (quote org-agenda-format-date-aligned)) nil [47816 48321])
            ("org-agenda-format-date-aligned" function (:arguments ("date")) nil [48323 49109])
            ("org-agenda-time-leading-zero" variable nil nil [49111 49347])
            ("org-agenda-timegrid-use-ampm" variable nil nil [49349 49508])
            ("org-agenda-time-of-day-to-ampm" function (:arguments ("time")) nil [49510 50069])
            ("org-agenda-time-of-day-to-ampm-maybe" function (:arguments ("time")) nil [50071 50299])
            ("org-agenda-weekend-days" variable (:default-value (quote (6 0))) nil [50301 50749])
            ("org-agenda-move-date-from-past-immediately-to-today" variable (:default-value t) nil [50751 51182])
            ("org-agenda-include-diary" variable nil nil [51184 51416])
            ("org-agenda-include-deadlines" variable (:default-value t) nil [51418 51661])
            ("org-agenda-repeating-timestamp-show-all" variable (:default-value t) nil [51663 52217])
            ("org-scheduled-past-days" variable (:default-value 10000) nil [52219 52539])
            ("org-agenda-log-mode-items" variable (:default-value (quote (closed clock))) nil [52541 53176])
            ("org-agenda-clock-consistency-checks" variable (:default-value (quote (:max-duration "10:00" :min-duration 0 :max-gap "0:05" :gap-ok-around ("4:00") :default-face ((:background "DarkRed") (:foreground "white")) :overlap-face nil :gap-face nil :no-end-time-face nil :long-face nil :short-face nil))) nil [53178 55229])
            ("org-agenda-log-mode-add-notes" variable (:default-value t) nil [55231 55556])
            ("org-agenda-start-with-log-mode" variable nil nil [55558 56242])
            ("org-agenda-start-with-clockreport-mode" variable nil nil [56244 56454])
            ("org-agenda-clockreport-parameter-plist" variable (:default-value (quote (:link t :maxlevel 2))) nil [56456 57019])
            ("org-agenda-search-view-always-boolean" variable nil nil [57021 58275])
            ("defvaralias" code nil nil [58277 58373])
            ("org-agenda-search-view-force-full-words" variable nil nil [58375 58611])
            ("org-agenda-search-view-max-outline-level" variable nil nil [58613 58980])
            ("org-agenda-time-grid" customgroup (:user-visible-flag t) nil [58982 59124])
            ("org-agenda-search-headline-for-time" variable (:default-value t) nil [59126 59646])
            ("org-agenda-use-time-grid" variable (:default-value t) nil [59648 60089])
            ("org-agenda-time-grid" variable (:default-value (quote ((daily today require-timed) "----------------" (800 1000 1200 1400 1600 1800 2000)))) nil [60091 61397])
            ("org-agenda-show-current-time-in-grid" variable (:default-value t) nil [61399 61573])
            ("org-agenda-current-time-string" variable (:default-value "now - - - - - - - - - - - - - - - - - - - - - - - - -") nil [61575 61798])
            ("org-agenda-sorting" customgroup (:user-visible-flag t) nil [61800 61932])
            ("org-agenda-sorting-strategy" variable (:default-value (quote ((agenda habit-down time-up priority-down category-keep) (todo priority-down category-keep) (tags priority-down category-keep) (search category-keep)))) nil [61934 65664])
            ("org-agenda-cmp-user-defined" variable nil nil [65666 66089])
            ("org-sort-agenda-notime-is-late" variable (:default-value t) nil [66091 66563])
            ("org-sort-agenda-noeffort-is-high" variable (:default-value t) nil [66565 66956])
            ("org-agenda-line-format" customgroup (:user-visible-flag t) nil [66958 67115])
            ("org-agenda-prefix-format" variable (:default-value (quote ((agenda . " %i %-12:c%?-12t% s") (timeline . "  % s") (todo . " %i %-12:c") (tags . " %i %-12:c") (search . " %i %-12:c")))) nil [67117 70240])
            ("org-prefix-format-compiled" variable nil nil [70242 70505])
            ("org-agenda-todo-keyword-format" variable (:default-value "%-1s") nil [70507 70768])
            ("org-agenda-diary-sexp-prefix" variable nil nil [70770 71139])
            ("org-agenda-timerange-leaders" variable (:default-value (quote ("" "(%d/%d): "))) nil [71141 71738])
            ("org-agenda-scheduled-leaders" variable (:default-value (quote ("Scheduled: " "Sched.%2dx: "))) nil [71740 72468])
            ("org-agenda-inactive-leader" variable (:default-value "[") nil [72470 72710])
            ("org-agenda-deadline-leaders" variable (:default-value (quote ("Deadline:  " "In %3d d.: " "%2d d. ago: "))) nil [72712 73342])
            ("org-agenda-remove-times-when-in-prefix" variable (:default-value t) nil [73344 74179])
            ("org-agenda-remove-timeranges-from-blocks" variable nil nil [74181 74400])
            ("org-agenda-default-appointment-duration" variable nil nil [74402 74766])
            ("org-agenda-show-inherited-tags" variable (:default-value t) nil [74768 75734])
            ("org-agenda-use-tag-inheritance" variable (:default-value (quote (todo search timeline agenda))) nil [75736 76710])
            ("org-agenda-hide-tags-regexp" variable nil nil [76712 77111])
            ("org-agenda-remove-tags" variable nil nil [77113 77495])
            ("defvaralias" code nil nil [77497 77575])
            ("org-agenda-tags-column" variable (:default-value -80) nil [77577 77908])
            ("defvaralias" code nil nil [77910 77980])
            ("org-agenda-fontify-priorities" variable (:default-value (quote cookies)) nil [77982 79066])
            ("org-agenda-day-face-function" variable nil nil [79068 79435])
            ("org-agenda-category-icon-alist" variable nil nil [79437 80734])
            ("org-agenda-column-view" customgroup (:user-visible-flag t) nil [80736 80876])
            ("org-agenda-view-columns-initially" variable nil nil [80878 81122])
            ("org-agenda-columns-show-summaries" variable (:default-value t) nil [81124 81296])
            ("org-agenda-columns-compute-summary-properties" variable (:default-value t) nil [81298 81821])
            ("org-agenda-columns-add-appointments-to-effort-sum" variable nil nil [81823 82320])
            ("org-agenda-auto-exclude-function" variable nil nil [82322 82971])
            ("org-agenda-bulk-custom-functions" variable nil nil [82973 83474])
            ("org-agenda-with-point-at-orig-entry" function (:arguments ("string" "body")) nil [83476 84027])
            ("def-edebug-spec" code nil nil [84028 84093])
            ("org-add-agenda-custom-command" function (:arguments ("entry")) nil [84095 84497])
            ("org-agenda-mode-map" variable (:default-value (make-sparse-keymap)) nil [84531 84614])
            ("defvaralias" code nil nil [84615 84668])
            ("org-agenda-menu" variable nil nil [84670 84694])
            ("org-agenda-restrict" variable nil nil [84725 84757])
            ("org-agenda-follow-mode" variable nil nil [84788 84823])
            ("org-agenda-entry-text-mode" variable nil nil [84824 84863])
            ("org-agenda-clockreport-mode" variable nil nil [84864 84904])
            ("org-agenda-show-log" variable nil nil [84905 84937])
            ("org-agenda-redo-command" variable nil nil [84938 84974])
            ("org-agenda-query-string" variable nil nil [84975 85011])
            ("org-agenda-mode-hook" variable nil nil [85012 85151])
            ("org-agenda-type" variable nil nil [85152 85180])
            ("org-agenda-force-single-file" variable nil nil [85181 85222])
            ("org-agenda-bulk-marked-entries" variable nil nil [85223 85330])
            ("org-agenda-current-date" variable nil nil [85331 85409])
            ("org-agenda-sticky" variable nil nil [85448 85723])
            ("org-toggle-sticky-agenda" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [85742 86352])
            ("org-agenda-buffer" variable nil nil [86354 86429])
            ("org-agenda-last-prefix-arg" variable nil nil [86431 86470])
            ("org-agenda-this-buffer-name" variable nil nil [86471 86511])
            ("org-agenda-doing-sticky-redo" variable nil nil [86512 86553])
            ("org-agenda-this-buffer-is-sticky" variable nil nil [86554 86599])
            ("org-agenda-last-indirect-buffer" variable nil nil [86600 86708])
            ("org-agenda-local-vars" variable
               (:constant-flag t
                :default-value (quote (org-agenda-this-buffer-name org-agenda-undo-list org-agenda-pending-undo-list org-agenda-follow-mode org-agenda-entry-text-mode org-agenda-clockreport-mode org-agenda-show-log org-agenda-redo-command org-agenda-query-string org-agenda-type org-agenda-bulk-marked-entries org-agenda-undo-has-started-in org-agenda-info org-agenda-pre-window-conf org-agenda-columns-active org-agenda-tag-filter org-agenda-category-filter org-agenda-top-headline-filter org-agenda-regexp-filter org-agenda-effort-filter org-agenda-markers org-agenda-last-search-view-search-was-boolean org-agenda-last-indirect-buffer org-agenda-filtered-by-category org-agenda-filter-form org-agenda-cycle-counter org-agenda-last-prefix-arg)))
                nil [86710 87635])
            ("org-agenda-mode" function (:user-visible-flag t) nil [87637 90380])
            ("substitute-key-definition" code nil nil [90382 90469])
            ("org-defkey" code nil nil [90470 90530])
            ("org-defkey" code nil nil [90531 90591])
            ("org-defkey" code nil nil [90592 90657])
            ("org-defkey" code nil nil [90658 90718])
            ("org-defkey" code nil nil [90719 90781])
            ("org-defkey" code nil nil [90782 90858])
            ("org-defkey" code nil nil [90859 90934])
            ("org-defkey" code nil nil [90935 91000])
            ("org-defkey" code nil nil [91001 91068])
            ("org-defkey" code nil nil [91069 91138])
            ("org-defkey" code nil nil [91139 91210])
            ("org-defkey" code nil nil [91211 91284])
            ("org-defkey" code nil nil [91285 91357])
            ("org-defkey" code nil nil [91358 91425])
            ("org-defkey" code nil nil [91426 91497])
            ("org-defkey" code nil nil [91498 91565])
            ("org-defkey" code nil nil [91566 91629])
            ("org-defkey" code nil nil [91630 91699])
            ("org-defkey" code nil nil [91700 91756])
            ("org-defkey" code nil nil [91757 91832])
            ("org-defkey" code nil nil [91833 91911])
            ("org-defkey" code nil nil [91912 91998])
            ("org-defkey" code nil nil [91999 92066])
            ("org-defkey" code nil nil [92067 92134])
            ("org-defkey" code nil nil [92135 92198])
            ("org-defkey" code nil nil [92199 92264])
            ("org-defkey" code nil nil [92265 92339])
            ("org-defkey" code nil nil [92340 92413])
            ("org-defkey" code nil nil [92414 92480])
            ("org-defkey" code nil nil [92481 92562])
            ("org-defkey" code nil nil [92563 92648])
            ("org-defkey" code nil nil [92649 92729])
            ("org-defkey" code nil nil [92730 92795])
            ("org-defkey" code nil nil [92796 92860])
            ("org-defkey" code nil nil [92861 92921])
            ("org-defkey" code nil nil [92922 92982])
            ("org-defkey" code nil nil [92983 93072])
            ("org-defkey" code nil nil [93073 93137])
            ("org-defkey" code nil nil [93138 93202])
            ("org-defkey" code nil nil [93203 93269])
            ("org-defkey" code nil nil [93270 93335])
            ("org-defkey" code nil nil [93336 93400])
            ("org-defkey" code nil nil [93401 93466])
            ("org-defkey" code nil nil [93467 93532])
            ("org-defkey" code nil nil [93533 93597])
            ("org-defkey" code nil nil [93598 93662])
            ("org-defkey" code nil nil [93663 93737])
            ("org-defkey" code nil nil [93738 93813])
            ("org-defkey" code nil nil [93814 93894])
            ("org-defkey" code nil nil [93895 93976])
            ("org-defkey" code nil nil [93978 94038])
            ("org-defkey" code nil nil [94039 94103])
            ("org-defkey" code nil nil [94104 94168])
            ("let" code nil nil [94169 94297])
            ("org-defkey" code nil nil [94299 94359])
            ("org-defkey" code nil nil [94360 94425])
            ("org-defkey" code nil nil [94426 94490])
            ("org-defkey" code nil nil [94491 94548])
            ("org-defkey" code nil nil [94549 94616])
            ("org-defkey" code nil nil [94617 94678])
            ("org-defkey" code nil nil [94679 94744])
            ("org-defkey" code nil nil [94745 94810])
            ("org-defkey" code nil nil [94811 94864])
            ("org-defkey" code nil nil [94865 94947])
            ("org-defkey" code nil nil [94948 95007])
            ("org-defkey" code nil nil [95008 95075])
            ("org-defkey" code nil nil [95076 95162])
            ("org-defkey" code nil nil [95163 95232])
            ("org-defkey" code nil nil [95233 95286])
            ("org-defkey" code nil nil [95287 95340])
            ("org-defkey" code nil nil [95341 95394])
            ("org-defkey" code nil nil [95395 95456])
            ("org-defkey" code nil nil [95457 95526])
            ("org-defkey" code nil nil [95527 95589])
            ("org-defkey" code nil nil [95590 95648])
            ("org-defkey" code nil nil [95649 95707])
            ("org-defkey" code nil nil [95708 95770])
            ("org-defkey" code nil nil [95771 95829])
            ("org-defkey" code nil nil [95830 95892])
            ("substitute-key-definition" code nil nil [95893 95990])
            ("substitute-key-definition" code nil nil [95991 96096])
            ("org-defkey" code nil nil [96097 96152])
            ("org-defkey" code nil nil [96153 96223])
            ("org-defkey" code nil nil [96224 96298])
            ("org-defkey" code nil nil [96299 96360])
            ("org-defkey" code nil nil [96361 96418])
            ("org-defkey" code nil nil [96419 96479])
            ("org-defkey" code nil nil [96480 96542])
            ("org-defkey" code nil nil [96543 96604])
            ("org-defkey" code nil nil [96605 96668])
            ("org-defkey" code nil nil [96669 96732])
            ("org-defkey" code nil nil [96733 96790])
            ("org-defkey" code nil nil [96791 96848])
            ("org-defkey" code nil nil [96849 96917])
            ("org-defkey" code nil nil [96918 96975])
            ("org-defkey" code nil nil [96976 97045])
            ("org-defkey" code nil nil [97046 97104])
            ("org-defkey" code nil nil [97105 97177])
            ("org-defkey" code nil nil [97178 97239])
            ("org-defkey" code nil nil [97240 97303])
            ("org-defkey" code nil nil [97304 97363])
            ("org-defkey" code nil nil [97364 97424])
            ("org-defkey" code nil nil [97425 97487])
            ("org-defkey" code nil nil [97488 97557])
            ("org-defkey" code nil nil [97558 97631])
            ("org-defkey" code nil nil [97632 97707])
            ("org-defkey" code nil nil [97708 97787])
            ("org-defkey" code nil nil [97788 97842])
            ("org-defkey" code nil nil [97843 97899])
            ("org-defkey" code nil nil [97900 97967])
            ("org-defkey" code nil nil [97968 98048])
            ("org-defkey" code nil nil [98050 98119])
            ("org-defkey" code nil nil [98120 98194])
            ("org-defkey" code nil nil [98195 98267])
            ("org-defkey" code nil nil [98268 98345])
            ("org-defkey" code nil nil [98346 98408])
            ("org-defkey" code nil nil [98409 98474])
            ("org-defkey" code nil nil [98475 98540])
            ("org-defkey" code nil nil [98541 98607])
            ("org-defkey" code nil nil [98608 98676])
            ("org-defkey" code nil nil [98677 98744])
            ("org-defkey" code nil nil [98745 98816])
            ("org-defkey" code nil nil [98817 98874])
            ("define-key" code nil nil [98875 98946])
            ("org-defkey" code nil nil [98947 99015])
            ("org-defkey" code nil nil [99016 99084])
            ("org-defkey" code nil nil [99086 99151])
            ("org-defkey" code nil nil [99152 99217])
            ("define-key" code nil nil [99219 99303])
            ("define-key" code nil nil [99304 99390])
            ("when" code nil nil [99392 99491])
            ("easy-menu-define" code nil nil [99492 106748])
            ("org-agenda-allow-remote-undo" variable (:default-value t) nil [106767 106866])
            ("org-agenda-undo-has-started-in" variable nil nil [106867 106988])
            ("org-agenda-undo" function (:user-visible-flag t) nil [106990 108309])
            ("org-verify-change-for-undo" function (:arguments ("l1" "l2")) nil [108311 108555])
            ("org-agenda-restrict-begin" variable (:default-value (make-marker)) nil [108578 108626])
            ("org-agenda-restrict-end" variable (:default-value (make-marker)) nil [108627 108673])
            ("org-agenda-last-dispatch-buffer" variable nil nil [108674 108718])
            ("org-agenda-overriding-restriction" variable nil nil [108719 108765])
            ("org-agenda-custom-commands-contexts" variable nil nil [108767 110569])
            ("org-agenda-max-entries" variable nil nil [110571 111159])
            ("org-agenda-max-todos" variable nil nil [111161 111741])
            ("org-agenda-max-tags" variable nil nil [111743 112349])
            ("org-agenda-max-effort" variable nil nil [112351 112971])
            ("org-agenda-keep-restricted-file-list" variable nil nil [112973 113022])
            ("org-keys" variable nil nil [113023 113044])
            ("org-match" variable nil nil [113045 113067])
            ("org-agenda" function
               (:user-visible-flag t
                :arguments ("arg" "org-keys" "restriction"))
                nil [113083 121208])
            ("org-agenda-multi" variable nil nil [121210 121235])
            ("org-agenda-append-agenda" function (:user-visible-flag t) nil [121237 121719])
            ("org-agenda-normalize-custom-commands" function (:arguments ("cmds")) nil [121721 122010])
            ("org-agenda-get-restriction-and-command" function (:arguments ("prefix-descriptions")) nil [122012 128637])
            ("org-agenda-fit-window-to-buffer" function nil nil [128639 129137])
            ("org-cmd" variable nil nil [129139 129159])
            ("org-agenda-overriding-cmd" variable nil nil [129160 129198])
            ("org-agenda-overriding-arguments" variable nil nil [129199 129243])
            ("org-agenda-overriding-cmd-arguments" variable nil nil [129244 129292])
            ("org-agenda-run-series" function (:arguments ("name" "series")) nil [129293 131346])
            ("org-batch-agenda" function (:arguments ("cmd-key" "parameters")) nil [131363 132027])
            ("org-agenda-info" variable nil nil [132029 132057])
            ("org-batch-agenda-csv" function (:arguments ("cmd-key" "parameters")) nil [132074 134524])
            ("org-fix-agenda-info" function (:arguments ("props")) nil [134526 135970])
            ("org-agenda-export-csv-mapper" function (:arguments ("prop")) nil [135972 136222])
            ("org-store-agenda-views" function
               (:user-visible-flag t
                :arguments ("parameters"))
                nil [136239 136374])
            ("org-batch-store-agenda-views" function (:arguments ("parameters")) nil [136391 137682])
            ("org-agenda-current-span" variable nil nil [137684 137766])
            ("org-agenda-mark-header-line" function (:arguments ("pos")) nil [137805 138180])
            ("org-mobile-creating-agendas" variable nil nil [138182 138218])
            ("org-agenda-write-buffer-name" variable (:default-value "Agenda View") nil [138246 138297])
            ("org-agenda-write" function
               (:user-visible-flag t
                :arguments ("file" "open" "nosettings" "agenda-bufname"))
                nil [138298 142184])
            ("org-agenda-remove-marked-text" function (:arguments ("property" "value")) nil [142186 142554])
            ("org-agenda-add-entry-text" function nil nil [142556 143309])
            ("org-agenda-get-some-entry-text" function (:arguments ("marker" "n-lines" "indent" "keep")) nil [143311 146380])
            ("org-check-for-org-mode" function nil nil [146382 146592])
            ("org-agenda-multi" variable nil nil [146627 146656])
            ("org-agenda-pre-window-conf" variable nil nil [146679 146718])
            ("org-agenda-columns-active" variable nil nil [146719 146757])
            ("org-agenda-name" variable nil nil [146758 146786])
            ("org-agenda-tag-filter" variable nil nil [146787 146821])
            ("org-agenda-category-filter" variable nil nil [146822 146861])
            ("org-agenda-regexp-filter" variable nil nil [146862 146899])
            ("org-agenda-effort-filter" variable nil nil [146900 146937])
            ("org-agenda-top-headline-filter" variable nil nil [146938 146981])
            ("org-agenda-tag-filter-preset" variable nil nil [146982 147546])
            ("org-agenda-category-filter-preset" variable nil nil [147548 148126])
            ("org-agenda-regexp-filter-preset" variable nil nil [148128 148700])
            ("org-agenda-effort-filter-preset" variable nil nil [148702 149277])
            ("org-agenda-use-sticky-p" function nil nil [149279 150020])
            ("org-agenda-prepare-window" function (:arguments ("abuf" "filter-alist")) nil [150022 151502])
            ("org-agenda-prepare" function (:arguments ("name")) nil [151504 154106])
            ("org-agenda-overriding-columns-format" variable nil nil [154108 154153])
            ("org-agenda-finalize" function nil nil [154177 157458])
            ("org-agenda-mark-clocking-task" function nil nil [157460 158338])
            ("org-agenda-unmark-clocking-task" function nil nil [158340 158563])
            ("org-agenda-fontify-priorities" function (:user-visible-flag t) nil [158565 159827])
            ("org-depend-tag-blocked" variable nil nil [159829 159860])
            ("org-agenda-dim-blocked-tasks" function
               (:user-visible-flag t
                :arguments ("invisible"))
                nil [159862 161508])
            ("org-agenda-skip-function" variable nil nil [161510 162242])
            ("org-agenda-skip" function nil nil [162244 162970])
            ("org-agenda-skip-eval" function (:arguments ("form")) nil [162972 163421])
            ("org-agenda-markers" variable nil nil [163423 163520])
            ("org-agenda-last-marker-time" variable (:default-value (float-time)) nil [163521 163615])
            ("org-agenda-new-marker" function (:arguments ("pos")) nil [163617 164061])
            ("org-agenda-reset-markers" function nil nil [164063 164217])
            ("org-agenda-save-markers-for-cut-and-paste" function (:arguments ("beg" "end")) nil [164219 164590])
            ("org-agenda-entry-text-show-here" function nil nil [164613 165266])
            ("org-agenda-entry-text-show" function (:user-visible-flag t) nil [165268 165571])
            ("org-agenda-entry-text-hide" function nil nil [165573 165834])
            ("org-agenda-get-day-face" function (:arguments ("date")) nil [165836 166197])
            ("org-agenda-only-exact-dates" variable nil nil [166220 166260])
            ("org-agenda-show-log-scoped" variable nil nil [166282 166317])
            ("org-timeline" function
               (:user-visible-flag t
                :arguments ("dotodo"))
                nil [166379 169985])
            ("org-get-all-dates" function (:arguments ("beg" "end" "no-ranges" "force-today" "inactive" "empty" "pre-re")) nil [169987 171824])
            ("org-agenda-start-day" variable nil nil [171851 172190])
            ("org-starting-day" variable nil nil [172191 172220])
            ("org-arg-loc" variable nil nil [172259 172283])
            ("org-agenda-buffer-tmp-name" variable nil nil [172302 172341])
            ("org-agenda-list" function
               (:user-visible-flag t
                :arguments ("arg" "start-day" "span" "with-hour"))
                nil [172357 180306])
            ("org-agenda-ndays-to-span" function (:arguments ("n")) nil [180308 180501])
            ("org-agenda-span-to-ndays" function (:arguments ("span" "start-day")) nil [180503 181037])
            ("org-agenda-span-name" function (:arguments ("span")) nil [181039 181213])
            ("org-agenda-search-history" variable nil nil [181239 181277])
            ("org-search-syntax-table" variable nil nil [181279 181497])
            ("org-mode-syntax-table" variable nil nil [181499 181529])
            ("org-search-syntax-table" function nil nil [181544 181830])
            ("org-agenda-last-search-view-search-was-boolean" variable nil nil [181832 181891])
            ("org-search-view" function
               (:user-visible-flag t
                :arguments ("todo-only" "string" "edit-at"))
                nil [181908 193295])
            ("org-agenda-propertize-selected-todo-keywords" function (:arguments ("keywords")) nil [193319 193696])
            ("org-select-this-todo-keyword" variable nil nil [193698 193739])
            ("org-last-arg" variable nil nil [193740 193765])
            ("org-todo-list" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [193782 197132])
            ("org-tags-view" function
               (:user-visible-flag t
                :arguments ("todo-only" "match"))
                nil [197172 200749])
            ("org-agenda-skip-regexp" variable nil nil [200786 201023])
            ("org-agenda-overriding-header" variable nil nil [201025 201239])
            ("org-agenda-skip-entry-when-regexp-matches" function nil nil [201241 201772])
            ("org-agenda-skip-subtree-when-regexp-matches" function nil nil [201774 202270])
            ("org-agenda-skip-entry-when-regexp-matches-in-subtree" function nil nil [202272 202976])
            ("org-agenda-skip-entry-if" function (:arguments ("conditions")) nil [202978 203150])
            ("org-agenda-skip-subtree-if" function (:arguments ("conditions")) nil [203152 203326])
            ("org-agenda-skip-if" function (:arguments ("subtree" "conditions")) nil [203328 206288])
            ("org-agenda-skip-if-todo" function (:arguments ("args" "end")) nil [206290 207728])
            ("org-agenda-list-stuck-projects" function
               (:user-visible-flag t
                :arguments ("ignore"))
                nil [207745 209854])
            ("org-disable-agenda-to-diary" variable nil nil [209879 209919])
            ("diary-list-entries-hook" variable nil nil [209956 209988])
            ("diary-time-regexp" variable nil nil [209989 210015])
            ("org-get-entries-from-diary" function (:arguments ("date")) nil [210016 211930])
            ("org-agenda-cleanup-fancy-diary-hook" variable nil nil [211932 212036])
            ("org-agenda-cleanup-fancy-diary" function nil nil [212038 212912])
            ("eval-after-load" code nil nil [212982 213469])
            ("org-modify-diary-entry-string" function (:arguments ("string")) nil [213471 213861])
            ("org-diary-default-entry" function nil nil [213863 214261])
            ("org-add-to-diary-list" function (:arguments ("args")) nil [214263 214415])
            ("org-diary-last-run-time" variable nil nil [214417 214453])
            ("org-diary" function (:arguments ("args")) nil [214470 216832])
            ("org-agenda--timestamp-to-absolute" function (:arguments ("args")) nil [216860 217230])
            ("org-agenda-get-day-entries" function (:arguments ("file" "date" "args")) nil [217232 219819])
            ("org-em" function (:arguments ("x" "y" "list")) nil [219821 219916])
            ("org-heading-keyword-regexp-format" variable nil nil [219918 219960])
            ("org-agenda-sorting-strategy-selected" variable nil nil [219981 220030])
            ("org-agenda-entry-get-agenda-timestamp" function (:arguments ("pom")) nil [220032 221419])
            ("org-agenda-get-todos" function nil nil [221421 224259])
            ("org-agenda-todo-custom-ignore-p" function (:arguments ("time" "n")) nil [224261 224689])
            ("org-agenda-check-for-timestamp-as-reason-to-ignore-todo-item" function (:arguments ("end")) nil [224706 227699])
            ("org-agenda-get-timestamps" function (:arguments ("deadlines")) nil [227701 232761])
            ("org-agenda-get-sexps" function nil nil [232763 234896])
            ("org-anniversary" function (:arguments ("year" "month" "day" "mark")) nil [234990 235222])
            ("org-cyclic" function (:arguments ("N" "year" "month" "day" "mark")) nil [235223 235444])
            ("org-block" function (:arguments ("Y1" "M1" "D1" "Y2" "M2" "D2" "mark")) nil [235445 235665])
            ("org-date" function (:arguments ("year" "month" "day" "mark")) nil [235666 235877])
            ("org-class" function (:arguments ("y1" "m1" "d1" "y2" "m2" "d2" "dayname" "skip-weeks")) nil [235914 237015])
            ("defalias" code nil nil [237017 237068])
            ("org-agenda-get-progress" function nil nil [237069 241202])
            ("org-agenda-show-clocking-issues" function (:user-visible-flag t) nil [241204 244403])
            ("org-agenda-check-clock-gap" function (:arguments ("t1" "t2" "ok-list")) nil [244405 245638])
            ("org-agenda-get-deadlines" function (:arguments ("with-hour")) nil [245640 251886])
            ("org-agenda-deadline-face" function (:arguments ("fraction")) nil [251888 252103])
            ("org-agenda-get-scheduled" function (:arguments ("deadlines" "with-hour")) nil [252105 259569])
            ("org-agenda-get-blocks" function nil nil [259571 262638])
            ("org-prefix-has-time" variable nil nil [262677 262823])
            ("org-prefix-has-tag" variable nil nil [262824 262969])
            ("org-prefix-has-effort" variable nil nil [262970 263118])
            ("org-prefix-has-breadcrumbs" variable nil nil [263119 263272])
            ("org-prefix-category-length" variable nil nil [263273 263390])
            ("org-prefix-category-max-length" variable nil nil [263391 263512])
            ("org-agenda-get-category-icon" function (:arguments ("category")) nil [263514 263851])
            ("org-agenda-format-item" function (:arguments ("extra" "txt" "level" "category" "tags" "dotime" "remove-re" "habitp")) nil [263853 270596])
            ("org-agenda-fix-displayed-tags" function (:arguments ("txt" "tags" "add-inherited" "hide-re")) nil [270598 271589])
            ("org-downcase-keep-props" function (:arguments ("s")) nil [271591 271748])
            ("org-agenda-sorting-strategy" variable nil nil [271750 271786])
            ("org-agenda-add-time-grid-maybe" function (:arguments ("list" "ndays" "todayp")) nil [271824 273522])
            ("org-compile-prefix-format" function (:arguments ("key")) nil [273524 276091])
            ("org-set-sorting-strategy" function (:arguments ("key")) nil [276093 276487])
            ("org-get-time-of-day" function (:arguments ("s" "string" "mod24")) nil [276489 277718])
            ("org-agenda-before-sorting-filter-function" variable nil nil [277720 278663])
            ("org-agenda-finalize-entries" function (:arguments ("list" "type")) nil [278665 280106])
            ("org-agenda-limit-entries" function (:arguments ("list" "prop" "limit" "fn")) nil [280108 280610])
            ("org-agenda-limit-interactively" function
               (:user-visible-flag t
                :arguments ("remove"))
                nil [280612 281652])
            ("org-agenda-highlight-todo" function (:arguments ("x")) nil [281654 283455])
            ("org-cmp-values" function (:arguments ("a" "b" "property")) nil [283457 283737])
            ("org-cmp-effort" function (:arguments ("a" "b")) nil [283739 284226])
            ("org-cmp-category" function (:arguments ("a" "b")) nil [284228 284532])
            ("org-cmp-todo-state" function (:arguments ("a" "b")) nil [284534 285415])
            ("org-cmp-alpha" function (:arguments ("a" "b")) nil [285417 286260])
            ("org-cmp-tag" function (:arguments ("a" "b")) nil [286262 286557])
            ("org-cmp-time" function (:arguments ("a" "b")) nil [286559 286854])
            ("org-cmp-ts" function (:arguments ("a" "b" "type")) nil [286856 287509])
            ("org-cmp-habit-p" function (:arguments ("a" "b")) nil [287511 287746])
            ("org-entries-lessp" function (:arguments ("a" "b")) nil [287748 290650])
            ("org-agenda-restriction-lock-overlay" variable (:default-value (make-overlay 1 1)) nil [290681 290818])
            ("overlay-put" code nil nil [290819 290909])
            ("overlay-put" code nil nil [290910 291025])
            ("delete-overlay" code nil nil [291026 291078])
            ("org-agenda-set-restriction-lock" function
               (:user-visible-flag t
                :arguments ("type"))
                nil [291095 292734])
            ("org-agenda-remove-restriction-lock" function
               (:user-visible-flag t
                :arguments ("noupdate"))
                nil [292736 293303])
            ("org-agenda-maybe-redo" function nil nil [293305 293803])
            ("org-agenda-check-type" function (:arguments ("error" "types")) nil [293826 294257])
            ("org-agenda-Quit" function (:user-visible-flag t) nil [294259 294456])
            ("org-agenda-quit" function (:user-visible-flag t) nil [294458 294816])
            ("org-agenda--quit" function (:arguments ("bury")) nil [294818 296088])
            ("org-agenda-exit" function (:user-visible-flag t) nil [296090 296550])
            ("org-agenda-kill-all-agenda-buffers" function (:user-visible-flag t) nil [296552 296868])
            ("org-agenda-execute" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [296870 297140])
            ("org-agenda-redo" function
               (:user-visible-flag t
                :arguments ("all"))
                nil [297142 300225])
            ("org-global-tags-completion-table" variable nil nil [300227 300272])
            ("org-agenda-filter-form" variable nil nil [300273 300308])
            ("org-agenda-filtered-by-category" variable nil nil [300309 300353])
            ("org-agenda-filter-by-category" function
               (:user-visible-flag t
                :arguments ("strip"))
                nil [300355 301157])
            ("org-find-top-headline" function (:arguments ("pos")) nil [301159 301597])
            ("org-agenda-filtered-by-top-headline" variable nil nil [301599 301647])
            ("org-agenda-filter-by-top-headline" function
               (:user-visible-flag t
                :arguments ("strip"))
                nil [301648 302230])
            ("org-agenda-regexp-filter" variable nil nil [302232 302269])
            ("org-agenda-filter-by-regexp" function
               (:user-visible-flag t
                :arguments ("strip"))
                nil [302270 303008])
            ("org-agenda-effort-filter" variable nil nil [303010 303047])
            ("org-agenda-filter-by-effort" function
               (:user-visible-flag t
                :arguments ("strip"))
                nil [303048 304630])
            ("org-agenda-filter-remove-all" function (:user-visible-flag t) nil [304632 305135])
            ("org-agenda-filter-by-tag" function
               (:user-visible-flag t
                :arguments ("arg" "char" "exclude"))
                nil [305137 308211])
            ("org-agenda-get-represented-tags" function nil nil [308213 308562])
            ("org-agenda-filter-make-matcher" function (:arguments ("filter" "type" "expand")) nil [308565 310206])
            ("org-agenda-filter-make-matcher-tag-exp" function (:arguments ("tags" "op")) nil [310208 310981])
            ("org-agenda-filter-effort-form" function (:arguments ("e")) nil [310983 311417])
            ("org-agenda-compare-effort" function (:arguments ("op" "value")) nil [311419 311879])
            ("org-agenda-filter-expand-tags" function (:arguments ("filter" "no-operator")) nil [311881 312475])
            ("org-agenda-filter-apply" function (:arguments ("filter" "type" "expand")) nil [312477 313705])
            ("org-agenda-filter-top-headline-apply" function (:arguments ("hl" "negative")) nil [313707 314351])
            ("org-agenda-filter-hide-line" function (:arguments ("type")) nil [314353 314637])
            ("org-agenda-remove-filter" function (:arguments ("type")) nil [314639 315248])
            ("org-agenda-filter-show-all-tag" function nil nil [315250 315326])
            ("org-agenda-filter-show-all-re" function nil nil [315327 315405])
            ("org-agenda-filter-show-all-effort" function nil nil [315406 315488])
            ("org-agenda-filter-show-all-cat" function nil nil [315489 315570])
            ("org-agenda-filter-show-all-top-filter" function nil nil [315571 315663])
            ("org-agenda-manipulate-query-add" function (:user-visible-flag t) nil [315665 315910])
            ("org-agenda-manipulate-query-subtract" function (:user-visible-flag t) nil [315911 316161])
            ("org-agenda-manipulate-query-add-re" function (:user-visible-flag t) nil [316162 316409])
            ("org-agenda-manipulate-query-subtract-re" function (:user-visible-flag t) nil [316410 316662])
            ("org-agenda-manipulate-query" function (:arguments ("char")) nil [316663 317656])
            ("org-add-to-string" function (:arguments ("var" "string")) nil [317658 317743])
            ("org-agenda-goto-date" function
               (:user-visible-flag t
                :arguments ("span"))
                nil [317745 319008])
            ("org-agenda-goto-today" function (:user-visible-flag t) nil [319010 319670])
            ("org-agenda-find-same-or-today-or-agenda" function (:arguments ("cnt")) nil [319672 320096])
            ("org-agenda-backward-block" function (:user-visible-flag t) nil [320098 320228])
            ("org-agenda-forward-block" function
               (:user-visible-flag t
                :arguments ("backward"))
                nil [320230 321274])
            ("org-agenda-later" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [321276 322832])
            ("org-agenda-earlier" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [322834 323023])
            ("org-agenda-view-mode-dispatch" function (:user-visible-flag t) nil [323025 324584])
            ("org-agenda-reset-view" function (:user-visible-flag t) nil [324586 324721])
            ("org-agenda-day-view" function
               (:user-visible-flag t
                :arguments ("day-of-month"))
                nil [324723 324943])
            ("org-agenda-week-view" function
               (:user-visible-flag t
                :arguments ("iso-week"))
                nil [324945 325407])
            ("org-agenda-fortnight-view" function
               (:user-visible-flag t
                :arguments ("iso-week"))
                nil [325409 325886])
            ("org-agenda-month-view" function
               (:user-visible-flag t
                :arguments ("month"))
                nil [325888 326324])
            ("org-agenda-year-view" function
               (:user-visible-flag t
                :arguments ("year"))
                nil [326326 326779])
            ("org-agenda-change-time-span" function (:arguments ("span" "n")) nil [326781 327620])
            ("org-agenda-compute-starting-span" function (:arguments ("sd" "span" "n")) nil [327622 328967])
            ("org-agenda-next-date-line" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [328969 329463])
            ("org-agenda-previous-date-line" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [329465 329791])
            ("org-hl" variable (:default-value (make-overlay 1 1)) nil [329821 329855])
            ("overlay-put" code nil nil [329856 329893])
            ("org-highlight" function (:arguments ("begin" "end" "buffer")) nil [329895 330045])
            ("org-unhighlight" function nil nil [330047 330125])
            ("org-unhighlight-once" function nil nil [330127 330311])
            ("org-agenda-pre-follow-window-conf" variable nil nil [330313 330359])
            ("org-agenda-follow-mode" function (:user-visible-flag t) nil [330360 330863])
            ("org-agenda-entry-text-mode" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [330865 331753])
            ("org-agenda-clockreport-mode" function (:user-visible-flag t) nil [331755 332173])
            ("org-agenda-log-mode" function
               (:user-visible-flag t
                :arguments ("special"))
                nil [332175 332952])
            ("org-agenda-archives-mode" function
               (:user-visible-flag t
                :arguments ("with-files"))
                nil [332954 333653])
            ("org-agenda-toggle-diary" function (:user-visible-flag t) nil [333655 333988])
            ("org-agenda-toggle-deadlines" function (:user-visible-flag t) nil [333990 334364])
            ("org-agenda-toggle-time-grid" function (:user-visible-flag t) nil [334366 334691])
            ("org-agenda-set-mode-name" function nil nil [334693 337353])
            ("org-agenda-update-agenda-type" function nil nil [337355 337591])
            ("org-agenda-next-line" function (:user-visible-flag t) nil [337593 337776])
            ("org-agenda-previous-line" function (:user-visible-flag t) nil [337778 337973])
            ("org-agenda-next-item" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [337975 338334])
            ("org-agenda-previous-item" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [338336 338689])
            ("org-agenda-do-context-action" function nil nil [338691 339114])
            ("org-agenda-show-tags" function (:user-visible-flag t) nil [339116 339401])
            ("org-agenda-goto" function
               (:user-visible-flag t
                :arguments ("highlight"))
                nil [339403 340145])
            ("org-agenda-after-show-hook" variable nil nil [340147 340302])
            ("org-agenda-kill" function (:user-visible-flag t) nil [340304 341652])
            ("org-archive-default-command" variable nil nil [341654 341690])
            ("org-agenda-archive-default" function (:user-visible-flag t) nil [341719 341925])
            ("org-agenda-archive-default-with-confirmation" function (:user-visible-flag t) nil [341927 342160])
            ("org-agenda-archive" function (:user-visible-flag t) nil [342162 342328])
            ("org-agenda-archive-to-archive-sibling" function (:user-visible-flag t) nil [342330 342497])
            ("org-agenda-archive-with" function
               (:user-visible-flag t
                :arguments ("cmd" "confirm"))
                nil [342499 343288])
            ("org-remove-subtree-entries-from-agenda" function (:arguments ("buf" "beg" "end")) nil [343290 344188])
            ("org-agenda-refile" function
               (:user-visible-flag t
                :arguments ("goto" "rfloc" "no-update"))
                nil [344190 345390])
            ("org-agenda-open-link" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [345392 346921])
            ("org-agenda-copy-local-variable" function (:arguments ("var")) nil [346923 347235])
            ("org-agenda-switch-to" function
               (:user-visible-flag t
                :arguments ("delete-other-windows"))
                nil [347237 348118])
            ("org-agenda-goto-mouse" function
               (:user-visible-flag t
                :arguments ("ev"))
                nil [348120 348284])
            ("org-agenda-show" function
               (:user-visible-flag t
                :arguments ("full-entry"))
                nil [348286 348628])
            ("org-agenda-show-window" variable nil nil [348630 348665])
            ("org-agenda-show-and-scroll-up" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [348666 349399])
            ("org-agenda-show-scroll-down" function (:user-visible-flag t) nil [349401 349693])
            ("org-agenda-show-1" function
               (:user-visible-flag t
                :arguments ("more"))
                nil [349695 351303])
            ("org-agenda-cycle-counter" variable nil nil [351305 351342])
            ("org-agenda-cycle-show" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [351343 352251])
            ("org-agenda-recenter" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [352253 352479])
            ("org-agenda-show-mouse" function
               (:user-visible-flag t
                :arguments ("ev"))
                nil [352481 352647])
            ("org-agenda-check-no-diary" function nil nil [352649 352814])
            ("org-agenda-error" function nil nil [352816 352957])
            ("org-agenda-tree-to-indirect-buffer" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [352959 354321])
            ("org-agenda-do-tree-to-indirect-buffer" function (:arguments ("arg")) nil [354323 354740])
            ("org-last-heading-marker" variable (:default-value (make-marker)) nil [354742 354894])
            ("org-agenda-todo-nextset" function (:user-visible-flag t) nil [354896 355015])
            ("org-agenda-todo-previousset" function (:user-visible-flag t) nil [355017 355148])
            ("org-agenda-todo" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [355150 356772])
            ("org-agenda-add-note" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [356774 357257])
            ("org-agenda-change-all-lines" function (:arguments ("newhead" "hdmarker" "fixface" "just-this")) nil [357259 360038])
            ("org-agenda-align-tags" function (:arguments ("line")) nil [360040 361138])
            ("org-agenda-priority-up" function (:user-visible-flag t) nil [361140 361279])
            ("org-agenda-priority-down" function (:user-visible-flag t) nil [361281 361424])
            ("org-agenda-priority" function
               (:user-visible-flag t
                :arguments ("force-direction"))
                nil [361426 362533])
            ("org-agenda-set-tags" function
               (:user-visible-flag t
                :arguments ("tag" "onoff"))
                nil [362594 363381])
            ("org-agenda-set-property" function (:user-visible-flag t) nil [363383 363863])
            ("org-agenda-set-effort" function (:user-visible-flag t) nil [363865 364454])
            ("org-agenda-toggle-archive-tag" function (:user-visible-flag t) nil [364456 365099])
            ("org-agenda-do-date-later" function (:arguments ("arg")) nil [365101 365649])
            ("org-agenda-do-date-earlier" function (:arguments ("arg")) nil [365651 366211])
            ("org-agenda-date-later" function
               (:user-visible-flag t
                :arguments ("arg" "what"))
                nil [366213 367649])
            ("org-agenda-date-earlier" function
               (:user-visible-flag t
                :arguments ("arg" "what"))
                nil [367651 367818])
            ("org-agenda-date-later-minutes" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [367820 368062])
            ("org-agenda-date-earlier-minutes" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [368064 368310])
            ("org-agenda-date-later-hours" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [368312 368458])
            ("org-agenda-date-earlier-hours" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [368460 368610])
            ("org-agenda-show-new-time" function (:arguments ("marker" "stamp" "prefix")) nil [368612 369314])
            ("org-agenda-date-prompt" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [369316 370174])
            ("org-agenda-schedule" function
               (:user-visible-flag t
                :arguments ("arg" "time"))
                nil [370176 370846])
            ("org-agenda-deadline" function
               (:user-visible-flag t
                :arguments ("arg" "time"))
                nil [370848 371437])
            ("org-agenda-clock-in" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [371439 372190])
            ("org-agenda-clock-out" function (:user-visible-flag t) nil [372192 372847])
            ("org-agenda-clock-cancel" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [372849 373117])
            ("org-agenda-clock-goto" function (:user-visible-flag t) nil [373119 373821])
            ("org-agenda-diary-entry-in-org-file" function nil nil [373823 375736])
            ("org-agenda-insert-diary-strategy" variable (:default-value (quote date-tree)) nil [375738 376259])
            ("org-agenda-insert-diary-extract-time" variable nil nil [376261 376440])
            ("org-agenda-bulk-mark-char" variable (:default-value ">") nil [376442 376597])
            ("org-agenda-add-entry-to-org-agenda-diary-file" function (:arguments ("type" "text" "d1" "d2")) nil [376599 379554])
            ("org-agenda-insert-diary-as-top-level" function (:arguments ("text")) nil [379556 380000])
            ("org-agenda-insert-diary-make-new-entry" function (:arguments ("text")) nil [380002 380878])
            ("org-agenda-diary-entry" function (:user-visible-flag t) nil [380880 382774])
            ("org-agenda-execute-calendar-command" function (:arguments ("cmd")) nil [382776 383629])
            ("org-agenda-phases-of-moon" function (:user-visible-flag t) nil [383631 383822])
            ("org-agenda-holidays" function (:user-visible-flag t) nil [383824 384000])
            ("calendar-longitude" variable nil nil [384002 384029])
            ("calendar-latitude" variable nil nil [384060 384086])
            ("calendar-location-name" variable nil nil [384118 384149])
            ("org-agenda-sunrise-sunset" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [384177 384759])
            ("org-agenda-goto-calendar" function (:user-visible-flag t) nil [384761 385263])
            ("org-calendar-goto-agenda" function (:user-visible-flag t) nil [385280 385750])
            ("org-agenda-convert-date" function nil nil [385752 387126])
            ("org-agenda-bulk-marked-p" function nil nil [387147 387320])
            ("org-agenda-bulk-mark" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [387322 388273])
            ("org-agenda-bulk-mark-all" function (:user-visible-flag t) nil [388275 388414])
            ("org-agenda-bulk-mark-regexp" function
               (:user-visible-flag t
                :arguments ("regexp"))
                nil [388416 389135])
            ("org-agenda-bulk-unmark" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [389137 389918])
            ("org-agenda-bulk-toggle-all" function (:user-visible-flag t) nil [389920 390188])
            ("org-agenda-bulk-toggle" function (:user-visible-flag t) nil [390190 390377])
            ("org-agenda-bulk-remove-overlays" function
               (:user-visible-flag t
                :arguments ("beg" "end"))
                nil [390379 390853])
            ("org-agenda-bulk-unmark-all" function (:user-visible-flag t) nil [390855 391188])
            ("org-agenda-persistent-marks" variable nil nil [391190 391439])
            ("org-agenda-bulk-action" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [391441 397681])
            ("org-agenda-capture" function
               (:user-visible-flag t
                :arguments ("with-time"))
                nil [397683 398124])
            ("org-agenda-reapply-filters" function nil nil [398170 398731])
            ("org-agenda-drag-line-forward" function
               (:user-visible-flag t
                :arguments ("arg" "backward"))
                nil [398733 399564])
            ("org-agenda-drag-line-backward" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [399566 399715])
            ("org-agenda-show-the-flagging-note" function (:user-visible-flag t) nil [399737 400966])
            ("org-agenda-remove-flag" function (:arguments ("marker")) nil [400968 401324])
            ("org-agenda-get-any-marker" function (:arguments ("pos")) nil [401326 401503])
            ("appt-time-msg-list" variable nil nil [401532 401559])
            ("org-agenda-to-appt" function
               (:user-visible-flag t
                :arguments ("refresh" "filter" "args"))
                nil [401597 405825])
            ("org-agenda-today-p" function (:arguments ("date")) nil [405827 406191])
            ("org-agenda-todo-yesterday" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [406193 406498])
            ("org-agenda" package nil nil [406500 406521]))          
      :file "org-agenda.el"
      :pointmax 406551
      :fsize 406554
      :lastmodtime '(22842 50887 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("org" include nil nil [3596 3610])
            ("cl-lib" include nil nil [3611 3628])
            ("declare-function" code nil nil [3675 3729])
            ("declare-function" code nil nil [3730 3792])
            ("declare-function" code nil nil [3793 3884])
            ("declare-function" code nil nil [3885 3944])
            ("declare-function" code nil nil [3945 4042])
            ("declare-function" code nil nil [4043 4105])
            ("declare-function" code nil nil [4106 4173])
            ("declare-function" code nil nil [4174 4229])
            ("declare-function" code nil nil [4230 4325])
            ("declare-function" code nil nil [4326 4386])
            ("declare-function" code nil nil [4387 4442])
            ("declare-function" code nil nil [4443 4509])
            ("declare-function" code nil nil [4510 4586])
            ("declare-function" code nil nil [4587 4671])
            ("declare-function" code nil nil [4717 4778])
            ("declare-function" code nil nil [4836 4899])
            ("declare-function" code nil nil [4901 4958])
            ("declare-function" code nil nil [4959 5014])
            ("with-no-warnings" code nil nil [5016 5048])
            ("org-bbdb-anniversaries" customgroup (:user-visible-flag t) nil [5100 5226])
            ("org-bbdb-default-anniversary-format" variable (:default-value "birthday") nil [5228 5384])
            ("org-bbdb-anniversary-format-alist" variable (:default-value (quote (("birthday" lambda (name years suffix) (concat "Birthday: [[bbdb:" name "][" name " (" (format "%s" years) suffix ")]]")) ("wedding" lambda (name years suffix) (concat "[[bbdb:" name "][" name "'s " (format "%s" years) suffix " wedding anniversary]]"))))) nil [5386 6599])
            ("org-bbdb-anniversary-field" variable (:default-value (quote anniversary)) nil [6601 7173])
            ("org-bbdb-extract-date-fun" variable (:default-value (quote org-bbdb-anniv-extract-date)) nil [7175 7513])
            ("org-link-set-parameters" code nil nil [7540 7702])
            ("org-bbdb-store-link" function nil nil [7722 8278])
            ("org-bbdb-export" function (:arguments ("path" "desc" "format")) nil [8280 8797])
            ("org-bbdb-open" function (:arguments ("name")) nil [8799 9019])
            ("org-bbdb-open-old" function (:arguments ("name")) nil [9021 9829])
            ("org-bbdb-open-new" function (:arguments ("name")) nil [9831 10677])
            ("org-bbdb-anniv-extract-date" function (:arguments ("time-str")) nil [10679 11094])
            ("org-bbdb-anniv-split" function (:arguments ("str")) nil [11096 11384])
            ("org-bbdb-anniv-hash" variable nil nil [11386 11512])
            ("org-bbdb-updated-p" variable (:default-value t) nil [11514 11618])
            ("org-bbdb-make-anniv-hash" function nil nil [11620 12886])
            ("org-bbdb-updated" function (:arguments ("_rec")) nil [12888 13058])
            ("add-hook" code nil nil [13060 13112])
            ("org-bbdb-anniversaries" function nil nil [13129 15091])
            ("org-bbdb-date-list" function (:arguments ("d" "n")) nil [15390 15664])
            ("org-bbdb-anniversaries-future" function (:arguments ("n")) nil [15681 17280])
            ("org-bbdb-complete-link" function nil nil [17282 17521])
            ("org-bbdb-anniv-export-ical" function nil nil [17523 17966])
            ("org-bbdb-format-vevent" function (:arguments ("key" "recs")) nil [17968 18548])
            ("org-bbdb" package nil nil [18550 18569]))          
      :file "org-bbdb.el"
      :pointmax 18672
      :fsize 18671
      :lastmodtime '(22842 50887 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("ob" include nil nil [1014 1027])
            ("org-babel-header-args:emacs-lisp" variable
               (:constant-flag t
                :default-value (quote ((lexical . :any))))
                nil [1029 1134])
            ("org-babel-default-header-args:emacs-lisp" variable (:default-value (quote ((:lexical . "no")))) nil [1136 1474])
            ("org-babel-expand-body:emacs-lisp" function (:arguments ("body" "params")) nil [1476 2083])
            ("org-babel-execute:emacs-lisp" function (:arguments ("body" "params")) nil [2085 3192])
            ("org-babel-make-language-alias" code nil nil [3194 3246])
            ("ob-emacs-lisp" package nil nil [3248 3272]))          
      :file "ob-emacs-lisp.el"
      :pointmax 3307
      :fsize 3306
      :lastmodtime '(22842 50887 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("ob-core" include nil nil [1714 1732])
            ("declare-function" code nil nil [1734 1791])
            ("org-babel-table-truncate-at-newline" function (:arguments ("string")) nil [1793 2169])
            ("org-sbe" function (:arguments ("source-block" "variables")) nil [2171 5327])
            ("ob-table" package nil nil [5329 5348]))          
      :file "ob-table.el"
      :pointmax 5378
      :fsize 5377
      :lastmodtime '(22842 50887 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [1001 1018])
            ("ox" include nil nil [1019 1032])
            ("orgtbl-exp-regexp" variable nil nil [1034 1060])
            ("org-export-define-backend" code nil nil [1086 5144])
            ("org-export-texinfo" customgroup (:user-visible-flag t) nil [5182 5369])
            ("org-texinfo-coding-system" variable nil nil [5386 5585])
            ("org-texinfo-default-class" variable (:default-value "info") nil [5587 5730])
            ("org-texinfo-classes" variable (:default-value (quote (("info" "@documentencoding AUTO
@documentlanguage AUTO" ("@chapter %s" . "@unnumbered %s") ("@section %s" . "@unnumberedsec %s") ("@subsection %s" . "@unnumberedsubsec %s") ("@subsubsection %s" . "@unnumberedsubsubsec %s"))))) nil [5732 7862])
            ("org-texinfo-format-headline-function" variable (:default-value (quote org-texinfo-format-headline-default-function)) nil [7879 8490])
            ("org-texinfo-node-description-column" variable (:default-value 32) nil [8518 8785])
            ("org-texinfo-active-timestamp-format" variable (:default-value "@emph{%s}") nil [8804 8971])
            ("org-texinfo-inactive-timestamp-format" variable (:default-value "@emph{%s}") nil [8973 9144])
            ("org-texinfo-diary-timestamp-format" variable (:default-value "@emph{%s}") nil [9146 9311])
            ("org-texinfo-link-with-unknown-path-format" variable (:default-value "@indicateurl{%s}") nil [9325 9494])
            ("org-texinfo-tables-verbatim" variable nil nil [9509 9646])
            ("org-texinfo-table-scientific-notation" variable (:default-value "%s\\,(%s)") nil [9648 10019])
            ("org-texinfo-def-table-markup" variable (:default-value "@samp") nil [10021 10159])
            ("org-texinfo-text-markup-alist" variable (:default-value (quote ((bold . "@strong{%s}") (code . code) (italic . "@emph{%s}") (verbatim . verb)))) nil [10179 11024])
            ("org-texinfo-format-drawer-function" variable (:default-value (lambda (_name contents) contents)) nil [11040 11519])
            ("org-texinfo-format-inlinetask-function" variable (:default-value (quote org-texinfo-format-inlinetask-default-function)) nil [11539 12159])
            ("org-texinfo-info-process" variable (:default-value (quote ("makeinfo %f"))) nil [12179 12734])
            ("org-texinfo-logfiles-extensions" variable (:default-value (quote ("aux" "toc" "cp" "fn" "ky" "pg" "tp" "vr"))) nil [12736 13037])
            ("org-texinfo-remove-logfiles" variable (:default-value t) nil [13039 13375])
            ("org-texinfo-max-toc-depth" variable
               (:constant-flag t
                :default-value 4)
                nil [13392 13620])
            ("org-texinfo-supported-coding-systems" variable
               (:constant-flag t
                :default-value (quote ("US-ASCII" "UTF-8" "ISO-8859-15" "ISO-8859-1" "ISO-8859-2" "koi8-r" "koi8-u")))
                nil [13622 14001])
            ("org-texinfo-inline-image-rules" variable
               (:constant-flag t
                :default-value (list (cons "file" (regexp-opt (quote ("eps" "pdf" "png" "jpg" "jpeg" "gif" "svg"))))))
                nil [14003 14191])
            ("org-texinfo--filter-section-blank-lines" function (:arguments ("headline" "_backend" "_info")) nil [14219 14424])
            ("org-texinfo--normalize-headlines" function (:arguments ("tree" "_backend" "info")) nil [14426 15235])
            ("org-texinfo--find-verb-separator" function (:arguments ("s")) nil [15237 15618])
            ("org-texinfo--text-markup" function (:arguments ("text" "markup" "_info")) nil [15620 16213])
            ("org-texinfo--get-node" function (:arguments ("datum" "info")) nil [16215 17061])
            ("org-texinfo--sanitize-node" function (:arguments ("title")) nil [17063 17462])
            ("org-texinfo--sanitize-content" function (:arguments ("text")) nil [17464 17633])
            ("org-texinfo--wrap-float" function (:arguments ("value" "info" "type" "label" "caption" "short")) nil [17635 19031])
            ("org-texinfo-template" function (:arguments ("contents" "info")) nil [19047 23622])
            ("org-texinfo-bold" function (:arguments ("_bold" "contents" "info")) nil [23663 23886])
            ("org-texinfo-center-block" function (:arguments ("_center-block" "contents" "_info")) nil [23907 24131])
            ("org-texinfo-clock" function (:arguments ("clock" "_contents" "info")) nil [24145 24626])
            ("org-texinfo-code" function (:arguments ("code" "_contents" "info")) nil [24639 24876])
            ("org-texinfo-drawer" function (:arguments ("drawer" "contents" "info")) nil [24891 25244])
            ("org-texinfo-dynamic-block" function (:arguments ("_dynamic-block" "contents" "_info")) nil [25266 25492])
            ("org-texinfo-entity" function (:arguments ("entity" "_contents" "_info")) nil [25507 25830])
            ("org-texinfo-example-block" function (:arguments ("example-block" "_contents" "info")) nil [25852 26137])
            ("org-texinfo-export-block" function (:arguments ("export-block" "_contents" "_info")) nil [26157 26487])
            ("org-texinfo-export-snippet" function (:arguments ("export-snippet" "_contents" "_info")) nil [26509 26817])
            ("org-texinfo-fixed-width" function (:arguments ("fixed-width" "_contents" "_info")) nil [26837 27172])
            ("org-texinfo-footnote-reference" function (:arguments ("footnote" "_contents" "info")) nil [27199 27552])
            ("org-texinfo-headline" function (:arguments ("headline" "contents" "info")) nil [27569 31093])
            ("org-texinfo-format-headline-default-function" function (:arguments ("todo" "_todo-type" "priority" "text" "tags")) nil [31095 31460])
            ("org-texinfo-inline-src-block" function (:arguments ("inline-src-block" "_contents" "_info")) nil [31485 31879])
            ("org-texinfo-inlinetask" function (:arguments ("inlinetask" "contents" "info")) nil [31898 32713])
            ("org-texinfo-format-inlinetask-default-function" function (:arguments ("todo" "_todo-type" "priority" "title" "tags" "contents")) nil [32715 33168])
            ("org-texinfo-italic" function (:arguments ("_italic" "contents" "info")) nil [33183 33416])
            ("org-texinfo-item" function (:arguments ("item" "contents" "info")) nil [33429 33767])
            ("org-texinfo-keyword" function (:arguments ("keyword" "_contents" "info")) nil [33783 34742])
            ("org-texinfo-line-break" function (:arguments ("_line-break" "_contents" "_info")) nil [34761 34951])
            ("org-texinfo--@ref" function (:arguments ("datum" "description" "info")) nil [34964 35348])
            ("org-texinfo-link" function (:arguments ("link" "desc" "info")) nil [35350 37978])
            ("org-texinfo--inline-image" function (:arguments ("link" "info")) nil [37980 39154])
            ("org-texinfo-make-menu" function (:arguments ("scope" "info" "master")) nil [39168 40048])
            ("org-texinfo--build-menu" function (:arguments ("scope" "info" "level")) nil [40050 40871])
            ("org-texinfo--format-entries" function (:arguments ("entries" "info")) nil [40873 41563])
            ("org-texinfo--menu-entries" function (:arguments ("scope" "info")) nil [41565 42364])
            ("org-texinfo-node-property" function (:arguments ("node-property" "_contents" "_info")) nil [42386 42762])
            ("org-texinfo-paragraph" function (:arguments ("_paragraph" "contents" "_info")) nil [42780 43011])
            ("org-texinfo-plain-list" function (:arguments ("plain-list" "contents" "info")) nil [43030 43794])
            ("org-texinfo-plain-text" function (:arguments ("text" "info")) nil [43813 45011])
            ("org-texinfo-planning" function (:arguments ("planning" "_contents" "info")) nil [45028 46042])
            ("org-texinfo-property-drawer" function (:arguments ("_property-drawer" "contents" "_info")) nil [46066 46377])
            ("org-texinfo-quote-block" function (:arguments ("quote-block" "contents" "_info")) nil [46397 46807])
            ("org-texinfo-radio-target" function (:arguments ("radio-target" "text" "info")) nil [46828 47103])
            ("org-texinfo-section" function (:arguments ("section" "contents" "info")) nil [47119 47476])
            ("org-texinfo-special-block" function (:arguments ("special-block" "contents" "_info")) nil [47498 47954])
            ("org-texinfo-src-block" function (:arguments ("src-block" "_contents" "info")) nil [47972 48793])
            ("org-texinfo-statistics-cookie" function (:arguments ("statistics-cookie" "_contents" "_info")) nil [48819 49070])
            ("org-texinfo-strike-through" function (:arguments ("_strike-through" "contents" "info")) nil [49094 49367])
            ("org-texinfo-subscript" function (:arguments ("_subscript" "contents" "_info")) nil [49385 49618])
            ("org-texinfo-superscript" function (:arguments ("_superscript" "contents" "_info")) nil [49638 49877])
            ("org-texinfo-table" function (:arguments ("table" "contents" "info")) nil [49891 50881])
            ("org-texinfo-table-column-widths" function (:arguments ("table" "info")) nil [50883 51817])
            ("org-texinfo-table-cell" function (:arguments ("table-cell" "contents" "info")) nil [51836 52461])
            ("org-texinfo-table-row" function (:arguments ("table-row" "contents" "info")) nil [52479 53095])
            ("org-texinfo-target" function (:arguments ("target" "_contents" "info")) nil [53110 53338])
            ("org-texinfo-timestamp" function (:arguments ("timestamp" "_contents" "info")) nil [53356 53963])
            ("org-texinfo-underline" function (:arguments ("_underline" "contents" "info")) nil [53981 54229])
            ("org-texinfo-verbatim" function (:arguments ("verbatim" "_contents" "info")) nil [54246 54506])
            ("org-texinfo-verse-block" function (:arguments ("_verse-block" "contents" "_info")) nil [54526 54773])
            ("org-texinfo-export-to-texinfo" function
               (:user-visible-flag t
                :arguments ("async" "subtreep" "visible-only" "body-only" "ext-plist"))
                nil [54804 55986])
            ("org-texinfo-export-to-info" function
               (:user-visible-flag t
                :arguments ("async" "subtreep" "visible-only" "body-only" "ext-plist"))
                nil [55988 57312])
            ("org-texinfo-publish-to-texinfo" function (:arguments ("plist" "filename" "pub-dir")) nil [57329 57665])
            ("org-texinfo-convert-region-to-texinfo" function (:user-visible-flag t) nil [57682 58009])
            ("org-texinfo-compile" function (:arguments ("file")) nil [58011 58880])
            ("ox-texinfo" package nil nil [58883 58904]))          
      :file "ox-texinfo.el"
      :pointmax 59009
      :fsize 59008
      :lastmodtime '(22842 50887 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("ox" include nil nil [1063 1076])
            ("ox-publish" include nil nil [1077 1098])
            ("cl-lib" include nil nil [1099 1116])
            ("declare-function" code nil nil [1118 1171])
            ("org-export-define-backend" code nil nil [1609 5905])
            ("org-export-ascii" customgroup (:user-visible-flag t) nil [5943 6072])
            ("org-ascii-text-width" variable (:default-value 72) nil [6074 6312])
            ("org-ascii-global-margin" variable nil nil [6314 6502])
            ("org-ascii-inner-margin" variable (:default-value 2) nil [6504 6739])
            ("org-ascii-quote-margin" variable (:default-value 6) nil [6741 6981])
            ("org-ascii-list-margin" variable nil nil [6983 7237])
            ("org-ascii-inlinetask-width" variable (:default-value 30) nil [7239 7460])
            ("org-ascii-headline-spacing" variable (:default-value (quote (1 . 2))) nil [7462 8164])
            ("org-ascii-indented-line-width" variable (:default-value (quote auto)) nil [8166 8739])
            ("org-ascii-paragraph-spacing" variable (:default-value (quote auto)) nil [8741 9204])
            ("org-ascii-charset" variable (:default-value (quote ascii)) nil [9206 9637])
            ("org-ascii-underline" variable (:default-value (quote ((ascii 61 126 45) (latin1 61 126 45) (utf-8 9552 9472 9548 9476 9480)))) nil [9639 10573])
            ("org-ascii-bullets" variable (:default-value (quote ((ascii 42 43 45) (latin1 167 182) (utf-8 9674)))) nil [10575 11531])
            ("org-ascii-links-to-notes" variable (:default-value t) nil [11533 11839])
            ("org-ascii-table-keep-all-vertical-lines" variable nil nil [11841 12137])
            ("org-ascii-table-widen-columns" variable (:default-value t) nil [12139 12437])
            ("org-ascii-table-use-ascii-art" variable nil nil [12439 12857])
            ("org-ascii-caption-above" variable nil nil [12859 13089])
            ("org-ascii-verbatim-format" variable (:default-value "`%s'") nil [13091 13288])
            ("org-ascii-format-drawer-function" variable (:default-value (lambda (_name contents _width) contents)) nil [13290 13847])
            ("org-ascii-format-inlinetask-function" variable (:default-value (quote org-ascii-format-inlinetask-default)) nil [13849 14668])
            ("org-ascii--fill-string" function (:arguments ("s" "text-width" "info" "justify")) nil [16308 17269])
            ("org-ascii--justify-lines" function (:arguments ("s" "text-width" "how")) nil [17271 17849])
            ("org-ascii--justify-element" function (:arguments ("contents" "element" "info")) nil [17851 19447])
            ("org-ascii--indent-string" function (:arguments ("s" "width")) nil [19449 19677])
            ("org-ascii--box-string" function (:arguments ("s" "info")) nil [19679 20097])
            ("org-ascii--current-text-width" function (:arguments ("element" "info")) nil [20099 23475])
            ("org-ascii--current-justification" function (:arguments ("element")) nil [23477 24092])
            ("org-ascii--build-title" function (:arguments ("element" "info" "text-width" "underline" "notags" "toc")) nil [24094 26512])
            ("org-ascii--has-caption-p" function (:arguments ("element" "_info")) nil [26514 26792])
            ("org-ascii--build-caption" function (:arguments ("element" "info")) nil [26794 27673])
            ("org-ascii--build-toc" function (:arguments ("info" "n" "keyword" "local")) nil [27675 29016])
            ("org-ascii--list-listings" function (:arguments ("keyword" "info")) nil [29018 30470])
            ("org-ascii--list-tables" function (:arguments ("keyword" "info")) nil [30472 31900])
            ("org-ascii--unique-links" function (:arguments ("element" "info")) nil [31902 33204])
            ("org-ascii--describe-datum" function (:arguments ("datum" "info")) nil [33206 34760])
            ("org-ascii--describe-links" function (:arguments ("links" "width" "info")) nil [34762 36260])
            ("org-ascii--checkbox" function (:arguments ("item" "info")) nil [36262 36615])
            ("org-ascii-template--document-title" function (:arguments ("info")) nil [36634 39954])
            ("org-ascii-inner-template" function (:arguments ("contents" "info")) nil [39956 41960])
            ("org-ascii-template" function (:arguments ("contents" "info")) nil [41962 42930])
            ("org-ascii--translate" function (:arguments ("s" "info")) nil [42932 43204])
            ("org-ascii-bold" function (:arguments ("_bold" "contents" "_info")) nil [43245 43443])
            ("org-ascii-center-block" function (:arguments ("_center-block" "contents" "_info")) nil [43465 43781])
            ("org-ascii-clock" function (:arguments ("clock" "_contents" "info")) nil [43796 44265])
            ("org-ascii-code" function (:arguments ("code" "_contents" "info")) nil [44279 44522])
            ("org-ascii-drawer" function (:arguments ("drawer" "contents" "info")) nil [44538 44926])
            ("org-ascii-dynamic-block" function (:arguments ("_dynamic-block" "contents" "_info")) nil [44949 45171])
            ("org-ascii-entity" function (:arguments ("entity" "_contents" "info")) nil [45187 45476])
            ("org-ascii-example-block" function (:arguments ("example-block" "_contents" "info")) nil [45499 45825])
            ("org-ascii-export-snippet" function (:arguments ("export-snippet" "_contents" "_info")) nil [45849 46151])
            ("org-ascii-export-block" function (:arguments ("export-block" "_contents" "info")) nil [46173 46523])
            ("org-ascii-fixed-width" function (:arguments ("fixed-width" "_contents" "info")) nil [46544 46882])
            ("org-ascii-footnote-reference" function (:arguments ("footnote-reference" "_contents" "info")) nil [47056 47331])
            ("org-ascii-headline" function (:arguments ("headline" "contents" "info")) nil [47349 49538])
            ("org-ascii-horizontal-rule" function (:arguments ("horizontal-rule" "_contents" "info")) nil [49563 50156])
            ("org-ascii-inline-src-block" function (:arguments ("inline-src-block" "_contents" "info")) nil [50182 50502])
            ("org-ascii-format-inlinetask-default" function (:arguments ("_todo" "_type" "_priority" "_name" "_tags" "contents" "width" "inlinetask" "info")) nil [50522 51855])
            ("org-ascii-inlinetask" function (:arguments ("inlinetask" "contents" "info")) nil [51857 52803])
            ("org-ascii-italic" function (:arguments ("_italic" "contents" "_info")) nil [52819 53025])
            ("org-ascii-item" function (:arguments ("item" "contents" "info")) nil [53039 54916])
            ("org-ascii-keyword" function (:arguments ("keyword" "_contents" "info")) nil [54933 55850])
            ("org-ascii-latex-environment" function (:arguments ("latex-environment" "_contents" "info")) nil [55877 56251])
            ("org-ascii-latex-fragment" function (:arguments ("latex-fragment" "_contents" "info")) nil [56275 56549])
            ("org-ascii-line-break" function (:arguments ("_line-break" "_contents" "_info")) nil [56569 56762])
            ("org-ascii-link" function (:arguments ("link" "desc" "info")) nil [56776 58738])
            ("org-ascii-node-property" function (:arguments ("node-property" "_contents" "_info")) nil [58763 59135])
            ("org-ascii-paragraph" function (:arguments ("paragraph" "contents" "info")) nil [59154 59857])
            ("org-ascii-plain-list" function (:arguments ("plain-list" "contents" "info")) nil [59877 60284])
            ("org-ascii-plain-text" function (:arguments ("text" "info")) nil [60304 60967])
            ("org-ascii-planning" function (:arguments ("planning" "_contents" "info")) nil [60985 61752])
            ("org-ascii-property-drawer" function (:arguments ("property-drawer" "contents" "info")) nil [61777 62094])
            ("org-ascii-quote-block" function (:arguments ("_quote-block" "contents" "info")) nil [62115 62394])
            ("org-ascii-radio-target" function (:arguments ("_radio-target" "contents" "_info")) nil [62416 62632])
            ("org-ascii-section" function (:arguments ("section" "contents" "info")) nil [62649 63563])
            ("org-ascii-special-block" function (:arguments ("_special-block" "contents" "_info")) nil [63586 63954])
            ("org-ascii-src-block" function (:arguments ("src-block" "_contents" "info")) nil [63973 64593])
            ("org-ascii-statistics-cookie" function (:arguments ("statistics-cookie" "_contents" "_info")) nil [64620 64867])
            ("org-ascii-subscript" function (:arguments ("subscript" "contents" "_info")) nil [64886 65197])
            ("org-ascii-superscript" function (:arguments ("superscript" "contents" "_info")) nil [65218 65537])
            ("org-ascii-strike-through" function (:arguments ("_strike-through" "contents" "_info")) nil [65561 65795])
            ("org-ascii-table" function (:arguments ("table" "contents" "info")) nil [65810 66989])
            ("org-ascii--table-cell-width" function (:arguments ("table-cell" "info")) nil [67009 68470])
            ("org-ascii-table-cell" function (:arguments ("table-cell" "contents" "info")) nil [68472 69711])
            ("org-ascii-table-row" function (:arguments ("table-row" "contents" "info")) nil [69730 71650])
            ("org-ascii-timestamp" function (:arguments ("timestamp" "_contents" "info")) nil [71669 71907])
            ("org-ascii-underline" function (:arguments ("_underline" "contents" "_info")) nil [71926 72144])
            ("org-ascii-verbatim" function (:arguments ("verbatim" "_contents" "info")) nil [72162 72421])
            ("org-ascii-verse-block" function (:arguments ("verse-block" "contents" "info")) nil [72442 72764])
            ("org-ascii-filter-headline-blank-lines" function (:arguments ("headline" "_backend" "info")) nil [72782 73431])
            ("org-ascii-filter-paragraph-spacing" function (:arguments ("tree" "_backend" "info")) nil [73433 74074])
            ("org-ascii-filter-comment-spacing" function (:arguments ("tree" "_backend" "info")) nil [74076 74544])
            ("org-ascii-export-as-ascii" function
               (:user-visible-flag t
                :arguments ("async" "subtreep" "visible-only" "body-only" "ext-plist"))
                nil [74588 75768])
            ("org-ascii-export-to-ascii" function
               (:user-visible-flag t
                :arguments ("async" "subtreep" "visible-only" "body-only" "ext-plist"))
                nil [75785 76873])
            ("org-ascii-publish-to-ascii" function (:arguments ("plist" "filename" "pub-dir")) nil [76890 77246])
            ("org-ascii-publish-to-latin1" function (:arguments ("plist" "filename" "pub-dir")) nil [77263 77623])
            ("org-ascii-publish-to-utf8" function (:arguments ("plist" "filename" "pub-dir")) nil [77640 77995])
            ("ox-ascii" package nil nil [77998 78017]))          
      :file "ox-ascii.el"
      :pointmax 78137
      :fsize 78236
      :lastmodtime '(22842 50887 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [2106 2123])
            ("org" include nil nil [2124 2138])
            ("declare-function" code nil nil [2140 2198])
            ("declare-function" code nil nil [2199 2300])
            ("declare-function" code nil nil [2301 2352])
            ("declare-function" code nil nil [2353 2404])
            ("declare-function" code nil nil [2405 2456])
            ("declare-function" code nil nil [2457 2511])
            ("org-end-time-was-given" variable nil nil [2513 2544])
            ("org-remember-default-headline" variable nil nil [2545 2583])
            ("org-remember-templates" variable nil nil [2584 2615])
            ("org-table-hlines" variable nil nil [2616 2641])
            ("org-table-current-begin-pos" variable nil nil [2642 2678])
            ("dired-buffers" variable nil nil [2679 2701])
            ("org-capture-clock-was-started" variable nil nil [2703 2797])
            ("org-capture-last-stored-marker" variable (:default-value (make-marker)) nil [2799 2926])
            ("org-capture-link-is-already-stored" variable nil nil [3057 3104])
            ("org-capture-is-refiling" variable nil nil [3106 3197])
            ("org-capture" customgroup (:user-visible-flag t) nil [3199 3306])
            ("org-capture-templates" variable nil nil [3308 17004])
            ("org-capture-before-finalize-hook" variable nil nil [17006 17270])
            ("org-capture-after-finalize-hook" variable nil nil [17272 17467])
            ("org-capture-prepare-finalize-hook" variable nil nil [17469 17675])
            ("org-capture-bookmark" variable (:default-value t) nil [17677 17854])
            ("org-capture-plist" variable nil nil [17929 18038])
            ("org-capture-current-plist" variable nil nil [18040 18433])
            ("org-capture-clock-keep" variable nil nil [18435 18607])
            ("org-capture-put" function (:arguments ("stuff")) nil [18609 18825])
            ("org-capture-get" function (:arguments ("prop" "local")) nil [18826 19207])
            ("org-capture-member" function (:arguments ("prop" "local")) nil [19209 19569])
            ("org-capture-mode-map" variable (:default-value (make-sparse-keymap)) nil [19591 19781])
            ("org-capture-mode-hook" variable nil nil [19783 19860])
            ("define-minor-mode" code nil nil [19862 20276])
            ("define-key" code nil nil [20277 20343])
            ("define-key" code nil nil [20344 20406])
            ("define-key" code nil nil [20407 20471])
            ("org-capture-initial" variable nil nil [20496 20528])
            ("org-capture-entry" variable nil nil [20529 20559])
            ("org-capture-string" function
               (:user-visible-flag t
                :arguments ("string" "keys"))
                nil [20576 20830])
            ("org-capture-templates-contexts" variable nil nil [20832 22631])
            ("org-capture-use-agenda-date" variable nil nil [22633 22889])
            ("org-capture" function
               (:user-visible-flag t
                :arguments ("goto" "keys"))
                nil [22906 27054])
            ("org-capture-get-template" function nil nil [27056 27773])
            ("org-capture-finalize" function
               (:user-visible-flag t
                :arguments ("stay-with-capture"))
                nil [27775 32809])
            ("org-capture-refile" function (:user-visible-flag t) nil [32811 34032])
            ("org-capture-kill" function (:user-visible-flag t) nil [34034 34342])
            ("org-capture-goto-last-stored" function (:user-visible-flag t) nil [34344 34645])
            ("org-capture-put-target-region-and-position" function nil nil [34698 35050])
            ("org-time-was-given" variable nil nil [35052 35079])
            ("org-capture-set-target-location" function (:arguments ("target")) nil [35111 40292])
            ("org-capture-expand-file" function (:arguments ("file")) nil [40294 40968])
            ("org-capture-target-buffer" function (:arguments ("file")) nil [40970 41398])
            ("org-capture-place-template" function (:arguments ("inhibit-wconf-store")) nil [41400 42329])
            ("org-capture-place-entry" function nil nil [42331 43680])
            ("org-capture-place-item" function nil nil [43682 45743])
            ("org-capture-place-table-line" function nil nil [45745 48775])
            ("org-capture-place-plain-text" function nil nil [48777 50098])
            ("org-capture-mark-kill-region" function (:arguments ("beg" "end")) nil [50100 50378])
            ("org-capture-position-for-last-stored" function (:arguments ("where")) nil [50380 50883])
            ("org-capture-store-last-position" function nil nil [50885 51640])
            ("org-capture-narrow" function (:arguments ("beg" "end")) nil [51642 51823])
            ("org-capture-empty-lines-before" function (:arguments ("n")) nil [51825 52232])
            ("org-capture-empty-lines-after" function (:arguments ("n")) nil [52234 52666])
            ("org-clock-marker" variable nil nil [52668 52693])
            ("org-capture-insert-template-here" function nil nil [52715 53919])
            ("org-capture-set-plist" function (:arguments ("entry")) nil [53921 54706])
            ("org-capture-goto-target" function
               (:user-visible-flag t
                :arguments ("template-key"))
                nil [54708 55159])
            ("org-capture-get-indirect-buffer" function (:arguments ("buffer" "prefix")) nil [55161 55792])
            ("org-capture-verify-tree" function (:arguments ("tree")) nil [55794 55973])
            ("org-mks" function (:arguments ("table" "title" "prompt" "specials")) nil [55975 59489])
            ("org-capture-select-template" function (:arguments ("keys")) nil [59513 60185])
            ("org-capture--clipboards" variable nil nil [60187 60259])
            ("org-capture-fill-template" function (:arguments ("template" "initial" "annotation")) nil [60261 69159])
            ("org-capture-escaped-%" function nil nil [69161 69461])
            ("org-capture-expand-embedded-elisp" function (:arguments ("mark")) nil [69463 70675])
            ("org-capture--expand-keyword-in-embedded-elisp" function (:arguments ("attr")) nil [70677 71202])
            ("org-capture-inside-embedded-elisp-p" function nil nil [71204 71441])
            ("org-capture-import-remember-templates" function (:user-visible-flag t) nil [71458 72940])
            ("make-obsolete" code nil nil [73063 73179])
            ("org-capture" package nil nil [73181 73203]))          
      :file "org-capture.el"
      :pointmax 73234
      :fsize 73233
      :lastmodtime '(22842 50887 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [4190 4207])
            ("org-element" include nil nil [4208 4230])
            ("org-macro" include nil nil [4231 4251])
            ("ox" include nil nil [4252 4265])
            ("ob" include nil nil [4266 4279])
            ("cl-defstruct" code nil nil [4297 4436])
            ("org-lint-missing-checker-name" function (:arguments ("_")) nil [4458 4586])
            ("org-lint--checkers" variable
               (:constant-flag t
                :default-value (list (make-org-lint-checker :name (quote duplicate-custom-id) :description "Report duplicates CUSTOM_ID properties" :categories (quote (link))) (make-org-lint-checker :name (quote duplicate-name) :description "Report duplicate NAME values" :categories (quote (babel link))) (make-org-lint-checker :name (quote duplicate-target) :description "Report duplicate targets" :categories (quote (link))) (make-org-lint-checker :name (quote duplicate-footnote-definition) :description "Report duplicate footnote definitions" :categories (quote (footnote))) (make-org-lint-checker :name (quote orphaned-affiliated-keywords) :description "Report orphaned affiliated keywords" :trust (quote low)) (make-org-lint-checker :name (quote obsolete-affiliated-keywords) :description "Report obsolete affiliated keywords" :categories (quote (obsolete))) (make-org-lint-checker :name (quote deprecated-export-blocks) :description "Report deprecated export block syntax" :categories (quote (obsolete export)) :trust (quote low)) (make-org-lint-checker :name (quote deprecated-header-syntax) :description "Report deprecated Babel header syntax" :categories (quote (obsolete babel)) :trust (quote low)) (make-org-lint-checker :name (quote missing-language-in-src-block) :description "Report missing language in src blocks" :categories (quote (babel))) (make-org-lint-checker :name (quote missing-backend-in-export-block) :description "Report missing back-end in export blocks" :categories (quote (export))) (make-org-lint-checker :name (quote invalid-babel-call-block) :description "Report invalid Babel call blocks" :categories (quote (babel))) (make-org-lint-checker :name (quote colon-in-name) :description "Report NAME values with a colon" :categories (quote (babel))) (make-org-lint-checker :name (quote wrong-header-argument) :description "Report wrong babel headers" :categories (quote (babel))) (make-org-lint-checker :name (quote wrong-header-value) :description "Report invalid value in babel headers" :categories (quote (babel)) :trust (quote low)) (make-org-lint-checker :name (quote deprecated-category-setup) :description "Report misuse of CATEGORY keyword" :categories (quote (obsolete))) (make-org-lint-checker :name (quote invalid-coderef-link) :description "Report \"coderef\" links with unknown destination" :categories (quote (link))) (make-org-lint-checker :name (quote invalid-custom-id-link) :description "Report \"custom-id\" links with unknown destination" :categories (quote (link))) (make-org-lint-checker :name (quote invalid-fuzzy-link) :description "Report \"fuzzy\" links with unknown destination" :categories (quote (link))) (make-org-lint-checker :name (quote invalid-id-link) :description "Report \"id\" links with unknown destination" :categories (quote (link))) (make-org-lint-checker :name (quote link-to-local-file) :description "Report links to non-existent local files" :categories (quote (link)) :trust (quote low)) (make-org-lint-checker :name (quote non-existent-setupfile-parameter) :description "Report SETUPFILE keywords with non-existent file parameter" :trust (quote low)) (make-org-lint-checker :name (quote wrong-include-link-parameter) :description "Report INCLUDE keywords with misleading link parameter" :categories (quote (export)) :trust (quote low)) (make-org-lint-checker :name (quote obsolete-include-markup) :description "Report obsolete markup in INCLUDE keyword" :categories (quote (obsolete export)) :trust (quote low)) (make-org-lint-checker :name (quote unknown-options-item) :description "Report unknown items in OPTIONS keyword" :categories (quote (export)) :trust (quote low)) (make-org-lint-checker :name (quote invalid-macro-argument-and-template) :description "Report spurious macro arguments or invalid macro templates" :categories (quote (export)) :trust (quote low)) (make-org-lint-checker :name (quote special-property-in-properties-drawer) :description "Report special properties in properties drawers" :categories (quote (properties))) (make-org-lint-checker :name (quote obsolete-properties-drawer) :description "Report obsolete syntax for properties drawers" :categories (quote (obsolete properties))) (make-org-lint-checker :name (quote undefined-footnote-reference) :description "Report missing definition for footnote references" :categories (quote (footnote))) (make-org-lint-checker :name (quote unreferenced-footnote-definition) :description "Report missing reference for footnote definitions" :categories (quote (footnote))) (make-org-lint-checker :name (quote extraneous-element-in-footnote-section) :description "Report non-footnote definitions in footnote section" :categories (quote (footnote))) (make-org-lint-checker :name (quote invalid-keyword-syntax) :description "Report probable invalid keywords" :trust (quote low)) (make-org-lint-checker :name (quote invalid-block) :description "Report invalid blocks" :trust (quote low)) (make-org-lint-checker :name (quote misplaced-planning-info) :description "Report misplaced planning info line" :trust (quote low)) (make-org-lint-checker :name (quote incomplete-drawer) :description "Report probable incomplete drawers" :trust (quote low)) (make-org-lint-checker :name (quote indented-diary-sexp) :description "Report probable indented diary-sexps" :trust (quote low)) (make-org-lint-checker :name (quote quote-section) :description "Report obsolete QUOTE section" :categories (quote (obsolete)) :trust (quote low)) (make-org-lint-checker :name (quote file-application) :description "Report obsolete \"file+application\" link" :categories (quote (link obsolete))) (make-org-lint-checker :name (quote empty-headline-with-tags) :description "Report ambiguous empty headlines with tags" :categories (quote (headline)) :trust (quote low))))
                nil [4588 10414])
            ("org-lint--collect-duplicates" function (:arguments ("ast" "type" "extract-key" "extract-position" "build-message")) nil [10416 11509])
            ("org-lint-duplicate-custom-id" function (:arguments ("ast")) nil [11511 11939])
            ("org-lint-duplicate-name" function (:arguments ("ast")) nil [11941 12350])
            ("org-lint-duplicate-target" function (:arguments ("ast")) nil [12352 12668])
            ("org-lint-duplicate-footnote-definition" function (:arguments ("ast")) nil [12670 13001])
            ("org-lint-orphaned-affiliated-keywords" function (:arguments ("ast")) nil [13003 13628])
            ("org-lint-obsolete-affiliated-keywords" function (:arguments ("_")) nil [13630 14277])
            ("org-lint-deprecated-export-blocks" function (:arguments ("ast")) nil [14279 14757])
            ("org-lint-deprecated-header-syntax" function (:arguments ("ast")) nil [14759 15728])
            ("org-lint-missing-language-in-src-block" function (:arguments ("ast")) nil [15730 15976])
            ("org-lint-missing-backend-in-export-block" function (:arguments ("ast")) nil [15978 16225])
            ("org-lint-invalid-babel-call-block" function (:arguments ("ast")) nil [16227 16701])
            ("org-lint-deprecated-category-setup" function (:arguments ("ast")) nil [16703 17069])
            ("org-lint-invalid-coderef-link" function (:arguments ("ast")) nil [17071 17481])
            ("org-lint-invalid-custom-id-link" function (:arguments ("ast")) nil [17483 17879])
            ("org-lint-invalid-fuzzy-link" function (:arguments ("ast")) nil [17881 18371])
            ("org-lint-invalid-id-link" function (:arguments ("ast")) nil [18373 18682])
            ("org-lint-special-property-in-properties-drawer" function (:arguments ("ast")) nil [18684 19035])
            ("org-lint-obsolete-properties-drawer" function (:arguments ("ast")) nil [19037 19638])
            ("org-lint-link-to-local-file" function (:arguments ("ast")) nil [19640 20157])
            ("org-lint-non-existent-setupfile-parameter" function (:arguments ("ast")) nil [20159 20594])
            ("org-lint-wrong-include-link-parameter" function (:arguments ("ast")) nil [20596 22057])
            ("org-lint-obsolete-include-markup" function (:arguments ("ast")) nil [22059 22739])
            ("org-lint-unknown-options-item" function (:arguments ("ast")) nil [22741 23556])
            ("org-lint-invalid-macro-argument-and-template" function (:arguments ("ast")) nil [23558 25911])
            ("org-lint-undefined-footnote-reference" function (:arguments ("ast")) nil [25913 26371])
            ("org-lint-unreferenced-footnote-definition" function (:arguments ("ast")) nil [26373 26847])
            ("org-lint-colon-in-name" function (:arguments ("ast")) nil [26849 27328])
            ("org-lint-misplaced-planning-info" function (:arguments ("_")) nil [27330 27725])
            ("org-lint-incomplete-drawer" function (:arguments ("_")) nil [27727 28298])
            ("org-lint-indented-diary-sexp" function (:arguments ("_")) nil [28300 28663])
            ("org-lint-invalid-block" function (:arguments ("_")) nil [28665 29502])
            ("org-lint-invalid-keyword-syntax" function (:arguments ("_")) nil [29504 30155])
            ("org-lint-extraneous-element-in-footnote-section" function (:arguments ("ast")) nil [30157 30800])
            ("org-lint-quote-section" function (:arguments ("ast")) nil [30802 31147])
            ("org-lint-file-application" function (:arguments ("ast")) nil [31149 31402])
            ("org-lint-wrong-header-argument" function (:arguments ("ast")) nil [31404 34035])
            ("org-lint-wrong-header-value" function (:arguments ("ast")) nil [34037 36369])
            ("org-lint-empty-headline-with-tags" function (:arguments ("ast")) nil [36371 36718])
            ("org-lint--report-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map tabulated-list-mode-map) (define-key map (kbd "RET") (quote org-lint--jump-to-source)) (define-key map (kbd "TAB") (quote org-lint--show-source)) (define-key map (kbd "C-j") (quote org-lint--show-source)) (define-key map (kbd "h") (quote org-lint--hide-checker)) (define-key map (kbd "i") (quote org-lint--ignore-checker)) map)) nil [36738 37206])
            ("define-derived-mode" code nil nil [37208 37611])
            ("org-lint--generate-reports" function (:arguments ("buffer" "checkers")) nil [37613 38895])
            ("defvar-local" code nil nil [38897 38994])
            ("defvar-local" code nil nil [38996 39090])
            ("org-lint--refresh-reports" function nil nil [39092 39272])
            ("org-lint--current-line" function nil nil [39274 39409])
            ("org-lint--current-checker" function (:arguments ("entry")) nil [39411 39640])
            ("org-lint--display-reports" function (:arguments ("source" "checkers")) nil [39642 40154])
            ("org-lint--jump-to-source" function (:user-visible-flag t) nil [40156 40440])
            ("org-lint--show-source" function (:user-visible-flag t) nil [40442 40657])
            ("org-lint--hide-checker" function (:user-visible-flag t) nil [40659 40979])
            ("org-lint--ignore-checker" function (:user-visible-flag t) nil [40981 41284])
            ("org-lint" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [41324 42908])
            ("org-lint" package nil nil [42911 42930]))          
      :file "org-lint.el"
      :pointmax 42957
      :fsize 42956
      :lastmodtime '(22842 50887 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [1672 1689])
            ("org" include nil nil [1690 1704])
            ("gnus-util" include nil nil [1705 1725])
            ("gnus-art" include nil nil [1726 1745])
            ("mail-utils" include nil nil [1746 1767])
            ("org-agenda" include nil nil [1768 1789])
            ("org-capture" include nil nil [1790 1812])
            ("org-contacts" customgroup (:user-visible-flag t) nil [1814 1894])
            ("org-contacts-files" variable nil nil [1896 2075])
            ("org-contacts-email-property" variable (:default-value "EMAIL") nil [2077 2215])
            ("org-contacts-tel-property" variable (:default-value "PHONE") nil [2217 2352])
            ("org-contacts-address-property" variable (:default-value "ADDRESS") nil [2354 2490])
            ("org-contacts-birthday-property" variable (:default-value "BIRTHDAY") nil [2492 2636])
            ("org-contacts-note-property" variable (:default-value "NOTE") nil [2638 2765])
            ("org-contacts-alias-property" variable (:default-value "ALIAS") nil [2767 2902])
            ("org-contacts-ignore-property" variable (:default-value "IGNORE") nil [2904 3086])
            ("org-contacts-birthday-format" variable (:default-value "Birthday: %l (%Y)") nil [3089 3376])
            ("org-contacts-last-read-mail-property" variable (:default-value "LAST_READ_MAIL") nil [3378 3549])
            ("org-contacts-icon-property" variable (:default-value "ICON") nil [3551 3678])
            ("org-contacts-nickname-property" variable (:default-value "NICKNAME") nil [3680 3821])
            ("org-contacts-icon-size" variable (:default-value 32) nil [3823 3931])
            ("org-contacts-icon-use-gravatar" variable (:default-value (fboundp (quote gravatar-retrieve))) nil [3933 4093])
            ("org-contacts-completion-ignore-case" variable (:default-value t) nil [4095 4226])
            ("org-contacts-group-prefix" variable (:default-value "+") nil [4228 4326])
            ("org-contacts-tags-props-prefix" variable (:default-value "#") nil [4328 4445])
            ("org-contacts-matcher" variable (:default-value (mapconcat (function identity) (mapcar (lambda (x) (concat x "<>\"\"")) (list org-contacts-email-property org-contacts-alias-property org-contacts-tel-property org-contacts-address-property org-contacts-birthday-property)) "|")) nil [4447 4884])
            ("org-contacts-email-link-description-format" variable (:default-value "%s (%d)") nil [4886 5089])
            ("org-contacts-vcard-file" variable (:default-value "contacts.vcf") nil [5091 5213])
            ("org-contacts-enable-completion" variable (:default-value t) nil [5215 5371])
            ("org-contacts-complete-functions" variable (:default-value (quote (org-contacts-complete-group org-contacts-complete-tags-props org-contacts-complete-name))) nil [5373 5613])
            ("declare-function" code nil nil [5659 5702])
            ("declare-function" code nil nil [5703 5758])
            ("declare-function" code nil nil [5759 5820])
            ("declare-function" code nil nil [5821 5890])
            ("declare-function" code nil nil [5891 5961])
            ("declare-function" code nil nil [5962 6006])
            ("declare-function" code nil nil [6007 6061])
            ("declare-function" code nil nil [6062 6129])
            ("declare-function" code nil nil [6130 6183])
            ("declare-function" code nil nil [6184 6237])
            ("declare-function" code nil nil [6238 6286])
            ("org-contacts-property-values-separators" variable
               (:constant-flag t
                :default-value "[,; 	
]+")
                nil [6288 6483])
            ("org-contacts-keymap" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map "M" (quote org-contacts-view-send-email)) (define-key map "i" (quote org-contacts-view-switch-to-irc-buffer)) map)) nil [6485 6729])
            ("org-contacts-db" variable nil nil [6731 6786])
            ("org-contacts-last-update" variable nil nil [6788 6883])
            ("org-contacts-files" function nil nil [6885 7029])
            ("org-contacts-db-need-update-p" function nil nil [7031 7385])
            ("org-contacts-db-has-dead-markers-p" function (:arguments ("org-contacts-db")) nil [7387 7895])
            ("org-contacts-db" function nil nil [7897 10207])
            ("org-contacts-at-point" function (:arguments ("pom")) nil [10209 10479])
            ("org-contacts-filter" function (:arguments ("name-match" "tags-match" "prop-match")) nil [10481 11429])
            ("when" code nil nil [11431 11725])
            ("org-contacts-try-completion-prefix" function (:arguments ("to-match" "collection" "predicate")) nil [11727 12727])
            ("org-contacts-compare-strings" function (:arguments ("s1" "start1" "end1" "s2" "start2" "end2" "ignore-case")) nil [12729 13255])
            ("org-contacts-common-substring" function (:arguments ("s1" "start1" "end1" "s2" "start2" "end2")) nil [13257 14727])
            ("org-contacts-all-completions-prefix" function (:arguments ("to-match" "collection" "predicate")) nil [14729 15650])
            ("org-contacts-make-collection-prefix" function (:arguments ("collection")) nil [15652 16538])
            ("org-contacts-display-sort-function" function (:arguments ("completions")) nil [16540 17148])
            ("org-contacts-test-completion-prefix" function (:arguments ("string" "collection" "predicate")) nil [17150 17350])
            ("org-contacts-boundaries-prefix" function (:arguments ("string" "collection" "predicate" "suffix")) nil [17352 17508])
            ("org-contacts-metadata-prefix" function (:arguments ("string" "collection" "predicate")) nil [17510 17727])
            ("org-contacts-complete-group" function (:arguments ("start" "end" "string")) nil [17729 19521])
            ("org-contacts-complete-tags-props" function (:arguments ("start" "end" "string")) nil [19523 21013])
            ("org-contacts-remove-ignored-property-values" function (:arguments ("ignore-list" "list")) nil [21015 21309])
            ("org-contacts-complete-name" function (:arguments ("start" "end" "string")) nil [21311 22662])
            ("org-contacts-message-complete-function" function (:arguments ("start")) nil [22664 23487])
            ("org-contacts-gnus-get-name-email" function nil nil [23489 23723])
            ("org-contacts-gnus-article-from-get-marker" function nil nil [23725 24159])
            ("org-contacts-gnus-article-from-goto" function (:user-visible-flag t) nil [24161 24519])
            ("with-no-warnings" code nil nil [24521 24553])
            ("org-contacts-anniversaries" function (:arguments ("field" "format")) nil [24586 25833])
            ("org-completing-read-date" function (:arguments ("prompt" "collection" "predicate" "require-match" "initial-input" "hist" "def" "inherit-input-method")) nil [25835 26172])
            ("add-to-list" code nil nil [26174 26296])
            ("org-contacts-template-name" function (:arguments ("return-value")) nil [26298 26563])
            ("org-contacts-template-email" function (:arguments ("return-value")) nil [26565 26870])
            ("org-contacts-gnus-store-last-mail" function nil nil [26872 27551])
            ("org-contacts-icon-as-string" function nil nil [27553 27909])
            ("org-contacts" function
               (:user-visible-flag t
                :arguments ("name"))
                nil [27926 28724])
            ("org-contacts-completing-read" function (:arguments ("prompt" "predicate" "initial-input" "hist" "def" "inherit-input-method")) nil [28726 29082])
            ("org-contacts-format-name" function (:arguments ("name")) nil [29084 29274])
            ("org-contacts-format-email" function (:arguments ("name" "email")) nil [29276 29510])
            ("org-contacts-check-mail-address" function (:arguments ("mail")) nil [29512 29930])
            ("org-contacts-gnus-check-mail-address" function nil nil [29932 30299])
            ("org-contacts-gnus-insinuate" function nil nil [30301 30864])
            ("org-contacts-setup-completion-at-point" function nil nil [30866 31109])
            ("org-contacts-unload-hook" function nil nil [31111 31221])
            ("when" code nil nil [31223 31382])
            ("org-contacts-wl-get-from-header-content" function nil nil [31384 32175])
            ("org-contacts-wl-get-name-email" function nil nil [32177 32511])
            ("org-contacts-template-wl-name" function (:arguments ("return-value")) nil [32513 32788])
            ("org-contacts-template-wl-email" function (:arguments ("return-value")) nil [32790 33112])
            ("org-contacts-view-send-email" function
               (:user-visible-flag t
                :arguments ("ask"))
                nil [33114 34152])
            ("org-contacts-get-icon" function (:arguments ("pom")) nil [34154 35301])
            ("org-contacts-irc-buffer" function (:arguments ("pom")) nil [35303 35689])
            ("org-contacts-irc-number-of-unread-messages" function (:arguments ("pom")) nil [35691 36091])
            ("org-contacts-view-switch-to-irc-buffer" function (:user-visible-flag t) nil [36093 36371])
            ("org-contacts-completing-read-nickname" function (:arguments ("prompt" "collection" "predicate" "require-match" "initial-input" "hist" "def" "inherit-input-method")) nil [36373 36834])
            ("erc-nicknames-list" function nil nil [36836 37091])
            ("add-to-list" code nil nil [37093 37228])
            ("org-contacts-vcard-escape" function (:arguments ("str")) nil [37230 37557])
            ("org-contacts-vcard-encode-name" function (:arguments ("name")) nil [37559 37892])
            ("org-contacts-vcard-format" function (:arguments ("contact")) nil [37894 40008])
            ("org-contacts-export-as-vcard" function
               (:user-visible-flag t
                :arguments ("name" "file" "to-buffer"))
                nil [40010 41041])
            ("org-contacts-export-as-vcard-internal" function (:arguments ("name" "file" "to-buffer")) nil [41043 41921])
            ("org-contacts-show-map" function
               (:user-visible-flag t
                :arguments ("name"))
                nil [41923 42417])
            ("org-contacts-strip-link" function (:arguments ("link")) nil [42419 43078])
            ("org-link-set-parameters" code nil nil [43192 43223])
            ("org-contacts-split-property" function (:arguments ("string" "separators" "omit-nulls")) nil [43225 44897])
            ("org-contacts" package nil nil [44899 44922]))          
      :file "org-contacts.el"
      :pointmax 44954
      :fsize 44957
      :lastmodtime '(22842 50887 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [1554 1571])
            ("org" include nil nil [1572 1586])
            ("org-id" include nil nil [1587 1604])
            ("vc-git" include nil nil [1605 1622])
            ("org-attach" customgroup (:user-visible-flag t) nil [1624 1737])
            ("org-attach-directory" variable (:default-value "data/") nil [1739 1970])
            ("org-attach-commit" variable (:default-value t) nil [1972 2195])
            ("org-attach-git-annex-cutoff" variable (:default-value (* 32 1024)) nil [2197 2466])
            ("org-attach-auto-tag" variable (:default-value "ATTACH") nil [2468 2675])
            ("org-attach-file-list-property" variable (:default-value "Attachments") nil [2677 3083])
            ("org-attach-method" variable (:default-value (quote cp)) nil [3085 3664])
            ("org-attach-expert" variable nil nil [3666 3813])
            ("org-attach-allow-inheritance" variable (:default-value t) nil [3815 3956])
            ("org-attach-inherited" variable nil nil [3958 4067])
            ("org-attach-store-link-p" variable nil nil [4069 4367])
            ("org-attach-archive-delete" variable nil nil [4369 4744])
            ("org-attach-annex-auto-get" variable (:default-value (quote ask)) nil [4746 5164])
            ("org-attach" function (:user-visible-flag t) nil [5181 8272])
            ("org-attach-dir" function (:arguments ("create-if-not-exists-p")) nil [8274 10031])
            ("org-attach-check-absolute-path" function (:arguments ("dir")) nil [10033 10632])
            ("org-attach-set-directory" function (:user-visible-flag t) nil [10634 10973])
            ("org-attach-set-inherit" function (:user-visible-flag t) nil [10975 11383])
            ("org-attach-use-annex" function nil nil [11385 11707])
            ("org-attach-annex-get-maybe" function (:arguments ("path")) nil [11709 12571])
            ("org-attach-commit" function nil nil [12573 13721])
            ("org-attach-tag" function (:arguments ("off")) nil [13723 13950])
            ("org-attach-untag" function nil nil [13952 14029])
            ("org-attach-store-link" function (:arguments ("file")) nil [14031 14313])
            ("org-attach-attach" function
               (:user-visible-flag t
                :arguments ("file" "visit-dir" "method"))
                nil [14315 15573])
            ("org-attach-attach-cp" function (:user-visible-flag t) nil [15575 15729])
            ("org-attach-attach-mv" function (:user-visible-flag t) nil [15730 15894])
            ("org-attach-attach-ln" function (:user-visible-flag t) nil [15895 16200])
            ("org-attach-attach-lns" function (:user-visible-flag t) nil [16201 16517])
            ("org-attach-new" function
               (:user-visible-flag t
                :arguments ("file"))
                nil [16519 17011])
            ("org-attach-delete-one" function
               (:user-visible-flag t
                :arguments ("file"))
                nil [17013 17524])
            ("org-attach-delete-all" function
               (:user-visible-flag t
                :arguments ("force"))
                nil [17526 18218])
            ("org-attach-sync" function (:user-visible-flag t) nil [18220 18887])
            ("org-attach-file-list" function (:arguments ("dir")) nil [18889 19131])
            ("org-attach-reveal" function
               (:user-visible-flag t
                :arguments ("if-exists"))
                nil [19133 19427])
            ("org-attach-reveal-in-emacs" function (:user-visible-flag t) nil [19429 19611])
            ("org-attach-open" function
               (:user-visible-flag t
                :arguments ("in-emacs"))
                nil [19613 20309])
            ("org-attach-open-in-emacs" function (:user-visible-flag t) nil [20311 20460])
            ("org-attach-expand" function (:arguments ("file")) nil [20462 20666])
            ("org-attach-expand-link" function (:arguments ("file")) nil [20668 20909])
            ("org-attach-archive-delete-maybe" function nil nil [20911 21273])
            ("add-hook" code nil nil [21275 21336])
            ("org-attach" package nil nil [21338 21359]))          
      :file "org-attach.el"
      :pointmax 21464
      :fsize 21463
      :lastmodtime '(22842 50887 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl" include nil nil [2367 2380])
            ("org-registry" customgroup (:user-visible-flag t) nil [2383 2448])
            ("org-registry-file" variable (:default-value (concat (getenv "HOME") "/.org-registry.el")) nil [2450 2590])
            ("org-registry-find-file" variable (:default-value (quote find-file-other-window)) nil [2592 2720])
            ("org-registry-alist" variable nil nil [2722 2795])
            ("org-registry-show" function
               (:user-visible-flag t
                :arguments ("visit"))
                nil [2812 4478])
            ("org-registry-display-files" function (:arguments ("files" "link")) nil [4480 4915])
            ("org-registry-assoc-all" function (:arguments ("link" "registry")) nil [4917 5117])
            ("org-registry-find-all" function (:arguments ("test" "registry")) nil [5119 5351])
            ("org-registry-visit" function (:user-visible-flag t) nil [5368 5514])
            ("org-registry-initialize" function
               (:user-visible-flag t
                :arguments ("from-scratch"))
                nil [5531 6358])
            ("org-registry-insinuate" function (:user-visible-flag t) nil [6375 6636])
            ("org-registry-get-entries" function (:arguments ("file")) nil [6638 7442])
            ("org-registry-update" function (:user-visible-flag t) nil [7459 8467])
            ("org-registry-create" function (:arguments ("entries")) nil [8469 9074])
            ("org-registry" package nil nil [9076 9099]))          
      :file "org-registry.el"
      :pointmax 9161
      :fsize 9160
      :lastmodtime '(22842 50887 0 0)
      :unmatched-syntax '((close-paren 2380 . 2381) (symbol 2347 . 2364) (open-paren 2346 . 2347)))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("org-toc" package nil nil [1140 1158])
            ("cl" include nil nil [1180 1193])
            ("org-toc-base-buffer" variable nil nil [1218 1250])
            ("org-toc-columns-shown" variable nil nil [1251 1285])
            ("org-toc-odd-levels-only" variable nil nil [1286 1322])
            ("org-toc-config-alist" variable nil nil [1323 1356])
            ("org-toc-cycle-global-status" variable nil nil [1357 1397])
            ("defalias" code nil nil [1398 1450])
            ("org-toc" customgroup (:user-visible-flag t) nil [1452 1573])
            ("org-toc-default-depth" variable (:default-value 1) nil [1575 1779])
            ("org-toc-follow-mode" variable nil nil [1781 1961])
            ("org-toc-info-mode" variable nil nil [1963 2158])
            ("org-toc-show-subtree-mode" variable nil nil [2160 2411])
            ("org-toc-recenter-mode" variable (:default-value t) nil [2413 2573])
            ("org-toc-recenter" variable nil nil [2575 2825])
            ("org-toc-info-exclude" variable (:default-value (quote ("ALLTAGS"))) nil [2827 3017])
            ("org-toc-mode-map" variable (:default-value (make-sparse-keymap)) nil [3037 3114])
            ("org-toc-mode" function (:user-visible-flag t) nil [3116 3374])
            ("define-key" code nil nil [3392 3446])
            ("define-key" code nil nil [3447 3507])
            ("define-key" code nil nil [3508 3563])
            ("define-key" code nil nil [3564 3621])
            ("define-key" code nil nil [3622 3674])
            ("define-key" code nil nil [3675 3731])
            ("define-key" code nil nil [3752 3803])
            ("define-key" code nil nil [3804 3851])
            ("define-key" code nil nil [3852 3902])
            ("define-key" code nil nil [3903 3950])
            ("define-key" code nil nil [3951 4003])
            ("define-key" code nil nil [4004 4060])
            ("define-key" code nil nil [4061 4115])
            ("define-key" code nil nil [4116 4168])
            ("define-key" code nil nil [4169 4252])
            ("define-key" code nil nil [4253 4336])
            ("define-key" code nil nil [4337 4420])
            ("define-key" code nil nil [4421 4504])
            ("define-key" code nil nil [4505 4552])
            ("define-key" code nil nil [4553 4600])
            ("define-key" code nil nil [4601 4648])
            ("define-key" code nil nil [4699 4750])
            ("define-key" code nil nil [4751 4798])
            ("define-key" code nil nil [4846 4930])
            ("define-key" code nil nil [4948 4998])
            ("define-key" code nil nil [4999 5046])
            ("define-key" code nil nil [5047 5103])
            ("define-key" code nil nil [5104 5163])
            ("define-key" code nil nil [5201 5285])
            ("define-key" code nil nil [5324 5417])
            ("org-toc-follow-mode" function (:user-visible-flag t) nil [5441 5665])
            ("org-toc-info-mode" function (:user-visible-flag t) nil [5667 5879])
            ("org-toc-show-subtree-mode" function (:user-visible-flag t) nil [5881 6141])
            ("org-toc-recenter-mode" function
               (:user-visible-flag t
                :arguments ("line"))
                nil [6143 6599])
            ("org-toc-cycle-subtree" function (:user-visible-flag t) nil [6601 7309])
            ("org-toc-before-first-heading-p" function nil nil [7382 7529])
            ("org-toc-show" function
               (:user-visible-flag t
                :arguments ("depth" "position"))
                nil [7546 9845])
            ("org-toc-goto" function
               (:user-visible-flag t
                :arguments ("jump" "cycle"))
                nil [9873 10700])
            ("org-toc-cycle-base-buffer" function (:user-visible-flag t) nil [10702 10907])
            ("org-toc-jump" function
               (:user-visible-flag t
                :arguments ("delete"))
                nil [10909 11166])
            ("org-toc-previous" function (:user-visible-flag t) nil [11168 11498])
            ("org-toc-next" function (:user-visible-flag t) nil [11500 11696])
            ("org-toc-forward" function (:user-visible-flag t) nil [11698 11995])
            ("org-toc-back" function (:user-visible-flag t) nil [11997 12300])
            ("org-toc-quit" function (:user-visible-flag t) nil [12302 12438])
            ("org-toc-columns" function (:user-visible-flag t) nil [12463 12896])
            ("org-toc-info" function (:user-visible-flag t) nil [12898 13657])
            ("org-toc-store-config" function (:user-visible-flag t) nil [13700 14369])
            ("org-toc-restore-config" function (:user-visible-flag t) nil [14371 15704])
            ("org-toc-get-headlines-status" function nil nil [15706 16279])
            ("org-toc-help" function (:user-visible-flag t) nil [16341 17709]))          
      :file "org-toc.el"
      :pointmax 17927
      :fsize 17926
      :lastmodtime '(22842 50887 0 0)
      :unmatched-syntax '((close-paren 1193 . 1194) (symbol 1160 . 1177) (open-paren 1159 . 1160)))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [983 1000])
            ("format-spec" include nil nil [1001 1023])
            ("ox" include nil nil [1024 1037])
            ("org-compat" include nil nil [1038 1059])
            ("table" include nil nil [1060 1089])
            ("org-export-define-backend" code nil nil [1112 4501])
            ("declare-function" code nil nil [4593 4648])
            ("declare-function" code nil nil [4649 4710])
            ("declare-function" code nil nil [4711 4775])
            ("declare-function" code nil nil [4776 4859])
            ("declare-function" code nil nil [4860 4918])
            ("nxml-auto-insert-xml-declaration-flag" variable nil nil [4920 4966])
            ("archive-zip-extract" variable nil nil [4982 5010])
            ("hfy-end-span-handler" variable nil nil [5033 5062])
            ("hfy-begin-span-handler" variable nil nil [5088 5119])
            ("hfy-face-to-css" variable nil nil [5145 5169])
            ("hfy-html-quote-map" variable nil nil [5195 5222])
            ("hfy-html-quote-regex" variable nil nil [5248 5277])
            ("org-odt-lib-dir" variable
               (:constant-flag t
                :default-value (file-name-directory (or load-file-name (buffer-file-name))))
                nil [5330 5524])
            ("org-odt-data-dir" variable (:default-value (expand-file-name "../../etc/" org-odt-lib-dir)) nil [5526 5713])
            ("org-odt-special-string-regexps" variable
               (:constant-flag t
                :default-value (quote (("\\\\-" . "&#x00ad;\\1") ("---\\([^-]\\)" . "&#x2014;\\1") ("--\\([^-]\\)" . "&#x2013;\\1") ("\\.\\.\\." . "&#x2026;"))))
                nil [5715 5981])
            ("org-odt-schema-dir-list" variable
               (:constant-flag t
                :default-value (list (and org-odt-data-dir (expand-file-name "./schema/" org-odt-data-dir)) (eval-when-compile (and (boundp (quote org-odt-data-dir)) org-odt-data-dir (expand-file-name "./schema/" org-odt-data-dir)))))
                nil [5983 6508])
            ("org-odt-styles-dir-list" variable
               (:constant-flag t
                :default-value (list (and org-odt-data-dir (expand-file-name "./styles/" org-odt-data-dir)) (eval-when-compile (and (boundp (quote org-odt-data-dir)) org-odt-data-dir (expand-file-name "./styles/" org-odt-data-dir))) (expand-file-name "../etc/styles/" org-odt-lib-dir) (expand-file-name "./etc/styles/" org-odt-lib-dir) (expand-file-name "./org/" data-directory)))
                nil [6510 7186])
            ("org-odt-styles-dir" variable
               (:constant-flag t
                :default-value (let ((styles-dir (cl-find-if (lambda (dir) (and dir (file-readable-p (expand-file-name "OrgOdtContentTemplate.xml" dir)) (file-readable-p (expand-file-name "OrgOdtStyles.xml" dir)))) org-odt-styles-dir-list))) (unless styles-dir (error "Error (ox-odt): Cannot find factory styles files, aborting")) styles-dir))
                nil [7188 8108])
            ("org-odt-bookmark-prefix" variable
               (:constant-flag t
                :default-value "OrgXref.")
                nil [8110 8155])
            ("org-odt-manifest-file-entry-tag" variable
               (:constant-flag t
                :default-value "
<manifest:file-entry manifest:media-type=\"%s\" manifest:full-path=\"%s\"%s/>")
                nil [8157 8283])
            ("org-odt-file-extensions" variable
               (:constant-flag t
                :default-value (quote (("odt" . "OpenDocument Text") ("ott" . "OpenDocument Text Template") ("odm" . "OpenDocument Master Document") ("ods" . "OpenDocument Spreadsheet") ("ots" . "OpenDocument Spreadsheet Template") ("odg" . "OpenDocument Drawing (Graphics)") ("otg" . "OpenDocument Drawing Template") ("odp" . "OpenDocument Presentation") ("otp" . "OpenDocument Presentation Template") ("odi" . "OpenDocument Image") ("odf" . "OpenDocument Formula") ("odc" . "OpenDocument Chart"))))
                nil [8285 8827])
            ("org-odt-table-style-format" variable
               (:constant-flag t
                :default-value "
<style:style style:name=\"%s\" style:family=\"table\">
  <style:table-properties style:rel-width=\"%s%%\" fo:margin-top=\"0cm\" fo:margin-bottom=\"0.20cm\" table:align=\"center\"/>
</style:style>
")
                nil [8829 9114])
            ("org-odt-automatic-styles" variable (:default-value (quote nil)) nil [9116 9703])
            ("org-odt-object-counters" variable nil nil [9705 9877])
            ("org-odt-src-block-paragraph-format" variable (:default-value "<style:style style:name=\"OrgSrcBlock\" style:family=\"paragraph\" style:parent-style-name=\"Preformatted_20_Text\">
   <style:paragraph-properties fo:background-color=\"%s\" fo:padding=\"0.049cm\" fo:border=\"0.51pt solid #000000\" style:shadow=\"none\">
    <style:background-image/>
   </style:paragraph-properties>
   <style:text-properties fo:color=\"%s\"/>
  </style:style>") nil [9879 10556])
            ("hfy-optimizations" variable nil nil [10558 10584])
            ("org-odt-embedded-formulas-count" variable nil nil [10585 10627])
            ("org-odt-embedded-images-count" variable nil nil [10628 10668])
            ("org-odt-image-size-probe-method" variable (:default-value (append (and (executable-find "identify") (quote (imagemagick))) (quote (emacs fixed)))) nil [10669 10861])
            ("org-odt-default-image-sizes-alist" variable (:default-value (quote (("as-char" 5 . 0.4) ("paragraph" 5 . 5)))) nil [10863 11031])
            ("org-odt-max-image-size" variable (:default-value (quote (17.0 . 20.0))) nil [11184 11277])
            ("org-odt-label-styles" variable
               (:constant-flag t
                :default-value (quote (("math-formula" "%c" "text" "(%n)") ("math-label" "(%n)" "text" "(%n)") ("category-and-value" "%e %n: %c" "category-and-value" "%e %n") ("value" "%e %n: %c" "value" "%n"))))
                nil [11279 12278])
            ("org-odt-category-map-alist" variable (:default-value (quote (("__Table__" "Table" "value" "Table" org-odt--enumerable-p) ("__Figure__" "Illustration" "value" "Figure" org-odt--enumerable-image-p) ("__MathFormula__" "Text" "math-formula" "Equation" org-odt--enumerable-formula-p) ("__DvipngImage__" "Equation" "value" "Equation" org-odt--enumerable-latex-image-p) ("__Listing__" "Listing" "value" "Listing" org-odt--enumerable-p)))) nil [12280 13443])
            ("org-odt-manifest-file-entries" variable nil nil [13445 13487])
            ("hfy-user-sheet-assoc" variable nil nil [13488 13517])
            ("org-odt-zip-dir" variable nil nil [13519 13603])
            ("org-export-odt" customgroup (:user-visible-flag t) nil [13642 13765])
            ("org-odt-prettify-xml" variable nil nil [13784 14137])
            ("rng-loc" include nil nil [14162 14180])
            ("org-odt-schema-dir" variable (:default-value (cl-find-if (lambda (dir) (and dir (file-expand-wildcards (expand-file-name "od-manifest-schema*.rnc" dir)) (file-expand-wildcards (expand-file-name "od-schema*.rnc" dir)) (file-readable-p (expand-file-name "schemas.xml" dir)))) org-odt-schema-dir-list)) nil [14181 16043])
            ("org-odt-content-template-file" variable nil nil [16068 16414])
            ("org-odt-styles-file" variable nil nil [16416 17961])
            ("org-odt-display-outline-level" variable (:default-value 2) nil [17963 18166])
            ("org-odt-convert-processes" variable (:default-value (quote (("LibreOffice" "soffice --headless --convert-to %f%x --outdir %d %i") ("unoconv" "unoconv -f %f -o %d %i")))) nil [18194 19255])
            ("org-odt-convert-process" variable (:default-value "LibreOffice") nil [19257 19788])
            ("org-odt-convert-capabilities" variable (:default-value (quote (("Text" ("odt" "ott" "doc" "rtf" "docx") (("pdf" "pdf") ("odt" "odt") ("rtf" "rtf") ("ott" "ott") ("doc" "doc" ":\"MS Word 97\"") ("docx" "docx") ("html" "html"))) ("Web" ("html") (("pdf" "pdf") ("odt" "odt") ("html" "html"))) ("Spreadsheet" ("ods" "ots" "xls" "csv" "xlsx") (("pdf" "pdf") ("ots" "ots") ("html" "html") ("csv" "csv") ("ods" "ods") ("xls" "xls") ("xlsx" "xlsx"))) ("Presentation" ("odp" "otp" "ppt" "pptx") (("pdf" "pdf") ("swf" "swf") ("odp" "odp") ("otp" "otp") ("ppt" "ppt") ("pptx" "pptx") ("odg" "odg")))))) nil [19790 22389])
            ("org-odt-preferred-output-format" variable nil nil [22391 23203])
            ("put" code nil nil [23219 23287])
            ("org-odt-format-drawer-function" variable (:default-value (lambda (_name contents) contents)) nil [23304 23768])
            ("org-odt-format-headline-function" variable (:default-value (quote org-odt-format-headline-default-function)) nil [23786 24373])
            ("org-odt-format-inlinetask-function" variable (:default-value (quote org-odt-format-inlinetask-default-function)) nil [24394 25041])
            ("org-odt-with-latex" variable (:default-value org-export-with-latex) nil [25056 26154])
            ("org-odt-inline-formula-rules" variable (:default-value (quote (("file" . "\\.\\(mathml\\|mml\\|odf\\)\\'")))) nil [26169 26629])
            ("org-odt-inline-image-rules" variable (:default-value (quote (("file" . "\\.\\(jpeg\\|jpg\\|png\\|gif\\|svg\\)\\'")))) nil [26631 27097])
            ("org-odt-pixels-per-inch" variable (:default-value 96.0) nil [27099 27396])
            ("org-odt-create-custom-styles-for-srcblocks" variable (:default-value t) nil [27415 28151])
            ("org-odt-fontify-srcblocks" variable (:default-value t) nil [28153 28504])
            ("org-odt-table-styles" variable (:default-value (quote (("OrgEquation" "OrgEquation" ((use-first-column-styles . t) (use-last-column-styles . t))) ("TableWithHeaderRowAndColumn" "Custom" ((use-first-row-styles . t) (use-first-column-styles . t))) ("TableWithFirstRowandLastRow" "Custom" ((use-first-row-styles . t) (use-last-row-styles . t))) ("GriddedTable" "Custom" nil)))) nil [28519 32502])
            ("org-odt-use-date-fields" variable nil nil [32521 33820])
            ("org-odt--format-timestamp" function (:arguments ("timestamp" "end" "iso-date-p")) nil [33860 35968])
            ("org-odt--frame" function (:arguments ("text" "width" "height" "style" "extra" "anchor-type" "title-and-desc")) nil [35982 36809])
            ("org-odt--zip-extract" function (:arguments ("archive" "members" "target")) nil [36835 37705])
            ("org-odt--target" function (:arguments ("text" "id")) nil [37720 37983])
            ("org-odt--textbox" function (:arguments ("text" "width" "height" "style" "extra" "anchor-type")) nil [37999 38344])
            ("org-odt--format-toc" function (:arguments ("title" "entries" "depth")) nil [38372 39761])
            ("cl-defun" code nil nil [39763 40803])
            ("org-odt-toc" function (:arguments ("depth" "info" "scope")) nil [40805 42436])
            ("org-odt-add-automatic-style" function (:arguments ("object-type" "object-props")) nil [42461 43562])
            ("org-odt--checkbox" function (:arguments ("item")) nil [43579 43922])
            ("org-odt--build-date-styles" function (:arguments ("fmt" "style")) nil [43938 47674])
            ("org-odt-template" function (:arguments ("contents" "info")) nil [47676 58681])
            ("org-odt-bold" function (:arguments ("_bold" "contents" "_info")) nil [58722 58970])
            ("org-odt-center-block" function (:arguments ("_center-block" "contents" "_info")) nil [58992 59214])
            ("org-odt-clock" function (:arguments ("clock" "contents" "info")) nil [59229 59892])
            ("org-odt-code" function (:arguments ("code" "_contents" "_info")) nil [59906 60207])
            ("org-odt-drawer" function (:arguments ("drawer" "contents" "info")) nil [60223 60564])
            ("org-odt-dynamic-block" function (:arguments ("_dynamic-block" "contents" "_info")) nil [60587 60829])
            ("org-odt-entity" function (:arguments ("entity" "_contents" "_info")) nil [60845 61064])
            ("org-odt-example-block" function (:arguments ("example-block" "_contents" "info")) nil [61087 61311])
            ("org-odt-export-snippet" function (:arguments ("export-snippet" "_contents" "_info")) nil [61335 61631])
            ("org-odt-export-block" function (:arguments ("export-block" "_contents" "_info")) nil [61653 61971])
            ("org-odt-fixed-width" function (:arguments ("fixed-width" "_contents" "info")) nil [61992 62241])
            ("org-odt-footnote-reference" function (:arguments ("footnote-reference" "_contents" "info")) nil [62334 64691])
            ("org-odt-format-headline--wrap" function (:arguments ("headline" "backend" "info" "format-function" "extra-keys")) nil [64709 66345])
            ("org-odt-headline" function (:arguments ("headline" "contents" "info")) nil [66347 68918])
            ("org-odt-format-headline-default-function" function (:arguments ("todo" "todo-type" "priority" "text" "tags")) nil [68920 69797])
            ("org-odt-horizontal-rule" function (:arguments ("_horizontal-rule" "_contents" "_info")) nil [69822 70097])
            ("org-odt--find-verb-separator" function (:arguments ("s")) nil [70184 70561])
            ("org-odt-inline-src-block" function (:arguments ("_inline-src-block" "_contents" "_info")) nil [70563 70798])
            ("org-odt-inlinetask" function (:arguments ("inlinetask" "contents" "info")) nil [70818 71632])
            ("org-odt-format-inlinetask-default-function" function (:arguments ("todo" "todo-type" "priority" "name" "tags" "contents")) nil [71634 72198])
            ("org-odt-italic" function (:arguments ("_italic" "contents" "_info")) nil [72213 72473])
            ("org-odt-item" function (:arguments ("item" "contents" "info")) nil [72487 73060])
            ("org-odt-keyword" function (:arguments ("keyword" "_contents" "info")) nil [73076 73888])
            ("org-odt-latex-environment" function (:arguments ("latex-environment" "_contents" "info")) nil [74295 74638])
            ("org-odt-latex-fragment" function (:arguments ("latex-fragment" "_contents" "_info")) nil [74829 75202])
            ("org-odt-line-break" function (:arguments ("_line-break" "_contents" "_info")) nil [75222 75418])
            ("org-odt--enumerate" function (:arguments ("element" "info" "predicate" "n")) nil [75464 76671])
            ("org-odt-format-label" function (:arguments ("element" "info" "op")) nil [76673 79928])
            ("org-odt--copy-image-file" function (:arguments ("path")) nil [79960 80670])
            ("org-odt--image-size" function (:arguments ("file" "info" "user-width" "user-height" "scale" "dpi" "embed-as")) nil [80672 83033])
            ("org-odt-link--inline-image" function (:arguments ("element" "info")) nil [83035 86106])
            ("org-odt-link--inline-formula" function (:arguments ("element" "info")) nil [86137 88025])
            ("org-odt--copy-formula-file" function (:arguments ("src-file")) nil [88027 89191])
            ("org-odt--render-image/formula" function (:arguments ("cfg-key" "href" "width" "height" "captions" "user-frame-params" "title-and-desc")) nil [89207 93313])
            ("org-odt--enumerable-p" function (:arguments ("element" "_info")) nil [93315 93495])
            ("org-odt--enumerable-image-p" function (:arguments ("element" "info")) nil [93497 94081])
            ("org-odt--enumerable-latex-image-p" function (:arguments ("element" "info")) nil [94083 94664])
            ("org-odt--enumerable-formula-p" function (:arguments ("element" "info")) nil [94666 95098])
            ("org-odt--standalone-link-p" function (:arguments ("element" "_info" "paragraph-predicate" "link-predicate")) nil [95100 96426])
            ("org-odt-link--infer-description" function (:arguments ("destination" "info")) nil [96428 100351])
            ("org-odt-link" function (:arguments ("link" "desc" "info")) nil [100353 105247])
            ("org-odt-node-property" function (:arguments ("node-property" "_contents" "_info")) nil [105270 105652])
            ("org-odt--paragraph-style" function (:arguments ("paragraph")) nil [105670 106060])
            ("org-odt--format-paragraph" function (:arguments ("paragraph" "contents" "info" "default" "center" "quote")) nil [106062 107024])
            ("org-odt-paragraph" function (:arguments ("paragraph" "contents" "info")) nil [107026 107387])
            ("org-odt-plain-list" function (:arguments ("plain-list" "contents" "_info")) nil [107407 108189])
            ("org-odt--encode-tabs-and-spaces" function (:arguments ("line")) nil [108208 108433])
            ("org-odt--encode-plain-text" function (:arguments ("text" "no-whitespace-filling")) nil [108435 108726])
            ("org-odt-plain-text" function (:arguments ("text" "info")) nil [108728 109685])
            ("org-odt-planning" function (:arguments ("planning" "contents" "info")) nil [109703 110714])
            ("org-odt-property-drawer" function (:arguments ("_property-drawer" "contents" "_info")) nil [110739 111082])
            ("org-odt-quote-block" function (:arguments ("_quote-block" "contents" "_info")) nil [111103 111315])
            ("org-odt-format-section" function (:arguments ("text" "style" "name")) nil [111332 111617])
            ("org-odt-section" function (:arguments ("_section" "contents" "_info")) nil [111620 111830])
            ("org-odt-radio-target" function (:arguments ("radio-target" "text" "info")) nil [111851 112108])
            ("org-odt-special-block" function (:arguments ("special-block" "contents" "info")) nil [112131 113563])
            ("org-odt-hfy-face-to-css" function (:arguments ("fn")) nil [113582 114964])
            ("org-odt-htmlfontify-string" function (:arguments ("line")) nil [114966 115670])
            ("org-odt-do-format-code" function (:arguments ("code" "info" "lang" "refs" "retain-labels" "num-start")) nil [115672 117533])
            ("org-odt-format-code" function (:arguments ("element" "info")) nil [117535 118025])
            ("org-odt-src-block" function (:arguments ("src-block" "_contents" "info")) nil [118027 118721])
            ("org-odt-statistics-cookie" function (:arguments ("statistics-cookie" "_contents" "_info")) nil [118748 119106])
            ("org-odt-strike-through" function (:arguments ("_strike-through" "contents" "_info")) nil [119130 119427])
            ("org-odt-subscript" function (:arguments ("_subscript" "contents" "_info")) nil [119446 119727])
            ("org-odt-superscript" function (:arguments ("_superscript" "contents" "_info")) nil [119748 120037])
            ("org-odt-table-style-spec" function (:arguments ("element" "info")) nil [120057 120337])
            ("org-odt-get-table-cell-styles" function (:arguments ("table-cell" "info")) nil [120339 123103])
            ("org-odt-table-cell" function (:arguments ("table-cell" "contents" "info")) nil [123105 125583])
            ("org-odt-table-row" function (:arguments ("table-row" "contents" "info")) nil [125602 126845])
            ("org-odt-table-first-row-data-cells" function (:arguments ("table" "info")) nil [126860 127254])
            ("org-odt--table" function (:arguments ("table" "contents" "info")) nil [127256 129199])
            ("org-odt-table" function (:arguments ("table" "contents" "info")) nil [129201 134925])
            ("org-odt-target" function (:arguments ("target" "_contents" "info")) nil [134941 135162])
            ("org-odt-timestamp" function (:arguments ("timestamp" "_contents" "info")) nil [135181 136854])
            ("org-odt-underline" function (:arguments ("_underline" "contents" "_info")) nil [136873 137146])
            ("org-odt-verbatim" function (:arguments ("verbatim" "_contents" "_info")) nil [137164 137481])
            ("org-odt-verse-block" function (:arguments ("_verse-block" "contents" "_info")) nil [137502 138024])
            ("org-odt--translate-latex-fragments" function (:arguments ("tree" "_backend" "info")) nil [138064 141678])
            ("org-odt--translate-description-lists" function (:arguments ("tree" "_backend" "info")) nil [141822 143537])
            ("org-odt--translate-list-tables" function (:arguments ("tree" "_backend" "info")) nil [144750 146343])
            ("org-odt-create-manifest-file-entry" function (:arguments ("args")) nil [146374 146473])
            ("org-odt-write-manifest-file" function nil nil [146475 147279])
            ("org-odt--export-wrap" function (:arguments ("out-file" "body")) nil [147281 151620])
            ("org-odt-export-as-odf" function
               (:user-visible-flag t
                :arguments ("latex-frag" "odf-file"))
                nil [151675 153640])
            ("org-odt-export-as-odf-and-open" function (:user-visible-flag t) nil [153657 153941])
            ("org-odt-export-to-odt" function
               (:user-visible-flag t
                :arguments ("async" "subtreep" "visible-only" "ext-plist"))
                nil [153993 156472])
            ("org-odt-reachable-p" function (:arguments ("in-fmt" "out-fmt")) nil [156528 156871])
            ("org-odt-do-convert" function (:arguments ("in-file" "out-fmt" "open")) nil [156873 158394])
            ("org-odt-do-reachable-formats" function (:arguments ("in-fmt")) nil [158396 159222])
            ("org-odt-reachable-formats" function (:arguments ("in-fmt")) nil [159224 159514])
            ("org-odt-convert-read-params" function nil nil [159516 160163])
            ("org-odt-convert" function
               (:user-visible-flag t
                :arguments ("in-file" "out-fmt" "open"))
                nil [160180 160696])
            ("dolist" code nil nil [160727 160921])
            ("ox-odt" package nil nil [160923 160940]))          
      :file "ox-odt.el"
      :pointmax 161041
      :fsize 161040
      :lastmodtime '(22842 50887 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [1175 1192])
            ("ox-latex" include nil nil [1193 1212])
            ("unless" code nil nil [1261 1540])
            ("org-export-beamer" customgroup (:user-visible-flag t) nil [1578 1734])
            ("org-beamer-frame-level" variable (:default-value 1) nil [1736 2428])
            ("org-beamer-frame-default-options" variable nil nil [2430 2640])
            ("org-beamer-column-view-format" variable (:default-value "%45ITEM %10BEAMER_env(Env) %10BEAMER_act(Act) %4BEAMER_col(Col) %8BEAMER_opt(Opt)") nil [2642 3040])
            ("org-beamer-theme" variable (:default-value "default") nil [3042 3309])
            ("org-beamer-environments-extra" variable nil nil [3311 4339])
            ("org-beamer-outline-frame-title" variable (:default-value "Outline") nil [4341 4518])
            ("org-beamer-outline-frame-options" variable nil nil [4520 4757])
            ("org-beamer-subtitle-format" variable (:default-value "\\subtitle{%s}") nil [4760 5080])
            ("org-beamer-column-widths" variable
               (:constant-flag t
                :default-value "0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9 0.0 :ETC")
                nil [5108 5265])
            ("org-beamer-environments-special" variable
               (:constant-flag t
                :default-value (quote (("againframe" "A") ("appendix" "x") ("column" "c") ("columns" "C") ("frame" "f") ("fullframe" "F") ("ignoreheading" "i") ("note" "n") ("noteNH" "N"))))
                nil [5267 5863])
            ("org-beamer-environments-default" variable
               (:constant-flag t
                :default-value (quote (("block" "b" "\\begin{block}%a{%h}" "\\end{block}") ("alertblock" "a" "\\begin{alertblock}%a{%h}" "\\end{alertblock}") ("verse" "v" "\\begin{verse}%a %% %h" "\\end{verse}") ("quotation" "q" "\\begin{quotation}%a %% %h" "\\end{quotation}") ("quote" "Q" "\\begin{quote}%a %% %h" "\\end{quote}") ("structureenv" "s" "\\begin{structureenv}%a %% %h" "\\end{structureenv}") ("theorem" "t" "\\begin{theorem}%a%U" "\\end{theorem}") ("definition" "d" "\\begin{definition}%a%U" "\\end{definition}") ("example" "e" "\\begin{example}%a%U" "\\end{example}") ("exampleblock" "E" "\\begin{exampleblock}%a{%h}" "\\end{exampleblock}") ("proof" "p" "\\begin{proof}%a%U" "\\end{proof}") ("beamercolorbox" "o" "\\begin{beamercolorbox}%o{%h}" "\\end{beamercolorbox}"))))
                nil [5865 6980])
            ("org-beamer-verbatim-elements" variable
               (:constant-flag t
                :default-value (quote (code example-block fixed-width inline-src-block src-block verbatim)))
                nil [6982 7240])
            ("org-beamer--normalize-argument" function (:arguments ("argument" "type")) nil [7269 8005])
            ("org-beamer--element-has-overlay-p" function (:arguments ("element")) nil [8007 8554])
            ("org-export-define-derived-backend" code nil nil [8580 10316])
            ("org-beamer-bold" function (:arguments ("bold" "contents" "_info")) nil [10357 10621])
            ("org-beamer-export-block" function (:arguments ("export-block" "_contents" "_info")) nil [10643 10980])
            ("org-beamer-export-snippet" function (:arguments ("export-snippet" "_contents" "info")) nil [11004 11607])
            ("org-beamer--get-label" function (:arguments ("headline" "info")) nil [12112 12959])
            ("org-beamer--frame-level" function (:arguments ("headline" "info")) nil [12961 14104])
            ("org-beamer--format-section" function (:arguments ("headline" "contents" "info")) nil [14106 15348])
            ("org-beamer--format-frame" function (:arguments ("headline" "contents" "info")) nil [15350 18276])
            ("org-beamer--format-block" function (:arguments ("headline" "contents" "info")) nil [18278 22496])
            ("org-beamer-headline" function (:arguments ("headline" "contents" "info")) nil [22498 25583])
            ("org-beamer-item" function (:arguments ("item" "contents" "info")) nil [25597 26601])
            ("org-beamer-keyword" function (:arguments ("keyword" "contents" "info")) nil [26618 27523])
            ("org-beamer-link" function (:arguments ("link" "contents" "info")) nil [27537 28226])
            ("org-beamer-plain-list" function (:arguments ("plain-list" "contents" "info")) nil [28329 29455])
            ("org-beamer-radio-target" function (:arguments ("radio-target" "text" "info")) nil [29477 29821])
            ("org-beamer-template" function (:arguments ("contents" "info")) nil [29964 33547])
            ("org-beamer-mode-map" variable (:default-value (make-sparse-keymap)) nil [33569 33656])
            ("define-key" code nil nil [33657 33731])
            ("define-minor-mode" code nil nil [33748 33872])
            ("when" code nil nil [33874 34027])
            ("org-beamer-tag" variable
               (:default-value (quote ((t (:box (:line-width 1 :color grey40)))))
                :type "face")
                nil [34029 34163])
            ("org-beamer-property-changed" function (:arguments ("property" "value")) nil [34165 34859])
            ("add-hook" code nil nil [34861 34932])
            ("org-beamer-allowed-property-values" function (:arguments ("property")) nil [34934 35605])
            ("add-hook" code nil nil [35607 35694])
            ("org-beamer-export-as-latex" function
               (:user-visible-flag t
                :arguments ("async" "subtreep" "visible-only" "body-only" "ext-plist"))
                nil [35728 36939])
            ("org-beamer-export-to-latex" function
               (:user-visible-flag t
                :arguments ("async" "subtreep" "visible-only" "body-only" "ext-plist"))
                nil [36956 38086])
            ("org-beamer-export-to-pdf" function
               (:user-visible-flag t
                :arguments ("async" "subtreep" "visible-only" "body-only" "ext-plist"))
                nil [38103 39275])
            ("org-beamer-select-environment" function (:user-visible-flag t) nil [39292 41360])
            ("org-beamer-publish-to-latex" function (:arguments ("plist" "filename" "pub-dir")) nil [41377 41730])
            ("org-beamer-publish-to-pdf" function (:arguments ("plist" "filename" "pub-dir")) nil [41747 42606])
            ("ox-beamer" package nil nil [42609 42629]))          
      :file "ox-beamer.el"
      :pointmax 42733
      :fsize 42732
      :lastmodtime '(22842 50887 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl" include nil nil [5946 5959])
            ("ox" include nil nil [5962 5975])
            ("org-export-taskjuggler" customgroup (:user-visible-flag t) nil [6000 6144])
            ("org-taskjuggler-extension" variable (:default-value ".tjp") nil [6146 6275])
            ("org-taskjuggler-project-tag" variable (:default-value "taskjuggler_project") nil [6277 6496])
            ("org-taskjuggler-resource-tag" variable (:default-value "taskjuggler_resource") nil [6498 6727])
            ("org-taskjuggler-report-tag" variable (:default-value "taskjuggler_report") nil [6729 6950])
            ("org-taskjuggler-target-version" variable (:default-value 3.0) nil [6952 7470])
            ("org-taskjuggler-default-project-version" variable (:default-value "1.0") nil [7472 7730])
            ("org-taskjuggler-default-project-duration" variable (:default-value 280) nil [7732 8039])
            ("org-taskjuggler-default-reports" variable (:default-value (quote ("textreport report \"Plan\" {
  formats html
  header '== %title =='

  center -8<-
    [#Plan Plan] | [#Resource_Allocation Resource Allocation]
    ----
    === Plan ===
    <[report id=\"plan\"]>
    ----
    === Resource Allocation ===
    <[report id=\"resourceGraph\"]>
  ->8-
}

# A traditional Gantt chart with a project overview.
taskreport plan \"\" {
  headline \"Project Plan\"
  columns bsi, name, start, end, effort, chart
  loadunit shortauto
  hideresource 1
}

# A graph showing resource allocation. It identifies whether each
# resource is under- or over-allocated for.
resourcereport resourceGraph \"\" {
  headline \"Resource Allocation Graph\"
  columns no, name, effort, weekly
  loadunit shortauto
  hidetask ~(isleaf() & isleaf_())
  sorttasks plan.start.up
}"))) nil [8041 9946])
            ("org-taskjuggler-default-global-header" variable nil nil [9948 10186])
            ("org-taskjuggler-default-global-properties" variable (:default-value "shift s40 \"Part time shift\" {
  workinghours wed, thu, fri off
}
") nil [10188 10778])
            ("org-taskjuggler-valid-task-attributes" variable (:default-value (quote (account start note duration endbuffer endcredit end flags journalentry length limits maxend maxstart minend minstart period reference responsible scheduling startbuffer startcredit statusnote chargeset charge))) nil [10780 11358])
            ("org-taskjuggler-valid-project-attributes" variable (:default-value (quote (timingresolution timezone alertlevels currency currencyformat dailyworkinghours extend includejournalentry now numberformat outputdir scenario shorttimeformat timeformat trackingscenario weekstartsmonday weekstartssunday workinghours yearlyworkingdays))) nil [11360 11950])
            ("org-taskjuggler-valid-resource-attributes" variable (:default-value (quote (limits vacation shift booking efficiency journalentry rate workinghours flags))) nil [11952 12280])
            ("org-taskjuggler-valid-report-attributes" variable (:default-value (quote (headline columns definitions timeformat hideresource hidetask loadunit sorttasks formats period))) nil [12282 12624])
            ("org-taskjuggler-process-command" variable (:default-value "tj3 --silent --no-color --output-dir %o %f") nil [12626 13115])
            ("org-taskjuggler-reports-directory" variable (:default-value "reports") nil [13117 13636])
            ("org-taskjuggler-keep-project-as-task" variable (:default-value t) nil [13638 13935])
            ("org-taskjuggler-final-hook" variable nil nil [13951 14101])
            ("org-export-define-backend" code nil nil [14131 14836])
            ("org-taskjuggler-assign-task-ids" function (:arguments ("tasks" "info")) nil [14857 15684])
            ("org-taskjuggler-assign-resource-ids" function (:arguments ("resources" "info")) nil [15686 16172])
            ("org-taskjuggler-get-project" function (:arguments ("info")) nil [16192 16760])
            ("org-taskjuggler-get-id" function (:arguments ("item" "info")) nil [16762 17003])
            ("org-taskjuggler-get-name" function (:arguments ("item")) nil [17005 17255])
            ("org-taskjuggler-get-start" function (:arguments ("item")) nil [17257 17684])
            ("org-taskjuggler-get-end" function (:arguments ("item")) nil [17686 17992])
            ("org-taskjuggler--indent-string" function (:arguments ("s")) nil [18021 18222])
            ("org-taskjuggler--build-attributes" function (:arguments ("item" "attributes")) nil [18224 18699])
            ("org-taskjuggler--build-unique-id" function (:arguments ("item" "unique-ids")) nil [18701 19743])
            ("org-taskjuggler--clean-id" function (:arguments ("id")) nil [19745 20048])
            ("org-taskjuggler-resolve-dependencies" function (:arguments ("task" "info")) nil [20071 22011])
            ("org-taskjuggler-format-dependencies" function (:arguments ("dependencies" "task" "info")) nil [22013 23579])
            ("org-taskjuggler-project-plan" function (:arguments ("contents" "info")) nil [23610 28314])
            ("org-taskjuggler--build-project" function (:arguments ("project" "info")) nil [28316 29419])
            ("org-taskjuggler--build-resource" function (:arguments ("resource" "info")) nil [29421 30600])
            ("org-taskjuggler--build-report" function (:arguments ("report" "info")) nil [30602 31367])
            ("org-taskjuggler--build-task" function (:arguments ("task" "info")) nil [31369 34290])
            ("org-taskjuggler-export" function
               (:user-visible-flag t
                :arguments ("async" "subtreep" "visible-only"))
                nil [34337 35836])
            ("org-taskjuggler-export-and-process" function
               (:user-visible-flag t
                :arguments ("subtreep" "visible-only"))
                nil [35853 37046])
            ("org-taskjuggler-export-process-and-open" function
               (:user-visible-flag t
                :arguments ("subtreep" "visible-only"))
                nil [37063 37869])
            ("org-taskjuggler-compile" function (:arguments ("file")) nil [37871 39013])
            ("org-taskjuggler--collect-errors" function (:arguments ("buffer")) nil [39015 39531])
            ("ox-taskjuggler" package nil nil [39534 39559]))          
      :file "ox-taskjuggler.el"
      :pointmax 39654
      :fsize 39653
      :lastmodtime '(22842 50887 0 0)
      :unmatched-syntax '((close-paren 5959 . 5960) (symbol 5928 . 5945) (open-paren 5927 . 5928)))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("org" include nil nil [3102 3116])
            ("dired" include nil nil [3117 3133])
            ("org-screenshot" customgroup (:user-visible-flag t) nil [3135 3232])
            ("org-screenshot-image-directory" variable (:default-value "./images/") nil [3234 3447])
            ("org-screenshot-file-name-format" variable (:default-value "screenshot-%2.2d.png") nil [3449 3878])
            ("org-screenshot-max-tries" variable (:default-value 200) nil [3880 4198])
            ("org-screenshot-map" variable (:default-value (make-sparse-keymap)) nil [4200 4296])
            ("org-defkey" code nil nil [4308 4368])
            ("org-defkey" code nil nil [4420 4484])
            ("org-defkey" code nil nil [4485 4549])
            ("org-defkey" code nil nil [4610 4666])
            ("org-defkey" code nil nil [4667 4723])
            ("org-defkey" code nil nil [4852 4923])
            ("org-defkey" code nil nil [4924 4995])
            ("org-defkey" code nil nil [4996 5067])
            ("org-defkey" code nil nil [5068 5139])
            ("org-defkey" code nil nil [5177 5248])
            ("org-defkey" code nil nil [5249 5318])
            ("random" code nil nil [5321 5331])
            ("org-screenshot-random-string" function (:arguments ("length")) nil [5333 5685])
            ("org-screenshot-process" variable nil nil [5687 5763])
            ("org-screenshot-directory-seq-numbers" variable (:default-value (make-hash-table :test (quote equal))) nil [5765 5841])
            ("org-screenshot-update-seq-number" function (:arguments ("directory" "reset")) nil [5843 6593])
            ("org-screenshot-generate-file-name" function (:arguments ("directory")) nil [6595 8120])
            ("org-screenshot-image-directory" function nil nil [8122 8417])
            ("org-screenshot-last-file" variable nil nil [8419 8534])
            ("org-screenshot-process-done" function (:arguments ("process" "event" "file" "orig-buffer" "orig-delay" "orig-event")) nil [8536 10021])
            ("org-screenshot-take" function
               (:user-visible-flag t
                :arguments ("delay"))
                nil [10039 12567])
            ("org-screenshot-file-list" variable nil nil [12569 12730])
            ("org-screenshot-rotation-index" variable (:default-value -1) nil [12732 12773])
            ("make-variable-buffer-local" code nil nil [12775 12829])
            ("make-variable-buffer-local" code nil nil [12830 12889])
            ("org-screenshot-rotation-init" function (:arguments ("lastfile")) nil [12891 13981])
            ("org-screenshot-do-rotate" function (:arguments ("dir" "from-continue-rotating")) nil [13983 16533])
            ("org-screenshot-rotate-prev" function
               (:user-visible-flag t
                :arguments ("dir"))
                nil [16550 16874])
            ("org-screenshot-rotate-next" function
               (:user-visible-flag t
                :arguments ("dir"))
                nil [16891 17219])
            ("org-screenshot-prefer-same-modifiers" function (:arguments ("list" "event")) nil [17221 17659])
            ("org-screenshot-rotate-continue" function (:arguments ("from-take-screenshot" "orig-event")) nil [17661 19664])
            ("org-screenshot-show-unused" function (:user-visible-flag t) nil [19681 20930])
            ("org-screenshot" package nil nil [20932 20957]))          
      :file "org-screenshot.el"
      :pointmax 20958
      :fsize 20957
      :lastmodtime '(22842 50887 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("org" include nil nil [1450 1464])
            ("org-agenda" include nil nil [1465 1486])
            ("cl-lib" include nil nil [1487 1504])
            ("org-agenda-keep-restricted-file-list" variable nil nil [1506 1551])
            ("org-mobile" customgroup (:user-visible-flag t) nil [1564 1694])
            ("org-mobile-files" variable (:default-value (quote (org-agenda-files))) nil [1696 2543])
            ("org-mobile-files-exclude-regexp" variable nil nil [2545 2701])
            ("org-mobile-directory" variable nil nil [2703 2854])
            ("org-mobile-allpriorities" variable (:default-value "A B C") nil [2856 3045])
            ("org-mobile-use-encryption" variable nil nil [3047 3541])
            ("org-mobile-encryption-tempfile" variable (:default-value "~/orgtmpcrypt") nil [3543 3874])
            ("org-mobile-encryption-password" variable nil nil [3876 4817])
            ("org-mobile-encryption-password-session" variable nil nil [4819 4870])
            ("org-mobile-encryption-password" function nil nil [4872 5132])
            ("org-mobile-inbox-for-pull" variable (:default-value "~/org/from-mobile.org") nil [5134 5537])
            ("org-mobile-capture-file" variable
               (:constant-flag t
                :default-value "mobileorg.org")
                nil [5539 5725])
            ("org-mobile-index-file" variable (:default-value "index.org") nil [5727 5995])
            ("org-mobile-agendas" variable (:default-value (quote all)) nil [5997 6548])
            ("org-mobile-force-id-on-agenda-items" variable (:default-value t) nil [6550 6690])
            ("org-mobile-force-mobile-change" variable nil nil [6692 7364])
            ("org-mobile-checksum-binary" variable (:default-value (or (executable-find "shasum") (executable-find "sha1sum") (executable-find "md5sum") (executable-find "md5"))) nil [7366 7634])
            ("org-mobile-pre-push-hook" variable nil nil [7636 7955])
            ("org-mobile-post-push-hook" variable nil nil [7957 8295])
            ("org-mobile-pre-pull-hook" variable nil nil [8297 8623])
            ("org-mobile-post-pull-hook" variable nil nil [8625 8973])
            ("org-mobile-action-alist" variable
               (:constant-flag t
                :default-value (quote (("edit" . org-mobile-edit))))
                nil [8975 9710])
            ("org-mobile-last-flagged-files" variable nil nil [9712 9819])
            ("org-mobile-files-alist" variable nil nil [9821 9856])
            ("org-mobile-checksum-files" variable nil nil [9857 9895])
            ("org-mobile-prepare-file-lists" function nil nil [9897 10033])
            ("org-mobile-files-alist" function nil nil [10035 11758])
            ("org-mobile-push" function (:user-visible-flag t) nil [11775 12928])
            ("org-mobile-before-process-capture-hook" variable nil nil [12930 13162])
            ("org-mobile-pull" function (:user-visible-flag t) nil [13179 14205])
            ("org-mobile-check-setup" function nil nil [14207 15829])
            ("org-mobile-create-index-file" function nil nil [15831 18249])
            ("org-mobile-copy-agenda-files" function nil nil [18251 19750])
            ("org-mobile-write-checksums" function nil nil [19752 20248])
            ("org-mobile-sumo-agenda-command" function nil nil [20250 23066])
            ("org-mobile-creating-agendas" variable nil nil [23068 23108])
            ("org-mobile-write-agenda-for-mobile" function (:arguments ("file")) nil [23109 25245])
            ("org-mobile-get-outline-path-link" function (:arguments ("pom")) nil [25247 25575])
            ("org-mobile-escape-olp" function (:arguments ("s")) nil [25577 25668])
            ("org-mobile-create-sumo-agenda" function (:user-visible-flag t) nil [25670 26385])
            ("org-mobile-encrypt-and-move" function (:arguments ("infile" "outfile")) nil [26387 26802])
            ("org-mobile-encrypt-file" function (:arguments ("infile" "outfile")) nil [26804 27200])
            ("org-mobile-decrypt-file" function (:arguments ("infile" "outfile")) nil [27202 27601])
            ("org-mobile-cleanup-encryption-tempfile" function nil nil [27603 27856])
            ("org-mobile-move-capture" function (:user-visible-flag t) nil [27858 29376])
            ("org-mobile-update-checksum-for-capture-file" function (:arguments ("buffer-string")) nil [29378 29974])
            ("org-mobile-apply" function
               (:user-visible-flag t
                :arguments ("beg" "end"))
                nil [29976 34121])
            ("org-mobile-timestamp-buffer" function (:arguments ("buf")) nil [34123 34677])
            ("org-mobile-smart-read" function nil nil [34679 36107])
            ("org-mobile-locate-entry" function (:arguments ("link")) nil [36109 37017])
            ("org-mobile-edit" function (:arguments ("what" "old" "new")) nil [37019 41283])
            ("org-mobile-tags-same-p" function (:arguments ("list1" "list2")) nil [41285 41440])
            ("org-mobile-bodies-same-p" function (:arguments ("a" "b")) nil [41442 42037])
            ("org-mobile" package nil nil [42039 42060]))          
      :file "org-mobile.el"
      :pointmax 42165
      :fsize 42164
      :lastmodtime '(22842 50887 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("org" include nil nil [1237 1251])
            ("org-datetree-base-level" variable (:default-value 1) nil [1253 1578])
            ("org-datetree-add-timestamp" variable nil nil [1580 1944])
            ("org-datetree-find-date-create" function (:arguments ("d" "keep-restriction")) nil [1961 3003])
            ("org-datetree-find-iso-week-create" function (:arguments ("d" "keep-restriction")) nil [3020 4620])
            ("org-datetree--find-create" function (:arguments ("regex" "year" "month" "day" "insert")) nil [4622 5595])
            ("org-datetree-insert-line" function (:arguments ("year" "month" "day" "text")) nil [5597 6397])
            ("org-datetree-file-entry-under" function (:arguments ("txt" "d")) nil [6399 6696])
            ("org-datetree-cleanup" function (:user-visible-flag t) nil [6698 8382])
            ("org-datetree" package nil nil [8384 8407]))          
      :file "org-datetree.el"
      :pointmax 8514
      :fsize 8513
      :lastmodtime '(22842 50887 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("org-macs" include nil nil [1474 1493])
            ("org-compat" include nil nil [1494 1515])
            ("org" include nil nil [1516 1530])
            ("cl-lib" include nil nil [1532 1549])
            ("declare-function" code nil nil [1551 1619])
            ("declare-function" code nil nil [1620 1683])
            ("declare-function" code nil nil [1684 1746])
            ("org-inlinetask-show-first-star" variable nil nil [1747 1786])
            ("org-indent" customgroup (:user-visible-flag t) nil [1788 1907])
            ("org-indent-inlinetask-first-star" variable (:default-value (org-add-props "*" (quote (face org-warning)))) nil [1909 2041])
            ("org-indent-agent-timer" variable nil nil [2042 2117])
            ("org-indent-agentized-buffers" variable nil nil [2118 2212])
            ("org-indent-agent-resume-timer" variable nil nil [2213 2326])
            ("org-indent-agent-active-delay" variable (:default-value (quote (0 2 0))) nil [2327 2491])
            ("org-indent-agent-passive-delay" variable (:default-value (quote (0 0 400000))) nil [2492 2665])
            ("org-indent-agent-resume-delay" variable (:default-value (quote (0 0 100000))) nil [2666 2792])
            ("org-indent--initial-marker" variable nil nil [2793 2936])
            ("org-hide-leading-stars-before-indent-mode" variable nil nil [2937 3009])
            ("org-indent-modified-headline-flag" variable nil nil [3010 3173])
            ("org-indent-boundary-char" variable (:default-value 32) nil [3176 3525])
            ("org-indent-mode-turns-off-org-adapt-indentation" variable (:default-value t) nil [3527 3777])
            ("org-indent-mode-turns-on-hiding-stars" variable (:default-value t) nil [3779 3966])
            ("org-indent-indentation-per-level" variable (:default-value 2) nil [3968 4103])
            ("org-indent" variable
               (:default-value (quote ((t (:inherit org-hide))))
                :type "face")
                nil [4105 4321])
            ("org-indent-remove-properties" function (:arguments ("beg" "end")) nil [4323 4522])
            ("define-minor-mode" code nil nil [4539 7217])
            ("org-indent-indent-buffer" function (:user-visible-flag t) nil [7219 7643])
            ("org-indent-remove-properties-from-string" function (:arguments ("string")) nil [7645 7850])
            ("org-indent-initialize-agent" function nil nil [7852 8813])
            ("org-indent-initialize-buffer" function (:arguments ("buffer" "delay")) nil [8815 9660])
            ("org-indent-set-line-properties" function (:arguments ("level" "indentation" "heading")) nil [9662 11023])
            ("org-indent-add-properties" function (:arguments ("beg" "end" "delay")) nil [11025 13178])
            ("org-indent-notify-modified-headline" function (:arguments ("beg" "end")) nil [13180 13804])
            ("org-indent-refresh-maybe" function (:arguments ("beg" "end" "_")) nil [13806 14773])
            ("org-indent" package nil nil [14775 14796]))          
      :file "org-indent.el"
      :pointmax 14901
      :fsize 14900
      :lastmodtime '(22842 50887 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [1210 1227])
            ("ox-ascii" include nil nil [1228 1247])
            ("declare-function" code nil nil [1248 1308])
            ("org-export-icalendar" customgroup (:user-visible-flag t) nil [1346 1484])
            ("org-icalendar-combined-agenda-file" variable (:default-value "~/org.ics") nil [1486 1812])
            ("org-icalendar-alarm-time" variable nil nil [1814 2242])
            ("org-icalendar-combined-name" variable (:default-value "OrgMode") nil [2244 2416])
            ("org-icalendar-combined-description" variable nil nil [2418 2586])
            ("org-icalendar-exclude-tags" variable nil nil [2588 2879])
            ("org-icalendar-use-deadline" variable (:default-value (quote (event-if-not-todo todo-due))) nil [2881 3617])
            ("org-icalendar-use-scheduled" variable (:default-value (quote (todo-start))) nil [3619 4512])
            ("org-icalendar-categories" variable (:default-value (quote (local-tags category))) nil [4514 5175])
            ("org-icalendar-with-timestamps" variable (:default-value (quote active)) nil [5177 5785])
            ("org-icalendar-include-todo" variable nil nil [5787 6381])
            ("org-icalendar-include-bbdb-anniversaries" variable nil nil [6383 6613])
            ("org-icalendar-include-sexps" variable (:default-value t) nil [6615 6846])
            ("org-icalendar-include-body" variable (:default-value t) nil [6848 7289])
            ("org-icalendar-store-UID" variable nil nil [7291 8015])
            ("org-icalendar-timezone" variable (:default-value (getenv "TZ")) nil [8017 8291])
            ("org-icalendar-date-time-format" variable (:default-value ":%Y%m%dT%H%M%S") nil [8293 8978])
            ("org-icalendar-after-save-hook" variable nil nil [8980 9228])
            ("org-export-define-derived-backend" code nil nil [9254 10911])
            ("org-icalendar-create-uid" function (:arguments ("file" "bell")) nil [10940 11503])
            ("org-icalendar-blocked-headline-p" function (:arguments ("headline" "info")) nil [11505 12704])
            ("org-icalendar-use-UTC-date-time-p" function nil nil [12706 12924])
            ("org-agenda-default-appointment-duration" variable nil nil [12926 12974])
            ("org-icalendar-convert-timestamp" function (:arguments ("timestamp" "keyword" "end" "utc")) nil [12997 15408])
            ("org-icalendar-dtstamp" function nil nil [15410 15538])
            ("org-icalendar-get-categories" function (:arguments ("entry" "info")) nil [15540 16322])
            ("org-icalendar-transcode-diary-sexp" function (:arguments ("sexp" "uid" "summary")) nil [16324 16917])
            ("org-icalendar-cleanup-string" function (:arguments ("s")) nil [16919 17230])
            ("org-icalendar-fold-string" function (:arguments ("s")) nil [17232 18058])
            ("org-icalendar-clear-blank-lines" function (:arguments ("headline" "_back-end" "_info")) nil [18076 18335])
            ("org-icalendar-entry" function (:arguments ("entry" "contents" "info")) nil [18768 23925])
            ("org-icalendar--vevent" function (:arguments ("entry" "timestamp" "uid" "summary" "location" "description" "categories")) nil [23927 25549])
            ("org-icalendar--vtodo" function (:arguments ("entry" "uid" "summary" "location" "description" "categories")) nil [25551 27505])
            ("org-icalendar--valarm" function (:arguments ("entry" "timestamp" "summary")) nil [27507 28526])
            ("org-icalendar-template" function (:arguments ("contents" "info")) nil [28544 29273])
            ("org-icalendar--vcalendar" function (:arguments ("name" "owner" "tz" "description" "contents")) nil [29275 29926])
            ("org-icalendar-export-to-ics" function
               (:user-visible-flag t
                :arguments ("async" "subtreep" "visible-only" "body-only"))
                nil [29973 31347])
            ("org-icalendar-export-agenda-files" function
               (:user-visible-flag t
                :arguments ("async"))
                nil [31364 32492])
            ("org-icalendar-combine-agenda-files" function
               (:user-visible-flag t
                :arguments ("async"))
                nil [32509 33257])
            ("org-icalendar-export-current-agenda" function (:arguments ("file")) nil [33259 34435])
            ("org-icalendar--combine-files" function (:arguments ("files")) nil [34437 35781])
            ("ox-icalendar" package nil nil [35784 35807]))          
      :file "ox-icalendar.el"
      :pointmax 35914
      :fsize 35913
      :lastmodtime '(22842 50887 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [1454 1471])
            ("org-clock" include nil nil [1472 1492])
            ("declare-function" code nil nil [1494 1545])
            ("org-timer-start-time" variable nil nil [1547 1611])
            ("org-timer-pause-time" variable nil nil [1613 1682])
            ("org-timer-countdown-timer" variable nil nil [1684 1879])
            ("org-timer-countdown-timer-title" variable nil nil [1881 1989])
            ("org-timer-re" variable
               (:constant-flag t
                :default-value "\\([-+]?[0-9]+\\):\\([0-9]\\{2\\}\\):\\([0-9]\\{2\\}\\)")
                nil [1991 2123])
            ("org-timer-format" variable (:default-value "%s ") nil [2125 2340])
            ("org-timer-default-timer" variable (:default-value "0") nil [2342 2584])
            ("org-timer-display" variable (:default-value (quote mode-line)) nil [2586 3149])
            ("org-timer-start-hook" variable nil nil [3151 3230])
            ("org-timer-stop-hook" variable nil nil [3232 3324])
            ("org-timer-pause-hook" variable nil nil [3326 3418])
            ("org-timer-continue-hook" variable nil nil [3420 3517])
            ("org-timer-set-hook" variable nil nil [3519 3593])
            ("org-timer-done-hook" variable nil nil [3595 3676])
            ("org-timer-start" function
               (:user-visible-flag t
                :arguments ("offset"))
                nil [3693 5510])
            ("org-timer-pause-or-continue" function
               (:user-visible-flag t
                :arguments ("stop"))
                nil [5512 7018])
            ("org-timer-stop" function (:user-visible-flag t) nil [7020 7447])
            ("org-timer" function
               (:user-visible-flag t
                :arguments ("restart" "no-insert"))
                nil [7464 8270])
            ("org-timer-value-string" function nil nil [8272 8424])
            ("org-timer-seconds" function nil nil [8426 8845])
            ("org-timer-change-times-in-region" function
               (:user-visible-flag t
                :arguments ("beg" "end" "delta"))
                nil [8862 9753])
            ("org-timer-item" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [9770 10732])
            ("org-timer-fix-incomplete" function (:arguments ("hms")) nil [10734 11229])
            ("org-timer-hms-to-secs" function (:arguments ("hms")) nil [11231 11780])
            ("org-timer-secs-to-hms" function (:arguments ("s")) nil [11782 12084])
            ("org-timer-mode-line-timer" variable nil nil [12086 12124])
            ("org-timer-mode-line-string" variable nil nil [12125 12164])
            ("org-timer-set-mode-line" function (:arguments ("value")) nil [12166 14391])
            ("org-timer-update-mode-line" function nil nil [14393 14642])
            ("org-timer-show-remaining-time" function (:user-visible-flag t) nil [14644 15099])
            ("org-timer-set-timer" function
               (:user-visible-flag t
                :arguments ("opt"))
                nil [15116 17605])
            ("org-timer--run-countdown-timer" function (:arguments ("secs" "title")) nil [17607 18059])
            ("org-timer--get-timer-title" function nil nil [18061 18730])
            ("org-timer" package nil nil [18732 18752]))          
      :file "org-timer.el"
      :pointmax 18856
      :fsize 18855
      :lastmodtime '(22842 50887 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("ox-html" include nil nil [1203 1221])
            ("org-export-define-derived-backend" code nil nil [1247 1965])
            ("org-export-freemind" customgroup (:user-visible-flag t) nil [2004 2158])
            ("org-freemind-styles" variable (:default-value (quote ((default . "<node>
</node>") (0 . "<node COLOR=\"#000000\">
<font NAME=\"SansSerif\" SIZE=\"20\"/>
</node>") (1 . "<node COLOR=\"#0033ff\">
<edge STYLE=\"sharp_bezier\" WIDTH=\"8\"/>
<font NAME=\"SansSerif\" SIZE=\"18\"/>
</node>") (2 . "<node COLOR=\"#00b439\">
<edge STYLE=\"bezier\" WIDTH=\"thin\"/>
<font NAME=\"SansSerif\" SIZE=\"16\"/>
</node>") (3 . "<node COLOR=\"#990000\" FOLDED=\"true\">
<font NAME=\"SansSerif\" SIZE=\"14\"/>
</node>") (4 . "<node COLOR=\"#111111\">
</node>")))) nil [2160 3249])
            ("org-freemind-style-map-function" variable (:default-value (quote org-freemind-style-map--automatic)) nil [3251 3947])
            ("org-freemind-section-format" variable (:default-value (quote note)) nil [3949 4578])
            ("org-freemind-pretty-output" variable nil nil [4596 4738])
            ("org-freemind--serialize" function (:arguments ("parsed-xml" "contents")) nil [4789 6016])
            ("org-freemind--parse-xml" function (:arguments ("xml-string")) nil [6018 6355])
            ("org-freemind-style-map--automatic" function (:arguments ("element" "info")) nil [6410 7106])
            ("org-freemind-style-map--default" function (:arguments ("element" "info")) nil [7108 7427])
            ("org-freemind--get-node-style" function (:arguments ("element" "info")) nil [7479 8567])
            ("org-freemind--build-stylized-node" function (:arguments ("style-1" "style-2" "contents")) nil [8569 10944])
            ("org-freemind--richcontent" function (:arguments ("type" "contents" "css-style")) nil [10978 11411])
            ("org-freemind--build-node-contents" function (:arguments ("element" "contents" "info")) nil [11413 13018])
            ("org-freemind-template" function (:arguments ("contents" "info")) nil [13037 13533])
            ("org-freemind-inner-template" function (:arguments ("contents" "info")) nil [13535 13752])
            ("org-freemind--tags" function (:arguments ("tags")) nil [13765 13909])
            ("org-freemind-entity" function (:arguments ("entity" "contents" "info")) nil [13952 14187])
            ("org-freemind-headline" function (:arguments ("headline" "contents" "info")) nil [14204 16699])
            ("org-freemind-section" function (:arguments ("section" "contents" "info")) nil [16716 17059])
            ("org-freemind-final-function" function (:arguments ("contents" "backend" "info")) nil [17086 17425])
            ("org-freemind-options-function" function (:arguments ("info" "backend")) nil [17427 17888])
            ("org-freemind-export-to-freemind" function
               (:user-visible-flag t
                :arguments ("async" "subtreep" "visible-only" "body-only" "ext-plist"))
                nil [17932 19121])
            ("ox-freemind" package nil nil [19123 19145]))          
      :file "ox-freemind.el"
      :pointmax 19176
      :fsize 19175
      :lastmodtime '(22842 50887 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("org" include nil nil [1241 1255])
            ("declare-function" code nil nil [1302 1416])
            ("Info-current-file" variable nil nil [1417 1443])
            ("Info-current-node" variable nil nil [1444 1470])
            ("org-link-set-parameters" code nil nil [1497 1620])
            ("org-info-store-link" function nil nil [1640 2080])
            ("org-info-open" function (:arguments ("path")) nil [2082 2197])
            ("org-info-follow-link" function (:arguments ("name")) nil [2200 2904])
            ("org-info-emacs-documents" variable
               (:constant-flag t
                :default-value (quote ("ada-mode" "auth" "autotype" "bovine" "calc" "ccmode" "cl" "dbus" "dired-x" "ebrowse" "ede" "ediff" "edt" "efaq-w32" "efaq" "eieio" "eintr" "elisp" "emacs-gnutls" "emacs-mime" "emacs" "epa" "erc" "ert" "eshell" "eudc" "eww" "flymake" "forms" "gnus" "htmlfontify" "idlwave" "ido" "info" "mairix-el" "message" "mh-e" "newsticker" "nxml-mode" "octave-mode" "org" "pcl-cvs" "pgg" "rcirc" "reftex" "remember" "sasl" "sc" "semantic" "ses" "sieve" "smtpmail" "speedbar" "srecode" "todo-mode" "tramp" "url" "vip" "viper" "widget" "wisent" "woman")))
                nil [2906 3618])
            ("org-info-other-documents" variable
               (:constant-flag t
                :default-value (quote (("libc" . "http://www.gnu.org/software/libc/manual/html_mono/libc.html") ("make" . "http://www.gnu.org/software/make/manual/make.html"))))
                nil [3620 3956])
            ("org-info-map-html-url" function (:arguments ("filename")) nil [3958 4567])
            ("org-info--expand-node-name" function (:arguments ("node")) nil [4569 5046])
            ("org-info-export" function (:arguments ("path" "desc" "format")) nil [5048 5528])
            ("org-info" package nil nil [5530 5549]))          
      :file "org-info.el"
      :pointmax 5577
      :fsize 5576
      :lastmodtime '(22842 50887 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [1029 1046])
            ("org-src" include nil nil [1047 1065])
            ("declare-function" code nil nil [1067 1132])
            ("declare-function" code nil nil [1133 1194])
            ("declare-function" code nil nil [1195 1262])
            ("declare-function" code nil nil [1263 1332])
            ("declare-function" code nil nil [1333 1387])
            ("declare-function" code nil nil [1388 1445])
            ("declare-function" code nil nil [1446 1502])
            ("declare-function" code nil nil [1503 1562])
            ("declare-function" code nil nil [1563 1622])
            ("declare-function" code nil nil [1623 1673])
            ("declare-function" code nil nil [1674 1752])
            ("declare-function" code nil nil [1753 1822])
            ("declare-function" code nil nil [1823 1908])
            ("declare-function" code nil nil [1909 1975])
            ("declare-function" code nil nil [1976 2021])
            ("declare-function" code nil nil [2022 2071])
            ("declare-function" code nil nil [2072 2129])
            ("declare-function" code nil nil [2130 2186])
            ("declare-function" code nil nil [2187 2249])
            ("org-link-types-re" variable nil nil [2251 2277])
            ("org-babel-tangle-lang-exts" variable (:default-value (quote (("emacs-lisp" . "el") ("elisp" . "el")))) nil [2279 2779])
            ("org-babel-tangle-use-relative-file-links" variable (:default-value t) nil [2781 2955])
            ("org-babel-post-tangle-hook" variable nil nil [2957 3109])
            ("org-babel-pre-tangle-hook" variable (:default-value (quote (save-buffer))) nil [3111 3268])
            ("org-babel-tangle-body-hook" variable nil nil [3270 3420])
            ("org-babel-tangle-comment-format-beg" variable (:default-value "[[%link][%source-name]]") nil [3422 4240])
            ("org-babel-tangle-comment-format-end" variable (:default-value "%source-name ends here") nil [4242 5059])
            ("org-babel-tangle-uncomment-comments" variable nil nil [5061 5366])
            ("org-babel-process-comment-text" variable (:default-value (quote org-remove-indentation)) nil [5368 5728])
            ("org-babel-find-file-noselect-refresh" function (:arguments ("file")) nil [5730 5974])
            ("org-babel-with-temp-filebuffer" function (:arguments ("file" "body")) nil [5976 6734])
            ("def-edebug-spec" code nil nil [6735 6795])
            ("org-babel-tangle-file" function
               (:user-visible-flag t
                :arguments ("file" "target-file" "lang"))
                nil [6812 7566])
            ("org-babel-tangle-publish" function (:arguments ("_" "filename" "pub-dir")) nil [7568 7822])
            ("org-babel-tangle" function
               (:user-visible-flag t
                :arguments ("arg" "target-file" "lang"))
                nil [7839 12540])
            ("org-babel-tangle-clean" function (:user-visible-flag t) nil [12542 13209])
            ("org-stored-links" variable nil nil [13211 13236])
            ("org-bracket-link-regexp" variable nil nil [13237 13269])
            ("org-babel-spec-to-string" function (:arguments ("spec")) nil [13270 14882])
            ("org-babel-tangle-collect-blocks" function (:arguments ("language" "tangle-file")) nil [14884 16422])
            ("org-babel-tangle-single-block" function (:arguments ("block-counter" "only-this-block")) nil [16424 19573])
            ("org-babel-tangle-comment-links" function (:arguments ("info")) nil [19575 20227])
            ("org-bracket-link-analytic-regexp" variable nil nil [20254 20295])
            ("org-babel-detangle" function
               (:user-visible-flag t
                :arguments ("source-code-file"))
                nil [20296 21185])
            ("org-babel-tangle-jump-to-org" function (:user-visible-flag t) nil [21187 23322])
            ("ob-tangle" package nil nil [23324 23344]))          
      :file "ob-tangle.el"
      :pointmax 23448
      :fsize 23447
      :lastmodtime '(22842 50887 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("org" include nil nil [1606 1620])
            ("w3m-current-url" variable nil nil [1622 1646])
            ("w3m-current-title" variable nil nil [1647 1673])
            ("org-link-set-parameters" code nil nil [1675 1734])
            ("org-w3m-store-link" function nil nil [1735 1988])
            ("org-w3m-copy-for-org-mode" function (:user-visible-flag t) nil [1990 4789])
            ("org-w3m-get-anchor-start" function nil nil [4791 5047])
            ("org-w3m-get-anchor-end" function nil nil [5049 5273])
            ("org-w3m-get-next-link-start" function nil nil [5275 5711])
            ("org-w3m-get-prev-link-start" function nil nil [5713 6165])
            ("org-w3m-no-next-link-p" function nil nil [6167 6379])
            ("org-w3m-no-prev-link-p" function nil nil [6381 6601])
            ("w3m-mode-map" variable nil nil [6639 6660])
            ("w3m-minor-mode-map" variable nil nil [6661 6688])
            ("when" code nil nil [6689 6898])
            ("when" code nil nil [6899 7132])
            ("add-hook" code nil nil [7133 7314])
            ("add-hook" code nil nil [7315 7514])
            ("org-w3m" package nil nil [7516 7534]))          
      :file "org-w3m.el"
      :pointmax 7561
      :fsize 7560
      :lastmodtime '(22842 50887 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("org" include nil nil [1114 1128])
            ("declare-function" code nil nil [1130 1189])
            ("declare-function" code nil nil [1190 1287])
            ("declare-function" code nil nil [1288 1358])
            ("org-archive-default-command" variable (:default-value (quote org-archive-subtree)) nil [1360 1599])
            ("org-archive-reversed-order" variable nil nil [1601 1781])
            ("org-archive-sibling-heading" variable (:default-value "Archive") nil [1783 2053])
            ("org-archive-mark-done" variable nil nil [2055 2420])
            ("org-archive-stamp-time" variable (:default-value t) nil [2422 2702])
            ("org-archive-file-header-format" variable (:default-value "
Archived entries from file %s

") nil [2704 3039])
            ("org-archive-subtree-add-inherited-tags" variable (:default-value (quote infile)) nil [3041 3345])
            ("org-archive-save-context-info" variable (:default-value (quote (time file olpath category todo itags))) nil [3347 4725])
            ("org-archive-hook" variable nil nil [4727 4995])
            ("org-get-local-archive-location" function nil nil [4997 5447])
            ("org-add-archive-files" function (:arguments ("files")) nil [5464 5852])
            ("org-all-archive-files" function nil nil [5854 6631])
            ("org-extract-archive-file" function (:arguments ("location")) nil [6633 7143])
            ("org-extract-archive-heading" function (:arguments ("location")) nil [7145 7545])
            ("org-archive-subtree" function
               (:user-visible-flag t
                :arguments ("find-done"))
                nil [7562 15650])
            ("org-archive-to-archive-sibling" function (:user-visible-flag t) nil [15667 18042])
            ("org-archive-all-done" function (:arguments ("tag")) nil [18044 18526])
            ("org-archive-all-old" function (:arguments ("tag")) nil [18528 19262])
            ("org-archive-all-matches" function (:arguments ("predicate" "tag")) nil [19264 21113])
            ("org-toggle-archive-tag" function
               (:user-visible-flag t
                :arguments ("find-done"))
                nil [21130 22065])
            ("org-archive-set-tag" function (:user-visible-flag t) nil [22067 22562])
            ("org-archive-subtree-default" function (:user-visible-flag t) nil [22579 22811])
            ("org-archive-subtree-default-with-confirmation" function (:user-visible-flag t) nil [22828 23154])
            ("org-archive" package nil nil [23156 23178]))          
      :file "org-archive.el"
      :pointmax 23284
      :fsize 23283
      :lastmodtime '(22842 50887 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("ox" include nil nil [911 924])
            ("declare-function" code nil nil [925 991])
            ("htmlize-output-type" variable nil nil [992 1020])
            ("org-export-org" customgroup (:user-visible-flag t) nil [1022 1197])
            ("org-org-htmlized-css-url" variable nil nil [1199 1933])
            ("org-export-define-backend" code nil nil [1935 4090])
            ("org-org--add-missing-sections" function (:arguments ("tree" "_backend" "_info")) nil [4092 4809])
            ("org-org-export-block" function (:arguments ("export-block" "_contents" "_info")) nil [4811 5071])
            ("org-org-identity" function (:arguments ("blob" "contents" "_info")) nil [5073 5401])
            ("org-org-headline" function (:arguments ("headline" "contents" "info")) nil [5403 6095])
            ("org-org-keyword" function (:arguments ("keyword" "_contents" "_info")) nil [6097 6424])
            ("org-org-link" function (:arguments ("link" "contents" "_info")) nil [6426 6739])
            ("org-org-template" function (:arguments ("contents" "info")) nil [6741 8110])
            ("org-org-section" function (:arguments ("section" "contents" "info")) nil [8112 9161])
            ("org-org-export-as-org" function
               (:user-visible-flag t
                :arguments ("async" "subtreep" "visible-only" "body-only" "ext-plist"))
                nil [9178 10337])
            ("org-org-export-to-org" function
               (:user-visible-flag t
                :arguments ("async" "subtreep" "visible-only" "body-only" "ext-plist"))
                nil [10354 11430])
            ("org-org-publish-to-org" function (:arguments ("plist" "filename" "pub-dir")) nil [11447 12892])
            ("ox-org" package nil nil [12895 12912]))          
      :file "ox-org.el"
      :pointmax 13013
      :fsize 13012
      :lastmodtime '(22842 50887 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("org" include nil nil [1618 1632])
            ("doc-view" include nil nil [1633 1652])
            ("declare-function" code nil nil [1654 1709])
            ("declare-function" code nil nil [1710 1789])
            ("org-link-set-parameters" code nil nil [1791 1926])
            ("org-docview-export" function (:arguments ("link" "description" "format")) nil [1928 2454])
            ("org-docview-open" function (:arguments ("link")) nil [2456 2834])
            ("org-docview-store-link" function nil nil [2836 3224])
            ("org-docview-complete-link" function nil nil [3226 3524])
            ("org-docview" package nil nil [3527 3549]))          
      :file "org-docview.el"
      :pointmax 3580
      :fsize 3580
      :lastmodtime '(22842 50887 0 0)
      :unmatched-syntax nil))
  :file "!Users!ric!.emacs.d!elpa!org-plus-contrib-20170606!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
