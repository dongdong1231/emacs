;; Object semanticdb-project-database-file
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file"
  :tables
  (list
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("add-to-list" code nil nil [74 166])
            ("sdcv-mode" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [264 428])
            ("sdcv-search-pointer" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [430 569])
            ("sdcv-search-pointer+" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [571 739])
            ("sdcv-search-input" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [741 877])
            ("sdcv-search-input+" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [879 1012]))          
      :file "sdcv-autoloads.el"
      :pointmax 1157
      :fsize 1156
      :lastmodtime '(22883 7001 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("outline" include nil nil [4157 4175])
            ("cl" include nil nil [4197 4210])
            ("showtip" include nil nil [4213 4231])
            ("popup" include nil nil [4232 4248])
            ("pos-tip" include nil nil [4249 4267])
            ("sdcv" customgroup (:user-visible-flag t) nil [4352 4441])
            ("sdcv-buffer-name" variable (:default-value "*SDCV*") nil [4443 4547])
            ("sdcv-dictionary-complete-list" variable nil nil [4549 4671])
            ("sdcv-dictionary-simple-list" variable nil nil [4673 4791])
            ("sdcv-popup-function" variable (:default-value (quote pos-tip-show)) nil [4793 5203])
            ("sdcv-word-pronounce" variable (:default-value t) nil [5205 5295])
            ("sdcv-word-pronounce-command" variable (:default-value "espeak") nil [5297 5412])
            ("sdcv-word-pronounce-command-args" variable (:default-value "-v en") nil [5414 5543])
            ("sdcv-previous-window-configuration" variable nil nil [5616 5721])
            ("sdcv-current-translate-object" variable nil nil [5723 5788])
            ("sdcv-filter-string" variable (:default-value "^对不起，没有发现和.*
") nil [5790 5874])
            ("sdcv-fail-notify-string" variable (:default-value "没有发现解释也... 
用更多的词典查询一下吧! ^_^") nil [5876 5993])
            ("sdcv-mode-font-lock-keywords" variable (:default-value (quote (("^-->\\(.*\\)
-" 1 font-lock-type-face) ("^-->\\(.*\\)[ 	
]*" 1 font-lock-function-name-face) ("\\(^[0-9] \\|[0-9]+:\\|[0-9]+\\.\\)" 1 font-lock-constant-face) ("^<<\\([^>]*\\)>>$" 1 font-lock-comment-face) ("^\\/\\([^>]*\\)\\/$" 1 font-lock-string-face) ("^\\[\\([^]]*\\)\\]$" 1 font-lock-string-face)))) nil [5995 6577])
            ("sdcv-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map "q" (quote sdcv-quit)) (define-key map "j" (quote sdcv-next-line)) (define-key map "k" (quote sdcv-prev-line)) (define-key map "l" (quote forward-char)) (define-key map "h" (quote backward-char)) (define-key map "J" (quote sdcv-scroll-up-one-line)) (define-key map "K" (quote sdcv-scroll-down-one-line)) (define-key map "M-g M-n" (quote sdcv-next-dictionary)) (define-key map "M-g M-p" (quote sdcv-previous-dictionary)) (define-key map "i" (quote sdcv-search-input)) (define-key map "I" (quote sdcv-search-input+)) (define-key map "p" (quote sdcv-search-pointer)) (define-key map "P" (quote sdcv-search-pointer+)) (define-key map "S" (quote isearch-forward-regexp)) (define-key map "R" (quote isearch-backward-regexp)) (define-key map "s" (quote isearch-forward)) (define-key map "r" (quote isearch-backward)) (define-key map "a" (quote show-all)) (define-key map "A" (quote hide-body)) (define-key map "v" (quote show-entry)) (define-key map "V" (quote hide-entry)) (define-key map "e" (quote scroll-down)) (define-key map " " (quote scroll-up)) (define-key map "?" (quote describe-mode)) map)) nil [6579 7790])
            ("define-derived-mode" code nil nil [7807 8120])
            ("sdcv-search-pointer" function
               (:user-visible-flag t
                :arguments ("word"))
                nil [8221 8448])
            ("sdcv-search-pointer+" function (:user-visible-flag t) nil [8465 8737])
            ("sdcv-search-input" function
               (:user-visible-flag t
                :arguments ("word"))
                nil [8754 8976])
            ("sdcv-search-input+" function
               (:user-visible-flag t
                :arguments ("word"))
                nil [8993 9269])
            ("sdcv-quit" function (:user-visible-flag t) nil [9271 9638])
            ("sdcv-next-dictionary" function (:user-visible-flag t) nil [9640 9938])
            ("sdcv-previous-dictionary" function (:user-visible-flag t) nil [9940 10264])
            ("sdcv-scroll-up-one-line" function (:user-visible-flag t) nil [10266 10356])
            ("sdcv-scroll-down-one-line" function (:user-visible-flag t) nil [10358 10454])
            ("sdcv-next-line" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [10456 10708])
            ("sdcv-prev-line" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [10710 10843])
            ("sdcv-search-detail" function (:arguments ("word")) nil [10927 11750])
            ("sdcv-search-simple" function (:arguments ("word")) nil [11752 12092])
            ("sdcv-search-witch-dictionary" function (:arguments ("word" "dictionary-list")) nil [12094 12708])
            ("sdcv-filter" function (:arguments ("sdcv-string")) nil [12710 13163])
            ("sdcv-goto-sdcv" function nil nil [13165 13490])
            ("sdcv-get-buffer" function nil nil [13492 13734])
            ("sdcv-mode-reinit" function nil nil [13736 14056])
            ("sdcv-prompt-input" function nil nil [14058 14254])
            ("sdcv-region-or-word" function nil nil [14256 14560])
            ("sdcv-pronounce-word" function (:arguments ("word")) nil [14600 14845])
            ("sdcv" package nil nil [14848 14863]))          
      :file "sdcv.el"
      :pointmax 15020
      :fsize 15247
      :lastmodtime '(22883 7001 0 0)
      :unmatched-syntax '((close-paren 4210 . 4211) (symbol 4177 . 4194) (open-paren 4176 . 4177)))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("define-package" code nil nil [32 342]))          
      :file "sdcv-pkg.el"
      :pointmax 343
      :fsize 342
      :lastmodtime '(22883 7001 0 0)
      :unmatched-syntax nil))
  :file "!Users!ric!.emacs.d!elpa!sdcv-20170501.2155!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
