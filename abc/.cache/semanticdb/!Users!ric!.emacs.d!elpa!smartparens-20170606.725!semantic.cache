;; Object semanticdb-project-database-file
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file"
  :tables
  (list
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl" include nil nil [2046 2059])
            ("cl-lib" include nil nil [2081 2098])
            ("dash" include nil nil [2099 2114])
            ("thingatpt" include nil nil [2115 2135])
            ("help-mode" include nil nil [2136 2156])
            ("cua--region-keymap" variable nil nil [2208 2235])
            ("declare-function" code nil nil [2237 2285])
            ("declare-function" code nil nil [2286 2340])
            ("declare-function" code nil nil [2341 2394])
            ("unless" code nil nil [2450 2936])
            ("sp-cheat-sheet" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [2953 7242])
            ("defvar-local" code nil nil [7321 7403])
            ("defvar-local" code nil nil [7405 7489])
            ("sp--get-forward-bound" function nil nil [7491 7739])
            ("sp--get-backward-bound" function nil nil [7741 7993])
            ("smartparens-mode-map" variable (:default-value (make-sparse-keymap)) nil [8011 8101])
            ("defvaralias" code nil nil [8102 8148])
            ("make-obsolete-variable" code nil nil [8149 8219])
            ("sp-paredit-bindings" variable (:default-value (quote (("C-M-f" . sp-forward-sexp) ("C-M-b" . sp-backward-sexp) ("C-M-u" . sp-backward-up-sexp) ("C-M-d" . sp-down-sexp) ("C-M-p" . sp-backward-down-sexp) ("C-M-n" . sp-up-sexp) ("M-s" . sp-splice-sexp) ("M-<up>" . sp-splice-sexp-killing-backward) ("M-<down>" . sp-splice-sexp-killing-forward) ("M-r" . sp-splice-sexp-killing-around) ("C-)" . sp-forward-slurp-sexp) ("C-<right>" . sp-forward-slurp-sexp) ("C-}" . sp-forward-barf-sexp) ("C-<left>" . sp-forward-barf-sexp) ("C-(" . sp-backward-slurp-sexp) ("C-M-<left>" . sp-backward-slurp-sexp) ("C-{" . sp-backward-barf-sexp) ("C-M-<right>" . sp-backward-barf-sexp) ("M-S" . sp-split-sexp)))) nil [8221 9668])
            ("sp--populate-keymap" function (:arguments ("bindings")) nil [9670 9867])
            ("sp-use-paredit-bindings" function (:user-visible-flag t) nil [9884 10042])
            ("sp-smartparens-bindings" variable (:default-value (quote (("C-M-f" . sp-forward-sexp) ("C-M-b" . sp-backward-sexp) ("C-M-d" . sp-down-sexp) ("C-M-a" . sp-backward-down-sexp) ("C-S-d" . sp-beginning-of-sexp) ("C-S-a" . sp-end-of-sexp) ("C-M-e" . sp-up-sexp) ("C-M-u" . sp-backward-up-sexp) ("C-M-n" . sp-next-sexp) ("C-M-p" . sp-previous-sexp) ("C-M-k" . sp-kill-sexp) ("C-M-w" . sp-copy-sexp) ("M-<delete>" . sp-unwrap-sexp) ("M-<backspace>" . sp-backward-unwrap-sexp) ("C-<right>" . sp-forward-slurp-sexp) ("C-<left>" . sp-forward-barf-sexp) ("C-M-<left>" . sp-backward-slurp-sexp) ("C-M-<right>" . sp-backward-barf-sexp) ("M-D" . sp-splice-sexp) ("C-M-<delete>" . sp-splice-sexp-killing-forward) ("C-M-<backspace>" . sp-splice-sexp-killing-backward) ("C-S-<backspace>" . sp-splice-sexp-killing-around) ("C-]" . sp-select-next-thing-exchange) ("C-M-]" . sp-select-next-thing) ("C-M-SPC" . sp-mark-sexp) ("M-F" . sp-forward-symbol) ("M-B" . sp-backward-symbol)))) nil [10044 11991])
            ("sp-use-smartparens-bindings" function (:user-visible-flag t) nil [12008 12178])
            ("sp--set-base-key-bindings" function (:arguments ("symbol" "value")) nil [12180 12664])
            ("sp--update-override-key-bindings" function (:arguments ("symbol" "value")) nil [12666 13108])
            ("sp-base-key-bindings" variable nil nil [13110 13959])
            ("sp-override-key-bindings" variable nil nil [13961 14583])
            ("sp-escape-char" variable nil nil [14585 14664])
            ("make-variable-buffer-local" code nil nil [14665 14709])
            ("sp-comment-char" variable nil nil [14711 14777])
            ("make-variable-buffer-local" code nil nil [14778 14823])
            ("sp-pair-list" variable nil nil [14825 14978])
            ("make-variable-buffer-local" code nil nil [14979 15021])
            ("sp-local-pairs" variable nil nil [15023 15104])
            ("make-variable-buffer-local" code nil nil [15105 15149])
            ("sp-last-operation" variable nil nil [15151 15231])
            ("make-variable-buffer-local" code nil nil [15232 15279])
            ("cl-defstruct" code nil nil [15281 15909])
            ("sp-state" variable nil nil [15911 15978])
            ("make-variable-buffer-local" code nil nil [15979 16017])
            ("sp-previous-point" variable (:default-value -1) nil [16044 16230])
            ("make-variable-buffer-local" code nil nil [16231 16278])
            ("sp-wrap-point" variable nil nil [16305 16460])
            ("make-variable-buffer-local" code nil nil [16461 16504])
            ("sp-wrap-mark" variable nil nil [16531 16684])
            ("make-variable-buffer-local" code nil nil [16685 16727])
            ("sp-last-inserted-characters" variable nil nil [16729 16926])
            ("make-variable-buffer-local" code nil nil [16927 16984])
            ("sp-last-inserted-pair" variable nil nil [16986 17044])
            ("make-variable-buffer-local" code nil nil [17045 17096])
            ("sp-delayed-pair" variable nil nil [17098 17325])
            ("make-variable-buffer-local" code nil nil [17326 17371])
            ("sp-last-wrapped-region" variable nil nil [17373 17508])
            ("make-variable-buffer-local" code nil nil [17509 17561])
            ("sp-point-inside-string" variable nil nil [17563 17709])
            ("sp-buffer-modified-p" variable nil nil [17711 17806])
            ("sp-pre-command-point" variable nil nil [17808 17902])
            ("sp-max-pair-length" variable
               (:constant-flag t
                :default-value 10)
                nil [17904 18077])
            ("sp-max-prefix-length" variable
               (:constant-flag t
                :default-value 100)
                nil [18079 18390])
            ("sp-pairs" variable (:default-value (quote ((t (:open "\\\\(" :close "\\\\)" :actions (insert wrap autoskip navigate)) (:open "\\{" :close "\\}" :actions (insert wrap autoskip navigate)) (:open "\\(" :close "\\)" :actions (insert wrap autoskip navigate)) (:open "\\\"" :close "\\\"" :actions (insert wrap autoskip navigate)) (:open "\"" :close "\"" :actions (insert wrap autoskip navigate escape) :unless (sp-in-string-quotes-p) :post-handlers (sp-escape-wrapped-region sp-escape-quotes-after-insert)) (:open "'" :close "'" :actions (insert wrap autoskip navigate escape) :unless (sp-in-string-quotes-p sp-point-after-word-p) :post-handlers (sp-escape-wrapped-region sp-escape-quotes-after-insert)) (:open "(" :close ")" :actions (insert wrap autoskip navigate)) (:open "[" :close "]" :actions (insert wrap autoskip navigate)) (:open "{" :close "}" :actions (insert wrap autoskip navigate)) (:open "`" :close "`" :actions (insert wrap autoskip navigate)))))) nil [18392 19594])
            ("sp-tags" variable nil nil [19596 19687])
            ("sp-prefix-tag-object" variable nil nil [19689 19789])
            ("sp-prefix-pair-object" variable nil nil [19791 19967])
            ("sp-prefix-symbol-object" variable nil nil [19969 20148])
            ("define-obsolete-variable-alias" code nil nil [20150 20226])
            ("sp-lisp-modes" variable (:default-value (quote (cider-repl-mode clojure-mode clojurec-mode clojurescript-mode clojurex-mode common-lisp-mode emacs-lisp-mode eshell-mode geiser-repl-mode inf-clojure-mode inferior-emacs-lisp-mode inferior-lisp-mode inferior-scheme-mode lisp-interaction-mode lisp-mode monroe-mode racket-mode racket-repl-mode scheme-interaction-mode scheme-mode slime-repl-mode stumpwm-mode))) nil [20228 21316])
            ("sp-clojure-modes" variable (:default-value (quote (cider-repl-mode clojure-mode clojurec-mode clojurescript-mode clojurex-mode inf-clojure-mode))) nil [21318 21736])
            ("sp-no-reindent-after-kill-modes" variable (:default-value (quote (python-mode coffee-mode js2-mode asm-mode makefile-gmake-mode))) nil [21738 22220])
            ("sp--html-modes" variable (:default-value (quote (sgml-mode html-mode rhtml-mode nxhtml-mode nxml-mode web-mode jinja2-mode html-erb-mode))) nil [22222 22587])
            ("sp-message-alist" variable (:default-value (quote ((:unmatched-expression "Search failed. This means there is unmatched expression somewhere or we are at the beginning/end of file." "Unmatched expression.") (:delimiter-in-string "Opening or closing pair is inside a string or comment and matching pair is outside (or vice versa). Ignored.") (:no-matching-tag "Search failed. No matching tag found." "No matching tag.") (:invalid-context-prev "Invalid context: previous h-sexp ends after the next one." "Invalid context.") (:invalid-context-cur "Invalid context: current h-sexp starts after the next one." "Invalid context.") (:no-structure-found "Previous sexp starts after current h-sexp or no structure was found." "No valid structure found.") (:invalid-structure "This operation would result in invalid structure. Ignored." "Ignored because of invalid structure.") (:cant-slurp "We can't slurp without breaking strictly balanced expression. Ignored." "Can't slurp without breaking balance.") (:cant-slurp-context "We can't slurp into different context (comment -> code). Ignored." "Can't slurp into different context.") (:cant-insert-closing-delimiter "We can not insert unbalanced closing delimiter in strict mode." "Can't insert unbalanced delimiter.") (:blank-sexp "Point is in blank sexp, nothing to barf." "Point is in blank sexp.") (:point-not-deep-enough "Point has to be at least two levels deep to swap the enclosing delimiters." "Point has to be at least two levels deep." "Point not deep enough.") (:different-type "The expressions to be joined are of different type." "Expressions are of different type.")))) nil [22589 24675])
            ("smartparens" customgroup (:user-visible-flag t) nil [24773 24860])
            ("define-minor-mode" code nil nil [24877 25382])
            ("smartparens-strict-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [remap delete-char] (quote sp-delete-char)) (define-key map [remap delete-forward-char] (quote sp-delete-char)) (define-key map [remap backward-delete-char-untabify] (quote sp-backward-delete-char)) (define-key map [remap backward-delete-char] (quote sp-backward-delete-char)) (define-key map [remap delete-backward-char] (quote sp-backward-delete-char)) (define-key map [remap kill-word] (quote sp-kill-word)) (define-key map [remap kill-line] (quote sp-kill-hybrid-sexp)) (define-key map [remap backward-kill-word] (quote sp-backward-kill-word)) (define-key map [remap kill-region] (quote sp-kill-region)) (define-key map [remap delete-region] (quote sp-delete-region)) map)) nil [25384 26170])
            ("define-minor-mode" code nil nil [26187 27702])
            ("define-globalized-minor-mode" code nil nil [27719 27862])
            ("sp-ignore-modes-list" variable (:default-value (quote (minibuffer-inactive-mode))) nil [27864 28107])
            ("turn-on-smartparens-strict-mode" function (:user-visible-flag t) nil [28124 28428])
            ("sp--init" function nil nil [28430 28995])
            ("sp--maybe-init" function nil nil [28997 29138])
            ("sp--update-local-pairs" function nil nil [29140 29771])
            ("sp--update-local-pairs-everywhere" function (:arguments ("modes")) nil [29773 30250])
            ("smartparens-enabled-hook" variable nil nil [30252 30378])
            ("smartparens-disabled-hook" variable nil nil [30380 30508])
            ("define-globalized-minor-mode" code nil nil [30525 30625])
            ("turn-on-smartparens-mode" function (:user-visible-flag t) nil [30642 31304])
            ("turn-off-smartparens-mode" function (:user-visible-flag t) nil [31321 31430])
            ("sp-autoinsert-pair" variable (:default-value t) nil [31449 31577])
            ("sp-autoinsert-quote-if-followed-by-closing-pair" variable nil nil [31608 32503])
            ("make-obsolete-variable" code nil nil [32504 32641])
            ("sp-autoskip-closing-pair" variable (:default-value (quote always-end)) nil [32643 33806])
            ("make-variable-buffer-local" code nil nil [33807 33861])
            ("sp-autoskip-opening-pair" variable nil nil [33863 34097])
            ("make-variable-buffer-local" code nil nil [34098 34152])
            ("sp-cancel-autoskip-on-backward-movement" variable (:default-value t) nil [34205 34529])
            ("sp-autodelete-pair" variable (:default-value t) nil [34548 34677])
            ("sp-autodelete-closing-pair" variable (:default-value t) nil [34679 34833])
            ("sp-autodelete-opening-pair" variable (:default-value t) nil [34835 34989])
            ("sp-undo-pairs-separately" variable nil nil [34991 35573])
            ("sp-successive-kill-preserve-whitespace" variable (:default-value 1) nil [35575 36038])
            ("sp-autowrap-region" variable (:default-value t) nil [36055 36176])
            ("sp-wrap-show-possible-pairs" variable (:default-value t) nil [36178 36327])
            ("sp-autodelete-wrap" variable (:default-value t) nil [36329 36586])
            ("sp-wrap-repeat-last" variable (:default-value 1) nil [36588 37127])
            ("sp-wrap-entire-symbol" variable nil nil [37129 37821])
            ("sp-wrap-from-point" variable nil nil [37823 38129])
            ("sp-wrap-respect-direction" variable nil nil [38131 38765])
            ("sp-escape-wrapped-region" variable (:default-value t) nil [38786 38932])
            ("sp-escape-quotes-after-insert" variable (:default-value t) nil [38934 39077])
            ("sp-navigate-consider-sgml-tags" variable (:default-value (quote (html-mode))) nil [39108 39362])
            ("sp-navigate-consider-stringlike-sexp" variable (:default-value (quote (latex-mode))) nil [39364 39965])
            ("make-obsolete-variable" code nil nil [39966 40147])
            ("sp-navigate-use-textmode-stringlike-parser" variable (:default-value (quote ((derived . text-mode)))) nil [40149 40749])
            ("sp-navigate-consider-symbols" variable (:default-value t) nil [40751 41345])
            ("sp-navigate-comments-as-sexps" variable (:default-value t) nil [41347 41635])
            ("sp-navigate-skip-match" variable (:default-value (\` (((\, sp-lisp-modes) . sp--elisp-skip-match)))) nil [41664 42572])
            ("sp-navigate-reindent-after-up" variable (:default-value (\` ((interactive (\,@ sp-lisp-modes))))) nil [42574 43411])
            ("sp-navigate-reindent-after-up-in-string" variable (:default-value t) nil [43413 43734])
            ("sp-navigate-close-if-unbalanced" variable nil nil [43736 43991])
            ("sp-sexp-prefix" variable nil nil [43993 44807])
            ("sp-sexp-suffix" variable nil nil [44809 45620])
            ("sp-split-sexp-always-split-as-string" variable (:default-value t) nil [45622 46652])
            ("sp-hybrid-kill-excessive-whitespace" variable nil nil [46670 47154])
            ("sp-hybrid-kill-entire-symbol" variable nil nil [47156 47772])
            ("sp-comment-string" variable nil nil [47774 48089])
            ("sp-highlight-pair-overlay" variable (:default-value t) nil [48104 48265])
            ("sp-highlight-wrap-overlay" variable (:default-value t) nil [48267 48428])
            ("sp-highlight-wrap-tag-overlay" variable (:default-value t) nil [48430 48603])
            ("sp-message-width" variable (:default-value (quote frame)) nil [48605 49076])
            ("sp-use-subword" variable nil nil [49203 49433])
            ("sp--delete-selection-p" function nil nil [49526 49777])
            ("cua-replace-region" function (:arguments ("around" "fix-sp-wrap" "activate")) nil [49779 49946])
            ("delete-selection-pre-hook" function (:arguments ("around" "fix-sp-wrap" "activate")) nil [49948 50107])
            ("sp--indent-region" function (:arguments ("start" "end" "column")) nil [50199 50577])
            ("sp-with-modes" function (:arguments ("arg" "forms")) nil [50579 50976])
            ("font-lock-add-keywords" code nil nil [50978 51418])
            ("sp--with-case-sensitive" function (:arguments ("body")) nil [51420 51892])
            ("sp--evil-normal-state-p" function nil nil [51894 52053])
            ("sp--evil-motion-state-p" function nil nil [52055 52214])
            ("sp--evil-visual-state-p" function nil nil [52216 52375])
            ("sp-point-in-blank-line" function (:arguments ("p")) nil [52377 52645])
            ("sp-point-in-blank-sexp" function (:arguments ("p")) nil [52647 53159])
            ("sp-char-is-escaped-p" function (:arguments ("point")) nil [53161 53522])
            ("sp--syntax-ppss" function (:arguments ("p")) nil [53524 54104])
            ("sp-point-in-string" function (:arguments ("p")) nil [54106 54352])
            ("sp-point-in-comment" function (:arguments ("p")) nil [54354 55708])
            ("sp-point-in-string-or-comment" function (:arguments ("p")) nil [55710 55966])
            ("sp-point-in-symbol" function (:arguments ("p")) nil [55991 56455])
            ("sp--single-key-description" function (:arguments ("event")) nil [56457 56795])
            ("sp--current-indentation" function nil nil [56874 57026])
            ("sp--calculate-indentation-offset" function (:arguments ("old-column" "old-indentation")) nil [57028 57715])
            ("sp--back-to-indentation" function (:arguments ("old-column" "old-indentation")) nil [57717 58061])
            ("sp--keep-indentation" function (:arguments ("body")) nil [58106 58746])
            ("sp--self-insert-commands" variable (:default-value (quote (self-insert-command org-self-insert-command LaTeX-insert-left-brace))) nil [58800 59256])
            ("sp--special-self-insert-commands" variable (:default-value (quote (TeX-insert-dollar TeX-insert-quote quack-insert-opening-paren quack-insert-closing-paren quack-insert-opening-bracket quack-insert-closing-bracket racket-insert-closing-paren racket-insert-closing-bracket racket-insert-closing-brace))) nil [59310 60122])
            ("sp--self-insert-command-p" function nil nil [60124 60283])
            ("sp--special-self-insert-command-p" function nil nil [60285 60566])
            ("sp--signum" function (:arguments ("x")) nil [60568 60688])
            ("cl-eval-when" code nil nil [60690 66123])
            ("sp-get" function (:arguments ("struct" "forms")) nil [66687 69027])
            ("sp-compare-sexps" function (:arguments ("a" "b" "fun" "what-a" "what-b")) nil [69029 69718])
            ("sp-message" function (:arguments ("key")) nil [69720 70584])
            ("sp--merge-prop" function (:arguments ("prop" "new-pair" "old-pair")) nil [70695 72066])
            ("sp--merge-pairs" function (:arguments ("old-pair" "new-pair")) nil [72068 72339])
            ("sp--update-pair" function (:arguments ("new-pair" "old-pair")) nil [72341 72933])
            ("sp--update-pair-list" function (:arguments ("pair" "mode")) nil [72935 73804])
            ("sp--get-pair" function (:arguments ("open" "list")) nil [73806 73935])
            ("sp--get-pair-definition" function (:arguments ("open" "list" "prop")) nil [73937 74885])
            ("sp-get-pair-definition" function (:arguments ("open" "mode" "prop")) nil [74887 75214])
            ("sp-get-pair" function (:arguments ("open" "prop")) nil [75216 75492])
            ("sp--merge-with-local" function (:arguments ("mode")) nil [75494 76841])
            ("sp-wrap-with-pair" function (:arguments ("pair")) nil [76843 78390])
            ("cl-defun" code nil nil [78392 85889])
            ("cl-defun" code nil nil [85891 91328])
            ("cl-defun" code nil nil [91330 94062])
            ("sp-pair-overlay-face" variable
               (:default-value (quote ((t (:inherit highlight))))
                :type "face")
                nil [94164 94292])
            ("sp-wrap-overlay-face" variable
               (:default-value (quote ((t (:inherit sp-pair-overlay-face))))
                :type "face")
                nil [94294 94726])
            ("sp-wrap-overlay-opening-pair" variable
               (:default-value (quote ((t (:inherit sp-wrap-overlay-face :foreground "green"))))
                :type "face")
                nil [94728 94945])
            ("sp-wrap-overlay-closing-pair" variable
               (:default-value (quote ((t (:inherit sp-wrap-overlay-face :foreground "red"))))
                :type "face")
                nil [94947 95162])
            ("sp-wrap-tag-overlay-face" variable
               (:default-value (quote ((t (:inherit sp-pair-overlay-face))))
                :type "face")
                nil [95164 95311])
            ("sp-pair-overlay-list" variable (:default-value (quote nil)) nil [95313 95616])
            ("make-variable-buffer-local" code nil nil [95617 95667])
            ("sp-wrap-overlays" variable nil nil [95669 95730])
            ("make-variable-buffer-local" code nil nil [95731 95777])
            ("sp-wrap-tag-overlays" variable nil nil [95779 95848])
            ("make-variable-buffer-local" code nil nil [95849 95899])
            ("sp-pair-overlay-keymap" variable (:default-value (make-sparse-keymap)) nil [95901 95987])
            ("define-key" code nil nil [95988 96066])
            ("sp-wrap-overlay-keymap" variable (:default-value (make-sparse-keymap)) nil [96068 96154])
            ("define-key" code nil nil [96155 96218])
            ("sp--overlays-at" function (:arguments ("pos")) nil [96220 96568])
            ("sp--point-in-overlay-p" function (:arguments ("overlay")) nil [96570 96732])
            ("sp--get-overlay-length" function (:arguments ("overlay")) nil [96734 96861])
            ("sp--get-active-overlay" function (:arguments ("type")) nil [96863 97375])
            ("sp--pair-overlay-create" function (:arguments ("start" "end" "id")) nil [97377 98109])
            ("sp-wrap-cancel" function (:user-visible-flag t) nil [98111 98718])
            ("sp-wrap--clean-overlays" function nil nil [98720 98906])
            ("sp--pair-overlay-fix-highlight" function nil nil [98908 99738])
            ("sp--pair-overlay-post-command-handler" function nil nil [99740 100599])
            ("sp--reset-memoization" function (:arguments ("ignored")) nil [100601 100903])
            ("sp-remove-active-pair-overlay" function (:user-visible-flag t) nil [100905 101129])
            ("sp--remove-overlay" function (:arguments ("overlay")) nil [101131 101867])
            ("sp--replace-overlay-text" function (:arguments ("o" "string")) nil [101869 102076])
            ("sp--get-overlay-text" function (:arguments ("o")) nil [102078 102196])
            ("sp-in-string-p" function (:arguments ("_id" "_action" "context")) nil [102283 102416])
            ("sp-in-string-quotes-p" function (:arguments ("_id" "action" "context")) nil [102418 102811])
            ("sp-in-docstring-p" function (:arguments ("_id" "_action" "context")) nil [102813 103312])
            ("sp-in-code-p" function (:arguments ("_id" "_action" "context")) nil [103314 103430])
            ("sp-in-comment-p" function (:arguments ("_id" "_action" "context")) nil [103432 103557])
            ("sp-in-math-p" function (:arguments ("_id" "_action" "_context")) nil [103559 103701])
            ("sp-point-before-eol-p" function (:arguments ("_id" "action" "_context")) nil [103703 103958])
            ("sp-point-after-bol-p" function (:arguments ("id" "action" "_context")) nil [103960 104241])
            ("sp-point-at-bol-p" function (:arguments ("id" "action" "_context")) nil [104243 104492])
            ("sp-point-before-symbol-p" function (:arguments ("_id" "action" "_context")) nil [104494 104721])
            ("sp-point-before-word-p" function (:arguments ("_id" "action" "_context")) nil [104723 104953])
            ("sp-point-after-word-p" function (:arguments ("id" "action" "_context")) nil [104955 105267])
            ("sp-point-before-same-p" function (:arguments ("id" "action" "_context")) nil [105269 105498])
            ("sp-point-in-empty-line-p" function (:arguments ("id" "_action" "_context")) nil [105500 105712])
            ("sp--do-action-p" function (:arguments ("id" "action" "use-inside-string")) nil [105814 107012])
            ("sp--get-handler-context" function (:arguments ("type")) nil [107014 107467])
            ("sp--get-context" function (:arguments ("point" "in-string" "in-comment")) nil [107469 107848])
            ("sp--parse-insertion-spec" function (:arguments ("fun")) nil [107850 110178])
            ("sp--run-function-or-insertion" function (:arguments ("fun" "id" "action" "context")) nil [110180 110586])
            ("sp-handler-context" variable nil nil [110589 110683])
            ("sp--run-hook-with-args" function (:arguments ("id" "type" "action" "context-values")) nil [110851 111858])
            ("sp--post-command-hook-handler" function nil nil [112039 116324])
            ("sp--setaction" function (:arguments ("action" "forms")) nil [116326 116603])
            ("sp--post-self-insert-hook-handler" function nil nil [116775 118697])
            ("add-hook" code nil nil [119047 119115])
            ("sp--save-pre-command-state" function nil nil [119217 119456])
            ("add-hook" code nil nil [119458 119514])
            ("sp--pre-command-hook-handler" function nil nil [119516 119667])
            ("sp--get-pair-list" function nil nil [119669 119942])
            ("sp--get-stringlike-list" function nil nil [119944 120168])
            ("sp--get-allowed-pair-list" function nil nil [120170 120545])
            ("sp--get-allowed-stringlike-list" function nil nil [120547 120884])
            ("sp--get-pair-list-context" function (:arguments ("action")) nil [120886 121136])
            ("sp--get-pair-list-wrap" function nil nil [121138 121294])
            ("sp--wrap-regexp" function (:arguments ("string" "start" "end")) nil [121296 121500])
            ("sp--regexp-for-group" function (:arguments ("parens" "strings")) nil [121502 121778])
            ("sp--strict-regexp-opt" function (:arguments ("strings" "ignored")) nil [121780 122656])
            ("sp--strict-regexp-quote" function (:arguments ("string")) nil [122658 122923])
            ("cl-defun" code nil nil [122925 123100])
            ("cl-defun" code nil nil [123102 123277])
            ("cl-defun" code nil nil [123279 123537])
            ("cl-defun" code nil nil [123539 123675])
            ("sp--get-last-wraped-region" function (:arguments ("beg" "end" "open" "close")) nil [123677 124132])
            ("sp-wrap--can-wrap-p" function nil nil [124634 125039])
            ("sp--pair-to-wrap-comparator" function (:arguments ("prop" "a" "b")) nil [125041 125258])
            ("sp--pair-to-wrap" function (:arguments ("prefix")) nil [125260 127233])
            ("sp-wrap--initialize" function nil nil [127235 131033])
            ("sp-wrap--finalize" function (:arguments ("wrapping-end" "open" "close")) nil [131035 132277])
            ("sp-wrap" function nil nil [132279 133770])
            ("sp--escape-region" function (:arguments ("chars-to-escape" "beg" "end")) nil [133772 134288])
            ("sp-escape-wrapped-region" function (:arguments ("id" "action" "_context")) nil [134458 135444])
            ("sp-escape-quotes-after-insert" function (:arguments ("id" "action" "context")) nil [135446 136217])
            ("sp--buffer-is-string-balanced-p" function nil nil [136219 136625])
            ("sp-escape-open-delimiter" function nil nil [136627 137331])
            ("sp-match-sgml-tags" function (:arguments ("tag")) nil [137386 137566])
            ("make-obsolete" code nil nil [137567 137678])
            ("sp--is-number-cons" function (:arguments ("c")) nil [137680 137836])
            ("sp--undo-pop-to-last-insertion-node" function nil nil [137871 138294])
            ("sp--split-last-insertion-undo" function (:arguments ("len")) nil [138383 139435])
            ("sp--all-pairs-to-insert" function (:arguments ("looking-fn" "action")) nil [139596 140856])
            ("sp--pair-to-insert-comparator" function (:arguments ("prop" "a" "b")) nil [140858 141580])
            ("sp--pair-to-insert" function (:arguments ("action")) nil [141582 141935])
            ("sp--longest-prefix-to-insert" function nil nil [141937 142255])
            ("sp--pair-to-uninsert" function nil nil [142257 143500])
            ("sp--insert-pair-get-pair-info" function (:arguments ("active-pair")) nil [143502 143864])
            ("sp-insert-pair" function (:arguments ("pair")) nil [143866 148775])
            ("sp--wrap-repeat-last" function (:arguments ("active-pair")) nil [148777 150623])
            ("sp--char-is-part-of-stringlike" function (:arguments ("char")) nil [150625 150887])
            ("sp--char-is-part-of-closing" function (:arguments ("char" "pair-list")) nil [150889 151269])
            ("sp-skip-closing-pair" function (:arguments ("last" "test-only")) nil [151358 158383])
            ("sp--inhibit-insertion-of-closing-delim" function (:arguments ("last")) nil [158385 159252])
            ("sp-delete-pair" function (:arguments ("arg")) nil [159254 164105])
            ("sp--looking-at" function (:arguments ("regexp")) nil [164185 164318])
            ("sp--looking-at-p" function (:arguments ("regexp")) nil [164320 164459])
            ("sp--looking-back" function (:arguments ("regexp" "limit" "not-greedy")) nil [164461 165671])
            ("sp--looking-back-p" function (:arguments ("regexp" "limit" "not-greedy")) nil [165673 165867])
            ("sp--search-backward-regexp" function (:arguments ("regexp" "bound" "noerror" "count")) nil [165869 166671])
            ("sp--search-forward-regexp" function (:arguments ("regexp" "bound" "noerror" "count")) nil [166673 166944])
            ("sp-get-quoted-string-bounds" function (:arguments ("point")) nil [166946 167571])
            ("sp-get-comment-bounds" function nil nil [167631 169617])
            ("sp--get-string-or-comment-bounds" function nil nil [169619 169786])
            ("sp--search-and-save-match" function (:arguments ("search-fn" "pattern" "bound" "res" "beg" "end" "str")) nil [169788 170098])
            ("cl-defun" code nil nil [170100 170869])
            ("sp--valid-initial-delimiter-p" function (:arguments ("form")) nil [170871 171198])
            ("sp--elisp-skip-match" function (:arguments ("ms" "mb" "_me")) nil [171200 171929])
            ("sp--backslash-skip-match" function (:arguments ("ms" "mb" "_me")) nil [171931 172073])
            ("sp-get-paired-expression" function (:arguments ("back")) nil [172295 183676])
            ("sp--find-next-stringlike-delimiter" function (:arguments ("needle" "search-fn-f" "limit" "skip-fn")) nil [183743 184718])
            ("sp-get-stringlike-expression" function (:arguments ("back")) nil [184720 186690])
            ("sp--textmode-stringlike-regexp" function (:arguments ("delimiters" "direction")) nil [186692 187602])
            ("sp--find-next-textmode-stringlike-delimiter" function (:arguments ("needle" "search-fn-f" "limit")) nil [187604 188314])
            ("sp-get-textmode-stringlike-expression" function (:arguments ("back")) nil [188316 192117])
            ("sp-use-textmode-stringlike-parser-p" function nil nil [192119 192481])
            ("sp-get-stringlike-or-textmode-expression" function (:arguments ("back" "delimiter")) nil [192483 193330])
            ("sp-get-expression" function (:arguments ("back")) nil [193332 196179])
            ("sp-get-sexp" function (:arguments ("back")) nil [196181 199134])
            ("sp--get-hybrid-sexp-beg" function nil nil [199136 200354])
            ("sp--narrow-to-line" function nil nil [200356 200484])
            ("sp--get-hybrid-sexp-end" function nil nil [200486 202182])
            ("sp--get-hybrid-suffix" function (:arguments ("p")) nil [202184 202591])
            ("sp-get-hybrid-sexp" function nil nil [202593 203120])
            ("sp-get-enclosing-sexp" function (:arguments ("arg")) nil [203122 205113])
            ("sp-get-list-items" function (:arguments ("lst")) nil [205115 205829])
            ("cl-defun" code nil nil [205831 207662])
            ("cl-defun" code nil nil [207664 209368])
            ("sp-get-symbol" function (:arguments ("back")) nil [209370 210399])
            ("sp--get-string" function (:arguments ("bounds")) nil [210515 211098])
            ("sp-get-string" function (:arguments ("back")) nil [211100 211894])
            ("sp-get-whitespace" function nil nil [211896 212243])
            ("sp--sgml-get-tag-name" function (:arguments ("match")) nil [212245 212452])
            ("sp--sgml-opening-p" function (:arguments ("tag")) nil [212454 212526])
            ("sp--sgml-ignore-tag" function (:arguments ("tag")) nil [212528 212666])
            ("sp-get-sgml-tag" function (:arguments ("back")) nil [212668 215287])
            ("sp--end-delimiter-closure" function (:arguments ("pairs" "pair-list")) nil [215289 216117])
            ("sp-restrict-to-pairs" function (:arguments ("pairs" "function")) nil [216119 216667])
            ("sp-restrict-to-object" function (:arguments ("object" "function")) nil [216669 217303])
            ("sp-restrict-to-pairs-interactive" function (:arguments ("pairs" "function")) nil [217333 218072])
            ("sp-restrict-to-object-interactive" function (:arguments ("object" "function")) nil [218074 218918])
            ("sp-prefix-tag-object" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [218920 219568])
            ("sp-prefix-pair-object" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [219570 220221])
            ("sp-prefix-symbol-object" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [220223 220864])
            ("sp-prefix-save-excursion" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [220866 221295])
            ("sp-get-thing" function (:arguments ("back")) nil [221297 227619])
            ("sp-narrow-to-sexp" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [227621 227954])
            ("sp-forward-sexp" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [227956 228815])
            ("put" code nil nil [228817 228850])
            ("sp-backward-sexp" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [228852 229730])
            ("put" code nil nil [229732 229766])
            ("sp-next-sexp" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [229768 230718])
            ("put" code nil nil [230720 230750])
            ("sp-previous-sexp" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [230752 231692])
            ("put" code nil nil [231694 231728])
            ("sp-forward-parallel-sexp" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [231730 232803])
            ("sp-backward-parallel-sexp" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [232805 233880])
            ("sp--raw-argument-p" function (:arguments ("arg")) nil [233882 234015])
            ("sp--negate-argument" function (:arguments ("arg")) nil [234017 234417])
            ("sp-down-sexp" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [234419 236303])
            ("put" code nil nil [236305 236335])
            ("sp-backward-down-sexp" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [236337 237325])
            ("put" code nil nil [237327 237366])
            ("sp-beginning-of-sexp" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [237368 239067])
            ("put" code nil nil [239069 239107])
            ("sp-end-of-sexp" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [239109 240828])
            ("put" code nil nil [240830 240862])
            ("sp-beginning-of-next-sexp" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [240864 241470])
            ("put" code nil nil [241472 241515])
            ("sp-beginning-of-previous-sexp" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [241517 242173])
            ("put" code nil nil [242175 242222])
            ("sp-end-of-next-sexp" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [242224 242794])
            ("put" code nil nil [242796 242833])
            ("sp-end-of-previous-sexp" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [242835 243455])
            ("put" code nil nil [243457 243498])
            ("sp-up-sexp" function
               (:user-visible-flag t
                :arguments ("arg" "interactive"))
                nil [243800 248151])
            ("put" code nil nil [248153 248181])
            ("sp-backward-up-sexp" function
               (:user-visible-flag t
                :arguments ("arg" "interactive"))
                nil [248183 248927])
            ("put" code nil nil [248929 248966])
            ("sp-last-kill-whitespace" variable nil nil [248968 249149])
            ("sp--kill-or-copy-region" function
               (:user-visible-flag t
                :arguments ("beg" "end" "dont-kill"))
                nil [249151 249851])
            ("sp-kill-sexp" function
               (:user-visible-flag t
                :arguments ("arg" "dont-kill"))
                nil [249853 254491])
            ("sp--cleanup-after-kill" function nil nil [254493 255985])
            ("sp-backward-kill-sexp" function
               (:user-visible-flag t
                :arguments ("arg" "dont-kill"))
                nil [255987 256513])
            ("sp-copy-sexp" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [256515 256794])
            ("sp-backward-copy-sexp" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [256796 257114])
            ("sp-clone-sexp" function (:user-visible-flag t) nil [257116 258519])
            ("sp-kill-hybrid-sexp" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [258521 261343])
            ("sp-kill-whole-line" function (:user-visible-flag t) nil [261345 261917])
            ("sp--transpose-objects" function (:arguments ("first" "second")) nil [261919 262328])
            ("sp-transpose-sexp" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [262330 263704])
            ("sp-transpose-hybrid-sexp" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [263706 264886])
            ("sp-push-hybrid-sexp" function (:user-visible-flag t) nil [264888 265615])
            ("sp-indent-adjust-sexp" function (:user-visible-flag t) nil [265760 266828])
            ("sp-dedent-adjust-sexp" function (:user-visible-flag t) nil [266830 268700])
            ("sp-slurp-hybrid-sexp" function (:user-visible-flag t) nil [268801 271570])
            ("sp-forward-slurp-sexp" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [271660 277187])
            ("sp-backward-slurp-sexp" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [277189 282460])
            ("sp-add-to-previous-sexp" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [282462 283477])
            ("sp-add-to-next-sexp" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [283479 284445])
            ("sp-forward-barf-sexp" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [284447 286547])
            ("sp-backward-barf-sexp" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [286549 288332])
            ("sp--skip-to-symbol-1" function (:arguments ("forward")) nil [288385 290425])
            ("sp-skip-forward-to-symbol" function
               (:user-visible-flag t
                :arguments ("stop-at-string" "stop-after-string" "stop-inside-string"))
                nil [290427 290918])
            ("put" code nil nil [290920 290963])
            ("sp-skip-backward-to-symbol" function
               (:user-visible-flag t
                :arguments ("stop-at-string" "stop-after-string" "stop-inside-string"))
                nil [290965 291459])
            ("put" code nil nil [291461 291505])
            ("sp-skip-into-string" function (:arguments ("back")) nil [291507 291765])
            ("sp-forward-symbol" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [291945 294178])
            ("put" code nil nil [294180 294215])
            ("sp-backward-symbol" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [294217 296064])
            ("put" code nil nil [296066 296102])
            ("sp-rewrap-sexp" function
               (:user-visible-flag t
                :arguments ("pair" "keep-old"))
                nil [296104 298121])
            ("sp-swap-enclosing-sexp" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [298123 299180])
            ("sp--unwrap-sexp" function (:arguments ("sexp" "no-cleanup")) nil [299182 300561])
            ("sp-unwrap-sexp" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [300563 301263])
            ("sp-backward-unwrap-sexp" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [301265 301695])
            ("sp-splice-sexp" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [301697 302364])
            ("sp--splice-sexp-do-killing" function (:arguments ("beg" "end" "expr" "jump-end")) nil [302366 302943])
            ("sp-splice-sexp-killing-backward" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [302945 303839])
            ("sp-splice-sexp-killing-forward" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [303901 304813])
            ("sp-splice-sexp-killing-around" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [304815 309775])
            ("defalias" code nil nil [309777 309833])
            ("sp-convolute-sexp" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [309835 312026])
            ("sp-absorb-sexp" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [312028 312890])
            ("sp-emit-sexp" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [312892 313977])
            ("sp-extract-before-sexp" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [313979 315707])
            ("sp-extract-after-sexp" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [315709 318046])
            ("sp-forward-whitespace" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [318048 318297])
            ("put" code nil nil [318299 318338])
            ("sp-backward-whitespace" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [318340 318592])
            ("put" code nil nil [318594 318634])
            ("sp-split-sexp" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [318636 320852])
            ("sp--join-sexp" function (:arguments ("prev" "next")) nil [320854 321911])
            ("sp-join-sexp" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [321913 323462])
            ("sp--next-thing-selection" function (:arguments ("arg" "point")) nil [323464 328302])
            ("sp-select-next-thing" function
               (:user-visible-flag t
                :arguments ("arg" "point"))
                nil [328304 330972])
            ("sp-select-previous-thing" function
               (:user-visible-flag t
                :arguments ("arg" "point"))
                nil [330974 331346])
            ("sp-select-next-thing-exchange" function
               (:user-visible-flag t
                :arguments ("arg" "point"))
                nil [331348 331589])
            ("sp-select-previous-thing-exchange" function
               (:user-visible-flag t
                :arguments ("arg" "point"))
                nil [331591 331844])
            ("sp-mark-sexp" function
               (:user-visible-flag t
                :arguments ("arg" "allow-extend"))
                nil [331846 332977])
            ("sp-delete-char" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [332979 335756])
            ("sp-backward-delete-char" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [335758 338560])
            ("put" code nil nil [338562 338621])
            ("put" code nil nil [338622 338672])
            ("sp-point-in-empty-sexp" function (:arguments ("pos")) nil [338674 339210])
            ("sp-point-in-empty-string" function (:arguments ("pos")) nil [339212 339884])
            ("sp--use-subword" function nil nil [339886 340112])
            ("declare-function" code nil nil [340114 340155])
            ("declare-function" code nil nil [340156 340200])
            ("declare-function" code nil nil [340201 340246])
            ("sp--kill-word" function (:arguments ("n")) nil [340248 340408])
            ("sp--forward-word" function (:arguments ("n")) nil [340410 340587])
            ("sp--backward-word" function (:arguments ("n")) nil [340589 340770])
            ("sp-kill-symbol" function
               (:user-visible-flag t
                :arguments ("arg" "word"))
                nil [340772 342118])
            ("sp-kill-word" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [342120 342405])
            ("sp-backward-kill-symbol" function
               (:user-visible-flag t
                :arguments ("arg" "word"))
                nil [342407 343981])
            ("sp-backward-kill-word" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [343983 344287])
            ("sp-delete-region" function
               (:user-visible-flag t
                :arguments ("beg" "end"))
                nil [344289 344746])
            ("sp-kill-region" function
               (:user-visible-flag t
                :arguments ("beg" "end"))
                nil [344748 345194])
            ("sp-indent-defun" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [345196 345775])
            ("sp--balanced-context-p" function (:arguments ("count" "start-context" "end-context")) nil [345777 346153])
            ("cl-defun" code nil nil [346155 347701])
            ("sp-newline" function (:user-visible-flag t) nil [347703 348398])
            ("sp-comment" function (:user-visible-flag t) nil [348400 350248])
            ("show-smartparens" customgroup (:user-visible-flag t) nil [350339 350425])
            ("sp-show-pair-delay" variable (:default-value 0.125) nil [350427 350584])
            ("sp-show-enclosing-pair-commands" variable (:default-value (quote (sp-show-enclosing-pair sp-forward-slurp-sexp sp-backward-slurp-sexp sp-forward-barf-sexp sp-backward-barf-sexp))) nil [350586 351198])
            ("sp-show-pair-from-inside" variable nil nil [351200 351405])
            ("sp-show-pair-match-face" variable
               (:default-value (quote ((t (:inherit show-paren-match))))
                :type "face")
                nil [351407 351563])
            ("sp-show-pair-mismatch-face" variable
               (:default-value (quote ((t (:inherit show-paren-mismatch))))
                :type "face")
                nil [351565 351730])
            ("sp-show-pair-enclosing" variable
               (:default-value (quote ((t (:inherit highlight))))
                :type "face")
                nil [351732 351867])
            ("sp-show-pair-idle-timer" variable nil nil [351869 351905])
            ("sp-show-pair-overlays" variable nil nil [351907 351941])
            ("sp-show-pair-enc-overlays" variable nil nil [351943 351981])
            ("define-minor-mode" code nil nil [351998 352653])
            ("define-globalized-minor-mode" code nil nil [352670 352785])
            ("turn-on-show-smartparens-mode" function (:user-visible-flag t) nil [352802 353100])
            ("turn-off-show-smartparens-mode" function (:user-visible-flag t) nil [353117 353241])
            ("sp-show-enclosing-pair" function (:user-visible-flag t) nil [353243 353339])
            ("sp-highlight-current-sexp" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [353341 353732])
            ("sp-show--pair-function" function nil nil [353734 356370])
            ("sp-show--pair-enc-function" function (:arguments ("thing")) nil [356372 356650])
            ("sp-show--pair-create-overlays" function (:arguments ("start" "end" "olen" "clen")) nil [356652 357222])
            ("sp-show--pair-create-enc-overlays" function (:arguments ("start" "end" "olen" "clen")) nil [357224 357821])
            ("sp-show--pair-create-mismatch-overlay" function (:arguments ("start" "len")) nil [357823 358216])
            ("sp-show--pair-delete-overlays" function nil nil [358218 358542])
            ("sp-show--pair-delete-enc-overlays" function nil nil [358544 358906])
            ("delete-backward-char" function (:arguments ("before" "sp-delete-pair-advice" "activate")) nil [358935 359063])
            ("haskell-indentation-delete-backward-char" function (:arguments ("before" "sp-delete-pair-advice" "activate")) nil [359064 359212])
            ("add-hook" code nil nil [359213 359273])
            ("add-hook" code nil nil [359274 359332])
            ("sp--set-base-key-bindings" code nil nil [359333 359360])
            ("sp--update-override-key-bindings" code nil nil [359361 359395])
            ("company--insert-candidate" function (:arguments ("after" "sp-company--insert-candidate" "activate")) nil [359397 359674])
            ("hippie-expand" function (:arguments ("after" "sp-auto-complete-advice" "activate")) nil [359676 359789])
            ("sp--mc/cursor-specific-vars" variable (:default-value (quote (sp-wrap-point sp-wrap-mark sp-last-wrapped-region sp-pair-overlay-list sp-wrap-overlays sp-wrap-tag-overlays sp-last-operation sp-previous-point))) nil [359791 360081])
            ("mc/cursor-specific-vars" variable nil nil [360083 360115])
            ("eval-after-load" code nil nil [360116 360243])
            ("smartparens" package nil nil [360245 360267]))          
      :file "smartparens.el"
      :pointmax 360550
      :fsize 360607
      :lastmodtime '(22842 50753 0 0)
      :unmatched-syntax '((close-paren 2235 . 2236) (symbol 2190 . 2207) (open-paren 2189 . 2190) (close-paren 2059 . 2060) (symbol 2028 . 2045) (open-paren 2027 . 2028))))
  :file "!Users!ric!.emacs.d!elpa!smartparens-20170606.725!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
