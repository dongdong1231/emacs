;; Object semanticdb-project-database-file
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file"
  :tables
  (list
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("bind-key" include nil nil [1669 1688])
            ("bytecomp" include nil nil [1689 1708])
            ("diminish" include nil nil [1709 1734])
            ("bytecomp" include nil nil [1735 1754])
            ("cl" include nil nil [1774 1787])
            ("regexp-opt" include nil nil [1808 1829])
            ("declare-function" code nil nil [1832 1880])
            ("declare-function" code nil nil [1881 1946])
            ("use-package" customgroup (:user-visible-flag t) nil [1948 2053])
            ("use-package-verbose" variable nil nil [2055 2531])
            ("use-package-debug" variable nil nil [2533 2678])
            ("use-package-check-before-init" variable nil nil [2680 2915])
            ("use-package-always-defer" variable nil nil [2917 3059])
            ("use-package-always-demand" variable nil nil [3061 3204])
            ("use-package-always-defer-install" variable nil nil [3206 3373])
            ("use-package-always-ensure" variable nil nil [3375 3519])
            ("use-package-always-pin" variable nil nil [3521 3660])
            ("use-package-minimum-reported-time" variable (:default-value 0.1) nil [3662 4127])
            ("use-package-inject-hooks" variable nil nil [4129 4844])
            ("use-package-keywords" variable (:default-value (quote (:disabled :preface :pin :defer-install :ensure :if :when :unless :requires :load-path :no-require :bind :bind* :bind-keymap :bind-keymap* :interpreter :mode :commands :defines :functions :defer :init :after :demand :config :diminish :delight))) nil [4846 5494])
            ("use-package-expand-minimally" variable nil nil [5496 5977])
            ("use-package-enable-imenu-support" variable nil nil [5979 6228])
            ("use-package-ensure-function" variable (:default-value (quote use-package-ensure-elpa)) nil [6230 7722])
            ("use-package-pre-ensure-function" variable (:default-value (quote ignore)) nil [7724 8554])
            ("use-package-defaults" variable (:default-value (quote ((:config (quote (t)) t) (:ensure use-package-always-ensure use-package-always-ensure) (:defer-install use-package-always-defer-install use-package-always-defer-install) (:pin use-package-always-pin use-package-always-pin)))) nil [8556 9331])
            ("when" code nil nil [9333 9830])
            ("use-package-form-regexp" variable (:default-value "^\\s-*(\\s-*use-package\\s-+\\_<%s\\_>") nil [9832 10000])
            ("use-package--find-require" function (:arguments ("package")) nil [10002 10354])
            ("use-package-jump-to-package-form" function
               (:user-visible-flag t
                :arguments ("package"))
                nil [10356 11568])
            ("use-package-as-symbol" function (:arguments ("string-or-symbol")) nil [11678 11914])
            ("use-package-as-string" function (:arguments ("string-or-symbol")) nil [11916 12157])
            ("use-package-load-name" function (:arguments ("name" "noerror")) nil [12159 12397])
            ("use-package-expand" function (:arguments ("name" "label" "form")) nil [12399 12998])
            ("put" code nil nil [13000 13054])
            ("use-package-hook-injector" function (:arguments ("name-string" "keyword" "body")) nil [13056 14130])
            ("use-package--with-elapsed-timer" function (:arguments ("text" "body")) nil [14132 14870])
            ("put" code nil nil [14872 14934])
            ("use-package-error" function (:arguments ("msg")) nil [14936 15075])
            ("use-package-plist-maybe-put" function (:arguments ("plist" "property" "value")) nil [15077 15293])
            ("use-package-plist-cons" function (:arguments ("plist" "property" "value")) nil [15295 15483])
            ("use-package-plist-append" function (:arguments ("plist" "property" "value")) nil [15485 15680])
            ("use-package-plist-delete" function (:arguments ("plist" "property")) nil [15682 15980])
            ("use-package-split-list" function (:arguments ("pred" "xs")) nil [15982 16306])
            ("use-package-keyword-index" function (:arguments ("keyword")) nil [16308 16523])
            ("use-package-sort-keywords" function (:arguments ("plist")) nil [16525 17035])
            ("use-package-concat" function (:arguments ("elems")) nil [17037 17213])
            ("use-package-font-lock-keywords" variable
               (:constant-flag t
                :default-value (quote (("(\\(use-package\\)\\_>[ 	']*\\(\\(?:\\sw\\|\\s_\\)+\\)?" (1 font-lock-keyword-face) (2 font-lock-constant-face nil t)))))
                nil [17215 17393])
            ("font-lock-add-keywords" code nil nil [17395 17467])
            ("use-package-regex-p" function (:arguments ("re")) nil [17692 17873])
            ("use-package-normalize-regex" function (:arguments ("re")) nil [17875 18152])
            ("use-package-normalize-plist" function (:arguments ("name" "input")) nil [18154 19092])
            ("use-package-process-keywords" function (:arguments ("name" "plist" "state")) nil [19094 20301])
            ("put" code nil nil [20303 20367])
            ("use-package-only-one" function (:arguments ("label" "args" "f")) nil [20464 20795])
            ("put" code nil nil [20797 20853])
            ("use-package-normalize/:pin" function (:arguments ("name" "keyword" "args")) nil [20855 21155])
            ("package-archives" variable nil nil [21213 21238])
            ("package-pinned-packages" variable nil nil [21178 21210])
            ("use-package--archive-exists-p" function (:arguments ("archive")) nil [21241 21634])
            ("use-package-pin-package" function (:arguments ("package" "archive")) nil [21636 22270])
            ("use-package-handler/:pin" function (:arguments ("name" "keyword" "archive-name" "rest" "state")) nil [22272 22871])
            ("use-package--deferred-packages" variable (:default-value (make-hash-table)) nil [22978 23717])
            ("use-package-install-deferred-package" function
               (:user-visible-flag t
                :arguments ("name" "context"))
                nil [23719 25318])
            ("defalias" code nil nil [25320 25396])
            ("use-package-handler/:defer-install" function (:arguments ("name" "keyword" "defer" "rest" "state")) nil [25398 26266])
            ("package-archive-contents" variable nil nil [26365 26398])
            ("use-package-normalize/:ensure" function (:arguments ("name" "keyword" "args")) nil [26399 26746])
            ("use-package-ensure-elpa" function (:arguments ("name" "ensure" "state" "context" "no-refresh")) nil [26748 27849])
            ("use-package-handler/:ensure" function (:arguments ("name" "keyword" "ensure" "rest" "state")) nil [27851 29300])
            ("use-package-normalize-value" function (:arguments ("label" "arg")) nil [29415 29638])
            ("use-package-normalize-test" function (:arguments ("name" "keyword" "args")) nil [29640 29780])
            ("defalias" code nil nil [29782 29847])
            ("defalias" code nil nil [29848 29915])
            ("defalias" code nil nil [29916 29985])
            ("use-package-handler/:if" function (:arguments ("name" "keyword" "pred" "rest" "state")) nil [29987 30140])
            ("defalias" code nil nil [30142 30204])
            ("use-package-handler/:unless" function (:arguments ("name" "keyword" "pred" "rest" "state")) nil [30206 30365])
            ("use-package-as-one" function (:arguments ("label" "args" "f")) nil [30467 30816])
            ("put" code nil nil [30818 30872])
            ("use-package-normalize-symbols" function (:arguments ("label" "arg" "recursed")) nil [30874 31243])
            ("use-package-normalize-symlist" function (:arguments ("name" "keyword" "args")) nil [31245 31388])
            ("use-package-normalize-recursive-symbols" function (:arguments ("label" "arg")) nil [31390 31749])
            ("use-package-normalize-recursive-symlist" function (:arguments ("name" "keyword" "args")) nil [31751 31914])
            ("defalias" code nil nil [31916 31990])
            ("use-package-handler/:requires" function (:arguments ("name" "keyword" "requires" "rest" "state")) nil [31992 32332])
            ("use-package-normalize-paths" function (:arguments ("label" "arg" "recursed")) nil [32435 33136])
            ("use-package-normalize/:load-path" function (:arguments ("name" "keyword" "args")) nil [33138 33282])
            ("use-package-handler/:load-path" function (:arguments ("name" "keyword" "arg" "rest" "state")) nil [33284 33555])
            ("use-package-normalize-predicate" function (:arguments ("name" "keyword" "args")) nil [33659 33835])
            ("defalias" code nil nil [33837 33915])
            ("use-package-handler/:no-require" function (:arguments ("name" "keyword" "arg" "rest" "state")) nil [33917 34080])
            ("use-package-normalize-form" function (:arguments ("label" "args")) nil [34181 34569])
            ("use-package-normalize-forms" function (:arguments ("name" "keyword" "args")) nil [34571 34684])
            ("defalias" code nil nil [34686 34757])
            ("use-package-handler/:preface" function (:arguments ("name" "keyword" "arg" "rest" "state")) nil [34759 34984])
            ("use-package-is-pair" function (:arguments ("x" "car-pred" "cdr-pred")) nil [35090 35367])
            ("use-package-normalize-pairs" function (:arguments ("key-pred" "val-pred" "name" "label" "arg" "recursed")) nil [35369 37491])
            ("use-package-normalize-binder" function (:arguments ("name" "keyword" "args")) nil [37493 37992])
            ("defalias" code nil nil [37994 38063])
            ("defalias" code nil nil [38064 38134])
            ("use-package-handler/:bind" function (:arguments ("name" "keyword" "arg" "rest" "state" "bind-macro")) nil [38136 38780])
            ("use-package-handler/:bind*" function (:arguments ("name" "keyword" "arg" "rest" "state")) nil [38782 38916])
            ("defalias" code nil nil [39036 39112])
            ("defalias" code nil nil [39113 39190])
            ("use-package-autoload-keymap" function (:arguments ("keymap-symbol" "package" "override")) nil [39207 40457])
            ("use-package-handler/:bind-keymap" function (:arguments ("name" "keyword" "arg" "rest" "state" "override")) nil [40459 41164])
            ("use-package-handler/:bind-keymap*" function (:arguments ("name" "keyword" "arg" "rest" "state")) nil [41166 41304])
            ("use-package-normalize-mode" function (:arguments ("name" "keyword" "args")) nil [41409 41701])
            ("defalias" code nil nil [41703 41777])
            ("use-package-handler/:interpreter" function (:arguments ("name" "keyword" "arg" "rest" "state")) nil [41779 42431])
            ("defalias" code nil nil [42529 42596])
            ("use-package-handler/:mode" function (:arguments ("name" "keyword" "arg" "rest" "state")) nil [42598 43201])
            ("defalias" code nil nil [43303 43377])
            ("use-package-handler/:commands" function (:arguments ("name" "keyword" "arg" "rest" "state")) nil [43379 43674])
            ("defalias" code nil nil [43775 43848])
            ("use-package-handler/:defines" function (:arguments ("name" "keyword" "arg" "rest" "state")) nil [43850 43989])
            ("defalias" code nil nil [44092 44167])
            ("use-package-handler/:functions" function (:arguments ("name" "keyword" "arg" "rest" "state")) nil [44169 44606])
            ("defalias" code nil nil [44705 44778])
            ("use-package--autoload-with-deferred-install" function (:arguments ("command" "package-name")) nil [44780 46098])
            ("use-package-handler/:defer" function (:arguments ("name" "keyword" "arg" "rest" "state")) nil [46100 47625])
            ("defalias" code nil nil [47725 47806])
            ("use-package-require-after-load" function (:arguments ("features")) nil [47808 48740])
            ("use-package-handler/:after" function (:arguments ("name" "keyword" "arg" "rest" "state")) nil [48742 49711])
            ("defalias" code nil nil [49811 49885])
            ("use-package-handler/:demand" function (:arguments ("name" "keyword" "arg" "rest" "state")) nil [49887 50042])
            ("defalias" code nil nil [50140 50208])
            ("use-package-handler/:init" function (:arguments ("name" "keyword" "arg" "rest" "state")) nil [50210 50722])
            ("defalias" code nil nil [50822 50892])
            ("use-package-handler/:config" function (:arguments ("name" "keyword" "arg" "rest" "state")) nil [50894 52371])
            ("use-package-normalize-diminish" function (:arguments ("name" "label" "arg" "recursed")) nil [52473 53158])
            ("use-package-normalize/:diminish" function (:arguments ("name" "keyword" "args")) nil [53160 53329])
            ("use-package-handler/:diminish" function (:arguments ("name" "keyword" "arg" "rest" "state")) nil [53331 53733])
            ("use-package-normalize/:delight" function (:arguments ("name" "keyword" "args")) nil [53834 54303])
            ("use-package-handler/:delight" function (:arguments ("name" "keyword" "args" "rest" "state")) nil [54305 54549])
            ("use-package" function (:arguments ("name" "args")) nil [54671 59080])
            ("put" code nil nil [59083 59130])
            ("use-package" package nil nil [59132 59154]))          
      :file "use-package.el"
      :pointmax 59300
      :fsize 59299
      :lastmodtime '(22842 50915 0 0)
      :unmatched-syntax '((close-paren 21238 . 21239) (symbol 21158 . 21175) (open-paren 21157 . 21158) (close-paren 1829 . 1830) (symbol 1790 . 1807) (open-paren 1789 . 1790) (close-paren 1787 . 1788) (symbol 1756 . 1773) (open-paren 1755 . 1756))))
  :file "!Users!ric!.emacs.d!elpa!use-package-20170524.2245!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
