;; Object semanticdb-project-database-file
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file"
  :tables
  (list
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [4810 4827])
            ("easymenu" include nil nil [4828 4847])
            ("help-mode" include nil nil [4848 4868])
            ("yas--editing-template" variable nil nil [4870 4900])
            ("yas--guessed-modes" variable nil nil [4901 4928])
            ("yas--indent-original-column" variable nil nil [4929 4965])
            ("yas--scheduled-jit-loads" variable nil nil [4966 4999])
            ("yas-keymap" variable nil nil [5000 5019])
            ("yas-selected-text" variable nil nil [5020 5046])
            ("yas-verbosity" variable nil nil [5047 5069])
            ("yas--current-template" variable nil nil [5070 5100])
            ("yasnippet" customgroup (:user-visible-flag t) nil [5137 5230])
            ("yas--loaddir" variable
               (:constant-flag t
                :default-value (file-name-directory (or load-file-name buffer-file-name)))
                nil [5232 5362])
            ("yas-installed-snippets-dir" variable nil nil [5364 5403])
            ("setq" code nil nil [5404 5486])
            ("yas--default-user-snippets-dir" variable
               (:constant-flag t
                :default-value (expand-file-name "snippets" user-emacs-directory))
                nil [5488 5582])
            ("yas-snippet-dirs" variable (:default-value (remove nil (list yas--default-user-snippets-dir (quote yas-installed-snippets-dir)))) nil [5584 6591])
            ("yas-snippet-dirs" function nil nil [6593 7124])
            ("yas-new-snippet-default" variable (:default-value "# -*- mode: snippet -*-
# name: $1
# key: ${2:${1:$(yas--key-from-desc yas-text)}}
# --
$0`(yas-escape-text yas-selected-text)`") nil [7126 7396])
            ("yas-prompt-functions" variable (:default-value (quote (yas-dropdown-prompt yas-completing-prompt yas-maybe-ido-prompt yas-no-prompt))) nil [7398 8342])
            ("yas-indent-line" variable (:default-value (quote auto)) nil [8344 8883])
            ("yas-also-auto-indent-first-line" variable nil nil [8885 9077])
            ("yas-snippet-revival" variable (:default-value t) nil [9079 9191])
            ("yas-triggers-in-field" variable nil nil [9193 9392])
            ("yas-fallback-behavior" variable (:default-value (quote return-nil)) nil [9394 9707])
            ("make-obsolete-variable" code nil nil [9709 9917])
            ("yas-choose-keys-first" variable nil nil [9919 10154])
            ("yas-choose-tables-first" variable nil nil [10156 10436])
            ("yas-use-menu" variable (:default-value (quote abbreviate)) nil [10438 10995])
            ("yas-trigger-symbol" variable (:default-value (or (and (eq window-system (quote mac)) (ignore-errors (char-to-string 8677))) " =>")) nil [10997 11323])
            ("yas-wrap-around-region" variable nil nil [11325 11838])
            ("yas-good-grace" variable (:default-value t) nil [11859 12329])
            ("yas-visit-from-menu" variable nil nil [12331 12516])
            ("yas-expand-only-for-last-commands" variable nil nil [12518 13033])
            ("yas-alias-to-yas/prefix-p" variable (:default-value t) nil [13035 13243])
            ("yas-field-highlight-face" variable
               (:default-value (quote ((t (:inherit (quote region)))))
                :type "face")
                nil [13309 13442])
            ("yas--field-debug-face" variable
               (:default-value (quote nil)
                :type "face")
                nil [13444 13543])
            ("yas-keymap" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [(tab)] (quote yas-next-field-or-maybe-expand)) (define-key map (kbd "TAB") (quote yas-next-field-or-maybe-expand)) (define-key map [(shift tab)] (quote yas-prev-field)) (define-key map [backtab] (quote yas-prev-field)) (define-key map (kbd "C-g") (quote yas-abort-snippet)) (define-key map (kbd "C-d") (quote yas-skip-and-clear-or-delete-char)) map)) nil [13575 14188])
            ("yas-key-syntaxes" variable (:default-value (list "w" "w_" "w_." "w_.()" (function yas-try-key-from-whitespace))) nil [14190 15802])
            ("yas-after-exit-snippet-hook" variable (:default-value (quote nil)) nil [15804 16158])
            ("yas-before-expand-snippet-hook" variable (:default-value (quote nil)) nil [16160 16255])
            ("yas-not-string-or-comment-condition" variable
               (:constant-flag t
                :default-value (quote (if (and (let ((ppss (syntax-ppss))) (or (nth 3 ppss) (nth 4 ppss))) (memq this-command (quote (yas-expand yas-expand-from-trigger-key yas-expand-from-keymap)))) (quote (require-snippet-condition . force-in-comment)) t)))
                nil [16257 16706])
            ("yas-buffer-local-condition" variable (:default-value t) nil [16708 18659])
            ("yas--version" variable
               (:constant-flag t
                :default-value "0.11.0")
                nil [18687 18719])
            ("yas--menu-table" variable (:default-value (make-hash-table)) nil [18721 18819])
            ("yas--escaped-characters" variable (:default-value (quote (92 96 34 39 36 125 123 40 41))) nil [18821 18946])
            ("yas--field-regexp" variable
               (:constant-flag t
                :default-value "${\\([0-9]+:\\)?\\([^}]*\\)}")
                nil [18948 19053])
            ("yas--multi-dollar-lisp-expression-regexp" variable
               (:constant-flag t
                :default-value "$+[ 	
]*\\(([^)]*)\\)")
                nil [19055 19194])
            ("yas--backquote-lisp-expression-regexp" variable
               (:constant-flag t
                :default-value "`\\([^`]*\\)`")
                nil [19196 19331])
            ("yas--transform-mirror-regexp" variable
               (:constant-flag t
                :default-value "${\\(?:\\([0-9]+\\):\\)?$\\([ 	
]*([^}]*\\)")
                nil [19333 19484])
            ("yas--simple-mirror-regexp" variable
               (:constant-flag t
                :default-value "$\\([0-9]+\\)")
                nil [19486 19583])
            ("yas--snippet-id-seed" variable nil nil [19585 19656])
            ("yas--original-auto-fill-function" variable nil nil [19658 19751])
            ("make-variable-buffer-local" code nil nil [19752 19814])
            ("yas--snippet-next-id" function nil nil [19816 19925])
            ("last-buffer-undo-list" variable nil nil [20028 20062])
            ("yas--minor-mode-menu" variable nil nil [20064 20127])
            ("yas--maybe-expand-key-filter" function (:arguments ("cmd")) nil [20129 20288])
            ("yas-maybe-expand" variable
               (:constant-flag t
                :default-value (quote (menu-item "" yas-expand :filter yas--maybe-expand-key-filter)))
                nil [20290 20550])
            ("yas-minor-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [(tab)] yas-maybe-expand) (define-key map (kbd "TAB") yas-maybe-expand) (define-key map "&" (quote yas-insert-snippet)) (define-key map "&" (quote yas-new-snippet)) (define-key map "&" (quote yas-visit-snippet-file)) map)) nil [20552 20937])
            ("easy-menu-define" code nil nil [20939 26181])
            ("yas--extra-modes" variable nil nil [26183 26393])
            ("define-obsolete-variable-alias" code nil nil [26394 26469])
            ("yas--tables" variable (:default-value (make-hash-table)) nil [26471 26567])
            ("yas--parents" variable (:default-value (make-hash-table)) nil [26569 26961])
            ("yas--direct-keymaps" variable (:default-value (list)) nil [26963 27467])
            ("yas-direct-keymaps-reload" function (:user-visible-flag t) nil [27469 27849])
            ("yas--modes-to-activate" function (:arguments ("mode")) nil [27851 28923])
            ("yas-minor-mode-hook" variable nil nil [28925 29006])
            ("yas--auto-fill-wrapper" function nil nil [29008 29245])
            ("define-minor-mode" code nil nil [29262 31220])
            ("yas-activate-extra-mode" function
               (:user-visible-flag t
                :arguments ("mode"))
                nil [31222 31851])
            ("yas-deactivate-extra-mode" function
               (:user-visible-flag t
                :arguments ("mode"))
                nil [31853 32192])
            ("define-obsolete-variable-alias" code nil nil [32194 32284])
            ("yas-dont-activate-functions" variable (:default-value (list (function minibufferp))) nil [32285 33013])
            ("unless" code nil nil [33014 33122])
            ("yas-minor-mode-on" function (:user-visible-flag t) nil [33125 33610])
            ("define-globalized-minor-mode" code nil nil [33627 33706])
            ("yas--global-mode-reload-with-jit-maybe" function nil nil [33708 33854])
            ("add-hook" code nil nil [33856 33929])
            ("yas--font-lock-keywords" variable (:default-value (append (quote (("^#.*$" . font-lock-comment-face))) (with-temp-buffer (let ((prog-mode-hook nil) (emacs-lisp-mode-hook nil)) (ignore-errors (emacs-lisp-mode))) (font-lock-set-defaults) (if (eq t (car-safe font-lock-keywords)) (cadr font-lock-keywords) font-lock-keywords)) (quote (("\\$\\([0-9]+\\)" (0 font-lock-keyword-face) (1 font-lock-string-face t)) ("\\${\\([0-9]+\\):?" (0 font-lock-keyword-face) (1 font-lock-warning-face t)) ("\\(\\$(\\)" 1 font-lock-preprocessor-face) ("}" (0 font-lock-keyword-face)))))) nil [33955 34773])
            ("snippet-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (easy-menu-define nil map "Menu used when snippet-mode is active." (cons "Snippet" (mapcar (function (lambda (ent) (when (nth 2 ent) (define-key map (nth 2 ent) (nth 1 ent))) (vector (nth 0 ent) (nth 1 ent) t))) (quote (("Load this snippet" yas-load-snippet-buffer "") ("Load and quit window" yas-load-snippet-buffer-and-close "") ("Try out this snippet" yas-tryout-snippet "")))))) map)) nil [34775 35459])
            ("define-derived-mode" code nil nil [35477 35855])
            ("yas-snippet-mode-buffer-p" function nil nil [35857 36188])
            ("add-to-list" code nil nil [36304 36401])
            ("cl-defstruct" code nil nil [36451 37946])
            ("cl-defstruct" code nil nil [37948 39156])
            ("yas--get-template-by-uuid" function (:arguments ("mode" "uuid")) nil [39158 39371])
            ("yas--remove-template-by-uuid" function (:arguments ("table" "uuid")) nil [41238 42383])
            ("yas-maybe-expand-from-keymap" variable
               (:constant-flag t
                :default-value (quote (menu-item "" yas-expand-from-keymap :filter yas--maybe-expand-from-keymap-filter)))
                nil [42385 42524])
            ("yas--add-template" function (:arguments ("table" "template")) nil [42526 43501])
            ("yas--update-template" function (:arguments ("table" "template")) nil [43503 43925])
            ("yas--update-template-menu" function (:arguments ("table" "template")) nil [43927 45884])
            ("yas--namehash-templates-alist" function (:arguments ("namehash")) nil [45886 46087])
            ("yas--fetch" function (:arguments ("table" "key")) nil [46089 46470])
            ("yas--eval-condition" function (:arguments ("condition")) nil [46505 46804])
            ("yas--filter-templates-by-condition" function (:arguments ("templates")) nil [46807 47474])
            ("yas--require-template-specific-condition-p" function nil nil [47476 48189])
            ("yas--template-can-expand-p" function (:arguments ("condition" "requirement")) nil [48191 48504])
            ("yas--table-templates" function (:arguments ("table")) nil [48506 48868])
            ("yas--templates-for-key-at-point" function nil nil [48870 50431])
            ("yas--table-all-keys" function (:arguments ("table")) nil [50433 50759])
            ("yas--table-mode" function (:arguments ("table")) nil [50761 50827])
            ("yas--eval-for-string" function (:arguments ("form")) nil [50867 51348])
            ("yas--eval-for-effect" function (:arguments ("form")) nil [51350 51440])
            ("yas--read-lisp" function (:arguments ("string" "nil-on-error")) nil [51442 51810])
            ("yas--read-keybinding" function (:arguments ("keybinding")) nil [51812 52370])
            ("yas--table-get-create" function (:arguments ("mode")) nil [52372 52811])
            ("yas--get-snippet-tables" function (:arguments ("mode")) nil [52813 53207])
            ("yas--menu-keymap-get-create" function (:arguments ("mode" "parents")) nil [53209 53790])
            ("yas--parse-template" function (:arguments ("file")) nil [53846 56970])
            ("yas--calculate-group" function (:arguments ("file")) nil [56972 57616])
            ("yas--subdirs" function (:arguments ("directory" "filep")) nil [57618 58282])
            ("yas--make-menu-binding" function (:arguments ("template")) nil [58284 58493])
            ("yas--expand-or-visit-from-menu" function (:arguments ("mode" "uuid")) nil [58495 59238])
            ("yas--key-from-desc" function (:arguments ("text")) nil [59240 59387])
            ("yas--prompt-for-template" function (:arguments ("templates" "prompt")) nil [59430 60055])
            ("yas--prompt-for-keys" function (:arguments ("keys" "prompt")) nil [60057 60356])
            ("yas--prompt-for-table" function (:arguments ("tables" "prompt")) nil [60358 60727])
            ("yas-x-prompt" function (:arguments ("prompt" "choices" "display-fn")) nil [60729 61506])
            ("yas-maybe-ido-prompt" function (:arguments ("prompt" "choices" "display-fn")) nil [61508 61658])
            ("yas-ido-prompt" function (:arguments ("prompt" "choices" "display-fn")) nil [61660 61811])
            ("yas-dropdown-prompt" function (:arguments ("_prompt" "choices" "display-fn")) nil [61813 62112])
            ("yas-completing-prompt" function (:arguments ("prompt" "choices" "display-fn" "completion-fn")) nil [62114 62605])
            ("yas-no-prompt" function (:arguments ("_prompt" "choices" "_display-fn")) nil [62607 62689])
            ("yas--creating-compiled-snippets" variable nil nil [62814 62858])
            ("yas--define-snippets-1" function (:arguments ("snippet" "snippet-table")) nil [62860 63172])
            ("yas-define-snippets" function (:arguments ("mode" "snippets")) nil [63174 64975])
            ("yas--template-get-file" function (:arguments ("template")) nil [65012 65369])
            ("yas--load-yas-setup-file" function (:arguments ("file")) nil [65371 65746])
            ("yas--define-parents" function (:arguments ("mode" "parents")) nil [65748 65988])
            ("yas-load-directory" function
               (:user-visible-flag t
                :arguments ("top-level-dir" "use-jit" "interactive"))
                nil [65990 68360])
            ("yas--load-directory-1" function (:arguments ("directory" "mode-sym")) nil [68362 69369])
            ("yas--load-directory-2" function (:arguments ("directory" "mode-sym")) nil [69371 70318])
            ("yas--load-snippet-dirs" function (:arguments ("nojit")) nil [70320 71152])
            ("yas-reload-all" function
               (:user-visible-flag t
                :arguments ("no-jit" "interactive"))
                nil [71154 73897])
            ("yas-after-reload-hook" variable nil nil [73899 73971])
            ("yas--load-pending-jits" function nil nil [73973 74352])
            ("yas-escape-text" function (:arguments ("text")) nil [74354 74481])
            ("yas-compile-directory" function
               (:user-visible-flag t
                :arguments ("top-level-dir"))
                nil [74519 74852])
            ("yas-recompile-all" function (:user-visible-flag t) nil [74854 74995])
            ("yas--scheduled-jit-loads" variable (:default-value (make-hash-table)) nil [75019 75150])
            ("yas--schedule-jit" function (:arguments ("mode" "fun")) nil [75152 75241])
            ("yas-about" function nil nil [75277 76381])
            ("yas--template-menu-binding-pair-get-create" function (:arguments ("template" "type")) nil [77787 78508])
            ("yas--template-menu-managed-by-yas-define-menu" function (:arguments ("template")) nil [78509 78703])
            ("yas--show-menu-p" function (:arguments ("mode")) nil [78706 78924])
            ("yas--delete-from-keymap" function (:arguments ("keymap" "uuid")) nil [78926 79978])
            ("yas-define-menu" function (:arguments ("mode" "menu" "omit-items")) nil [79980 81286])
            ("yas--define-menu-1" function (:arguments ("table" "menu-keymap" "menu" "uuidhash" "group-list")) nil [81288 82842])
            ("yas--define" function (:arguments ("mode" "key" "template" "name" "condition" "group")) nil [82845 83320])
            ("yas-hippie-try-expand" function (:arguments ("first-time?")) nil [83322 83613])
            ("yas--condition-cache-timestamp" variable nil nil [83661 83704])
            ("yas-define-condition-cache" function (:arguments ("func" "doc" "body")) nil [83705 84735])
            ("defalias" code nil nil [84737 84788])
            ("yas-expand-from-trigger-key" function
               (:user-visible-flag t
                :arguments ("field"))
                nil [84789 86140])
            ("yas--maybe-expand-from-keymap-filter" function (:arguments ("cmd")) nil [86142 86642])
            ("yas-expand-from-keymap" function (:user-visible-flag t) nil [86644 86956])
            ("yas--expand-or-prompt-for-template" function (:arguments ("templates" "start" "end")) nil [86958 87710])
            ("yas--fallback" function nil nil [88006 89878])
            ("yas--keybinding-beyond-yasnippet" function nil nil [89880 90186])
            ("yas--fallback-translate-input" function (:arguments ("keys")) nil [90188 91158])
            ("yas--all-templates" function (:arguments ("tables")) nil [91198 91952])
            ("yas--lookup-snippet-1" function (:arguments ("name" "mode")) nil [91954 92284])
            ("yas-lookup-snippet" function (:arguments ("name" "mode" "noerror")) nil [92286 92768])
            ("yas-insert-snippet" function
               (:user-visible-flag t
                :arguments ("no-condition"))
                nil [92770 94078])
            ("yas-visit-snippet-file" function (:user-visible-flag t) nil [94080 94757])
            ("yas--visit-snippet-file-1" function (:arguments ("template")) nil [94759 96475])
            ("yas--guess-snippet-directories-1" function (:arguments ("table")) nil [96477 96737])
            ("yas--guess-snippet-directories" function (:arguments ("table")) nil [96739 97782])
            ("yas--make-directory-maybe" function (:arguments ("table-and-dirs" "main-table-string")) nil [97784 98912])
            ("yas-new-snippet" function
               (:user-visible-flag t
                :arguments ("no-template"))
                nil [98914 99912])
            ("yas--compute-major-mode-and-parents" function (:arguments ("file")) nil [99914 101524])
            ("yas--editing-template" variable nil nil [101526 101640])
            ("yas--current-template" variable nil nil [101642 101738])
            ("yas--guessed-modes" variable nil nil [101740 101835])
            ("yas--read-table" function nil nil [101837 102702])
            ("yas-load-snippet-buffer" function
               (:user-visible-flag t
                :arguments ("table" "interactive"))
                nil [102704 104128])
            ("yas-maybe-load-snippet-buffer" function nil nil [104130 104848])
            ("yas-load-snippet-buffer-and-close" function
               (:user-visible-flag t
                :arguments ("table" "kill"))
                nil [104850 106178])
            ("yas-tryout-snippet" function
               (:user-visible-flag t
                :arguments ("debug"))
                nil [106180 108200])
            ("yas-active-keys" function nil nil [108202 108471])
            ("yas--template-fine-group" function (:arguments ("template")) nil [108473 108620])
            ("yas-describe-table-by-namehash" function (:user-visible-flag t) nil [108622 109540])
            ("yas-describe-tables" function
               (:user-visible-flag t
                :arguments ("with-nonactive"))
                nil [109542 110243])
            ("yas--describe-pretty-table" function (:arguments ("table" "original-buffer")) nil [110245 113026])
            ("yas-try-key-from-whitespace" function (:arguments ("_start-point")) nil [113096 113374])
            ("yas-shortest-key-until-whitespace" function (:arguments ("_start-point")) nil [113376 113579])
            ("yas-longest-key-from-whitespace" function (:arguments ("start-point")) nil [113581 113989])
            ("yas-modified-p" variable nil nil [114060 114153])
            ("yas-moving-away-p" variable nil nil [114155 114229])
            ("yas-text" variable nil nil [114231 114285])
            ("yas-substr" function (:arguments ("str" "pattern" "subexp")) nil [114287 114654])
            ("yas-choose-value" function (:arguments ("possibilities")) nil [114656 115199])
            ("yas-key-to-value" function (:arguments ("alist")) nil [115201 115446])
            ("yas-throw" function (:arguments ("text")) nil [115448 115562])
            ("put" code nil nil [115563 115624])
            ("put" code nil nil [115625 115678])
            ("yas-verify-value" function (:arguments ("possibilities")) nil [115680 115974])
            ("yas-field-value" function (:arguments ("number")) nil [115976 116308])
            ("yas-text" function nil nil [116310 116470])
            ("yas-selected-text" function nil nil [116472 116677])
            ("yas--get-field-once" function (:arguments ("number" "transform-fn")) nil [116679 116873])
            ("yas-default-from-field" function (:arguments ("number")) nil [116875 116969])
            ("yas-inside-string" function nil nil [116971 117146])
            ("yas-unimplemented" function (:arguments ("missing-feature")) nil [117148 117569])
            ("yas--active-field-overlay" variable nil nil [117617 117696])
            ("yas--field-protection-overlays" variable nil nil [117698 117792])
            ("yas-selected-text" variable nil nil [117794 117887])
            ("yas--start-column" variable nil nil [117889 117971])
            ("make-variable-buffer-local" code nil nil [117973 118028])
            ("make-variable-buffer-local" code nil nil [118029 118089])
            ("put" code nil nil [118090 118141])
            ("put" code nil nil [118142 118198])
            ("cl-defstruct" code nil nil [118200 118577])
            ("cl-defstruct" code nil nil [118579 119138])
            ("cl-defstruct" code nil nil [119141 119600])
            ("cl-defstruct" code nil nil [119602 119683])
            ("yas--letenv" function (:arguments ("env" "body")) nil [119685 119900])
            ("yas--snippet-map-markers" function (:arguments ("fun" "snippet")) nil [119902 120636])
            ("yas--snippet-live-p" function (:arguments ("snippet")) nil [120638 120935])
            ("yas--apply-transform" function (:arguments ("field-or-mirror" "field" "empty-on-nil-p")) nil [120937 121998])
            ("yas--replace-all" function (:arguments ("from" "to" "text")) nil [122000 122325])
            ("yas--snippet-find-field" function (:arguments ("snippet" "number")) nil [122327 122505])
            ("yas--snippet-sort-fields" function (:arguments ("snippet")) nil [122507 122728])
            ("yas--snippet-field-compare" function (:arguments ("field1" "field2")) nil [122730 123308])
            ("yas--field-probably-deleted-p" function (:arguments ("snippet" "field")) nil [123310 124078])
            ("yas-active-snippets" function (:arguments ("beg" "end")) nil [124080 124931])
            ("define-obsolete-function-alias" code nil nil [124933 125019])
            ("yas-next-field-or-maybe-expand" function (:user-visible-flag t) nil [125021 125468])
            ("yas-next-field-will-exit-p" function (:arguments ("arg")) nil [125470 125785])
            ("yas--find-next-field" function (:arguments ("n" "snippet" "active")) nil [125787 126231])
            ("yas-next-field" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [126233 126985])
            ("yas--place-overlays" function (:arguments ("snippet" "field")) nil [126987 127439])
            ("yas--move-to-field" function (:arguments ("snippet" "field")) nil [127441 128413])
            ("yas-prev-field" function (:user-visible-flag t) nil [128415 128542])
            ("yas-abort-snippet" function (:arguments ("snippet")) nil [128544 128755])
            ("yas-exit-snippet" function
               (:user-visible-flag t
                :arguments ("snippet"))
                nil [128757 129129])
            ("yas-exit-all-snippets" function (:user-visible-flag t) nil [129131 129346])
            ("yas--inhibit-overlay-hooks" variable nil nil [129388 129509])
            ("yas-snippet-beg" variable nil nil [129511 129591])
            ("yas-snippet-end" variable nil nil [129592 129666])
            ("yas--commit-snippet" function (:arguments ("snippet")) nil [129668 131370])
            ("yas--snippets-to-move" variable nil nil [131372 131406])
            ("make-variable-buffer-local" code nil nil [131407 131458])
            ("yas--prepare-snippets-for-move" function (:arguments ("beg" "end" "buf" "pos")) nil [131460 132423])
            ("yas--on-buffer-kill" function nil nil [132425 133100])
            ("add-hook" code nil nil [133102 133152])
            ("yas--finish-moving-snippets" function nil nil [133154 134054])
            ("yas--safely-call-fun" function (:arguments ("fun")) nil [134056 134287])
            ("yas--safely-run-hook" function (:arguments ("hook")) nil [134289 134590])
            ("yas--check-commit-snippet" function nil nil [134592 136586])
            ("yas--markers-to-points" function (:arguments ("snippet")) nil [137013 137286])
            ("yas--points-to-markers" function (:arguments ("snippet")) nil [137288 137454])
            ("yas--maybe-move-to-active-field" function (:arguments ("snippet")) nil [137456 137801])
            ("yas--field-contains-point-p" function (:arguments ("field" "point")) nil [137803 138007])
            ("yas--field-text-for-display" function (:arguments ("field")) nil [138009 138178])
            ("yas--undo-in-progress" function nil nil [138180 138342])
            ("yas--make-control-overlay" function (:arguments ("snippet" "start" "end")) nil [138344 138801])
            ("yas-skip-and-clear-or-delete-char" function
               (:user-visible-flag t
                :arguments ("field"))
                nil [138803 139510])
            ("yas--skip-and-clear" function (:arguments ("field" "from")) nil [139512 140122])
            ("yas--mark-this-and-children-modified" function (:arguments ("field")) nil [140124 140505])
            ("yas--make-move-active-field-overlay" function (:arguments ("snippet" "field")) nil [140507 141614])
            ("yas--skip-and-clear-field-p" function (:arguments ("field" "beg" "_end" "length")) nil [141616 141969])
            ("yas--on-field-overlay-modification" function (:arguments ("overlay" "after?" "beg" "end" "length")) nil [141971 143617])
            ("yas--auto-fill" function nil nil [143619 144697])
            ("yas--make-move-field-protection-overlays" function (:arguments ("snippet" "field")) nil [145124 146641])
            ("yas--on-protection-overlay-modification" function (:arguments ("_overlay" "after?" "beg" "end" "length")) nil [146643 147190])
            ("add-to-list" code nil nil [147192 147255])
            ("yas--first-indent-undo" variable nil nil [148387 148538])
            ("yas--get-indent-undo-pos" variable nil nil [148539 148715])
            ("yas-expand-snippet" function (:arguments ("content" "start" "end" "expand-env")) nil [148717 153357])
            ("yas--take-care-of-redo" function (:arguments ("_beg" "_end" "snippet")) nil [153359 153691])
            ("yas--snippet-revive" function (:arguments ("beg" "end" "snippet")) nil [153693 154571])
            ("yas--snippet-create" function (:arguments ("expand-env" "begin" "end")) nil [154573 155257])
            ("yas--fom-start" function (:arguments ("fom")) nil [156030 156227])
            ("yas--fom-end" function (:arguments ("fom")) nil [156229 156420])
            ("yas--fom-next" function (:arguments ("fom")) nil [156422 156614])
            ("yas--fom-parent-field" function (:arguments ("fom")) nil [156616 156815])
            ("yas--calculate-adjacencies" function (:arguments ("snippet")) nil [156817 158064])
            ("yas--calculate-mirrors-in-fields" function (:arguments ("snippet" "mirror")) nil [158066 158827])
            ("yas--advance-end-maybe" function (:arguments ("fom" "newend")) nil [158829 159564])
            ("yas--advance-start-maybe" function (:arguments ("fom" "newstart")) nil [159566 159869])
            ("yas--advance-end-of-parents-maybe" function (:arguments ("field" "newend")) nil [159871 160305])
            ("yas--dollar-regions" variable nil nil [160307 160429])
            ("yas--backquote-markers-and-strings" variable nil nil [160431 160610])
            ("yas--indent-markers" variable nil nil [160612 160688])
            ("yas--snippet-parse-create" function (:arguments ("snippet")) nil [160690 163159])
            ("yas--snapshot-marker-location" function (:arguments ("marker" "beg" "end")) nil [164355 165342])
            ("yas--snapshot-overlay-location" function (:arguments ("overlay" "beg" "end")) nil [165344 165951])
            ("yas--snapshot-overlay-line-location" function (:arguments ("overlay")) nil [165953 166732])
            ("yas--goto-saved-location" function (:arguments ("regexp" "ws-count")) nil [166734 167204])
            ("yas--restore-marker-location" function (:arguments ("re-marker")) nil [167206 167488])
            ("yas--restore-overlay-location" function (:arguments ("ov-locations")) nil [167490 168078])
            ("yas--restore-overlay-line-location" function (:arguments ("ov-locations")) nil [168081 168860])
            ("yas--indent-region" function (:arguments ("from" "to" "snippet")) nil [168862 170414])
            ("yas--indent-original-column" variable nil nil [170416 170456])
            ("yas--indent" function (:arguments ("snippet")) nil [170457 171433])
            ("yas--collect-snippet-markers" function (:arguments ("snippet")) nil [171435 171634])
            ("yas--escape-string" function (:arguments ("escaped")) nil [171636 171732])
            ("yas--protect-escapes" function (:arguments ("text" "escaped")) nil [171734 172324])
            ("yas--restore-escapes" function (:arguments ("text" "escaped")) nil [172326 172906])
            ("yas--save-backquotes" function nil nil [172908 174720])
            ("yas--restore-backquotes" function nil nil [174722 175248])
            ("yas--scan-sexps" function (:arguments ("from" "count")) nil [175250 175499])
            ("yas--make-marker" function (:arguments ("pos")) nil [175501 175696])
            ("yas--indent-parse-create" function nil nil [175698 176098])
            ("yas--field-parse-create" function (:arguments ("snippet" "parent-field")) nil [176100 179980])
            ("yas--transform-mirror-parse-create" function (:arguments ("snippet")) nil [179982 181237])
            ("yas--simple-mirror-parse-create" function (:arguments ("snippet")) nil [181239 182740])
            ("yas--delete-regions" function (:arguments ("regions")) nil [182742 183018])
            ("yas--calculate-mirror-depth" function (:arguments ("mirror" "traversed")) nil [183020 183725])
            ("yas--update-mirrors" function (:arguments ("snippet")) nil [183727 185806])
            ("yas--mirror-update-display" function (:arguments ("mirror" "field" "snippet")) nil [185808 186961])
            ("yas--field-update-display" function (:arguments ("field")) nil [186963 187888])
            ("yas--post-command-handler" function nil nil [187918 188933])
            ("put" code nil nil [189050 189135])
            ("yas--expand-from-trigger-key-doc" function (:arguments ("context")) nil [189136 190140])
            ("put" code nil nil [190142 190233])
            ("yas--expand-from-keymap-doc" function (:arguments ("context")) nil [190234 191398])
            ("yas--template-pretty-list" function (:arguments ("templates")) nil [191400 191720])
            ("define-button-type" code nil nil [191722 191925])
            ("yas--snippet-description-finish-runonce" function nil nil [191927 192174])
            ("yas--create-snippet-xrefs" function nil nil [192176 192659])
            ("yas-verbosity" variable (:default-value 3) nil [192673 192776])
            ("yas--message" function (:arguments ("level" "message" "args")) nil [192778 192988])
            ("yas--warning" function (:arguments ("format-control" "format-args")) nil [192990 193176])
            ("yas--format" function (:arguments ("format-control" "format-args")) nil [193178 193296])
            ("unless" code nil nil [193434 196015])
            ("yas-initialize" function nil nil [196067 196244])
            ("yas--backported-syms" variable (:default-value (quote (yas-snippet-dirs yas-prompt-functions yas-indent-line yas-also-auto-indent-first-line yas-snippet-revival yas-triggers-in-field yas-fallback-behavior yas-choose-keys-first yas-choose-tables-first yas-use-menu yas-trigger-symbol yas-wrap-around-region yas-good-grace yas-visit-from-menu yas-expand-only-for-last-commands yas-field-highlight-face yas-keymap yas-verbosity yas-extra-modes yas-key-syntaxes yas-after-exit-snippet-hook yas-before-expand-snippet-hook yas-buffer-local-condition yas-dont-activate yas-x-prompt yas-ido-prompt yas-no-prompt yas-completing-prompt yas-dropdown-prompt yas-expand yas-minor-mode yas-global-mode yas-direct-keymaps-reload yas-minor-mode-on yas-load-directory yas-reload-all yas-compile-directory yas-recompile-all yas-about yas-expand-from-trigger-key yas-expand-from-keymap yas-insert-snippet yas-visit-snippet-file yas-new-snippet yas-load-snippet-buffer yas-tryout-snippet yas-describe-tables yas-next-field-or-maybe-expand yas-next-field yas-prev-field yas-abort-snippet yas-exit-snippet yas-exit-all-snippets yas-skip-and-clear-or-delete-char yas-initialize yas-expand-snippet yas-define-snippets yas-define-menu yas-snippet-beg yas-snippet-end yas-modified-p yas-moving-away-p yas-substr yas-choose-value yas-key-to-value yas-throw yas-verify-value yas-field-value yas-text yas-selected-text yas-default-from-field yas-inside-string yas-unimplemented yas-define-condition-cache yas-hippie-try-expand))) nil [196246 201128])
            ("when" code nil nil [201130 201665])
            ("yas--exported-syms" variable (:default-value (let (exported) (mapatoms (lambda (atom) (if (and (or (and (boundp atom) (not (get atom (quote byte-obsolete-variable)))) (and (fboundp atom) (not (get atom (quote byte-obsolete-info))))) (string-match-p "\\`yas-[^-]" (symbol-name atom))) (push atom exported)))) exported)) nil [201667 202321])
            ("yasnippet" package nil nil [202325 202345]))          
      :file "yasnippet.el"
      :pointmax 202443
      :fsize 202444
      :lastmodtime '(22848 38727 0 0)
      :unmatched-syntax nil))
  :file "!Users!ric!.emacs.d!elpa!yasnippet-20170605.1940!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
