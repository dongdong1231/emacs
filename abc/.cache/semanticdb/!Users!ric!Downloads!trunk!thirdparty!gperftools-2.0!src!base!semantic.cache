;; Object semanticdb-project-database-file
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file"
  :tables
  (list
    (semanticdb-table "semanticdb-table"
      :major-mode c++-mode
      :tags 
        '( ("_LOGGING_H_" variable (:constant-flag t) nil [1772 1783])
            ("thirdparty/gperftools-2.0/src/config.h" include nil nil [1785 1834])
            ("stdarg.h" include (:system-flag t) nil [1835 1854])
            ("stdlib.h" include (:system-flag t) nil [1855 1874])
            ("stdio.h" include (:system-flag t) nil [1875 1893])
            ("string.h" include (:system-flag t) nil [1960 1979])
            ("assert.h" include (:system-flag t) nil [2009 2028])
            ("errno.h" include (:system-flag t) nil [2029 2047])
            ("base/commandlineflags.h" include nil nil [2065 2099])
            ("WRITE_TO_STDERR" variable (:constant-flag t) nil [2721 2736])
            ("perftools_vsnprintf" variable (:constant-flag t) nil [3005 3024])
            ("DECLARE_int32" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("verbose" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3165 3173]))                  
                :type "int")
                nil [3151 3174])
            ("CHECK" variable (:constant-flag t) nil [3505 3510])
            ("RAW_CHECK" variable (:constant-flag t) nil [4097 4106])
            ("" type
               (:members 
                  ( ("DEBUG_MODE" variable
                       (:constant-flag t
                        :default-value (4825 4826)
                        :type "int")
                        (reparse-symbol enumsubparts) [4812 4826]))                  
                :type "enum")
                nil [4805 4829])
            ("RAW_DCHECK" variable (:constant-flag t) nil [4838 4848])
            ("PCHECK" variable (:constant-flag t) nil [5030 5036])
            ("CHECK_OP" variable (:constant-flag t) nil [6240 6248])
            ("CHECK_EQ" variable (:constant-flag t) nil [6699 6707])
            ("CHECK_NE" variable (:constant-flag t) nil [6753 6761])
            ("CHECK_LE" variable (:constant-flag t) nil [6807 6815])
            ("CHECK_LT" variable (:constant-flag t) nil [6861 6869])
            ("CHECK_GE" variable (:constant-flag t) nil [6915 6923])
            ("CHECK_GT" variable (:constant-flag t) nil [6969 6977])
            ("EXPECT_EQ" variable (:constant-flag t) nil [7081 7090])
            ("EXPECT_NE" variable (:constant-flag t) nil [7132 7141])
            ("EXPECT_LE" variable (:constant-flag t) nil [7183 7192])
            ("EXPECT_LT" variable (:constant-flag t) nil [7234 7243])
            ("EXPECT_GE" variable (:constant-flag t) nil [7285 7294])
            ("EXPECT_GT" variable (:constant-flag t) nil [7336 7345])
            ("ASSERT_EQ" variable (:constant-flag t) nil [7387 7396])
            ("ASSERT_NE" variable (:constant-flag t) nil [7439 7448])
            ("ASSERT_LE" variable (:constant-flag t) nil [7491 7500])
            ("ASSERT_LT" variable (:constant-flag t) nil [7543 7552])
            ("ASSERT_GE" variable (:constant-flag t) nil [7595 7604])
            ("ASSERT_GT" variable (:constant-flag t) nil [7647 7656])
            ("EXPECT_TRUE" variable (:constant-flag t) nil [7725 7736])
            ("EXPECT_FALSE" variable (:constant-flag t) nil [7767 7779])
            ("EXPECT_STREQ" variable (:constant-flag t) nil [7812 7824])
            ("ASSERT_TRUE" variable (:constant-flag t) nil [7867 7878])
            ("ASSERT_FALSE" variable (:constant-flag t) nil [7915 7927])
            ("ASSERT_STREQ" variable (:constant-flag t) nil [7964 7976])
            ("CHECK_ERR" variable (:constant-flag t) nil [8072 8081])
            ("DCHECK_EQ" variable (:constant-flag t) nil [8383 8392])
            ("DCHECK_NE" variable (:constant-flag t) nil [8435 8444])
            ("DCHECK_LE" variable (:constant-flag t) nil [8487 8496])
            ("DCHECK_LT" variable (:constant-flag t) nil [8539 8548])
            ("DCHECK_GE" variable (:constant-flag t) nil [8591 8600])
            ("DCHECK_GT" variable (:constant-flag t) nil [8643 8652])
            ("LogSeverity" type
               (:members 
                  ( ("INFO" variable
                       (:constant-flag t
                        :default-value (8803 8805)
                        :type "int")
                        (reparse-symbol enumsubparts) [8796 8805])
                    ("WARNING" variable
                       (:constant-flag t
                        :default-value (8817 8819)
                        :type "int")
                        (reparse-symbol enumsubparts) [8807 8819])
                    ("ERROR" variable
                       (:constant-flag t
                        :default-value (8829 8831)
                        :type "int")
                        (reparse-symbol enumsubparts) [8821 8831])
                    ("FATAL" variable
                       (:constant-flag t
                        :default-value (8841 8843)
                        :type "int")
                        (reparse-symbol enumsubparts) [8833 8843]))                  
                :type "enum")
                nil [8778 8845])
            ("LogPrintf" function
               (:typemodifiers ("inline")
                :arguments 
                  ( ("severity" variable (:type "int") (reparse-symbol arg-sub-list) [8946 8959])
                    ("pat" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [8960 8976])
                    ("ap" variable (:type ("va_list" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [8977 8988]))                  
                :type "void")
                nil [8924 9475])
            ("VLOG_IS_ON" variable (:constant-flag t) nil [9686 9696])
            ("LOG_PRINTF" variable (:constant-flag t) nil [9819 9829])
            ("RAW_LOG" function
               (:typemodifiers ("inline")
                :arguments 
                  ( ("lvl" variable (:type "int") (reparse-symbol arg-sub-list) [10264 10272])
                    ("pat" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [10273 10289])
                    ("..." variable (:type "vararg") (reparse-symbol arg-sub-list) [10290 10294]))                  
                :type "void")
                nil [10244 10321])
            ("RAW_VLOG" function
               (:typemodifiers ("inline")
                :arguments 
                  ( ("lvl" variable (:type "int") (reparse-symbol arg-sub-list) [10343 10351])
                    ("pat" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [10352 10368])
                    ("..." variable (:type "vararg") (reparse-symbol arg-sub-list) [10369 10373]))                  
                :type "void")
                nil [10322 10399])
            ("LOG" function
               (:typemodifiers ("inline")
                :arguments 
                  ( ("lvl" variable (:type "int") (reparse-symbol arg-sub-list) [10416 10424])
                    ("pat" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [10425 10441])
                    ("..." variable (:type "vararg") (reparse-symbol arg-sub-list) [10442 10446]))                  
                :type "void")
                nil [10400 10477])
            ("VLOG" function
               (:typemodifiers ("inline")
                :arguments 
                  ( ("lvl" variable (:type "int") (reparse-symbol arg-sub-list) [10495 10503])
                    ("pat" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [10504 10520])
                    ("..." variable (:type "vararg") (reparse-symbol arg-sub-list) [10521 10525]))                  
                :type "void")
                nil [10478 10555])
            ("LOG_IF" function
               (:typemodifiers ("inline")
                :arguments 
                  ( ("lvl" variable (:type "int") (reparse-symbol arg-sub-list) [10575 10583])
                    ("cond" variable (:type "bool") (reparse-symbol arg-sub-list) [10584 10594])
                    ("pat" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [10595 10611])
                    ("..." variable (:type "vararg") (reparse-symbol arg-sub-list) [10612 10616]))                  
                :type "void")
                nil [10556 10655])
            ("RawFD" type
               (:typedef ("int")
                :type "typedef")
                nil [11337 11355])
            ("kIllegalRawFD" variable
               (:constant-flag t
                :default-value "-1"
                :type ("RawFD" type (:type "class") nil nil))
                nil [11356 11387])
            ("RawOpenForWriting" function
               (:prototype-flag t
                :arguments 
                  ( ("filename" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [11523 11544]))                  
                :type ("RawFD" type (:type "class") nil nil))
                nil [11499 11545])
            ("RawWrite" function
               (:prototype-flag t
                :arguments 
                  ( ("fd" variable (:type ("RawFD" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [11590 11599])
                    ("buf" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [11600 11616])
                    ("len" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [11617 11628]))                  
                :type "void")
                nil [11576 11629])
            ("RawClose" function
               (:prototype-flag t
                :arguments 
                  ( ("fd" variable (:type ("RawFD" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [11644 11653]))                  
                :type "void")
                nil [11630 11654]))          
      :file "logging.h"
      :pointmax 11678
      :fsize 11677
      :lastmodtime '(22840 64148 0 0)
      :unmatched-syntax nil
      :lexical-table 
        '(("_LOGGING_H_")
          ("perftools_vsnprintf" . ((symbol "vsnprintf" 3025 . 3034)))
          ("CHECK" (spp-arg-list ("condition") 3510 . 3521) . 
              ((DO "do" 3573 . 3575) (semantic-list "{                                                                  \\
    if (!(condition)) {                                                 \\
      WRITE_TO_STDERR(\"Check failed: \" #condition \"\\n\",                 \\
                      sizeof(\"Check failed: \" #condition \"\\n\")-1);      \\
      abort();                                                          \\
    }                                                                   \\
  }" 3576 . 4018) (WHILE "while" 4019 . 4024) (semantic-list "(0)" 4025 . 4028)))
          ("EXPECT_NE" (spp-arg-list ("val1" "val2") 7141 . 7153) . ((symbol "CHECK_NE" 7154 . 7162) (semantic-list "(val1, val2)" 7162 . 7174)))
          ("ASSERT_STREQ" (spp-arg-list ("a" "b") 7976 . 7982) . ((symbol "EXPECT_STREQ" 7986 . 7998) (semantic-list "(a, b)" 7998 . 8004)))
          ("DCHECK_EQ" (spp-arg-list ("val1" "val2") 8392 . 8404) . ((symbol "CHECK_EQ" 8406 . 8414) (semantic-list "(val1, val2)" 8414 . 8426)))
          ("CHECK_NE" (spp-arg-list ("val1" "val2") 6761 . 6773) . ((symbol "CHECK_OP" 6774 . 6782) (semantic-list "(!=, val1, val2)" 6782 . 6798)))
          ("CHECK_OP" (spp-arg-list ("op" "val1" "val2") 6248 . 6264) . 
              ((DO "do" 6308 . 6310) (semantic-list "{                                                                  \\
    if (!((val1) op (val2))) {                                          \\
      fprintf(stderr, \"Check failed: %s %s %s\\n\", #val1, #op, #val2);   \\
      abort();                                                          \\
    }                                                                   \\
  }" 6311 . 6679) (WHILE "while" 6680 . 6685) (semantic-list "(0)" 6686 . 6689)))
          ("ASSERT_GE" (spp-arg-list ("val1" "val2") 7604 . 7616) . ((symbol "EXPECT_GE" 7617 . 7626) (semantic-list "(val1, val2)" 7626 . 7638)))
          ("DCHECK_NE" (spp-arg-list ("val1" "val2") 8444 . 8456) . ((symbol "CHECK_NE" 8458 . 8466) (semantic-list "(val1, val2)" 8466 . 8478)))
          ("RAW_CHECK" (spp-arg-list ("condition" "message") 4106 . 4126) . 
              ((DO "do" 4172 . 4174) (semantic-list "{                                                                         \\
    if (!(condition)) {                                                        \\
      WRITE_TO_STDERR(\"Check failed: \" #condition \": \" message \"\\n\",           \\
                      sizeof(\"Check failed: \" #condition \": \" message \"\\n\")-1);\\
      abort();                                                                 \\
    }                                                                          \\
  }" 4175 . 4659) (WHILE "while" 4660 . 4665) (semantic-list "(0)" 4666 . 4669)))
          ("EXPECT_STREQ" (spp-arg-list ("a" "b") 7824 . 7830) . ((symbol "CHECK" 7834 . 7839) (semantic-list "(strcmp(a, b) == 0)" 7839 . 7858)))
          ("ASSERT_LE" (spp-arg-list ("val1" "val2") 7500 . 7512) . ((symbol "EXPECT_LE" 7513 . 7522) (semantic-list "(val1, val2)" 7522 . 7534)))
          ("ASSERT_GT" (spp-arg-list ("val1" "val2") 7656 . 7668) . ((symbol "EXPECT_GT" 7669 . 7678) (semantic-list "(val1, val2)" 7678 . 7690)))
          ("ASSERT_TRUE" (spp-arg-list ("cond") 7878 . 7884) . ((symbol "EXPECT_TRUE" 7889 . 7900) (semantic-list "(cond)" 7900 . 7906)))
          ("CHECK_ERR" (spp-arg-list ("invocation") 8081 . 8093) . ((symbol "PCHECK" 8095 . 8101) (semantic-list "((invocation) != -1)" 8101 . 8121)))
          ("PCHECK" (spp-arg-list ("condition") 5036 . 5047) . 
              ((DO "do" 5098 . 5100) (semantic-list "{                                                                  \\
    if (!(condition)) {                                                 \\
      const int err_no = errno;                                         \\
      WRITE_TO_STDERR(\"Check failed: \" #condition \": \",                 \\
                      sizeof(\"Check failed: \" #condition \": \")-1);      \\
      WRITE_TO_STDERR(strerror(err_no), strlen(strerror(err_no)));      \\
      WRITE_TO_STDERR(\"\\n\", sizeof(\"\\n\")-1);                            \\
      abort();                                                          \\
    }                                                                   \\
  }" 5101 . 5765) (WHILE "while" 5766 . 5771) (semantic-list "(0)" 5772 . 5775)))
          ("EXPECT_GE" (spp-arg-list ("val1" "val2") 7294 . 7306) . ((symbol "CHECK_GE" 7307 . 7315) (semantic-list "(val1, val2)" 7315 . 7327)))
          ("EXPECT_TRUE" (spp-arg-list ("cond") 7736 . 7742) . ((symbol "CHECK" 7747 . 7752) (semantic-list "(cond)" 7752 . 7758)))
          ("CHECK_GE" (spp-arg-list ("val1" "val2") 6923 . 6935) . ((symbol "CHECK_OP" 6936 . 6944) (semantic-list "(>=, val1, val2)" 6944 . 6960)))
          ("ASSERT_LT" (spp-arg-list ("val1" "val2") 7552 . 7564) . ((symbol "EXPECT_LT" 7565 . 7574) (semantic-list "(val1, val2)" 7574 . 7586)))
          ("EXPECT_LE" (spp-arg-list ("val1" "val2") 7192 . 7204) . ((symbol "CHECK_LE" 7205 . 7213) (semantic-list "(val1, val2)" 7213 . 7225)))
          ("EXPECT_GT" (spp-arg-list ("val1" "val2") 7345 . 7357) . ((symbol "CHECK_GT" 7358 . 7366) (semantic-list "(val1, val2)" 7366 . 7378)))
          ("DCHECK_GE" (spp-arg-list ("val1" "val2") 8600 . 8612) . ((symbol "CHECK_GE" 8614 . 8622) (semantic-list "(val1, val2)" 8622 . 8634)))
          ("CHECK_LE" (spp-arg-list ("val1" "val2") 6815 . 6827) . ((symbol "CHECK_OP" 6828 . 6836) (semantic-list "(<=, val1, val2)" 6836 . 6852)))
          ("CHECK_GT" (spp-arg-list ("val1" "val2") 6977 . 6989) . ((symbol "CHECK_OP" 6990 . 6998) (semantic-list "(> , val1, val2)" 6998 . 7014)))
          ("ASSERT_EQ" (spp-arg-list ("val1" "val2") 7396 . 7408) . ((symbol "EXPECT_EQ" 7409 . 7418) (semantic-list "(val1, val2)" 7418 . 7430)))
          ("EXPECT_LT" (spp-arg-list ("val1" "val2") 7243 . 7255) . ((symbol "CHECK_LT" 7256 . 7264) (semantic-list "(val1, val2)" 7264 . 7276)))
          ("ASSERT_FALSE" (spp-arg-list ("cond") 7927 . 7933) . ((symbol "EXPECT_FALSE" 7937 . 7949) (semantic-list "(cond)" 7949 . 7955)))
          ("DCHECK_LE" (spp-arg-list ("val1" "val2") 8496 . 8508) . ((symbol "CHECK_LE" 8510 . 8518) (semantic-list "(val1, val2)" 8518 . 8530)))
          ("DCHECK_GT" (spp-arg-list ("val1" "val2") 8652 . 8664) . ((symbol "CHECK_GT" 8666 . 8674) (semantic-list "(val1, val2)" 8674 . 8686)))
          ("RAW_DCHECK" (spp-arg-list ("condition" "message") 4848 . 4868) . ((symbol "RAW_CHECK" 4870 . 4879) (semantic-list "(condition, message)" 4879 . 4899)))
          ("CHECK_LT" (spp-arg-list ("val1" "val2") 6869 . 6881) . ((symbol "CHECK_OP" 6882 . 6890) (semantic-list "(< , val1, val2)" 6890 . 6906)))
          ("ASSERT_NE" (spp-arg-list ("val1" "val2") 7448 . 7460) . ((symbol "EXPECT_NE" 7461 . 7470) (semantic-list "(val1, val2)" 7470 . 7482)))
          ("EXPECT_EQ" (spp-arg-list ("val1" "val2") 7090 . 7102) . ((symbol "CHECK_EQ" 7103 . 7111) (semantic-list "(val1, val2)" 7111 . 7123)))
          ("DCHECK_LT" (spp-arg-list ("val1" "val2") 8548 . 8560) . ((symbol "CHECK_LT" 8562 . 8570) (semantic-list "(val1, val2)" 8570 . 8582)))
          ("WRITE_TO_STDERR" (spp-arg-list ("buf" "len") 2736 . 2746) . ((symbol "write" 2747 . 2752) (semantic-list "(STDERR_FILENO, buf, len)" 2752 . 2777)))
          ("CHECK_EQ" (spp-arg-list ("val1" "val2") 6707 . 6719) . ((symbol "CHECK_OP" 6720 . 6728) (semantic-list "(==, val1, val2)" 6728 . 6744)))
          ("EXPECT_FALSE" (spp-arg-list ("cond") 7779 . 7785) . ((symbol "CHECK" 7789 . 7794) (semantic-list "(!(cond))" 7794 . 7803)))
          ("VLOG_IS_ON" (spp-arg-list ("severity") 9696 . 9706) . ((semantic-list "(FLAGS_verbose >= severity)" 9707 . 9734)))
          ("LOG_PRINTF" (spp-arg-list ("severity" "pat") 9829 . 9844) . 
              ((DO "do" 9845 . 9847) (semantic-list "{          \\
  if (VLOG_IS_ON(severity)) {                   \\
    va_list ap;                                 \\
    va_start(ap, pat);                          \\
    LogPrintf(severity, pat, ap);               \\
    va_end(ap);                                 \\
  }                                             \\
}" 9848 . 10162) (WHILE "while" 10163 . 10168) (semantic-list "(0)" 10169 . 10172)))
          )
)
    (semanticdb-table "semanticdb-table"
      :file "commandlineflags.h"
      :fsize 6106
      :lastmodtime '(22840 64148 0 0)))
  :file "!Users!ric!Downloads!trunk!thirdparty!gperftools-2.0!src!base!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
