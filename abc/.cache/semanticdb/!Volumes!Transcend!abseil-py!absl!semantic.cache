;; Object semanticdb-project-database-file
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file"
  :tables
  (list
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("\"\"\"Generic entry point for Abseil Python applications.

To use this module, define a 'main' function with a single 'argv' argument and
call app.run(main). For example:

def main(argv):
  del argv  # Unused.

if __name__ == '__main__':
  app.run(main)
\"\"\"" code nil nil [586 840])
            ("__future__" include nil nil [842 880])
            ("__future__" include nil nil [881 912])
            ("__future__" include nil nil [913 950])
            ("errno" include nil nil [952 964])
            ("os" include nil nil [965 974])
            ("pdb" include nil nil [975 985])
            ("sys" include nil nil [986 996])
            ("traceback" include nil nil [997 1013])
            ("absl" include nil nil [1015 1044])
            ("absl" include nil nil [1045 1067])
            ("absl" include nil nil [1068 1092])
            ("try" code nil nil [1094 1163])
            ("FLAGS" variable nil nil [1165 1184])
            ("flags" code nil nil [1186 1263])
            ("flags" code nil nil [1264 1422])
            ("flags" code nil nil [1423 1654])
            ("flags" code nil nil [1655 1831])
            ("flags" code nil nil [1832 2073])
            ("flags" code nil nil [2074 2225])
            ("EXCEPTION_HANDLERS" variable nil nil [2317 2340])
            ("Error" type
               (:superclasses ("Exception")
                :members 
                  ( ("pass" code nil (reparse-symbol indented_block_body) [2369 2373]))                  
                :type "class")
                nil [2343 2374])
            ("UsageError" type
               (:documentation "Exception raised when the arguments supplied by the user are invalid.

  Raise this when the arguments supplied are invalid from the point of
  view of the application. For example when two mutually exclusive
  flags have been supplied or when there are not enough non-flag
  arguments. It is distinct from flags.Error which covers the lower
  level of parsing and validating individual flags.
  "
                :superclasses ("Error")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [2854 2895])
                            ("self" variable nil (reparse-symbol indented_block_body) [2900 2924]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [2822 2826])
                            ("message" variable nil (reparse-symbol function_parameters) [2828 2835])
                            ("exitcode" variable nil (reparse-symbol function_parameters) [2837 2845]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [2809 2925]))                  
                :type "class")
                nil [2376 2925])
            ("HelpFlag" type
               (:documentation "Special boolean flag that displays usage and raises SystemExit."
                :superclasses ("flags.BooleanFlag")
                :members 
                  ( ("NAME" variable nil (reparse-symbol indented_block_body) [3036 3049])
                    ("SHORT_NAME" variable nil (reparse-symbol indented_block_body) [3052 3068])
                    ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [3096 3228]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3085 3089]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [3072 3229])
                    ("parse" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3242 3246])
                            ("arg" variable nil (reparse-symbol function_parameters) [3248 3251]))                          )
                        (reparse-symbol indented_block_body) [3232 3474]))                  
                :type "class")
                nil [2927 3474])
            ("HelpshortFlag" type
               (:documentation "--helpshort is an alias for --help."
                :superclasses ("HelpFlag")
                :members 
                  ( ("NAME" variable nil (reparse-symbol indented_block_body) [3553 3571])
                    ("SHORT_NAME" variable nil (reparse-symbol indented_block_body) [3574 3591]))                  
                :type "class")
                nil [3476 3592])
            ("HelpfullFlag" type
               (:documentation "Display help for flags in this module and all dependent modules."
                :superclasses ("flags.BooleanFlag")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [3733 3834]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3722 3726]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [3709 3835])
                    ("parse" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [3848 3852])
                            ("arg" variable nil (reparse-symbol function_parameters) [3854 3857]))                          )
                        (reparse-symbol indented_block_body) [3838 3923]))                  
                :type "class")
                nil [3594 3923])
            ("HelpXMLFlag" type
               (:documentation "Similar to HelpfullFlag, but generates output in XML format."
                :superclasses ("flags.BooleanFlag")
                :members 
                  ( ("__init__" function
                       (:suite 
                          ( ("super" code nil (reparse-symbol indented_block_body) [4059 4193]))                          
                        :parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4048 4052]))                          
                        :constructor-flag t)
                        (reparse-symbol indented_block_body) [4035 4194])
                    ("parse" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [4207 4211])
                            ("arg" variable nil (reparse-symbol function_parameters) [4213 4216]))                          )
                        (reparse-symbol indented_block_body) [4197 4304]))                  
                :type "class")
                nil [3925 4304])
            ("parse_flags_with_usage" function
               (:documentation "Tries to parse the flags, print usage, and exit if unparseable.

  Args:
    args: [str], a non-empty list of the command line arguments including
        program name.

  Returns:
    [str], a non-empty list of remaining command line arguments after parsing
    flags, including program name.
  "
                :arguments 
                  ( ("args" variable nil (reparse-symbol function_parameters) [4333 4337]))                  )
                nil [4306 4865])
            ("_define_help_flags_called" variable nil nil [4867 4900])
            ("define_help_flags" function (:documentation "Registers help flags. Idempotent.") nil [4903 5287])
            ("_register_and_parse_flags_with_usage" function
               (:documentation "Registers help flags, parses arguments and shows usage if appropriate.

  This also calls sys.exit(0) if flag --only_check_args is True.

  Args:
    argv: [str], a non-empty list of the command line arguments including
        program name, sys.argv is used if None.

  Returns:
    [str], a non-empty list of remaining command line arguments after parsing
    flags, including program name.

  Raises:
    SystemError: Raised when it's called more than once.
  "
                :arguments 
                  ( ("argv" variable nil (reparse-symbol function_parameters) [5330 5334]))                  )
                nil [5289 6319])
            ("_register_and_parse_flags_with_usage" variable nil nil [6320 6369])
            ("_run_main" function
               (:documentation "Calls main, optionally with pdb or profiler."
                :arguments 
                  ( ("main" variable nil (reparse-symbol function_parameters) [6386 6390])
                    ("argv" variable nil (reparse-symbol function_parameters) [6392 6396]))                  )
                nil [6372 7084])
            ("_call_exception_handlers" function
               (:documentation "Calls any installed exception handlers."
                :arguments 
                  ( ("exception" variable nil (reparse-symbol function_parameters) [7115 7124]))                  )
                nil [7086 7626])
            ("run" function
               (:documentation "Begins executing the program.

  Args:
    main: The main function to execute. It takes an single argument \"argv\",
        which is a list of command line arguments with parsed flags removed.
    argv: A non-empty list of the command line arguments including program name,
        sys.argv is used if None.
  - Parses command line flags with the flag module.
  - If there are any errors, prints usage().
  - Calls main() with the remaining arguments.
  - If main() raises a UsageError, prints usage and the error message.
  "
                :arguments 
                  ( ("main" variable nil (reparse-symbol function_parameters) [7636 7640])
                    ("argv" variable nil (reparse-symbol function_parameters) [7642 7646]))                  )
                nil [7628 8574])
            ("_run_init" function
               (:documentation "Does one-time initialization and re-parses flags on rerun."
                :arguments 
                  ( ("argv" variable nil (reparse-symbol function_parameters) [8590 8594]))                  )
                nil [8576 9177])
            ("_run_init" variable nil nil [9179 9201])
            ("usage" function
               (:documentation "Writes __main__'s docstring to stderr with some help text.

  Args:
    shorthelp: bool, if True, prints only flags from this module,
        rather than all flags.
    writeto_stdout: bool, if True, writes help message to stdout,
        rather than to stderr.
    detailed_error: str, additional detail about why usage info was presented.
    exitcode: optional integer, if set, exits with this status code after
        writing help.
  "
                :arguments 
                  ( ("shorthelp" variable nil (reparse-symbol function_parameters) [9214 9223])
                    ("writeto_stdout" variable nil (reparse-symbol function_parameters) [9231 9245])
                    ("detailed_error" variable nil (reparse-symbol function_parameters) [9253 9267])
                    ("exitcode" variable nil (reparse-symbol function_parameters) [9284 9292]))                  )
                nil [9204 10831])
            ("ExceptionHandler" type
               (:documentation "Base exception handler from which other may inherit."
                :superclasses ("object")
                :members 
                  ( ("wants" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [10939 10943])
                            ("exc" variable nil (reparse-symbol function_parameters) [10945 10948]))                          
                        :documentation "Returns whether this handler wants to handle the exception or not.

    This base class returns True for all exceptions by default. Override in
    subclass if it wants to be more selective.

    Args:
      exc: Exception, the current exception.
    ")
                        (reparse-symbol indented_block_body) [10929 11252])
                    ("handle" function
                       (:parent "dummy"
                        :arguments 
                          ( ("self" variable nil (reparse-symbol function_parameters) [11266 11270])
                            ("exc" variable nil (reparse-symbol function_parameters) [11272 11275]))                          
                        :documentation "Do something with the current exception.

    Args:
      exc: Exception, the current exception

    This method must be overridden.
    ")
                        (reparse-symbol indented_block_body) [11255 11458]))                  
                :type "class")
                nil [10833 11458])
            ("install_exception_handler" function
               (:documentation "Installs an exception handler.

  Args:
    handler: ExceptionHandler, the exception handler to install.

  Raises:
    TypeError: Raised when the handler was not of the correct type.

  All installed exception handlers will be called if main() exits via
  an abnormal exception, i.e. not one of SystemExit, KeyboardInterrupt,
  FlagsError or UsageError.
  "
                :arguments 
                  ( ("handler" variable nil (reparse-symbol function_parameters) [11490 11497]))                  )
                nil [11460 12068]))          
      :file "app.py"
      :pointmax 12068
      :fsize 12067
      :lastmodtime '(23032 8816 0 0)
      :unmatched-syntax '((INDENT_BLOCK 10738 . 10781) (NEWLINE 10617 . 10618) (COLON 10616 . 10617) (TRY 10380 . 10383) (AS 10612 . 10614) (INDENT_BLOCK 8532 . 8574) (NEWLINE 8531 . 8532) (COLON 8530 . 8531) (TRY 8189 . 8192) (AS 8526 . 8528) (INDENT_BLOCK 8407 . 8507) (NEWLINE 8406 . 8407) (COLON 8405 . 8406) (EXCEPT 8399 . 8405) (INDENT_BLOCK 8320 . 8395) (NEWLINE 8319 . 8320) (COLON 8318 . 8319) (TRY 8255 . 8258) (AS 8310 . 8312) (INDENT_BLOCK 4706 . 4865) (NEWLINE 4705 . 4706) (COLON 4704 . 4705) (TRY 4647 . 4650) (AS 4696 . 4698))))
  :file "!Volumes!Transcend!abseil-py!absl!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
