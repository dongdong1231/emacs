;; Object semanticdb-project-database-file
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file"
  :tables
  (list
    (semanticdb-table "semanticdb-table"
      :major-mode c-mode
      :tags 
        '( ("config.h" include (:system-flag t) nil [768 787])
            ("limits.h" include (:system-flag t) nil [788 807])
            ("stdio.h" include (:system-flag t) nil [808 826])
            ("stdlib.h" include (:system-flag t) nil [827 846])
            ("lisp.h" include nil nil [847 864])
            ("blockinput.h" include nil nil [865 888])
            ("commands.h" include nil nil [889 910])
            ("keyboard.h" include nil nil [911 932])
            ("dispextern.h" include nil nil [933 956])
            ("buffer.h" include nil nil [957 976])
            ("CACHEABLE" variable (:constant-flag t) nil [1220 1229])
            ("Vautoload_queue" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [1606 1634])
            ("Vrun_hooks" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [1771 1794])
            ("when_entered_debugger" variable
               (:typemodifiers ("static")
                :type ("EMACS_INT" type (:type "class") nil nil))
                nil [2708 2747])
            ("Vsignaling_function" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [2880 2912])
            ("inhibit_lisp_code" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [3035 3065])
            ("EXTERNALLY_VISIBLE" variable (:type "int") nil [3183 3202])
            ("EXTERNALLY_VISIBLE" variable (:type "int") nil [3253 3272])
            ("EXTERNALLY_VISIBLE" variable (:type "int") nil [3326 3345])
            ("EXTERNALLY_VISIBLE" variable (:type "int") nil [3402 3421])
            ("EXTERNALLY_VISIBLE" variable (:type "int") nil [3462 3481])
            ("funcall_lambda" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3518 3530])
                    ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3531 3541])
                    ("" variable
                       (:pointer 1
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [3542 3556]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [3483 3557])
            ("apply_lambda" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3591 3603])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3604 3616])
                    ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3617 3627]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [3558 3628])
            ("lambda_arity" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3662 3674]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [3629 3675])
            ("specpdl_symbol" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("pdl" variable
                       (:pointer 1
                        :type ("specbinding" type (:type "union") nil nil))
                        (reparse-symbol arg-sub-list) [3712 3735]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [3677 3803])
            ("specpdl_kind" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("pdl" variable
                       (:pointer 1
                        :type ("specbinding" type (:type "union") nil nil))
                        (reparse-symbol arg-sub-list) [3844 3867]))                  
                :type ("specbind_tag" type (:type "enum") nil nil))
                nil [3805 3933])
            ("specpdl_old_value" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("pdl" variable
                       (:pointer 1
                        :type ("specbinding" type (:type "union") nil nil))
                        (reparse-symbol arg-sub-list) [3973 3996]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [3935 4067])
            ("set_specpdl_old_value" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("pdl" variable
                       (:pointer 1
                        :type ("specbinding" type (:type "union") nil nil))
                        (reparse-symbol arg-sub-list) [4104 4127])
                    ("val" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [4128 4144]))                  
                :type "void")
                nil [4069 4214])
            ("specpdl_where" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("pdl" variable
                       (:pointer 1
                        :type ("specbinding" type (:type "union") nil nil))
                        (reparse-symbol arg-sub-list) [4250 4273]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [4216 4339])
            ("specpdl_saved_value" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("pdl" variable
                       (:pointer 1
                        :type ("specbinding" type (:type "union") nil nil))
                        (reparse-symbol arg-sub-list) [4381 4404]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [4341 4477])
            ("specpdl_arg" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("pdl" variable
                       (:pointer 1
                        :type ("specbinding" type (:type "union") nil nil))
                        (reparse-symbol arg-sub-list) [4511 4534]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [4479 4605])
            ("backtrace_function" function
               (:arguments 
                  ( ("pdl" variable
                       (:pointer 1
                        :type ("specbinding" type (:type "union") nil nil))
                        (reparse-symbol arg-sub-list) [4639 4662]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [4607 4737])
            ("backtrace_nargs" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("pdl" variable
                       (:pointer 1
                        :type ("specbinding" type (:type "union") nil nil))
                        (reparse-symbol arg-sub-list) [4773 4796]))                  
                :type ("ptrdiff_t" type (:type "class") nil nil))
                nil [4739 4868])
            ("backtrace_args" function
               (:pointer 1
                :arguments 
                  ( ("pdl" variable
                       (:pointer 1
                        :type ("specbinding" type (:type "union") nil nil))
                        (reparse-symbol arg-sub-list) [4900 4923]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [4870 4994])
            ("backtrace_debug_on_exit" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("pdl" variable
                       (:pointer 1
                        :type ("specbinding" type (:type "union") nil nil))
                        (reparse-symbol arg-sub-list) [5033 5056]))                  
                :type "bool")
                nil [4996 5136])
            ("set_backtrace_args" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("pdl" variable
                       (:pointer 1
                        :type ("specbinding" type (:type "union") nil nil))
                        (reparse-symbol arg-sub-list) [5226 5249])
                    ("args" variable
                       (:pointer 1
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [5250 5268])
                    ("nargs" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [5269 5285]))                  
                :type "void")
                nil [5194 5381])
            ("set_backtrace_debug_on_exit" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("pdl" variable
                       (:pointer 1
                        :type ("specbinding" type (:type "union") nil nil))
                        (reparse-symbol arg-sub-list) [5424 5447])
                    ("doe" variable (:type "bool") (reparse-symbol arg-sub-list) [5448 5457]))                  
                :type "void")
                nil [5383 5536])
            ("backtrace_p" function
               (:arguments 
                  ( ("pdl" variable
                       (:pointer 1
                        :type ("specbinding" type (:type "union") nil nil))
                        (reparse-symbol arg-sub-list) [5604 5627]))                  
                :type "bool")
                nil [5586 5654])
            ("backtrace_top" function
               (:pointer 1
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [5691 5696]))                  
                :type ("specbinding" type (:type "union") nil nil))
                nil [5656 5831])
            ("backtrace_next" function
               (:pointer 1
                :arguments 
                  ( ("pdl" variable
                       (:pointer 1
                        :type ("specbinding" type (:type "union") nil nil))
                        (reparse-symbol arg-sub-list) [5869 5892]))                  
                :type ("specbinding" type (:type "union") nil nil))
                nil [5833 5992])
            ("init_eval_once" function
               (:arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [6015 6020]))                  
                :type "void")
                nil [5994 6373])
            ("init_eval" function
               (:arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [6442 6447]))                  
                :type "void")
                nil [6426 7197])
            ("restore_stack_limits" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("data" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [7288 7305]))                  
                :type "void")
                nil [7254 7394])
            ("grow_specpdl" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [7422 7427]))                  
                :type "void")
                nil [7396 7428])
            ("call_debugger" function
               (:arguments 
                  ( ("arg" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [7513 7529]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [7486 9704])
            ("do_debug_on_call" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("code" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [9736 9753])
                    ("count" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [9754 9770]))                  
                :type "void")
                nil [9706 9887])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("For" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [10093 10097])
                    ("" variable (:type ("Sor" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [10098 10102])
                    ("" variable (:type ("UNEVALLED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [10106 10116])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [10127 10131]))                  
                :type "int")
                nil [10080 10333])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fand" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [10552 10557])
                    ("" variable (:type ("Sand" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [10558 10563])
                    ("" variable (:type ("UNEVALLED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [10567 10577])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [10588 10592]))                  
                :type "int")
                nil [10538 10799])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fif" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [11014 11018])
                    ("" variable (:type ("Sif" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [11019 11023])
                    ("" variable (:type ("UNEVALLED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [11027 11037])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [11048 11052]))                  
                :type "int")
                nil [11001 11363])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fcond" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [11539 11545])
                    ("" variable (:type ("Scond" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [11546 11552])
                    ("" variable (:type ("UNEVALLED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [11556 11566])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [11577 11581]))                  
                :type "int")
                nil [11524 12045])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fprogn" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [12352 12359])
                    ("" variable (:type ("Sprogn" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [12360 12367])
                    ("" variable (:type ("UNEVALLED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [12371 12381])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [12392 12396]))                  
                :type "int")
                nil [12336 12507])
            ("prog_ignore" function
               (:arguments 
                  ( ("body" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [12759 12776]))                  
                :type "void")
                nil [12741 12797])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fprog1" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [12815 12822])
                    ("" variable (:type ("Sprog1" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [12823 12830])
                    ("" variable (:type ("UNEVALLED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [12834 12844])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [12855 12859]))                  
                :type "int")
                nil [12799 13077])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fprog2" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [13186 13193])
                    ("" variable (:type ("Sprog2" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [13194 13201])
                    ("" variable (:type ("UNEVALLED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [13205 13215])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [13226 13230]))                  
                :type "int")
                nil [13170 13461])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fsetq" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [13539 13545])
                    ("" variable (:type ("Ssetq" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [13546 13552])
                    ("" variable (:type ("UNEVALLED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [13556 13566])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [13577 13581]))                  
                :type "int")
                nil [13524 14062])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fquote" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [14882 14889])
                    ("" variable (:type ("Squote" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [14890 14897])
                    ("" variable (:type ("UNEVALLED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [14901 14911])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [14922 14926]))                  
                :type "int")
                nil [14866 15565])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Ffunction" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [15706 15716])
                    ("" variable (:type ("Sfunction" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [15717 15727])
                    ("" variable (:type ("UNEVALLED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [15731 15741])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [15752 15756]))                  
                :type "int")
                nil [15687 15960])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fdefvaralias" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [16982 16995])
                    ("" variable (:type ("Sdefvaralias" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [16996 17009])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [17026 17030]))                  
                :type "int")
                nil [16960 17633])
            ("default_toplevel_binding" function
               (:pointer 1
                :typemodifiers ("static")
                :arguments 
                  ( ("symbol" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [19401 19420]))                  
                :type ("specbinding" type (:type "union") nil nil))
                nil [19348 19900])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fdefault_toplevel_value" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [19935 19959])
                    ("" variable (:type ("Sdefault_toplevel_value" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [19960 19984])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [20001 20005]))                  
                :type "int")
                nil [19902 20121])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fset_default_toplevel_value" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [20405 20433])
                    ("" variable (:type ("Sset_default_toplevel_value" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [20441 20469])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [20486 20490]))                  
                :type "int")
                nil [20368 20634])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fdefvar" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [20838 20846])
                    ("" variable (:type ("Sdefvar" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [20847 20855])
                    ("" variable (:type ("UNEVALLED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [20859 20869])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [20880 20884]))                  
                :type "int")
                nil [20821 22150])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fdefconst" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [23767 23777])
                    ("" variable (:type ("Sdefconst" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [23778 23788])
                    ("" variable (:type ("UNEVALLED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [23792 23802])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [23813 23817]))                  
                :type "int")
                nil [23748 24574])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fmake_var_non_special" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [25302 25324])
                    ("" variable (:type ("Smake_var_non_special" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [25332 25354])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [25371 25375]))                  
                :type "int")
                nil [25262 25428])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("FletX" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [25533 25539])
                    ("" variable (:type ("SletX" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [25540 25546])
                    ("" variable (:type ("UNEVALLED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [25550 25560])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [25571 25575]))                  
                :type "int")
                nil [25518 25942])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Flet" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [27303 27308])
                    ("" variable (:type ("Slet" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [27309 27314])
                    ("" variable (:type ("UNEVALLED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [27318 27328])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [27339 27343]))                  
                :type "int")
                nil [27289 27699])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fwhile" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [29420 29427])
                    ("" variable (:type ("Swhile" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [29428 29435])
                    ("" variable (:type ("UNEVALLED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [29439 29449])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [29460 29464]))                  
                :type "int")
                nil [29404 29658])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fmacroexpand" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [29866 29879])
                    ("" variable (:type ("Smacroexpand" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [29880 29893])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [29910 29914]))                  
                :type "int")
                nil [29844 30353])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fcatch" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [31754 31761])
                    ("" variable (:type ("Scatch" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [31762 31769])
                    ("" variable (:type ("UNEVALLED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [31773 31783])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [31794 31798]))                  
                :type "int")
                nil [31738 32204])
            ("clobbered_eassert" variable (:constant-flag t) nil [32471 32488])
            ("internal_catch" function
               (:arguments 
                  ( ("tag" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [32702 32718])
                    ("func" function
                       (:function-pointer t
                        :arguments 
                          ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [32742 32754]))                          
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        nil nil)
                    ("arg" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [32756 32772]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [32674 33286])
            ("unwind_to_catch" function
               (:arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("handler" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [34062 34083])
                    ("value" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [34085 34103]))                  
                :type "void")
                nil [34040 34751])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fthrow" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [34769 34776])
                    ("" variable (:type ("Sthrow" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [34777 34784])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [34801 34805])
                    ("" variable (:type ("attributes" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [34905 34916])
                    ("" variable (:type ("noreturn" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [34917 34926]))                  
                :type "int")
                nil [34753 34974])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Funwind_protect" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [35303 35319])
                    ("" variable (:type ("Sunwind_protect" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [35320 35336])
                    ("" variable (:type ("UNEVALLED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [35340 35350])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [35361 35365]))                  
                :type "int")
                nil [35278 35638])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fcondition_case" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [35845 35861])
                    ("" variable (:type ("Scondition_case" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [35862 35878])
                    ("" variable (:type ("UNEVALLED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [35882 35892])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [35903 35907]))                  
                :type "int")
                nil [35820 37083])
            ("internal_lisp_condition_case" function
               (:arguments 
                  ( ("var" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [37430 37446])
                    ("bodyform" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [37447 37468])
                    ("handlers" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [37478 37499]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [37388 39886])
            ("internal_condition_case" function
               (:arguments 
                  ( ("bfun" function
                       (:function-pointer t
                        :arguments 
                          ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [40356 40361]))                          
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        nil nil)
                    ("handlers" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [40363 40384])
                    ("hfun" function
                       (:function-pointer t
                        :arguments 
                          ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [40410 40422]))                          
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        nil nil))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [40298 40812])
            ("internal_condition_case_1" function
               (:arguments 
                  ( ("bfun" function
                       (:function-pointer t
                        :arguments 
                          ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [40951 40963]))                          
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        nil nil)
                    ("arg" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [40965 40981])
                    ("handlers" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [40988 41009])
                    ("hfun" function
                       (:function-pointer t
                        :arguments 
                          ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [41037 41049]))                          
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        nil nil))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [40891 41442])
            ("internal_condition_case_2" function
               (:arguments 
                  ( ("bfun" function
                       (:function-pointer t
                        :arguments 
                          ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [41597 41609])
                            ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [41610 41622]))                          
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        nil nil)
                    ("arg1" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [41630 41647])
                    ("arg2" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [41654 41671])
                    ("handlers" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [41678 41699])
                    ("hfun" function
                       (:function-pointer t
                        :arguments 
                          ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [41727 41739]))                          
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        nil nil))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [41537 42139])
            ("internal_condition_case_n" function
               (:arguments 
                  ( ("bfun" function
                       (:function-pointer t
                        :arguments 
                          ( ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [42305 42315])
                            ("" variable
                               (:pointer 1
                                :type ("Lisp_Object" type (:type "class") nil nil))
                                (reparse-symbol arg-sub-list) [42316 42330]))                          
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        nil nil)
                    ("nargs" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [42338 42354])
                    ("args" variable
                       (:pointer 1
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [42361 42379])
                    ("handlers" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [42386 42407])
                    ("hfun" function
                       (:function-pointer t
                        :arguments 
                          ( ("err" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [42435 42451])
                            ("nargs" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [42458 42474])
                            ("args" variable
                               (:pointer 1
                                :type ("Lisp_Object" type (:type "class") nil nil))
                                (reparse-symbol arg-sub-list) [42481 42499]))                          
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        nil nil))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [42245 42913])
            ("push_handler" function
               (:pointer 1
                :arguments 
                  ( ("tag_ch_val" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [42946 42969])
                    ("handlertype" variable (:type ("handlertype" type (:type "enum") nil nil)) (reparse-symbol arg-sub-list) [42970 42999]))                  
                :type ("handler" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [42915 43125])
            ("push_handler_nosignal" function
               (:pointer 1
                :arguments 
                  ( ("tag_ch_val" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [43167 43190])
                    ("handlertype" variable (:type ("handlertype" type (:type "enum") nil nil)) (reparse-symbol arg-sub-list) [43191 43220]))                  
                :type ("handler" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [43127 43784])
            ("signal_or_quit" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [43823 43835])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [43836 43848])
                    ("" variable (:type "bool") (reparse-symbol arg-sub-list) [43849 43854]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [43788 43855])
            ("find_handler_clause" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [43896 43908])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [43909 43921]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [43856 43922])
            ("maybe_call_debugger" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("conditions" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [43956 43979])
                    ("sig" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [43980 43996])
                    ("data" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [44002 44019]))                  
                :type "bool")
                nil [43923 44020])
            ("process_quit_flag" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [44053 44058]))                  
                :type "void")
                nil [44022 44249])
            ("maybe_quit" function
               (:arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [44979 44984]))                  
                :type "void")
                nil [44962 45124])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fsignal" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [45143 45151])
                    ("" variable (:type ("Ssignal" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [45152 45160])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [45177 45181])
                    ("" variable (:type ("attributes" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [45794 45805])
                    ("" variable (:type ("noreturn" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [45806 45815]))                  
                :type "int")
                nil [45126 45862])
            ("quit" function
               (:arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [46004 46009]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [45986 46058])
            ("signal_or_quit" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("error_symbol" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [46361 46386])
                    ("data" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [46387 46404])
                    ("keyboard_quit" variable (:type "bool") (reparse-symbol arg-sub-list) [46405 46424]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [46326 49747])
            ("xsignal0" function
               (:arguments 
                  ( ("error_symbol" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [49834 49859]))                  
                :type "void")
                nil [49819 49895])
            ("xsignal1" function
               (:arguments 
                  ( ("error_symbol" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [49912 49937])
                    ("arg" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [49938 49954]))                  
                :type "void")
                nil [49897 49997])
            ("xsignal2" function
               (:arguments 
                  ( ("error_symbol" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [50014 50039])
                    ("arg1" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [50040 50057])
                    ("arg2" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [50058 50075]))                  
                :type "void")
                nil [49999 50125])
            ("xsignal3" function
               (:arguments 
                  ( ("error_symbol" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [50142 50167])
                    ("arg1" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [50168 50185])
                    ("arg2" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [50186 50203])
                    ("arg3" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [50204 50221]))                  
                :type "void")
                nil [50127 50277])
            ("signal_error" function
               (:arguments 
                  ( ("s" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [50422 50436])
                    ("arg" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [50437 50453]))                  
                :type "void")
                nil [50403 50804])
            ("wants_debugger" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("list" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [50924 50941])
                    ("conditions" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [50942 50965]))                  
                :type "bool")
                nil [50896 51292])
            ("skip_debugger" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("conditions" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [51487 51510])
                    ("data" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [51511 51528]))                  
                :type "bool")
                nil [51460 52130])
            ("maybe_call_debugger" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("conditions" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [52475 52498])
                    ("sig" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [52499 52515])
                    ("data" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [52516 52533]))                  
                :type "bool")
                nil [52442 53189])
            ("find_handler_clause" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("handlers" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [53231 53252])
                    ("conditions" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [53253 53276]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [53191 53752])
            ("vformat_string" function
               (:arguments 
                  ( ("m" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [53839 53853])
                    ("ap" variable (:type ("va_list" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [53854 53865]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [53811 54185])
            ("verror" function
               (:arguments 
                  ( ("m" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [54251 54265])
                    ("ap" variable (:type ("va_list" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [54266 54277]))                  
                :type "void")
                nil [54238 54326])
            ("error" function
               (:arguments 
                  ( ("m" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [54408 54422])
                    ("..." variable (:type "vararg") (reparse-symbol arg-sub-list) [54423 54427]))                  
                :type "void")
                nil [54396 54483])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fcommandp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [54505 54515])
                    ("" variable (:type ("Scommandp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [54516 54526])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [54543 54547]))                  
                :type "int")
                nil [54486 55285])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fautoload" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [56836 56846])
                    ("" variable (:type ("Sautoload" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [56847 56857])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [56874 56878]))                  
                :type "int")
                nil [56817 57605])
            ("un_autoload" function
               (:arguments 
                  ( ("oldqueue" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [58380 58401]))                  
                :type "void")
                nil [58362 58870])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fautoload_do_load" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [59038 59056])
                    ("" variable (:type ("Sautoload_do_load" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [59057 59075])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [59092 59096]))                  
                :type "int")
                nil [59011 59455])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Feval" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [61242 61248])
                    ("" variable (:type ("Seval" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [61249 61255])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [61272 61276]))                  
                :type "int")
                nil [61227 61518])
            ("grow_specpdl" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [62183 62188]))                  
                :type "void")
                nil [62157 62884])
            ("record_in_backtrace" function
               (:arguments 
                  ( ("function" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [62917 62938])
                    ("args" variable
                       (:pointer 1
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [62939 62957])
                    ("nargs" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [62958 62974]))                  
                :type ("ptrdiff_t" type (:type "class") nil nil))
                nil [62886 63301])
            ("eval_sub" function
               (:arguments 
                  ( ("form" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [63417 63434]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [63395 69248])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fapply" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [69267 69274])
                    ("" variable (:type ("Sapply" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [69275 69282])
                    ("" variable (:type ("MANY" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [69286 69291])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [69302 69306]))                  
                :type "int")
                nil [69251 69554])
            ("funcall_nil" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("nargs" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [71498 71514])
                    ("args" variable
                       (:pointer 1
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [71515 71533]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [71466 71578])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Frun_hooks" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [71600 71611])
                    ("" variable (:type ("Srun_hooks" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [71612 71623])
                    ("" variable (:type ("MANY" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [71627 71632])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [71643 71647]))                  
                :type "int")
                nil [71580 72354])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Frun_hook_with_args" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [72475 72495])
                    ("" variable (:type ("Srun_hook_with_args" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [72503 72523])
                    ("" variable (:type ("MANY" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [72527 72532])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [72543 72547]))                  
                :type "int")
                nil [72446 73015])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Frun_hook_with_args_until_success" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [73292 73326])
                    ("" variable (:type ("Srun_hook_with_args_until_success" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [73334 73368])
                    ("" variable (:type ("MANY" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [73372 73377])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [73388 73392]))                  
                :type "int")
                nil [73249 73997])
            ("funcall_not" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("nargs" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [74088 74104])
                    ("args" variable
                       (:pointer 1
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [74105 74123]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [74056 74179])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Frun_hook_with_args_until_failure" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [74224 74258])
                    ("" variable (:type ("Srun_hook_with_args_until_failure" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [74266 74300])
                    ("" variable (:type ("MANY" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [74304 74309])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [74320 74324]))                  
                :type "int")
                nil [74181 74982])
            ("run_hook_wrapped_funcall" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("nargs" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [75108 75124])
                    ("args" variable
                       (:pointer 1
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [75125 75143]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [75063 75303])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Frun_hook_wrapped" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [75332 75350])
                    ("" variable (:type ("Srun_hook_wrapped" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [75351 75369])
                    ("" variable (:type ("MANY" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [75373 75378])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [75389 75393]))                  
                :type "int")
                nil [75305 75780])
            ("run_hook_with_args" function
               (:arguments 
                  ( ("nargs" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [76121 76137])
                    ("args" variable
                       (:pointer 1
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [76138 76156])
                    ("funcall" function
                       (:function-pointer t
                        :arguments 
                          ( ("nargs" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [76187 76203])
                            ("args" variable
                               (:pointer 1
                                :type ("Lisp_Object" type (:type "class") nil nil))
                                (reparse-symbol arg-sub-list) [76204 76222]))                          
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        nil nil))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [76089 77586])
            ("run_hook" function
               (:arguments 
                  ( ("hook" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [77660 77677]))                  
                :type "void")
                nil [77645 77715])
            ("run_hook_with_args_2" function
               (:arguments 
                  ( ("hook" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [77820 77837])
                    ("arg1" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [77838 77855])
                    ("arg2" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [77856 77873]))                  
                :type "void")
                nil [77793 77926])
            ("apply1" function
               (:arguments 
                  ( ("fn" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [77972 77987])
                    ("arg" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [77988 78004]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [77952 78075])
            ("call0" function
               (:arguments 
                  ( ("fn" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [78137 78152]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [78118 78184])
            ("call1" function
               (:arguments 
                  ( ("fn" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [78266 78281])
                    ("arg1" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [78282 78299]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [78247 78340])
            ("call2" function
               (:arguments 
                  ( ("fn" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [78429 78444])
                    ("arg1" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [78445 78462])
                    ("arg2" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [78463 78480]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [78410 78527])
            ("call3" function
               (:arguments 
                  ( ("fn" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [78622 78637])
                    ("arg1" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [78638 78655])
                    ("arg2" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [78656 78673])
                    ("arg3" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [78674 78691]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [78603 78744])
            ("call4" function
               (:arguments 
                  ( ("fn" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [78845 78860])
                    ("arg1" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [78861 78878])
                    ("arg2" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [78879 78896])
                    ("arg3" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [78897 78914])
                    ("arg4" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [78922 78939]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [78826 78998])
            ("call5" function
               (:arguments 
                  ( ("fn" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [79105 79120])
                    ("arg1" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [79121 79138])
                    ("arg2" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [79139 79156])
                    ("arg3" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [79157 79174])
                    ("arg4" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [79182 79199])
                    ("arg5" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [79200 79217]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [79086 79282])
            ("call6" function
               (:arguments 
                  ( ("fn" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [79395 79410])
                    ("arg1" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [79411 79428])
                    ("arg2" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [79429 79446])
                    ("arg3" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [79447 79464])
                    ("arg4" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [79472 79489])
                    ("arg5" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [79490 79507])
                    ("arg6" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [79508 79525]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [79376 79596])
            ("call7" function
               (:arguments 
                  ( ("fn" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [79715 79730])
                    ("arg1" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [79731 79748])
                    ("arg2" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [79749 79766])
                    ("arg3" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [79767 79784])
                    ("arg4" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [79792 79809])
                    ("arg5" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [79810 79827])
                    ("arg6" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [79828 79845])
                    ("arg7" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [79846 79863]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [79696 79940])
            ("call8" function
               (:arguments 
                  ( ("fn" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [80068 80083])
                    ("arg1" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [80084 80101])
                    ("arg2" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [80102 80119])
                    ("arg3" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [80120 80137])
                    ("arg4" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [80145 80162])
                    ("arg5" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [80163 80180])
                    ("arg6" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [80181 80198])
                    ("arg7" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [80199 80216])
                    ("arg8" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [80224 80241]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [80049 80324])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Ffunctionp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [80346 80357])
                    ("" variable (:type ("Sfunctionp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [80358 80369])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [80386 80390]))                  
                :type "int")
                nil [80326 80457])
            ("FUNCTIONP" function
               (:arguments 
                  ( ("object" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [80535 80554]))                  
                :type "bool")
                nil [80519 81267])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Ffuncall" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [81287 81296])
                    ("" variable (:type ("Sfuncall" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [81297 81306])
                    ("" variable (:type ("MANY" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [81310 81315])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [81326 81330]))                  
                :type "int")
                nil [81269 81583])
            ("funcall_subr" function
               (:arguments 
                  ( ("subr" variable
                       (:pointer 1
                        :type ("Lisp_Subr" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [83404 83427])
                    ("numargs" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [83428 83446])
                    ("args" variable
                       (:pointer 1
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [83447 83465]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [83378 86111])
            ("apply_lambda" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("fun" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [86146 86162])
                    ("args" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [86163 86180])
                    ("count" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [86181 86197]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [86113 86947])
            ("funcall_lambda" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("fun" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [87197 87213])
                    ("nargs" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [87214 87230])
                    ("arg_vector" variable
                       (:pointer 1
                        :typemodifiers ("register")
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [87233 87266]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [87162 91078])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Ffunc_arity" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [91101 91113])
                    ("" variable (:type ("Sfunc_arity" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [91114 91126])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [91143 91147]))                  
                :type "int")
                nil [91080 91488])
            ("lambda_arity" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("fun" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [92824 92840]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [92791 94054])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Ffetch_bytecode" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [94081 94097])
                    ("" variable (:type ("Sfetch_bytecode" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [94098 94114])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [94138 94142]))                  
                :type "int")
                nil [94056 94227])
            ("let_shadows_buffer_binding_p" function
               (:arguments 
                  ( ("symbol" variable
                       (:pointer 1
                        :type ("Lisp_Symbol" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [95022 95049]))                  
                :type "bool")
                nil [94987 95431])
            ("do_specbind" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("sym" variable
                       (:pointer 1
                        :type ("Lisp_Symbol" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [95458 95482])
                    ("bind" variable
                       (:pointer 1
                        :type ("specbinding" type (:type "union") nil nil))
                        (reparse-symbol arg-sub-list) [95483 95507])
                    ("value" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [95521 95539])
                    ("bindflag" variable (:type ("Set_Internal_Bind" type (:type "enum") nil nil)) (reparse-symbol arg-sub-list) [95540 95572]))                  
                :type "void")
                nil [95433 96167])
            ("specbind" function
               (:arguments 
                  ( ("symbol" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [96819 96838])
                    ("value" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [96839 96857]))                  
                :type "void")
                nil [96804 98846])
            ("record_unwind_protect" function
               (:arguments 
                  ( ("function" function
                       (:function-pointer t
                        :arguments 
                          ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [98948 98960]))                          
                        :type "void")
                        nil nil)
                    ("arg" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [98962 98978]))                  
                :type "void")
                nil [98902 99118])
            ("record_unwind_protect_ptr" function
               (:arguments 
                  ( ("function" function
                       (:function-pointer t
                        :arguments 
                          ( ("" variable
                               (:pointer 1
                                :type "void")
                                (reparse-symbol arg-sub-list) [99170 99177]))                          
                        :type "void")
                        nil nil)
                    ("arg" variable
                       (:pointer 1
                        :type "void")
                        (reparse-symbol arg-sub-list) [99179 99189]))                  
                :type "void")
                nil [99120 99345])
            ("record_unwind_protect_int" function
               (:arguments 
                  ( ("function" function
                       (:function-pointer t
                        :arguments 
                          ( ("" variable (:type "int") (reparse-symbol arg-sub-list) [99397 99401]))                          
                        :type "void")
                        nil nil)
                    ("arg" variable (:type "int") (reparse-symbol arg-sub-list) [99403 99411]))                  
                :type "void")
                nil [99347 99567])
            ("record_unwind_protect_void" function
               (:arguments 
                  ( ("function" function
                       (:function-pointer t
                        :arguments 
                          ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [99620 99625]))                          
                        :type "void")
                        nil nil))                  
                :type "void")
                nil [99569 99748])
            ("rebind_for_thread_switch" function
               (:arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [99781 99786]))                  
                :type "void")
                nil [99750 100156])
            ("do_one_unbind" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("this_binding" variable
                       (:pointer 1
                        :type ("specbinding" type (:type "union") nil nil))
                        (reparse-symbol arg-sub-list) [100185 100217])
                    ("unwinding" variable (:type "bool") (reparse-symbol arg-sub-list) [100218 100233])
                    ("bindflag" variable (:type ("Set_Internal_Bind" type (:type "enum") nil nil)) (reparse-symbol arg-sub-list) [100249 100281]))                  
                :type "void")
                nil [100158 102175])
            ("do_nothing" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [102201 102206]))                  
                :type "void")
                nil [102177 102209])
            ("record_unwind_protect_nothing" function
               (:arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [102361 102366]))                  
                :type "void")
                nil [102325 102413])
            ("clear_unwind_protect" function
               (:arguments 
                  ( ("count" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [102556 102572]))                  
                :type "void")
                nil [102529 102699])
            ("set_unwind_protect" function
               (:arguments 
                  ( ("count" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [102903 102919])
                    ("func" function
                       (:function-pointer t
                        :arguments 
                          ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [102934 102946]))                          
                        :type "void")
                        nil nil)
                    ("arg" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [102954 102970]))                  
                :type "void")
                nil [102878 103099])
            ("set_unwind_protect_ptr" function
               (:arguments 
                  ( ("count" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [103130 103146])
                    ("func" function
                       (:function-pointer t
                        :arguments 
                          ( ("" variable
                               (:pointer 1
                                :type "void")
                                (reparse-symbol arg-sub-list) [103161 103168]))                          
                        :type "void")
                        nil nil)
                    ("arg" variable
                       (:pointer 1
                        :type "void")
                        (reparse-symbol arg-sub-list) [103170 103180]))                  
                :type "void")
                nil [103101 103325])
            ("unbind_to" function
               (:arguments 
                  ( ("count" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [103464 103480])
                    ("value" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [103481 103499]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [103441 104125])
            ("unbind_for_thread_switch" function
               (:arguments 
                  ( ("thr" variable
                       (:pointer 1
                        :type ("thread_state" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [104158 104183]))                  
                :type "void")
                nil [104127 104495])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fspecial_variable_p" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [104526 104546])
                    ("" variable (:type ("Sspecial_variable_p" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [104547 104567])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [104584 104588]))                  
                :type "int")
                nil [104497 104801])
            ("get_backtrace_starting_at" function
               (:pointer 1
                :typemodifiers ("static")
                :arguments 
                  ( ("base" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [104947 104964]))                  
                :type ("specbinding" type (:type "union") nil nil))
                nil [104893 105277])
            ("get_backtrace_frame" function
               (:pointer 1
                :typemodifiers ("static")
                :arguments 
                  ( ("nframes" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [105327 105347])
                    ("base" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [105348 105365]))                  
                :type ("specbinding" type (:type "union") nil nil))
                nil [105279 105628])
            ("backtrace_frame_apply" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("function" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [105672 105693])
                    ("pdl" variable
                       (:pointer 1
                        :type ("specbinding" type (:type "union") nil nil))
                        (reparse-symbol arg-sub-list) [105694 105717]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [105630 106188])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fbacktrace_debug" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [106216 106233])
                    ("" variable (:type ("Sbacktrace_debug" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [106234 106251])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [106268 106272]))                  
                :type "int")
                nil [106190 106459])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fmapbacktrace" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [106668 106682])
                    ("" variable (:type ("Smapbacktrace" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [106683 106697])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [106714 106718]))                  
                :type "int")
                nil [106645 107359])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fbacktrace_frame_internal" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [107823 107849])
                    ("" variable (:type ("Sbacktrace_frame_internal" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [107857 107883])
                    ("" variable (:type ("NULL" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [107890 107895])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [107903 107907]))                  
                :type "int")
                nil [107787 108109])
            ("backtrace_eval_unrewind" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("distance" variable (:type "int") (reparse-symbol arg-sub-list) [108746 108759]))                  
                :type "void")
                nil [108709 111143])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fbacktrace_eval" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [111170 111186])
                    ("" variable (:type ("Sbacktrace_eval" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [111187 111203])
                    ("" variable (:type ("NULL" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [111210 111215])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [111223 111227]))                  
                :type "int")
                nil [111145 111430])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fbacktrace__locals" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [112028 112047])
                    ("" variable (:type ("Sbacktrace__locals" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [112048 112067])
                    ("" variable (:type ("NULL" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [112074 112079])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [112087 112091]))                  
                :type "int")
                nil [112000 112281])
            ("mark_specpdl" function
               (:arguments 
                  ( ("first" variable
                       (:pointer 1
                        :type ("specbinding" type (:type "union") nil nil))
                        (reparse-symbol arg-sub-list) [114365 114390])
                    ("ptr" variable
                       (:pointer 1
                        :type ("specbinding" type (:type "union") nil nil))
                        (reparse-symbol arg-sub-list) [114391 114414]))                  
                :type "void")
                nil [114346 115230])
            ("get_backtrace" function
               (:arguments 
                  ( ("array" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [115252 115270]))                  
                :type "void")
                nil [115232 115621])
            ("backtrace_top_function" function
               (:arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [115659 115664]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [115623 115777])
            ("syms_of_eval" function
               (:arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [115798 115803]))                  
                :type "void")
                nil [115779 123964]))          
      :file "eval.c"
      :pointmax 123965
      :fsize 123964
      :lastmodtime '(22986 14551 0 0)
      :unmatched-syntax '((semantic-list 112282 . 114342) (punctuation 112090 . 112091) (number 112071 . 112072) (number 112068 . 112069) (string 112007 . 112026) (semantic-list 111431 . 111998) (punctuation 111226 . 111227) (number 111207 . 111208) (number 111204 . 111205) (string 111152 . 111168) (semantic-list 108110 . 108193) (punctuation 107906 . 107907) (number 107887 . 107888) (number 107884 . 107885) (string 107794 . 107821) (semantic-list 107360 . 107785) (punctuation 106717 . 106718) (number 106704 . 106705) (number 106701 . 106702) (number 106698 . 106699) (string 106652 . 106666) (semantic-list 106460 . 106643) (punctuation 106271 . 106272) (number 106258 . 106259) (number 106255 . 106256) (number 106252 . 106253) (string 106197 . 106214) (semantic-list 104802 . 104889) (punctuation 104587 . 104588) (number 104574 . 104575) (number 104571 . 104572) (number 104568 . 104569) (string 104504 . 104524) (semantic-list 94228 . 94873) (punctuation 94141 . 94142) (number 94128 . 94129) (number 94125 . 94126) (number 94122 . 94123) (string 94063 . 94079) (semantic-list 91489 . 92716) (punctuation 91146 . 91147) (number 91133 . 91134) (number 91130 . 91131) (number 91127 . 91128) (string 91087 . 91099) (semantic-list 81584 . 83251) (punctuation 81329 . 81330) (number 81316 . 81317) (number 81307 . 81308) (string 81276 . 81285) (semantic-list 80458 . 80517) (punctuation 80389 . 80390) (number 80376 . 80377) (number 80373 . 80374) (number 80370 . 80371) (string 80333 . 80344) (semantic-list 75781 . 75853) (punctuation 75392 . 75393) (number 75379 . 75380) (number 75370 . 75371) (string 75312 . 75330) (semantic-list 74983 . 75061) (punctuation 74323 . 74324) (number 74310 . 74311) (number 74301 . 74302) (string 74188 . 74222) (semantic-list 73998 . 74054) (punctuation 73391 . 73392) (number 73378 . 73379) (number 73369 . 73370) (string 73256 . 73290) (semantic-list 73016 . 73075) (punctuation 72546 . 72547) (number 72533 . 72534) (number 72524 . 72525) (string 72453 . 72473) (semantic-list 72355 . 72444) (punctuation 71646 . 71647) (number 71633 . 71634) (number 71624 . 71625) (string 71587 . 71598) (semantic-list 69555 . 71419) (punctuation 69305 . 69306) (number 69292 . 69293) (number 69283 . 69284) (string 69258 . 69265) (semantic-list 61519 . 61716) (punctuation 61275 . 61276) (number 61262 . 61263) (number 61259 . 61260) (number 61256 . 61257) (string 61234 . 61240) (semantic-list 59456 . 61223) (punctuation 59095 . 59096) (number 59082 . 59083) (number 59079 . 59080) (number 59076 . 59077) (string 59018 . 59036) (semantic-list 57606 . 58360) (punctuation 56877 . 56878) (number 56864 . 56865) (number 56861 . 56862) (number 56858 . 56859) (string 56824 . 56834) (semantic-list 55286 . 56815) (punctuation 54546 . 54547) (number 54533 . 54534) (number 54530 . 54531) (number 54527 . 54528) (string 54493 . 54503) (semantic-list 45863 . 45931) (punctuation 45804 . 45805) (punctuation 45180 . 45181) (number 45167 . 45168) (number 45164 . 45165) (number 45161 . 45162) (string 45133 . 45141) (semantic-list 37084 . 37276) (punctuation 35906 . 35907) (number 35893 . 35894) (number 35879 . 35880) (string 35827 . 35843) (semantic-list 35639 . 35817) (punctuation 35364 . 35365) (number 35351 . 35352) (number 35337 . 35338) (string 35285 . 35301) (semantic-list 34975 . 35275) (punctuation 34915 . 34916) (punctuation 34804 . 34805) (number 34791 . 34792) (number 34788 . 34789) (number 34785 . 34786) (string 34760 . 34767) (CATCH 34078 . 34083) (symbol 34030 . 34039) (STATIC 34023 . 34029) (semantic-list 32205 . 32304) (punctuation 31797 . 31798) (number 31784 . 31785) (number 31770 . 31771) (string 31745 . 31752) (semantic-list 30354 . 31735) (punctuation 29913 . 29914) (number 29900 . 29901) (number 29897 . 29898) (number 29894 . 29895) (string 29851 . 29864) (semantic-list 29659 . 29842) (punctuation 29463 . 29464) (number 29450 . 29451) (number 29436 . 29437) (string 29411 . 29418) (semantic-list 27700 . 29402) (punctuation 27342 . 27343) (number 27329 . 27330) (number 27315 . 27316) (string 27296 . 27301) (semantic-list 25943 . 27287) (punctuation 25574 . 25575) (number 25561 . 25562) (number 25547 . 25548) (string 25525 . 25531) (semantic-list 25429 . 25514) (punctuation 25374 . 25375) (number 25361 . 25362) (number 25358 . 25359) (number 25355 . 25356) (string 25269 . 25300) (semantic-list 24575 . 25223) (punctuation 23816 . 23817) (number 23803 . 23804) (number 23789 . 23790) (string 23755 . 23765) (semantic-list 22151 . 23746) (punctuation 20883 . 20884) (number 20870 . 20871) (number 20856 . 20857) (string 20828 . 20836) (semantic-list 20635 . 20819) (punctuation 20489 . 20490) (number 20476 . 20477) (number 20473 . 20474) (number 20470 . 20471) (string 20375 . 20403) (semantic-list 20122 . 20366) (punctuation 20004 . 20005) (number 19991 . 19992) (number 19988 . 19989) (number 19985 . 19986) (string 19909 . 19933) (semantic-list 17634 . 19346) (punctuation 17029 . 17030) (number 17016 . 17017) (number 17013 . 17014) (number 17010 . 17011) (string 16967 . 16980) (semantic-list 15961 . 16957) (punctuation 15755 . 15756) (number 15742 . 15743) (number 15728 . 15729) (string 15694 . 15704) (semantic-list 15566 . 15685) (punctuation 14925 . 14926) (number 14912 . 14913) (number 14898 . 14899) (string 14873 . 14880) (semantic-list 14063 . 14864) (punctuation 13580 . 13581) (number 13567 . 13568) (number 13553 . 13554) (string 13531 . 13537) (semantic-list 13462 . 13522) (punctuation 13229 . 13230) (number 13216 . 13217) (number 13202 . 13203) (string 13177 . 13184) (semantic-list 13078 . 13168) (punctuation 12858 . 12859) (number 12845 . 12846) (number 12831 . 12832) (string 12806 . 12813) (semantic-list 12508 . 12681) (punctuation 12395 . 12396) (number 12382 . 12383) (number 12368 . 12369) (string 12343 . 12350) (semantic-list 12046 . 12334) (punctuation 11580 . 11581) (number 11567 . 11568) (number 11553 . 11554) (string 11531 . 11537) (semantic-list 11364 . 11522) (punctuation 11051 . 11052) (number 11038 . 11039) (number 11024 . 11025) (string 11008 . 11012) (semantic-list 10800 . 10999) (punctuation 10591 . 10592) (number 10578 . 10579) (number 10564 . 10565) (string 10545 . 10550) (semantic-list 10334 . 10536) (punctuation 10130 . 10131) (number 10117 . 10118) (number 10103 . 10104) (string 10087 . 10091) (semantic-list 3455 . 3461) (symbol 3441 . 3454) (punctuation 3440 . 3441) (symbol 3428 . 3439) (UNION 3422 . 3427) (semantic-list 3380 . 3401) (symbol 3365 . 3379) (punctuation 3364 . 3365) (symbol 3352 . 3363) (UNION 3346 . 3351) (semantic-list 3304 . 3325) (symbol 3285 . 3303) (symbol 3273 . 3284) (semantic-list 3231 . 3252) (symbol 3216 . 3230) (punctuation 3215 . 3216) (symbol 3203 . 3214) (semantic-list 3161 . 3182) (symbol 3149 . 3160) (BOOL 3144 . 3148))
      :lexical-table 
        '(("clobbered_eassert" (spp-arg-list ("E") 32488 . 32491) . ((symbol "verify" 32492 . 32498) (semantic-list "(sizeof (E) != 0)" 32499 . 32516)))
          ("CACHEABLE")
          )
)
    (semanticdb-table "semanticdb-table"
      :major-mode c++-mode
      :tags 
        '( ("EMACS_BUFFER_H" variable (:constant-flag t) nil [808 822])
            ("sys/types.h" include (:system-flag t) nil [824 846])
            ("time.h" include (:system-flag t) nil [847 864])
            ("character.h" include nil nil [866 888])
            ("lisp.h" include nil nil [889 906])
            ("BEG" variable (:constant-flag t) nil [1129 1132])
            ("BEG_BYTE" variable (:constant-flag t) nil [1145 1153])
            ("BEGV" variable (:constant-flag t) nil [1229 1233])
            ("BEGV_BYTE" variable (:constant-flag t) nil [1265 1274])
            ("PT" variable (:constant-flag t) nil [1437 1439])
            ("PT_BYTE" variable (:constant-flag t) nil [1473 1480])
            ("GPT" variable (:constant-flag t) nil [1554 1557])
            ("GPT_BYTE" variable (:constant-flag t) nil [1594 1602])
            ("ZV" variable (:constant-flag t) nil [1699 1701])
            ("ZV_BYTE" variable (:constant-flag t) nil [1731 1738])
            ("Z" variable (:constant-flag t) nil [1808 1809])
            ("Z_BYTE" variable (:constant-flag t) nil [1844 1850])
            ("BEG_ADDR" variable (:constant-flag t) nil [1988 1996])
            ("BEGV_ADDR" variable (:constant-flag t) nil [2093 2102])
            ("PT_ADDR" variable (:constant-flag t) nil [2191 2198])
            ("GPT_ADDR" variable (:constant-flag t) nil [2296 2304])
            ("GAP_END_ADDR" variable (:constant-flag t) nil [2426 2438])
            ("ZV_ADDR" variable (:constant-flag t) nil [2606 2613])
            ("Z_ADDR" variable (:constant-flag t) nil [2698 2704])
            ("GAP_SIZE" variable (:constant-flag t) nil [2837 2845])
            ("MODIFF" variable (:constant-flag t) nil [2915 2921])
            ("CHARS_MODIFF" variable (:constant-flag t) nil [2999 3011])
            ("OVERLAY_MODIFF" variable (:constant-flag t) nil [3093 3107])
            ("SAVE_MODIFF" variable (:constant-flag t) nil [3208 3219])
            ("BUFFER_CEILING_OF" variable (:constant-flag t) nil [3433 3450])
            ("BUFFER_FLOOR_OF" variable (:constant-flag t) nil [3534 3549])
            ("BUF_BEG" variable (:constant-flag t) nil [3804 3811])
            ("BUF_BEG_BYTE" variable (:constant-flag t) nil [3831 3843])
            ("BUF_BEGV" variable (:constant-flag t) nil [4069 4077])
            ("BUF_BEGV_BYTE" variable (:constant-flag t) nil [4235 4248])
            ("BUF_PT" variable (:constant-flag t) nil [4456 4462])
            ("BUF_PT_BYTE" variable (:constant-flag t) nil [4614 4625])
            ("BUF_ZV" variable (:constant-flag t) nil [4843 4849])
            ("BUF_ZV_BYTE" variable (:constant-flag t) nil [5001 5012])
            ("BUF_GPT" variable (:constant-flag t) nil [5210 5217])
            ("BUF_GPT_BYTE" variable (:constant-flag t) nil [5250 5262])
            ("BUF_Z" variable (:constant-flag t) nil [5335 5340])
            ("BUF_Z_BYTE" variable (:constant-flag t) nil [5371 5381])
            ("BUF_BEG_ADDR" variable (:constant-flag t) nil [5457 5469])
            ("BUF_GPT_ADDR" variable (:constant-flag t) nil [5549 5561])
            ("BUF_Z_ADDR" variable (:constant-flag t) nil [5663 5673])
            ("BUF_GAP_END_ADDR" variable (:constant-flag t) nil [5804 5820])
            ("BUF_GAP_SIZE" variable (:constant-flag t) nil [5933 5945])
            ("BUF_MODIFF" variable (:constant-flag t) nil [6011 6021])
            ("BUF_CHARS_MODIFF" variable (:constant-flag t) nil [6095 6111])
            ("BUF_SAVE_MODIFF" variable (:constant-flag t) nil [6206 6221])
            ("BUF_OVERLAY_MODIFF" variable (:constant-flag t) nil [6298 6316])
            ("BUF_AUTOSAVE_MODIFF" variable (:constant-flag t) nil [6474 6493])
            ("BUF_COMPACT" variable (:constant-flag t) nil [6561 6572])
            ("BUF_MARKERS" variable (:constant-flag t) nil [6641 6652])
            ("BUF_UNCHANGED_MODIFIED" variable (:constant-flag t) nil [6690 6712])
            ("BUF_OVERLAY_UNCHANGED_MODIFIED" variable (:constant-flag t) nil [6765 6795])
            ("BUF_BEG_UNCHANGED" variable (:constant-flag t) nil [6855 6872])
            ("BUF_END_UNCHANGED" variable (:constant-flag t) nil [6915 6932])
            ("UNCHANGED_MODIFIED" variable (:constant-flag t) nil [6976 6994])
            ("OVERLAY_UNCHANGED_MODIFIED" variable (:constant-flag t) nil [7047 7073])
            ("BEG_UNCHANGED" variable (:constant-flag t) nil [7134 7147])
            ("END_UNCHANGED" variable (:constant-flag t) nil [7191 7204])
            ("BUF_COMPUTE_UNCHANGED" variable (:constant-flag t) nil [7431 7452])
            ("SET_PT" variable (:constant-flag t) nil [8177 8183])
            ("TEMP_SET_PT" variable (:constant-flag t) nil [8225 8236])
            ("SET_PT_BOTH" variable (:constant-flag t) nil [8302 8313])
            ("TEMP_SET_PT_BOTH" variable (:constant-flag t) nil [8372 8388])
            ("BUF_TEMP_SET_PT" variable (:constant-flag t) nil [8477 8492])
            ("set_point" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [8579 8589]))                  
                :type "void")
                nil [8556 8590])
            ("temp_set_point" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("buffer" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [8619 8635])
                    ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [8636 8646]))                  
                :type "void")
                nil [8591 8647])
            ("set_point_both" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [8676 8686])
                    ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [8687 8697]))                  
                :type "void")
                nil [8648 8698])
            ("temp_set_point_both" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("buffer" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [8732 8748])
                    ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [8754 8764])
                    ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [8765 8775]))                  
                :type "void")
                nil [8699 8776])
            ("set_point_from_marker" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [8812 8824]))                  
                :type "void")
                nil [8777 8825])
            ("enlarge_buffer_text" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("buffer" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [8859 8875])
                    ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [8876 8886]))                  
                :type "void")
                nil [8826 8887])
            ("SET_BUF_BEGV" variable (:constant-flag t) nil [9152 9164])
            ("SET_BUF_ZV" variable (:constant-flag t) nil [9289 9299])
            ("SET_BUF_BEGV_BOTH" variable (:constant-flag t) nil [9419 9436])
            ("SET_BUF_ZV_BOTH" variable (:constant-flag t) nil [9532 9547])
            ("SET_BUF_PT_BOTH" variable (:constant-flag t) nil [9639 9654])
            ("DECODE_POSITION" variable (:constant-flag t) nil [10038 10053])
            ("BUF_BYTES_MAX" variable (:constant-flag t) nil [10821 10834])
            ("GAP_BYTES_DFL" variable (:constant-flag t) nil [11044 11057])
            ("GAP_BYTES_MIN" variable (:constant-flag t) nil [11192 11205])
            ("BYTE_POS_ADDR" variable (:constant-flag t) nil [11283 11296])
            ("CHAR_POS_ADDR" variable (:constant-flag t) nil [11423 11436])
            ("CHAR_TO_BYTE" variable (:constant-flag t) nil [11621 11633])
            ("BYTE_TO_CHAR" variable (:constant-flag t) nil [11766 11778])
            ("PTR_BYTE_POS" variable (:constant-flag t) nil [11934 11946])
            ("FETCH_CHAR" variable (:constant-flag t) nil [12214 12224])
            ("FETCH_BYTE" variable (:constant-flag t) nil [12428 12438])
            ("FETCH_CHAR_AS_MULTIBYTE" variable (:constant-flag t) nil [12633 12656])
            ("BUF_BYTE_ADDRESS" variable (:constant-flag t) nil [13089 13105])
            ("BUF_CHAR_ADDRESS" variable (:constant-flag t) nil [13371 13387])
            ("BUF_PTR_BYTE_POS" variable (:constant-flag t) nil [13632 13648])
            ("BUF_FETCH_CHAR" variable (:constant-flag t) nil [13891 13905])
            ("BUF_FETCH_CHAR_AS_MULTIBYTE" variable (:constant-flag t) nil [14224 14251])
            ("BUF_FETCH_BYTE" variable (:constant-flag t) nil [14512 14526])
            ("buffer_text" type
               (:members 
                  ( ("beg" variable
                       (:pointer 1
                        :type "unsigned char")
                        (reparse-symbol classsubparts) [15054 15073])
                    ("gpt" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [15079 15093])
                    ("z" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [15133 15145])
                    ("gpt_byte" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [15185 15204])
                    ("z_byte" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [15244 15261])
                    ("gap_size" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [15301 15320])
                    ("modiff" variable (:type ("EMACS_INT" type (:type "class") nil nil)) (reparse-symbol classsubparts) [15355 15372])
                    ("chars_modiff" variable (:type ("EMACS_INT" type (:type "class") nil nil)) (reparse-symbol classsubparts) [15531 15554])
                    ("save_modiff" variable (:type ("EMACS_INT" type (:type "class") nil nil)) (reparse-symbol classsubparts) [15721 15743])
                    ("overlay_modiff" variable (:type ("EMACS_INT" type (:type "class") nil nil)) (reparse-symbol classsubparts) [15837 15862])
                    ("compact" variable (:type ("EMACS_INT" type (:type "class") nil nil)) (reparse-symbol classsubparts) [15909 15927])
                    ("beg_unchanged" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [16093 16117])
                    ("end_unchanged" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [16195 16219])
                    ("unchanged_modified" variable (:type ("EMACS_INT" type (:type "class") nil nil)) (reparse-symbol classsubparts) [16371 16400])
                    ("overlay_unchanged_modified" variable (:type ("EMACS_INT" type (:type "class") nil nil)) (reparse-symbol classsubparts) [16602 16639])
                    ("intervals" variable (:type ("INTERVAL" type (:type "class") nil nil)) (reparse-symbol classsubparts) [16690 16709])
                    ("markers" variable
                       (:pointer 1
                        :type ("Lisp_Marker" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol classsubparts) [17094 17122])
                    ("inhibit_shrinking" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [17292 17322])
                    ("redisplay" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [17375 17397]))                  
                :type "struct")
                nil [14764 17402])
            ("BVAR" variable (:constant-flag t) nil [17492 17496])
            ("buffer" type
               (:members 
                  ( ("header" variable (:type ("vectorlike_header" type
                         (:prototype t
                          :type "struct")
                          nil nil)) (reparse-symbol classsubparts) [17617 17649])
                    ("name_" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [17687 17705])
                    ("filename_" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [17771 17793])
                    ("directory_" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [17851 17874])
                    ("backed_up_" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [18024 18047])
                    ("save_length_" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [18376 18401])
                    ("auto_save_file_name_" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [18557 18590])
                    ("read_only_" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [18632 18655])
                    ("mark_" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [18758 18776])
                    ("local_var_alist_" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [18964 18993])
                    ("major_mode_" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [19050 19074])
                    ("mode_name_" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [19128 19151])
                    ("mode_line_format_" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [19217 19247])
                    ("header_line_format_" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [19377 19409])
                    ("keymap_" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [19464 19484])
                    ("abbrev_table_" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [19531 19557])
                    ("syntax_table_" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [19598 19624])
                    ("category_table_" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [19667 19695])
                    ("case_fold_search_" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [19853 19883])
                    ("tab_width_" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [19886 19909])
                    ("fill_column_" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [19912 19937])
                    ("left_margin_" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [19940 19965])
                    ("auto_fill_function_" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [20031 20063])
                    ("downcase_table_" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [20188 20216])
                    ("upcase_table_" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [20285 20311])
                    ("case_canon_table_" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [20375 20405])
                    ("case_eqv_table_" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [20470 20498])
                    ("truncate_lines_" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [20560 20588])
                    ("word_wrap_" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [20672 20695])
                    ("ctl_arrow_" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [20754 20777])
                    ("bidi_display_reordering_" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [20869 20906])
                    ("bidi_paragraph_direction_" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [21094 21132])
                    ("bidi_paragraph_separate_re_" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [21208 21248])
                    ("bidi_paragraph_start_re_" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [21320 21357])
                    ("selective_display_" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [21468 21499])
                    ("selective_display_ellipses_" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [21579 21619])
                    ("minor_modes_" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [21700 21725])
                    ("overwrite_mode_" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [21878 21906])
                    ("abbrev_mode_" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [21983 22008])
                    ("display_table_" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [22067 22094])
                    ("mark_active_" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [22157 22182])
                    ("enable_multibyte_characters_" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [22300 22341])
                    ("buffer_file_coding_system_" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [22428 22467])
                    ("file_format_" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [22542 22567])
                    ("auto_save_file_format_" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [22644 22679])
                    ("cache_long_scans_" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [22835 22865])
                    ("width_table_" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [23263 23288])
                    ("pt_marker_" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [23470 23493])
                    ("begv_marker_" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [23677 23702])
                    ("zv_marker_" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [23884 23907])
                    ("point_before_scroll_" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [24029 24062])
                    ("file_truename_" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [24113 24140])
                    ("invisibility_spec_" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [24332 24363])
                    ("last_selected_window_" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [24501 24535])
                    ("display_count_" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [24607 24634])
                    ("left_margin_cols_" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [24728 24758])
                    ("right_margin_cols_" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [24761 24792])
                    ("left_fringe_width_" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [24884 24915])
                    ("right_fringe_width_" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [24918 24950])
                    ("fringes_outside_margins_" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [25076 25113])
                    ("scroll_bar_width_" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [25211 25241])
                    ("scroll_bar_height_" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [25244 25275])
                    ("vertical_scroll_bar_type_" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [25278 25316])
                    ("horizontal_scroll_bar_type_" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [25319 25359])
                    ("indicate_empty_lines_" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [25448 25482])
                    ("indicate_buffer_boundaries_" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [25551 25591])
                    ("fringe_indicator_alist_" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [25648 25684])
                    ("fringe_cursor_alist_" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [25741 25774])
                    ("display_time_" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [25854 25880])
                    ("scroll_up_aggressively_" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [26145 26181])
                    ("scroll_down_aggressively_" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [26446 26484])
                    ("cursor_type_" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [26596 26621])
                    ("extra_line_spacing_" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [26734 26766])
                    ("cursor_in_non_selected_windows_" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [26907 26951])
                    ("own_text" variable (:type ("buffer_text" type
                         (:prototype t
                          :type "struct")
                          nil nil)) (reparse-symbol classsubparts) [27211 27239])
                    ("text" variable
                       (:pointer 1
                        :type ("buffer_text" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol classsubparts) [27455 27480])
                    ("next" variable
                       (:pointer 1
                        :type ("buffer" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol classsubparts) [27554 27574])
                    ("pt" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [27621 27634])
                    ("pt_byte" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [27681 27699])
                    ("begv" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [27760 27775])
                    ("begv_byte" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [27836 27856])
                    ("zv" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [27911 27924])
                    ("zv_byte" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [27979 27997])
                    ("base_buffer" variable
                       (:pointer 1
                        :type ("buffer" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol classsubparts) [28102 28129])
                    ("indirections" variable (:type "int") (reparse-symbol classsubparts) [28319 28336])
                    ("window_count" variable (:type "int") (reparse-symbol classsubparts) [28463 28480])
                    ("MAX_PER_BUFFER_VARS" variable (:constant-flag t) (reparse-symbol classsubparts) [28823 28842])
                    ("local_flags" variable
                       (:dereference 1
                        :type "char")
                        (reparse-symbol classsubparts) [28848 28886])
                    ("NONEXISTENT_MODTIME_NSECS" variable (:constant-flag t) (reparse-symbol classsubparts) [29206 29231])
                    ("UNKNOWN_MODTIME_NSECS" variable (:constant-flag t) (reparse-symbol classsubparts) [29245 29266])
                    ("modtime" variable (:type ("timespec" type
                         (:prototype t
                          :type "struct")
                          nil nil)) (reparse-symbol classsubparts) [29274 29298])
                    ("modtime_size" variable (:type ("off_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [29628 29647])
                    ("auto_save_modified" variable (:type ("EMACS_INT" type (:type "class") nil nil)) (reparse-symbol classsubparts) [29709 29738])
                    ("display_error_modiff" variable (:type ("EMACS_INT" type (:type "class") nil nil)) (reparse-symbol classsubparts) [29871 29902])
                    ("auto_save_failure_time" variable (:type ("time_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [30008 30038])
                    ("last_window_start" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [30141 30169])
                    ("newline_cache" variable
                       (:pointer 1
                        :type ("region_cache" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol classsubparts) [31105 31140])
                    ("width_run_cache" variable
                       (:pointer 1
                        :type ("region_cache" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol classsubparts) [31143 31180])
                    ("bidi_paragraph_cache" variable
                       (:pointer 1
                        :type ("region_cache" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol classsubparts) [31183 31225])
                    ("prevent_redisplay_optimizations_p" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [31351 31397])
                    ("clip_changed" variable
                       (:suffix ":1"
                        :type ("bool_bf" type (:type "class") nil nil))
                        (reparse-symbol classsubparts) [31469 31494])
                    ("overlays_before" variable
                       (:pointer 1
                        :type ("Lisp_Overlay" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol classsubparts) [31597 31634])
                    ("overlays_after" variable
                       (:pointer 1
                        :type ("Lisp_Overlay" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol classsubparts) [31733 31769])
                    ("overlay_center" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [31829 31854])
                    ("undo_list_" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [32197 32220]))                  
                :type "struct")
                nil [17599 32223])
            ("BUFFERP" function
               (:arguments 
                  ( ("a" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [32246 32260]))                  
                :type "bool")
                nil [32232 32305])
            ("CHECK_BUFFER" function
               (:arguments 
                  ( ("x" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [32333 32347]))                  
                :type "void")
                nil [32314 32392])
            ("XBUFFER" function
               (:pointer 1
                :arguments 
                  ( ("a" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [32426 32440]))                  
                :type ("buffer" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [32401 32507])
            ("bset_bidi_paragraph_direction" function
               (:arguments 
                  ( ("b" variable
                       (:pointer 1
                        :type ("buffer" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [32730 32747])
                    ("val" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [32748 32764]))                  
                :type "void")
                nil [32694 32806])
            ("bset_cache_long_scans" function
               (:arguments 
                  ( ("b" variable
                       (:pointer 1
                        :type ("buffer" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [32842 32859])
                    ("val" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [32860 32876]))                  
                :type "void")
                nil [32814 32910])
            ("bset_case_canon_table" function
               (:arguments 
                  ( ("b" variable
                       (:pointer 1
                        :type ("buffer" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [32946 32963])
                    ("val" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [32964 32980]))                  
                :type "void")
                nil [32918 33014])
            ("bset_case_eqv_table" function
               (:arguments 
                  ( ("b" variable
                       (:pointer 1
                        :type ("buffer" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [33048 33065])
                    ("val" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [33066 33082]))                  
                :type "void")
                nil [33022 33114])
            ("bset_directory" function
               (:arguments 
                  ( ("b" variable
                       (:pointer 1
                        :type ("buffer" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [33143 33160])
                    ("val" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [33161 33177]))                  
                :type "void")
                nil [33122 33204])
            ("bset_display_count" function
               (:arguments 
                  ( ("b" variable
                       (:pointer 1
                        :type ("buffer" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [33237 33254])
                    ("val" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [33255 33271]))                  
                :type "void")
                nil [33212 33302])
            ("bset_display_time" function
               (:arguments 
                  ( ("b" variable
                       (:pointer 1
                        :type ("buffer" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [33334 33351])
                    ("val" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [33352 33368]))                  
                :type "void")
                nil [33310 33398])
            ("bset_downcase_table" function
               (:arguments 
                  ( ("b" variable
                       (:pointer 1
                        :type ("buffer" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [33432 33449])
                    ("val" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [33450 33466]))                  
                :type "void")
                nil [33406 33498])
            ("bset_enable_multibyte_characters" function
               (:arguments 
                  ( ("b" variable
                       (:pointer 1
                        :type ("buffer" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [33545 33562])
                    ("val" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [33563 33579]))                  
                :type "void")
                nil [33506 33624])
            ("bset_filename" function
               (:arguments 
                  ( ("b" variable
                       (:pointer 1
                        :type ("buffer" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [33652 33669])
                    ("val" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [33670 33686]))                  
                :type "void")
                nil [33632 33712])
            ("bset_keymap" function
               (:arguments 
                  ( ("b" variable
                       (:pointer 1
                        :type ("buffer" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [33738 33755])
                    ("val" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [33756 33772]))                  
                :type "void")
                nil [33720 33796])
            ("bset_last_selected_window" function
               (:arguments 
                  ( ("b" variable
                       (:pointer 1
                        :type ("buffer" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [33836 33853])
                    ("val" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [33854 33870]))                  
                :type "void")
                nil [33804 33908])
            ("bset_local_var_alist" function
               (:arguments 
                  ( ("b" variable
                       (:pointer 1
                        :type ("buffer" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [33943 33960])
                    ("val" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [33961 33977]))                  
                :type "void")
                nil [33916 34010])
            ("bset_mark_active" function
               (:arguments 
                  ( ("b" variable
                       (:pointer 1
                        :type ("buffer" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [34041 34058])
                    ("val" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [34059 34075]))                  
                :type "void")
                nil [34018 34104])
            ("bset_point_before_scroll" function
               (:arguments 
                  ( ("b" variable
                       (:pointer 1
                        :type ("buffer" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [34143 34160])
                    ("val" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [34161 34177]))                  
                :type "void")
                nil [34112 34214])
            ("bset_read_only" function
               (:arguments 
                  ( ("b" variable
                       (:pointer 1
                        :type ("buffer" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [34243 34260])
                    ("val" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [34261 34277]))                  
                :type "void")
                nil [34222 34304])
            ("bset_truncate_lines" function
               (:arguments 
                  ( ("b" variable
                       (:pointer 1
                        :type ("buffer" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [34338 34355])
                    ("val" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [34356 34372]))                  
                :type "void")
                nil [34312 34404])
            ("bset_undo_list" function
               (:arguments 
                  ( ("b" variable
                       (:pointer 1
                        :type ("buffer" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [34433 34450])
                    ("val" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [34451 34467]))                  
                :type "void")
                nil [34412 34494])
            ("bset_upcase_table" function
               (:arguments 
                  ( ("b" variable
                       (:pointer 1
                        :type ("buffer" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [34526 34543])
                    ("val" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [34544 34560]))                  
                :type "void")
                nil [34502 34590])
            ("bset_width_table" function
               (:arguments 
                  ( ("b" variable
                       (:pointer 1
                        :type ("buffer" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [34621 34638])
                    ("val" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [34639 34655]))                  
                :type "void")
                nil [34598 34684])
            ("BUFFER_LISP_SIZE" variable (:constant-flag t) nil [34873 34889])
            ("BUFFER_REST_SIZE" variable (:constant-flag t) nil [35119 35135])
            ("BUFFER_PVEC_INIT" variable (:constant-flag t) nil [35462 35478])
            ("BUFFER_LIVE_P" variable (:constant-flag t) nil [35651 35664])
            ("BUFFER_HIDDEN_P" variable (:constant-flag t) nil [35830 35845])
            ("BUFFER_CHECK_INDIRECTION" variable (:constant-flag t) nil [35929 35953])
            ("all_buffers" variable
               (:pointer 1
                :typemodifiers ("extern")
                :type ("buffer" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [36305 36339])
            ("FOR_EACH_BUFFER" variable (:constant-flag t) nil [36395 36410])
            ("buffer_defaults" variable
               (:typemodifiers ("extern")
                :type ("buffer" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [36847 36884])
            ("buffer_local_flags" variable
               (:typemodifiers ("extern")
                :type ("buffer" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [37471 37511])
            ("buffer_local_symbols" variable
               (:typemodifiers ("extern")
                :type ("buffer" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [37669 37711])
            ("delete_all_overlays" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("buffer" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [37747 37763]))                  
                :type "void")
                nil [37714 37764])
            ("reset_buffer" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("buffer" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [37791 37807]))                  
                :type "void")
                nil [37765 37808])
            ("compact_buffer" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("buffer" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [37837 37853]))                  
                :type "void")
                nil [37809 37854])
            ("evaporate_overlays" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [37887 37897]))                  
                :type "void")
                nil [37855 37898])
            ("overlays_at" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type ("EMACS_INT" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [37929 37939])
                    ("" variable (:type "bool") (reparse-symbol arg-sub-list) [37940 37945])
                    ("" variable
                       (:pointer 2
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [37946 37961])
                    ("" variable
                       (:pointer 1
                        :type ("ptrdiff_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [37971 37983])
                    ("" variable
                       (:pointer 1
                        :type ("ptrdiff_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [37984 37996])
                    ("" variable
                       (:pointer 1
                        :type ("ptrdiff_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [37997 38009])
                    ("" variable (:type "bool") (reparse-symbol arg-sub-list) [38010 38015]))                  
                :type ("ptrdiff_t" type (:type "class") nil nil))
                nil [37899 38016])
            ("sort_overlays" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [38049 38063])
                    ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [38064 38074])
                    ("" variable
                       (:pointer 1
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [38075 38091]))                  
                :type ("ptrdiff_t" type (:type "class") nil nil))
                nil [38017 38092])
            ("recenter_overlay_lists" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("buffer" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [38129 38145])
                    ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [38146 38156]))                  
                :type "void")
                nil [38093 38157])
            ("overlay_strings" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [38192 38202])
                    ("" variable
                       (:pointer 1
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [38203 38219])
                    ("" variable
                       (:pointer 2
                        :type "unsigned char")
                        (reparse-symbol arg-sub-list) [38220 38237]))                  
                :type ("ptrdiff_t" type (:type "class") nil nil))
                nil [38158 38238])
            ("validate_region" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [38268 38282])
                    ("" variable
                       (:pointer 1
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [38283 38297]))                  
                :type "void")
                nil [38239 38298])
            ("set_buffer_internal_1" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("buffer" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [38334 38350]))                  
                :type "void")
                nil [38299 38351])
            ("set_buffer_internal_2" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("buffer" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [38387 38403]))                  
                :type "void")
                nil [38352 38404])
            ("set_buffer_temp" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("buffer" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [38434 38450]))                  
                :type "void")
                nil [38405 38451])
            ("buffer_local_value" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [38491 38503])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [38504 38516]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [38452 38517])
            ("record_buffer" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [38545 38557]))                  
                :type "void")
                nil [38518 38558])
            ("fix_overlays_before" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("buffer" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [38592 38608])
                    ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [38609 38619])
                    ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [38620 38630]))                  
                :type "void")
                nil [38559 38631])
            ("mmap_set_vars" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type "bool") (reparse-symbol arg-sub-list) [38659 38664]))                  
                :type "void")
                nil [38632 38665])
            ("restore_buffer" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [38694 38706]))                  
                :type "void")
                nil [38666 38707])
            ("set_buffer_if_live" function
               (:prototype-flag t
                :typemodifiers ("extern")
                :arguments 
                  ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [38740 38752]))                  
                :type "void")
                nil [38708 38753])
            ("decode_buffer" function
               (:pointer 1
                :arguments 
                  ( ("b" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [38872 38886]))                  
                :type ("buffer" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [38841 38960])
            ("set_buffer_internal" function
               (:arguments 
                  ( ("b" variable
                       (:pointer 1
                        :type ("buffer" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [39419 39436]))                  
                :type "void")
                nil [39393 39498])
            ("record_unwind_current_buffer" function
               (:arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [39667 39672]))                  
                :type "void")
                nil [39632 39742])
            ("GET_OVERLAYS_AT" variable (:constant-flag t) nil [39936 39951])
            ("Vbuffer_alist" variable
               (:typemodifiers ("extern")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [40452 40485])
            ("FOR_EACH_LIVE_BUFFER" variable (:constant-flag t) nil [40639 40659])
            ("buffer_intervals" function
               (:arguments 
                  ( ("b" variable
                       (:pointer 1
                        :type ("buffer" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [40810 40827]))                  
                :type ("INTERVAL" type (:type "class") nil nil))
                nil [40783 40889])
            ("set_buffer_intervals" function
               (:arguments 
                  ( ("b" variable
                       (:pointer 1
                        :type ("buffer" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [40964 40981])
                    ("i" variable (:type ("INTERVAL" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [40982 40993]))                  
                :type "void")
                nil [40937 41052])
            ("buffer_has_overlays" function
               (:arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [41136 41141]))                  
                :type "bool")
                nil [41110 41221])
            ("FETCH_MULTIBYTE_CHAR" function
               (:arguments 
                  ( ("pos" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [41444 41458]))                  
                :type "int")
                nil [41418 41530])
            ("BUF_FETCH_MULTIBYTE_CHAR" function
               (:arguments 
                  ( ("buf" variable
                       (:pointer 1
                        :type ("buffer" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [41763 41782])
                    ("pos" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [41783 41797]))                  
                :type "int")
                nil [41733 41953])
            ("buffer_window_count" function
               (:arguments 
                  ( ("b" variable
                       (:pointer 1
                        :type ("buffer" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [42031 42048]))                  
                :type "int")
                nil [42006 42158])
            ("OVERLAY_START" variable (:constant-flag t) nil [42257 42270])
            ("OVERLAY_END" variable (:constant-flag t) nil [42376 42387])
            ("OVERLAY_PLIST" variable (:constant-flag t) nil [42460 42473])
            ("OVERLAY_POSITION" variable (:constant-flag t) nil [42623 42639])
            ("last_per_buffer_idx" variable
               (:typemodifiers ("extern")
                :type "int")
                nil [42926 42957])
            ("PER_BUFFER_VAR_OFFSET" variable (:constant-flag t) nil [43074 43095])
            ("FOR_EACH_PER_BUFFER_OBJECT_AT" variable (:constant-flag t) nil [43367 43396])
            ("PER_BUFFER_VAR_IDX" variable (:constant-flag t) nil [43885 43903])
            ("PER_BUFFER_VALUE_P" variable (:constant-flag t) nil [44056 44074])
            ("SET_PER_BUFFER_VALUE_P" variable (:constant-flag t) nil [44339 44361])
            ("PER_BUFFER_IDX" variable (:constant-flag t) nil [45394 45408])
            ("per_buffer_default" function
               (:arguments 
                  ( ("offset" variable (:type "int") (reparse-symbol arg-sub-list) [45649 45660]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [45617 45727])
            ("set_per_buffer_default" function
               (:arguments 
                  ( ("offset" variable (:type "int") (reparse-symbol arg-sub-list) [45765 45776])
                    ("value" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [45777 45795]))                  
                :type "void")
                nil [45736 45863])
            ("per_buffer_value" function
               (:arguments 
                  ( ("b" variable
                       (:pointer 1
                        :type ("buffer" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [46026 46043])
                    ("offset" variable (:type "int") (reparse-symbol arg-sub-list) [46044 46055]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [45996 46107])
            ("set_per_buffer_value" function
               (:arguments 
                  ( ("b" variable
                       (:pointer 1
                        :type ("buffer" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [46143 46160])
                    ("offset" variable (:type "int") (reparse-symbol arg-sub-list) [46161 46172])
                    ("value" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [46173 46191]))                  
                :type "void")
                nil [46116 46244])
            ("downcase" function
               (:arguments 
                  ( ("c" variable (:type "int") (reparse-symbol arg-sub-list) [46340 46346]))                  
                :type "int")
                nil [46326 46524])
            ("upcase" function
               (:arguments 
                  ( ("c" variable (:type "int") (reparse-symbol arg-sub-list) [46615 46621]))                  
                :type "int")
                nil [46603 46787])
            ("uppercasep" function
               (:arguments 
                  ( ("c" variable (:type "int") (reparse-symbol arg-sub-list) [46845 46851]))                  
                :type "bool")
                nil [46828 46883])
            ("lowercasep" function
               (:arguments 
                  ( ("c" variable (:type "int") (reparse-symbol arg-sub-list) [46941 46947]))                  
                :type "bool")
                nil [46924 46996]))          
      :file "buffer.h"
      :pointmax 47045
      :fsize 47044
      :lastmodtime '(22986 14551 0 0)
      :unmatched-syntax '((symbol 46998 . 47015) (symbol 46917 . 46923) (symbol 46821 . 46827) (symbol 46596 . 46602) (symbol 46319 . 46325) (symbol 46109 . 46115) (symbol 45989 . 45995) (symbol 45729 . 45735) (symbol 45610 . 45616) (symbol 41999 . 42005) (symbol 41726 . 41732) (symbol 41411 . 41417) (symbol 41103 . 41109) (symbol 40930 . 40936) (symbol 40776 . 40782) (symbol 39625 . 39631) (symbol 39386 . 39392) (symbol 38834 . 38840) (symbol 34591 . 34597) (symbol 34495 . 34501) (symbol 34405 . 34411) (symbol 34305 . 34311) (symbol 34215 . 34221) (symbol 34105 . 34111) (symbol 34011 . 34017) (symbol 33909 . 33915) (symbol 33797 . 33803) (symbol 33713 . 33719) (symbol 33625 . 33631) (symbol 33499 . 33505) (symbol 33399 . 33405) (symbol 33303 . 33309) (symbol 33205 . 33211) (symbol 33115 . 33121) (symbol 33015 . 33021) (symbol 32911 . 32917) (symbol 32807 . 32813) (symbol 32687 . 32693) (symbol 32394 . 32400) (symbol 32307 . 32313) (symbol 32225 . 32231) (symbol 908 . 927))
      :lexical-table 
        '(("BEG_BYTE" . ((semantic-list "(BEG)" 1154 . 1159)))
          ("GPT_BYTE" . ((semantic-list "(current_buffer->text->gpt_byte)" 1603 . 1635)))
          ("BUF_BEGV" (spp-arg-list ("buf") 4077 . 4082) . ((semantic-list "(buf == current_buffer ? BEGV			\\
    : NILP (BVAR (buf, begv_marker)) ? buf->begv	\\
    : marker_position (BVAR (buf, begv_marker)))" 4092 . 4225)))
          ("BUF_Z_BYTE" (spp-arg-list ("buf") 5381 . 5386) . ((semantic-list "((buf)->text->z_byte)" 5387 . 5408)))
          ("OVERLAY_UNCHANGED_MODIFIED" . ((symbol "BUF_OVERLAY_UNCHANGED_MODIFIED" 7078 . 7108) (semantic-list "(current_buffer)" 7109 . 7125)))
          ("BUF_FETCH_BYTE" (spp-arg-list ("buf" "n") 14526 . 14534) . ((punctuation "*" 14539 . 14540) (semantic-list "(BUF_BYTE_ADDRESS ((buf), (n)))" 14540 . 14571)))
          ("BUFFER_LISP_SIZE" . ((semantic-list "((offsetof (struct buffer, own_text) - header_size) / word_size)" 34899 . 34963)))
          ("BUFFER_REST_SIZE" . ((semantic-list "((((sizeof (struct buffer) - offsetof (struct buffer, own_text))	\\
     + (word_size - 1)) & ~(word_size - 1)) / word_size)" 35145 . 35268)))
          ("PER_BUFFER_VALUE_P" (spp-arg-list ("B" "IDX") 44074 . 44082) . ((semantic-list "(((IDX) < 0 || IDX >= last_per_buffer_idx)	\\
     ? (emacs_abort (), false)			\\
     : ((B)->local_flags[IDX] != 0))" 44090 . 44206)))
          ("BEG" . ((semantic-list "(1)" 1133 . 1136)))
          ("GPT" . ((semantic-list "(current_buffer->text->gpt)" 1558 . 1585)))
          ("GAP_END_ADDR" . ((semantic-list "(current_buffer->text->beg + current_buffer->text->gpt_byte + current_buffer->text->gap_size - BEG_BYTE)" 2439 . 2543)))
          ("CHARS_MODIFF" . ((semantic-list "(current_buffer->text->chars_modiff)" 3012 . 3048)))
          ("OVERLAY_MODIFF" . ((semantic-list "(current_buffer->text->overlay_modiff)" 3108 . 3146)))
          ("BUF_Z" (spp-arg-list ("buf") 5340 . 5345) . ((semantic-list "((buf)->text->z)" 5346 . 5362)))
          ("CHAR_POS_ADDR" (spp-arg-list ("n") 11436 . 11439) . ((semantic-list "(((n) >= GPT ? GAP_SIZE : 0)			\\
   + buf_charpos_to_bytepos (current_buffer, n)	\\
   + BEG_ADDR - BEG_BYTE)" 11446 . 11554)))
          ("BUF_PTR_BYTE_POS" (spp-arg-list ("buf" "ptr") 13648 . 13658) . ((semantic-list "((ptr) - (buf)->text->beg					\\
   - (ptr - (buf)->text->beg <= BUF_GPT_BYTE (buf) - BEG_BYTE	\\
      ? 0 : BUF_GAP_SIZE ((buf)))				\\
   + BEG_BYTE)" 13666 . 13815)))
          ("FOR_EACH_LIVE_BUFFER" (spp-arg-list ("list_var" "buf_var") 40659 . 40678) . ((symbol "FOR_EACH_ALIST_VALUE" 40685 . 40705) (semantic-list "(Vbuffer_alist, list_var, buf_var)" 40706 . 40740)))
          ("OVERLAY_START" (spp-arg-list ("OV") 42270 . 42274) . 
              ((symbol "XOVERLAY" 42275 . 42283) (semantic-list "(OV)" 42284 . 42288) (punctuation "-" 42288 . 42289) (punctuation ">" 42289 . 42290) (symbol "start" 42290 . 42295)))
          ("BUF_BEG_ADDR" (spp-arg-list ("buf") 5469 . 5474) . ((semantic-list "((buf)->text->beg)" 5475 . 5493)))
          ("BUF_GPT_ADDR" (spp-arg-list ("buf") 5561 . 5566) . ((semantic-list "((buf)->text->beg + (buf)->text->gpt_byte - BEG_BYTE)" 5567 . 5620)))
          ("BUF_GAP_SIZE" (spp-arg-list ("buf") 5945 . 5950) . ((semantic-list "((buf)->text->gap_size)" 5951 . 5974)))
          ("BUF_OVERLAY_UNCHANGED_MODIFIED" (spp-arg-list ("buf") 6795 . 6800) . ((semantic-list "((buf)->text->overlay_unchanged_modified)" 6805 . 6846)))
          ("BYTE_POS_ADDR" (spp-arg-list ("n") 11296 . 11299) . ((semantic-list "(((n) >= GPT_BYTE ? GAP_SIZE : 0) + (n) + BEG_ADDR - BEG_BYTE)" 11304 . 11366)))
          ("CHAR_TO_BYTE" (spp-arg-list ("charpos") 11633 . 11642) . ((semantic-list "(buf_charpos_to_bytepos (current_buffer, charpos))" 11649 . 11699)))
          ("MAX_PER_BUFFER_VARS" . ((number "50" 28843 . 28845)))
          ("BUF_MODIFF" (spp-arg-list ("buf") 6021 . 6026) . ((semantic-list "((buf)->text->modiff)" 6027 . 6048)))
          ("BUF_SAVE_MODIFF" (spp-arg-list ("buf") 6221 . 6226) . ((semantic-list "((buf)->text->save_modiff)" 6227 . 6253)))
          ("GAP_BYTES_DFL" . ((number "2000" 11058 . 11062)))
          ("OVERLAY_END" (spp-arg-list ("OV") 42387 . 42391) . 
              ((symbol "XOVERLAY" 42392 . 42400) (semantic-list "(OV)" 42401 . 42405) (punctuation "-" 42405 . 42406) (punctuation ">" 42406 . 42407) (symbol "end" 42407 . 42410)))
          ("PT_ADDR" . ((semantic-list "(BYTE_POS_ADDR (current_buffer->pt_byte))" 2199 . 2240)))
          ("Z_ADDR" . ((semantic-list "(current_buffer->text->beg + current_buffer->text->gap_size + current_buffer->text->z_byte - BEG_BYTE)" 2705 . 2807)))
          ("BUF_BEGV_BYTE" (spp-arg-list ("buf") 4248 . 4253) . ((semantic-list "(buf == current_buffer ? BEGV_BYTE			\\
    : NILP (BVAR (buf, begv_marker)) ? buf->begv_byte	\\
    : marker_byte_position (BVAR (buf, begv_marker)))" 4262 . 4410)))
          ("TEMP_SET_PT" (spp-arg-list ("position") 8236 . 8246) . ((semantic-list "(temp_set_point (current_buffer, (position)))" 8247 . 8292)))
          ("GAP_BYTES_MIN" . ((number "20" 11206 . 11208)))
          ("PTR_BYTE_POS" (spp-arg-list ("ptr") 11946 . 11951) . ((semantic-list "((ptr) - (current_buffer)->text->beg					    \\
   - (ptr - (current_buffer)->text->beg <= GPT_BYTE - BEG_BYTE ? 0 : GAP_SIZE) \\
   + BEG_BYTE)" 11956 . 12098)))
          ("PER_BUFFER_VAR_IDX" (spp-arg-list ("VAR") 43903 . 43908) . ((symbol "PER_BUFFER_IDX" 43915 . 43929) (semantic-list "(PER_BUFFER_VAR_OFFSET (VAR))" 43930 . 43959)))
          ("EMACS_BUFFER_H")
          ("ZV" . ((semantic-list "(current_buffer->zv)" 1702 . 1722)))
          ("BUF_PT" (spp-arg-list ("buf") 4462 . 4467) . ((semantic-list "(buf == current_buffer ? PT				\\
    : NILP (BVAR (buf, pt_marker)) ? buf->pt		\\
    : marker_position (BVAR (buf, pt_marker)))" 4477 . 4604)))
          ("BUF_OVERLAY_MODIFF" (spp-arg-list ("buf") 6316 . 6321) . ((semantic-list "((buf)->text->overlay_modiff)" 6322 . 6351)))
          ("BUF_UNCHANGED_MODIFIED" (spp-arg-list ("buf") 6712 . 6717) . ((semantic-list "((buf)->text->unchanged_modified)" 6722 . 6755)))
          ("BUF_BYTES_MAX" . 
              ((semantic-list "(ptrdiff_t)" 10839 . 10850) (symbol "min" 10851 . 10854) (semantic-list "(MOST_POSITIVE_FIXNUM - 1, min (SIZE_MAX, PTRDIFF_MAX))" 10855 . 10910)))
          ("FETCH_CHAR_AS_MULTIBYTE" (spp-arg-list ("pos") 12656 . 12661) . ((semantic-list "(!NILP (BVAR (current_buffer, enable_multibyte_characters))	\\
   ? FETCH_MULTIBYTE_CHAR ((pos))			\\
   : UNIBYTE_TO_CHAR (FETCH_BYTE ((pos))))" 12668 . 12810)))
          ("BUFFER_LIVE_P" (spp-arg-list ("b") 35664 . 35667) . ((semantic-list "(!NILP (BVAR (b, name)))" 35668 . 35692)))
          ("FOR_EACH_BUFFER" (spp-arg-list ("b") 36410 . 36413) . ((FOR "for" 36418 . 36421) (semantic-list "((b) = all_buffers; (b); (b) = (b)->next)" 36422 . 36463)))
          ("OVERLAY_POSITION" (spp-arg-list ("P") 42639 . 42642) . ((semantic-list "(MARKERP (P) ? marker_position (P) : (emacs_abort (), 0))" 42646 . 42703)))
          ("ZV_ADDR" . ((semantic-list "(BYTE_POS_ADDR (current_buffer->zv_byte))" 2614 . 2655)))
          ("BUFFER_CEILING_OF" (spp-arg-list ("BYTEPOS") 3450 . 3459) . ((semantic-list "(((BYTEPOS) < GPT_BYTE && GPT < ZV ? GPT_BYTE : ZV_BYTE) - 1)" 3464 . 3525)))
          ("BUF_BEG" (spp-arg-list ("buf") 3811 . 3816) . ((semantic-list "(BEG)" 3817 . 3822)))
          ("BUF_BEG_BYTE" (spp-arg-list ("buf") 3843 . 3848) . ((semantic-list "(BEG_BYTE)" 3849 . 3859)))
          ("BUF_GPT" (spp-arg-list ("buf") 5217 . 5222) . ((semantic-list "((buf)->text->gpt)" 5223 . 5241)))
          ("BUF_GPT_BYTE" (spp-arg-list ("buf") 5262 . 5267) . ((semantic-list "((buf)->text->gpt_byte)" 5268 . 5291)))
          ("END_UNCHANGED" . ((symbol "BUF_END_UNCHANGED" 7205 . 7222) (semantic-list "(current_buffer)" 7223 . 7239)))
          ("BUF_COMPUTE_UNCHANGED" (spp-arg-list ("buf" "start" "end") 7452 . 7469) . 
              ((DO "do" 7477 . 7479) (semantic-list "{									\\
      if (BUF_UNCHANGED_MODIFIED (buf) == BUF_MODIFF (buf)		\\
	  && (BUF_OVERLAY_UNCHANGED_MODIFIED (buf)			\\
	      == BUF_OVERLAY_MODIFF (buf)))				\\
	{								\\
	  BUF_BEG_UNCHANGED (buf) = (start) - BUF_BEG (buf);		\\
	  BUF_END_UNCHANGED (buf) = BUF_Z (buf) - (end);		\\
	}								\\
      else								\\
	{								\\
	  if (BUF_Z (buf) - (end) < BUF_END_UNCHANGED (buf))		\\
	    BUF_END_UNCHANGED (buf) = BUF_Z (buf) - (end);		\\
	  if ((start) - BUF_BEG (buf) < BUF_BEG_UNCHANGED (buf))	\\
	    BUF_BEG_UNCHANGED (buf) = (start) - BUF_BEG (buf);		\\
	}								\\
    }" 7494 . 8072) (WHILE "while" 8085 . 8090) (semantic-list "(false)" 8091 . 8098)))
          ("SET_PT_BOTH" (spp-arg-list ("position" "byte") 8313 . 8329) . ((semantic-list "(set_point_both (position, byte))" 8330 . 8363)))
          ("SET_PT" (spp-arg-list ("position") 8183 . 8193) . ((semantic-list "(set_point (position))" 8194 . 8216)))
          ("BUF_BYTE_ADDRESS" (spp-arg-list ("buf" "pos") 13105 . 13115) . ((semantic-list "((buf)->text->beg + (pos) - BEG_BYTE \\
   + ((pos) >= (buf)->text->gpt_byte ? (buf)->text->gap_size : 0))" 13120 . 13225)))
          ("BUF_FETCH_CHAR_AS_MULTIBYTE" (spp-arg-list ("buf" "pos") 14251 . 14261) . ((semantic-list "(! NILP (BVAR ((buf), enable_multibyte_characters))   \\
   ? BUF_FETCH_MULTIBYTE_CHAR ((buf), (pos))            \\
   : UNIBYTE_TO_CHAR (BUF_FETCH_BYTE ((buf), (pos))))" 14276 . 14443)))
          ("BUFFER_HIDDEN_P" (spp-arg-list ("b") 35845 . 35848) . ((semantic-list "(SREF (BVAR (b, name), 0) == ' ')" 35849 . 35882)))
          ("OVERLAY_PLIST" (spp-arg-list ("OV") 42473 . 42477) . 
              ((symbol "XOVERLAY" 42478 . 42486) (semantic-list "(OV)" 42487 . 42491) (punctuation "-" 42491 . 42492) (punctuation ">" 42492 . 42493) (symbol "plist" 42493 . 42498)))
          ("FOR_EACH_PER_BUFFER_OBJECT_AT" (spp-arg-list ("offset") 43396 . 43404) . ((FOR "for" 43413 . 43416) (semantic-list "(offset = PER_BUFFER_VAR_OFFSET (name);				 \\
       offset <= PER_BUFFER_VAR_OFFSET (cursor_in_non_selected_windows); \\
       offset += word_size)" 43417 . 43565)))
          ("NONEXISTENT_MODTIME_NSECS" . ((semantic-list "(-1)" 29232 . 29236)))
          ("PT_BYTE" . ((semantic-list "(current_buffer->pt_byte + 0)" 1481 . 1510)))
          ("Z_BYTE" . ((semantic-list "(current_buffer->text->z_byte)" 1851 . 1881)))
          ("BEGV_ADDR" . ((semantic-list "(BYTE_POS_ADDR (current_buffer->begv_byte))" 2103 . 2146)))
          ("BUF_AUTOSAVE_MODIFF" (spp-arg-list ("buf") 6493 . 6498) . ((semantic-list "((buf)->auto_save_modified)" 6499 . 6526)))
          ("TEMP_SET_PT_BOTH" (spp-arg-list ("position" "byte") 8388 . 8404) . ((semantic-list "(temp_set_point_both (current_buffer, (position), (byte)))" 8409 . 8467)))
          ("SET_BUF_BEGV" (spp-arg-list ("buf" "charpos") 9164 . 9178) . ((semantic-list "((buf)->begv_byte = buf_charpos_to_bytepos ((buf), (charpos)), \\
   (buf)->begv = (charpos))" 9187 . 9279)))
          ("BUFFER_PVEC_INIT" (spp-arg-list ("b") 35478 . 35481) . ((symbol "XSETPVECTYPESIZE" 35521 . 35537) (semantic-list "(b, PVEC_BUFFER, BUFFER_LISP_SIZE, BUFFER_REST_SIZE)" 35538 . 35590)))
          ("SET_PER_BUFFER_VALUE_P" (spp-arg-list ("B" "IDX" "VAL") 44361 . 44374) . 
              ((DO "do" 44382 . 44384) (semantic-list "{						\\
       if ((IDX) < 0 || (IDX) >= last_per_buffer_idx)	\\
	 emacs_abort ();				\\
       (B)->local_flags[IDX] = (VAL);			\\
     }" 44385 . 44521) (WHILE "while" 44522 . 44527) (semantic-list "(false)" 44528 . 44535)))
          ("UNKNOWN_MODTIME_NSECS" . ((semantic-list "(-2)" 29267 . 29271)))
          ("BEG_ADDR" . ((semantic-list "(current_buffer->text->beg)" 1997 . 2024)))
          ("GPT_ADDR" . ((semantic-list "(current_buffer->text->beg + current_buffer->text->gpt_byte - BEG_BYTE)" 2305 . 2376)))
          ("GAP_SIZE" . ((semantic-list "(current_buffer->text->gap_size)" 2846 . 2878)))
          ("BUF_Z_ADDR" (spp-arg-list ("buf") 5673 . 5678) . ((semantic-list "((buf)->text->beg + (buf)->text->gap_size + (buf)->text->z_byte - BEG_BYTE)" 5679 . 5754)))
          ("BUF_END_UNCHANGED" (spp-arg-list ("buf") 6932 . 6937) . ((semantic-list "((buf)->text->end_unchanged)" 6938 . 6966)))
          ("BEG_UNCHANGED" . ((symbol "BUF_BEG_UNCHANGED" 7148 . 7165) (semantic-list "(current_buffer)" 7166 . 7182)))
          ("SET_BUF_ZV" (spp-arg-list ("buf" "charpos") 9299 . 9313) . ((semantic-list "((buf)->zv_byte = buf_charpos_to_bytepos ((buf), (charpos)),	\\
   (buf)->zv = (charpos))" 9321 . 9409)))
          ("SET_BUF_PT_BOTH" (spp-arg-list ("buf" "charpos" "byte") 9654 . 9674) . ((semantic-list "((buf)->pt = (charpos),				\\
   (buf)->pt_byte = (byte))" 9680 . 9736)))
          ("DECODE_POSITION" (spp-arg-list ("charpos" "bytepos" "pos") 10053 . 10076) . 
              ((DO "do" 10084 . 10086) (semantic-list "{									\\
      Lisp_Object __pos = (pos);					\\
      if (NUMBERP (__pos))						\\
	{								\\
	  charpos = __pos;						\\
	  bytepos = buf_charpos_to_bytepos (current_buffer, __pos);	\\
	}								\\
      else if (MARKERP (__pos))						\\
	{								\\
	  charpos = marker_position (__pos);				\\
	  bytepos = marker_byte_position (__pos);			\\
	}								\\
      else								\\
	wrong_type_argument (Qinteger_or_marker_p, __pos);		\\
    }" 10101 . 10533) (WHILE "while" 10546 . 10551) (semantic-list "(false)" 10552 . 10559)))
          ("ZV_BYTE" . ((semantic-list "(current_buffer->zv_byte)" 1739 . 1764)))
          ("SAVE_MODIFF" . ((semantic-list "(current_buffer->text->save_modiff)" 3220 . 3255)))
          ("BUFFER_FLOOR_OF" (spp-arg-list ("BYTEPOS") 3549 . 3558) . ((semantic-list "(BEGV <= GPT && GPT_BYTE <= (BYTEPOS) ? GPT_BYTE : BEGV_BYTE)" 3563 . 3624)))
          ("BUF_PT_BYTE" (spp-arg-list ("buf") 4625 . 4630) . ((semantic-list "(buf == current_buffer ? PT_BYTE			\\
    : NILP (BVAR (buf, pt_marker)) ? buf->pt_byte	\\
    : marker_byte_position (BVAR (buf, pt_marker)))" 4639 . 4779)))
          ("BUF_TEMP_SET_PT" (spp-arg-list ("buffer" "position") 8492 . 8510) . ((semantic-list "(temp_set_point ((buffer), (position)))" 8515 . 8554)))
          ("SET_BUF_BEGV_BOTH" (spp-arg-list ("buf" "charpos" "byte") 9436 . 9456) . ((semantic-list "((buf)->begv = (charpos),				\\
   (buf)->begv_byte = (byte))" 9462 . 9522)))
          ("BYTE_TO_CHAR" (spp-arg-list ("bytepos") 11778 . 11787) . ((semantic-list "(buf_bytepos_to_charpos (current_buffer, bytepos))" 11794 . 11844)))
          ("FETCH_CHAR" (spp-arg-list ("pos") 12224 . 12229) . ((semantic-list "(!NILP (BVAR (current_buffer, enable_multibyte_characters))	\\
   ? FETCH_MULTIBYTE_CHAR ((pos))		      	\\
   : FETCH_BYTE ((pos)))" 12244 . 12374)))
          ("BUFFER_CHECK_INDIRECTION" (spp-arg-list ("b") 35953 . 35956) . 
              ((DO "do" 35963 . 35965) (semantic-list "{							\\
    if (BUFFER_LIVE_P (b))				\\
      {							\\
	if (b->base_buffer)				\\
	  {						\\
	    eassert (b->indirections == -1);		\\
	    eassert (b->base_buffer->indirections > 0);	\\
	  }						\\
	else						\\
	  eassert (b->indirections >= 0);		\\
      }							\\
  }" 35966 . 36236) (WHILE "while" 36237 . 36242) (semantic-list "(false)" 36243 . 36250)))
          ("BEGV" . ((semantic-list "(current_buffer->begv)" 1234 . 1256)))
          ("MODIFF" . ((semantic-list "(current_buffer->text->modiff)" 2922 . 2952)))
          ("BUF_ZV" (spp-arg-list ("buf") 4849 . 4854) . ((semantic-list "(buf == current_buffer ? ZV				\\
    : NILP (BVAR (buf, zv_marker)) ? buf->zv		\\
    : marker_position (BVAR (buf, zv_marker)))" 4864 . 4991)))
          ("BUF_GAP_END_ADDR" (spp-arg-list ("buf") 5820 . 5825) . ((semantic-list "((buf)->text->beg + (buf)->text->gpt_byte + (buf)->text->gap_size - BEG_BYTE)" 5826 . 5903)))
          ("BUF_CHARS_MODIFF" (spp-arg-list ("buf") 6111 . 6116) . ((semantic-list "((buf)->text->chars_modiff)" 6117 . 6144)))
          ("BUF_COMPACT" (spp-arg-list ("buf") 6572 . 6577) . ((semantic-list "((buf)->text->compact)" 6578 . 6600)))
          ("BUF_MARKERS" (spp-arg-list ("buf") 6652 . 6657) . ((semantic-list "((buf)->text->markers)" 6658 . 6680)))
          ("SET_BUF_ZV_BOTH" (spp-arg-list ("buf" "charpos" "byte") 9547 . 9567) . ((semantic-list "((buf)->zv = (charpos),				\\
   (buf)->zv_byte = (byte))" 9573 . 9629)))
          ("FETCH_BYTE" (spp-arg-list ("n") 12438 . 12441) . ((punctuation "*" 12442 . 12443) (semantic-list "(BYTE_POS_ADDR ((n)))" 12443 . 12464)))
          ("BUF_CHAR_ADDRESS" (spp-arg-list ("buf" "pos") 13387 . 13397) . ((semantic-list "((buf)->text->beg + buf_charpos_to_bytepos ((buf), (pos)) - BEG_BYTE	\\
   + ((pos) >= (buf)->text->gpt ? (buf)->text->gap_size : 0))" 13402 . 13534)))
          ("GET_OVERLAYS_AT" (spp-arg-list ("posn" "overlays" "noverlays" "nextp" "chrq") 39951 . 39991) . 
              ((DO "do" 39997 . 39999) (semantic-list "{									\\
    ptrdiff_t maxlen = 40;						\\
    SAFE_NALLOCA (overlays, 1, maxlen);					\\
    (noverlays) = overlays_at (posn, false, &(overlays), &maxlen,	\\
			       nextp, NULL, chrq);			\\
    if ((noverlays) > maxlen)						\\
      {									\\
	maxlen = noverlays;						\\
	SAFE_NALLOCA (overlays, 1, maxlen);				\\
	(noverlays) = overlays_at (posn, false, &(overlays), &maxlen,	\\
				   nextp, NULL, chrq);			\\
      }									\\
  }" 40000 . 40436) (WHILE "while" 40437 . 40442) (semantic-list "(false)" 40443 . 40450)))
          ("PER_BUFFER_VAR_OFFSET" (spp-arg-list ("VAR") 43095 . 43100) . ((symbol "offsetof" 43105 . 43113) (semantic-list "(struct buffer, VAR ## _)" 43114 . 43139)))
          ("BEGV_BYTE" . ((semantic-list "(current_buffer->begv_byte)" 1275 . 1302)))
          ("PT" . ((semantic-list "(current_buffer->pt + 0)" 1440 . 1464)))
          ("Z" . ((semantic-list "(current_buffer->text->z)" 1810 . 1835)))
          ("BUF_ZV_BYTE" (spp-arg-list ("buf") 5012 . 5017) . ((semantic-list "(buf == current_buffer ? ZV_BYTE			\\
    : NILP (BVAR (buf, zv_marker)) ? buf->zv_byte	\\
    : marker_byte_position (BVAR (buf, zv_marker)))" 5026 . 5166)))
          ("BUF_BEG_UNCHANGED" (spp-arg-list ("buf") 6872 . 6877) . ((semantic-list "((buf)->text->beg_unchanged)" 6878 . 6906)))
          ("UNCHANGED_MODIFIED" . ((symbol "BUF_UNCHANGED_MODIFIED" 6999 . 7021) (semantic-list "(current_buffer)" 7022 . 7038)))
          ("BUF_FETCH_CHAR" (spp-arg-list ("buf" "pos") 13905 . 13915) . ((semantic-list "(!NILP (buf->enable_multibyte_characters)	\\
   ? BUF_FETCH_MULTIBYTE_CHAR ((buf), (pos))    \\
   : BUF_FETCH_BYTE ((buf), (pos)))" 13927 . 14056)))
          ("BVAR" (spp-arg-list ("buf" "field") 17496 . 17508) . ((semantic-list "((buf)->field ## _)" 17509 . 17528)))
          ("PER_BUFFER_IDX" (spp-arg-list ("OFFSET") 45408 . 45416) . ((symbol "XINT" 45425 . 45429) (semantic-list "(*(Lisp_Object *)((OFFSET) + (char *) &buffer_local_flags))" 45430 . 45489)))
          )
)
    (semanticdb-table "semanticdb-table"
      :major-mode c++-mode
      :tags 
        '( ("EMACS_LISP_H" variable (:constant-flag t) nil [832 844])
            ("alloca.h" include (:system-flag t) nil [846 865])
            ("setjmp.h" include (:system-flag t) nil [866 885])
            ("stdalign.h" include (:system-flag t) nil [886 907])
            ("stdarg.h" include (:system-flag t) nil [908 927])
            ("stddef.h" include (:system-flag t) nil [928 947])
            ("string.h" include (:system-flag t) nil [948 967])
            ("float.h" include (:system-flag t) nil [968 986])
            ("inttypes.h" include (:system-flag t) nil [987 1008])
            ("limits.h" include (:system-flag t) nil [1009 1028])
            ("intprops.h" include (:system-flag t) nil [1030 1051])
            ("verify.h" include (:system-flag t) nil [1052 1071])
            ("DECLARE_GDB_SYM" variable (:constant-flag t) nil [1493 1508])
            ("DEFINE_GDB_SYMBOL_BEGIN" variable (:constant-flag t) nil [1698 1721])
            ("DEFINE_GDB_SYMBOL_END" variable (:constant-flag t) nil [1775 1796])
            ("max" variable (:constant-flag t) nil [1884 1887])
            ("min" variable (:constant-flag t) nil [1926 1929])
            ("ARRAYELTS" variable (:constant-flag t) nil [2008 2017])
            ("GCTYPEBITS" variable (:constant-flag t) nil [2151 2161])
            ("EMACS_INT" type
               (:typedef ("int")
                :type "typedef")
                nil [2608 2630])
            ("EMACS_UINT" type
               (:typedef ("unsigned int")
                :type "typedef")
                nil [2631 2663])
            ("" type
               (:members 
                  ( ("EMACS_INT_WIDTH" variable
                       (:constant-flag t
                        :default-value (2689 2698)
                        :type "int")
                        (reparse-symbol enumsubparts) [2671 2698])
                    ("EMACS_UINT_WIDTH" variable
                       (:constant-flag t
                        :default-value (2719 2729)
                        :type "int")
                        (reparse-symbol enumsubparts) [2700 2729]))                  
                :type "enum")
                nil [2664 2732])
            ("EMACS_INT_MAX" variable (:constant-flag t) nil [2743 2756])
            ("pI" variable (:constant-flag t) nil [2775 2777])
            ("EMACS_INT" type
               (:typedef ("long int")
                :type "typedef")
                nil [2838 2865])
            ("EMACS_UINT" type
               (:typedef ("unsigned long")
                :type "typedef")
                nil [2866 2899])
            ("" type
               (:members 
                  ( ("EMACS_INT_WIDTH" variable
                       (:constant-flag t
                        :default-value (2925 2935)
                        :type "int")
                        (reparse-symbol enumsubparts) [2907 2935])
                    ("EMACS_UINT_WIDTH" variable
                       (:constant-flag t
                        :default-value (2956 2967)
                        :type "int")
                        (reparse-symbol enumsubparts) [2937 2967]))                  
                :type "enum")
                nil [2900 2970])
            ("EMACS_INT_MAX" variable (:constant-flag t) nil [2981 2994])
            ("pI" variable (:constant-flag t) nil [3014 3016])
            ("EMACS_INT" variable (:type "long int") nil [3065 3084])
            ("EMACS_UINT" variable (:type "long int") nil [3107 3127])
            ("" type
               (:members 
                  ( ("EMACS_INT_WIDTH" variable
                       (:constant-flag t
                        :default-value (3153 3164)
                        :type "int")
                        (reparse-symbol enumsubparts) [3135 3164])
                    ("EMACS_UINT_WIDTH" variable
                       (:constant-flag t
                        :default-value (3185 3197)
                        :type "int")
                        (reparse-symbol enumsubparts) [3166 3197]))                  
                :type "enum")
                nil [3128 3200])
            ("EMACS_INT_MAX" variable (:constant-flag t) nil [3211 3224])
            ("pI" variable (:constant-flag t) nil [3785 3787])
            ("" type
               (:members 
                  ( ("BOOL_VECTOR_BITS_PER_CHAR" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [4009 4036]))                  
                :type "enum")
                nil [4001 4109])
            ("bits_word" type
               (:typedef ("size_t" type (:type "class") nil nil)
                :type "typedef")
                nil [4395 4420])
            ("BITS_WORD_MAX" variable (:constant-flag t) nil [4430 4443])
            ("" type
               (:members 
                  ( ("BITS_PER_BITS_WORD" variable
                       (:constant-flag t
                        :default-value (4481 4491)
                        :type "int")
                        (reparse-symbol enumsubparts) [4460 4491]))                  
                :type "enum")
                nil [4453 4494])
            ("verify" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("SIZE_MAX" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [4669 4684]))                  
                :type "int")
                nil [4661 4717])
            ("printmax_t" type
               (:typedef ("EMACS_INT" type (:type "class") nil nil)
                :type "typedef")
                nil [5143 5172])
            ("uprintmax_t" type
               (:typedef ("EMACS_UINT" type (:type "class") nil nil)
                :type "typedef")
                nil [5173 5204])
            ("pMd" variable (:constant-flag t) nil [5214 5217])
            ("pMu" variable (:constant-flag t) nil [5233 5236])
            ("pD" variable (:constant-flag t) nil [5619 5621])
            ("pD" variable (:constant-flag t) nil [5664 5666])
            ("pD" variable (:constant-flag t) nil [5711 5713])
            ("eassert" variable (:constant-flag t) nil [7017 7024])
            ("eassume" variable (:constant-flag t) nil [7095 7102])
            ("Lisp_Bits" type
               (:members 
                  ( ("VALBITS" variable
                       (:constant-flag t
                        :default-value (8702 8730)
                        :type "int")
                        (reparse-symbol enumsubparts) [8692 8730])
                    ("INTTYPEBITS" variable
                       (:constant-flag t
                        :default-value (8799 8813)
                        :type "int")
                        (reparse-symbol enumsubparts) [8785 8813])
                    ("FIXNUM_BITS" variable
                       (:constant-flag t
                        :default-value (8906 8917)
                        :type "int")
                        (reparse-symbol enumsubparts) [8892 8917]))                  
                :type "enum")
                nil [8465 8922])
            ("VAL_MAX" variable (:constant-flag t) nil [9282 9289])
            ("USE_LSB_TAG" variable (:constant-flag t) nil [9732 9743])
            ("VALMASK" variable (:constant-flag t) nil [9936 9943])
            ("GCALIGNED" variable (:constant-flag t) nil [10334 10343])
            ("lisp_h_XLI" variable (:constant-flag t) nil [11654 11664])
            ("lisp_h_XIL" variable (:constant-flag t) nil [11681 11691])
            ("lisp_h_CHECK_NUMBER" variable (:constant-flag t) nil [11714 11733])
            ("lisp_h_CHECK_SYMBOL" variable (:constant-flag t) nil [11785 11804])
            ("lisp_h_CHECK_TYPE" variable (:constant-flag t) nil [11854 11871])
            ("lisp_h_CONSP" variable (:constant-flag t) nil [11958 11970])
            ("lisp_h_EQ" variable (:constant-flag t) nil [12007 12016])
            ("lisp_h_FLOATP" variable (:constant-flag t) nil [12052 12065])
            ("lisp_h_INTEGERP" variable (:constant-flag t) nil [12103 12118])
            ("lisp_h_MARKERP" variable (:constant-flag t) nil [12184 12198])
            ("lisp_h_MISCP" variable (:constant-flag t) nil [12259 12271])
            ("lisp_h_NILP" variable (:constant-flag t) nil [12308 12319])
            ("lisp_h_SET_SYMBOL_VAL" variable (:constant-flag t) nil [12344 12365])
            ("lisp_h_SYMBOL_CONSTANT_P" variable (:constant-flag t) nil [12458 12482])
            ("lisp_h_SYMBOL_TRAPPED_WRITE_P" variable (:constant-flag t) nil [12545 12574])
            ("lisp_h_SYMBOL_VAL" variable (:constant-flag t) nil [12619 12636])
            ("lisp_h_SYMBOLP" variable (:constant-flag t) nil [12720 12734])
            ("lisp_h_VECTORLIKEP" variable (:constant-flag t) nil [12773 12791])
            ("lisp_h_XCAR" variable (:constant-flag t) nil [12834 12845])
            ("lisp_h_XCDR" variable (:constant-flag t) nil [12872 12883])
            ("lisp_h_XCONS" variable (:constant-flag t) nil [12912 12924])
            ("lisp_h_XHASH" variable (:constant-flag t) nil [13007 13019])
            ("lisp_h_check_cons_list" variable (:constant-flag t) nil [13069 13091])
            ("DEFINE_KEY_OPS_AS_MACROS" variable (:constant-flag t) nil [13988 14012])
            ("INTMASK" variable (:constant-flag t) nil [15777 15784])
            ("case_Lisp_Int" variable (:constant-flag t) nil [15830 15843])
            ("ENUM_BF" variable (:constant-flag t) nil [16210 16217])
            ("Lisp_Object" type
               (:typedef ("EMACS_INT" type (:type "class") nil nil)
                :type "typedef")
                nil [21759 21789])
            ("LISP_INITIALLY" variable (:constant-flag t) nil [21798 21812])
            ("initialized" variable
               (:typemodifiers ("extern")
                :type "bool")
                nil [22562 22586])
            ("i" variable
               (:default-value "XLI (a)"
                :type ("EMACS_UINT" type (:type "class") nil nil))
                nil [23106 23129])
            ("VALBITS" variable (:type "int") nil [23173 23181])
            ("i" variable (:type "int") nil [23561 23563])
            ("gcmarkbit" variable
               (:suffix ":1"
                :type ("bool_bf" type (:type "class") nil nil))
                nil [23984 24006])
            ("redirect" variable
               (:suffix ":3"
                :type ("symbol_redirect" type (:type "enum") nil nil))
                nil [24319 24358])
            ("trapped_write" variable
               (:suffix ":2"
                :type ("symbol_trapped_write" type (:type "enum") nil nil))
                nil [24511 24560])
            ("interned" variable
               (:suffix ":2"
                :type "unsigned int")
                nil [24658 24680])
            ("declared_special" variable
               (:suffix ":1"
                :type ("bool_bf" type (:type "class") nil nil))
                nil [24820 24849])
            ("pinned" variable
               (:suffix ":1"
                :type ("bool_bf" type (:type "class") nil nil))
                nil [24921 24940])
            ("name" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [24990 25007])
            ("val" variable (:type ("" type
                 (:members 
                    ( ("value" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [25160 25178])
                      ("alias" variable
                         (:pointer 1
                          :type ("Lisp_Symbol" type
                               (:prototype t
                                :type "struct")
                                nil nil))
                          (reparse-symbol classsubparts) [25183 25209])
                      ("blv" variable
                         (:pointer 1
                          :type ("Lisp_Buffer_Local_Value" type
                               (:prototype t
                                :type "struct")
                                nil nil))
                          (reparse-symbol classsubparts) [25214 25250])
                      ("fwd" variable
                         (:pointer 1
                          :type ("Lisp_Fwd" type (:type "union") nil nil))
                          (reparse-symbol classsubparts) [25255 25275]))                    
                  :type "union")
                  nil nil)) nil [25148 25284])
            ("function" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [25350 25371])
            ("plist" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [25412 25430])
            ("next" variable
               (:pointer 1
                :type ("Lisp_Symbol" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [25501 25526])
            ("EXFUN" variable (:constant-flag t) nil [25785 25790])
            ("DEFUN_ARGS_MANY" variable (:constant-flag t) nil [25979 25994])
            ("DEFUN_ARGS_UNEVALLED" variable (:constant-flag t) nil [26031 26051])
            ("DEFUN_ARGS_0" variable (:constant-flag t) nil [26074 26086])
            ("DEFUN_ARGS_1" variable (:constant-flag t) nil [26102 26114])
            ("DEFUN_ARGS_2" variable (:constant-flag t) nil [26137 26149])
            ("DEFUN_ARGS_3" variable (:constant-flag t) nil [26185 26197])
            ("DEFUN_ARGS_4" variable (:constant-flag t) nil [26246 26258])
            ("DEFUN_ARGS_5" variable (:constant-flag t) nil [26320 26332])
            ("DEFUN_ARGS_6" variable (:constant-flag t) nil [26413 26425])
            ("DEFUN_ARGS_7" variable (:constant-flag t) nil [26519 26531])
            ("DEFUN_ARGS_8" variable (:constant-flag t) nil [26638 26650])
            ("TAG_PTR" variable (:constant-flag t) nil [27039 27046])
            ("TAG_SYMOFFSET" variable (:constant-flag t) nil [27329 27342])
            ("XLI_BUILTIN_LISPSYM" variable (:constant-flag t) nil [27553 27572])
            ("LISPSYM_INITIALLY" variable (:constant-flag t) nil [27770 27787])
            ("DEFINE_LISP_SYMBOL" variable (:constant-flag t) nil [28031 28049])
            ("SYMBOL_INDEX" variable (:constant-flag t) nil [28262 28274])
            ("DEFINE_NON_NIL_Q_SYMBOL_MACROS" variable (:constant-flag t) nil [28611 28641])
            ("globals.h" include nil nil [28655 28675])
            ("size" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) nil [30285 30300])
            ("i" variable
               (:default-value "(intptr_t) XUNTAG (a, Lisp_Symbol)"
                :type ("intptr_t" type (:type "class") nil nil))
                nil [30513 30561])
            ("p" variable
               (:pointer 1
                :default-value "(char *) lispsym + i"
                :type "void")
                nil [30564 30595])
            ("p" variable (:type "int") nil [30605 30607])
            ("a" variable
               (:default-value "XIL (TAG_SYMOFFSET ((char *) sym - (char *) lispsym))"
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [30684 30754])
            ("a" variable (:type "int") nil [30796 30798])
            ("make_lisp_symbol" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("lispsym" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [30883 30897])
                    ("" variable (:type ("s" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [30898 30900]))                  
                :type "int")
                nil [30864 30901])
            ("CHECK_TYPE" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("SYMBOLP" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("Qsymbolp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("x" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type "int")
                nil [30952 30976])
            ("ARRAY_MARK_FLAG" variable (:constant-flag t) nil [31123 31138])
            ("PSEUDOVECTOR_FLAG" variable (:constant-flag t) nil [31366 31383])
            ("MOST_POSITIVE_FIXNUM" variable (:constant-flag t) nil [33594 33614])
            ("MOST_NEGATIVE_FIXNUM" variable (:constant-flag t) nil [33654 33674])
            ("int0" variable
               (:default-value "Lisp_Int0"
                :type ("EMACS_INT" type (:type "class") nil nil))
                nil [34342 34369])
            ("XIL" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("n" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [34553 34555]))                  
                :type "int")
                nil [34548 34556])
            ("i" variable
               (:default-value "XLI (a)"
                :type ("EMACS_INT" type (:type "class") nil nil))
                nil [34648 34670])
            ("INTTYPEBITS" variable (:type "int") nil [34770 34782])
            ("int0" variable
               (:default-value "Lisp_Int0"
                :type ("EMACS_INT" type (:type "class") nil nil))
                nil [35003 35030])
            ("assume" function
               (:prototype-flag t
                :type "int")
                nil [35103 35120])
            ("n" variable (:type "int") nil [35130 35132])
            ("i" variable
               (:default-value "XLI (a)"
                :type ("EMACS_UINT" type (:type "class") nil nil))
                nil [35257 35280])
            ("XUINT" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("a" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type "int")
                nil [35546 35563])
            ("int0" variable
               (:default-value "Lisp_Int0"
                :type ("EMACS_INT" type (:type "class") nil nil))
                nil [35746 35773])
            ("XIL" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("n" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [35820 35823]))                  
                :type "int")
                nil [35815 35843])
            ("FIXNUM_OVERFLOW_P" variable (:constant-flag t) nil [36065 36082])
            ("upper" variable (:type "int") nil [36306 36312])
            ("a" variable
               (:default-value "XIL (TAG_PTR (type, ptr))"
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [36444 36486])
            ("a" variable (:type "int") nil [36554 36556])
            ("XSETINT" variable (:constant-flag t) nil [36642 36649])
            ("XSETFASTINT" variable (:constant-flag t) nil [36688 36699])
            ("XSETCONS" variable (:constant-flag t) nil [36738 36746])
            ("XSETVECTOR" variable (:constant-flag t) nil [36798 36808])
            ("XSETSTRING" variable (:constant-flag t) nil [36866 36876])
            ("XSETSYMBOL" variable (:constant-flag t) nil [36930 36940])
            ("XSETFLOAT" variable (:constant-flag t) nil [36984 36993])
            ("XSETMISC" variable (:constant-flag t) nil [37046 37054])
            ("XSETPVECTYPE" variable (:constant-flag t) nil [37135 37147])
            ("XSETPVECTYPESIZE" variable (:constant-flag t) nil [37251 37267])
            ("XSETPSEUDOVECTOR" variable (:constant-flag t) nil [37548 37564])
            ("XSETTYPED_PSEUDOVECTOR" variable (:constant-flag t) nil [37732 37754])
            ("XSETWINDOW_CONFIGURATION" variable (:constant-flag t) nil [37942 37966])
            ("XSETPROCESS" variable (:constant-flag t) nil [38038 38049])
            ("XSETWINDOW" variable (:constant-flag t) nil [38104 38114])
            ("XSETTERMINAL" variable (:constant-flag t) nil [38168 38180])
            ("XSETSUBR" variable (:constant-flag t) nil [38236 38244])
            ("XSETCOMPILED" variable (:constant-flag t) nil [38296 38308])
            ("XSETBUFFER" variable (:constant-flag t) nil [38364 38374])
            ("XSETCHAR_TABLE" variable (:constant-flag t) nil [38428 38442])
            ("XSETBOOL_VECTOR" variable (:constant-flag t) nil [38500 38515])
            ("XSETSUB_CHAR_TABLE" variable (:constant-flag t) nil [38574 38592])
            ("XSETTHREAD" variable (:constant-flag t) nil [38654 38664])
            ("XSETMUTEX" variable (:constant-flag t) nil [38718 38727])
            ("XSETCONDVAR" variable (:constant-flag t) nil [38780 38791])
            ("XUNTAG" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("a" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [39171 39173])
                    ("" variable (:type ("Lisp_Int0" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [39174 39184]))                  
                :type "int")
                nil [39163 39185])
            ("a" variable
               (:default-value "XIL (TAG_PTR (Lisp_Int0, p))"
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [39243 39288])
            ("a" variable (:type "int") nil [39344 39346])
            ("INTERVAL" type
               (:typedef ("interval" type
                     (:prototype t
                      :type "struct")
                      nil nil)
                :pointer 1
                :type "typedef")
                nil [39389 39423])
            ("car" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [39494 39510])
            ("u" variable (:type ("" type
                 (:members 
                    ( ("cdr" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [39570 39586])
                      ("chain" variable
                         (:pointer 1
                          :type ("Lisp_Cons" type
                               (:prototype t
                                :type "struct")
                                nil nil))
                          (reparse-symbol classsubparts) [39644 39668]))                    
                  :type "union")
                  nil nil)) nil [39516 39677])
            ("EQ" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("x" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("Qnil" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type "int")
                nil [39730 39746])
            ("CHECK_TYPE" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("CONSP" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [39873 39882])
                    ("" variable (:type ("Qconsp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [39884 39891])
                    ("" variable (:type ("x" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [39892 39894]))                  
                :type "int")
                nil [39861 39895])
            ("car" variable (:type "int") nil [40508 40512])
            ("cdr" variable (:type "int") nil [40587 40591])
            ("car" variable (:type "int") nil [40684 40700])
            ("cdr" variable (:type "int") nil [40757 40773])
            ("n" variable (:type "int") nil [41017 41019])
            ("n" variable (:type "int") nil [41094 41096])
            ("XCAR" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("c" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [41240 41242]))                  
                :type "int")
                nil [41234 41243])
            ("wrong_type_argument" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("Qlistp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [41286 41293])
                    ("" variable (:type ("c" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [41294 41296]))                  
                :type "int")
                nil [41265 41297])
            ("Qnil" variable (:type "int") nil [41307 41312])
            ("XCDR" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("c" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [41390 41392]))                  
                :type "int")
                nil [41384 41393])
            ("wrong_type_argument" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("Qlistp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [41436 41443])
                    ("" variable (:type ("c" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [41444 41446]))                  
                :type "int")
                nil [41415 41447])
            ("Qnil" variable (:type "int") nil [41457 41462])
            ("Qnil" variable (:type "int") nil [41609 41614])
            ("Qnil" variable (:type "int") nil [41695 41700])
            ("size" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) nil [41819 41834])
            ("size_byte" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) nil [41839 41859])
            ("intervals" variable (:type ("INTERVAL" type (:type "class") nil nil)) nil [41864 41883])
            ("data" variable
               (:pointer 1
                :type "unsigned char")
                nil [41928 41948])
            ("Lisp_String" variable (:type "int") nil [42015 42027])
            ("CHECK_TYPE" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("STRINGP" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [42088 42099])
                    ("" variable (:type ("Qstringp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [42101 42110])
                    ("" variable (:type ("x" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [42111 42113]))                  
                :type "int")
                nil [42076 42114])
            ("XUNTAG" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("a" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [42214 42216])
                    ("" variable (:type ("Lisp_String" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [42217 42229]))                  
                :type "int")
                nil [42206 42230])
            ("size_byte" variable (:type "int") nil [42354 42364])
            ("STRING_BYTES_BOUND" variable (:constant-flag t) nil [43103 43121])
            ("STRING_SET_UNIBYTE" variable (:constant-flag t) nil [43247 43265])
            ("STRING_SET_MULTIBYTE" variable (:constant-flag t) nil [43555 43575])
            ("data" variable (:type "int") nil [43911 43916])
            ("SDATA" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [44030 44037]))                  
                :type "int")
                nil [44023 44038])
            ("SDATA" function
               (:arguments 
                  ( ("" variable (:type ("string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [44123 44130]))                  
                :type "int")
                nil [44116 44137])
            ("SDATA" function
               (:arguments 
                  ( ("" variable (:type ("string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [44226 44233]))                  
                :type "int")
                nil [44219 44240])
            ("nchars" variable
               (:default-value "XSTRING (string)->size;"
                :type ("ptrdiff_t" type (:type "class") nil nil))
                nil [44299 44341])
            ("assume" function
               (:prototype-flag t
                :type "int")
                nil [44344 44366])
            ("nchars" variable (:type "int") nil [44376 44383])
            ("size_byte" variable (:type "int") nil [44660 44670])
            ("assume" function
               (:prototype-flag t
                :type "int")
                nil [44680 44702])
            ("nbytes" variable (:type "int") nil [44712 44719])
            ("STRING_BYTES" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("XSTRING" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [44793 44809]))                  
                :type "int")
                nil [44779 44811])
            ("size" variable
               (:default-value "newsize"
                :type "int")
                nil [45131 45146])
            ("header" variable (:type ("vectorlike_header" type
                 (:prototype t
                  :type "struct")
                  nil nil)) nil [45250 45282])
            ("contents" variable
               (:dereference 1
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [45287 45331])
            ("XUNTAG" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("a" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [45518 45520])
                    ("" variable (:type ("Lisp_Vectorlike" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [45521 45537]))                  
                :type "int")
                nil [45510 45538])
            ("size" variable
               (:default-value "XVECTOR (array)->header.size;"
                :type ("ptrdiff_t" type (:type "class") nil nil))
                nil [45589 45635])
            ("assume" function
               (:prototype-flag t
                :type "int")
                nil [45638 45658])
            ("size" variable (:type "int") nil [45668 45673])
            ("PSEUDOVECTOR_SIZE_MASK" variable (:type "int") nil [45740 45765])
            ("CHECK_TYPE" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("VECTORP" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [45930 45941])
                    ("" variable (:type ("Qvectorp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [45943 45952])
                    ("" variable (:type ("x" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [45953 45955]))                  
                :type "int")
                nil [45918 45956])
            ("size" variable
               (:default-value "v->header.size;"
                :type ("ptrdiff_t" type (:type "class") nil nil))
                nil [46105 46137])
            ("false" variable (:type "int") nil [46776 46782])
            ("header" variable (:type ("vectorlike_header" type
                 (:prototype t
                  :type "struct")
                  nil nil)) nil [47218 47250])
            ("size" variable (:type ("EMACS_INT" type (:type "class") nil nil)) nil [47292 47307])
            ("data" variable
               (:dereference 1
                :type ("bits_word" type (:type "class") nil nil))
                nil [47525 47563])
            ("assume" function
               (:prototype-flag t
                :type "int")
                nil [47976 48048])
            ("BITS_PER_BITS_WORD" variable (:type "int") nil [48092 48111])
            ("assume" function
               (:prototype-flag t
                :type "int")
                nil [48171 48243])
            ("BOOL_VECTOR_BITS_PER_CHAR" variable (:type "int") nil [48294 48320])
            ("PSEUDOVECTORP" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("a" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [48392 48394])
                    ("" variable (:type ("PVEC_BOOL_VECTOR" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [48395 48412]))                  
                :type "int")
                nil [48377 48413])
            ("CHECK_TYPE" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("BOOL_VECTOR_P" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [48479 48496])
                    ("" variable (:type ("Qbool_vector_p" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [48498 48513])
                    ("" variable (:type ("x" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [48514 48516]))                  
                :type "int")
                nil [48467 48517])
            ("XUNTAG" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("a" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [48633 48635])
                    ("" variable (:type ("Lisp_Vectorlike" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [48636 48652]))                  
                :type "int")
                nil [48625 48653])
            ("size" variable
               (:default-value "XBOOL_VECTOR (a)->size;"
                :type ("EMACS_INT" type (:type "class") nil nil))
                nil [48711 48751])
            ("assume" function
               (:prototype-flag t
                :type "int")
                nil [48754 48774])
            ("size" variable (:type "int") nil [48784 48789])
            ("data" variable (:type "int") nil [48874 48879])
            ("bool_vector_data" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("a" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [48992 48994]))                  
                :type "int")
                nil [48974 48995])
            ("assume" function
               (:prototype-flag t
                :type "int")
                nil [49099 49144])
            ("Qnil" variable (:type "int") nil [49376 49381])
            ("addr" variable
               (:pointer 1
                :type "unsigned char")
                nil [49484 49504])
            ("assume" function
               (:prototype-flag t
                :type "int")
                nil [49508 49553])
            ("bool_vector_uchar_data" function
               (:arguments 
                  ( ("" variable (:type ("a" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [49588 49590]))                  
                :type "int")
                nil [49564 49621])
            ("contents" variable
               (:dereference 1
                :type "int")
                nil [49887 49901])
            ("contents" variable
               (:dereference 1
                :type "int")
                nil [50001 50015])
            ("PTRDIFF_MIN" variable (:type "int") nil [50176 50192])
            ("contents" variable
               (:dereference 1
                :default-value "val"
                :type "int")
                nil [50331 50351])
            ("contents" variable
               (:dereference 1
                :default-value "val"
                :type "int")
                nil [50636 50656])
            ("verify" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("NIL_IS_ZERO" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [51145 51157]))                  
                :type "int")
                nil [51137 51158])
            ("memset" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("p" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [51215 51217])
                    ("" variable (:type ("nbytes" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [51221 51228]))                  
                :type "int")
                nil [51207 51229])
            ("VECSIZE" variable (:constant-flag t) nil [51377 51384])
            ("PSEUDOVECSIZE" variable (:constant-flag t) nil [51662 51675])
            ("UNSIGNED_CMP" variable (:constant-flag t) nil [52095 52107])
            ("ASCII_CHAR_P" variable (:constant-flag t) nil [52349 52361])
            ("header" variable (:type ("vectorlike_header" type
                 (:prototype t
                  :type "struct")
                  nil nil)) nil [53539 53571])
            ("defalt" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [53689 53708])
            ("parent" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [53891 53910])
            ("purpose" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [54009 54029])
            ("ascii" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [54175 54193])
            ("contents" variable
               (:dereference 1
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [54199 54248])
            ("extras" variable
               (:dereference 1
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [54310 54352])
            ("PSEUDOVECTORP" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("a" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [54426 54428])
                    ("" variable (:type ("PVEC_CHAR_TABLE" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [54429 54445]))                  
                :type "int")
                nil [54411 54446])
            ("XUNTAG" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("a" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [54559 54561])
                    ("" variable (:type ("Lisp_Vectorlike" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [54562 54578]))                  
                :type "int")
                nil [54551 54579])
            ("header" variable (:type ("vectorlike_header" type
                 (:prototype t
                  :type "struct")
                  nil nil)) nil [54753 54785])
            ("depth" variable (:type "int") nil [55176 55186])
            ("min_char" variable (:type "int") nil [55252 55265])
            ("contents" variable
               (:dereference 1
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [55327 55371])
            ("PSEUDOVECTORP" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("a" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [55449 55451])
                    ("" variable (:type ("PVEC_SUB_CHAR_TABLE" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [55452 55472]))                  
                :type "int")
                nil [55434 55473])
            ("XUNTAG" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("a" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [55598 55600])
                    ("" variable (:type ("Lisp_Vectorlike" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [55601 55617]))                  
                :type "int")
                nil [55590 55618])
            ("tbl" variable
               (:pointer 1
                :default-value "NULL"
                :type ("Lisp_Char_Table" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [55698 55733])
            ("val" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [55736 55752])
            ("val" variable (:type "int") nil [56044 56048])
            ("set_sub_char_table_contents" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("XCHAR_TABLE" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [56642 56658])
                    ("" variable (:type ("ascii" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [56660 56666])
                    ("" variable (:type ("idx" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [56667 56671])
                    ("" variable (:type ("val" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [56672 56676]))                  
                :type "int")
                nil [56613 56677])
            ("char_table_set" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("ct" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [56705 56708])
                    ("" variable (:type ("idx" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [56709 56713])
                    ("" variable (:type ("val" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [56714 56718]))                  
                :type "int")
                nil [56689 56719])
            ("header" variable (:type ("vectorlike_header" type
                 (:prototype t
                  :type "struct")
                  nil nil)) nil [56886 56918])
            ("function" variable (:type ("" type
                 (:members 
                    ( ("a0" function
                         (:prototype-flag t
                          :function-pointer t
                          :arguments 
                            ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [56956 56961]))                            
                          :type ("Lisp_Object" type (:type "class") nil nil))
                          (reparse-symbol classsubparts) [56937 56962])
                      ("a1" function
                         (:prototype-flag t
                          :function-pointer t
                          :arguments 
                            ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [56988 57000]))                            
                          :type ("Lisp_Object" type (:type "class") nil nil))
                          (reparse-symbol classsubparts) [56969 57001])
                      ("a2" function
                         (:prototype-flag t
                          :function-pointer t
                          :arguments 
                            ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [57027 57039])
                              ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [57040 57052]))                            
                          :type ("Lisp_Object" type (:type "class") nil nil))
                          (reparse-symbol classsubparts) [57008 57053])
                      ("a3" function
                         (:prototype-flag t
                          :function-pointer t
                          :arguments 
                            ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [57079 57091])
                              ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [57092 57104])
                              ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [57105 57117]))                            
                          :type ("Lisp_Object" type (:type "class") nil nil))
                          (reparse-symbol classsubparts) [57060 57118])
                      ("a4" function
                         (:prototype-flag t
                          :function-pointer t
                          :arguments 
                            ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [57144 57156])
                              ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [57157 57169])
                              ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [57170 57182])
                              ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [57183 57195]))                            
                          :type ("Lisp_Object" type (:type "class") nil nil))
                          (reparse-symbol classsubparts) [57125 57196])
                      ("a5" function
                         (:prototype-flag t
                          :function-pointer t
                          :arguments 
                            ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [57222 57234])
                              ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [57235 57247])
                              ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [57248 57260])
                              ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [57261 57273])
                              ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [57274 57286]))                            
                          :type ("Lisp_Object" type (:type "class") nil nil))
                          (reparse-symbol classsubparts) [57203 57287])
                      ("a6" function
                         (:prototype-flag t
                          :function-pointer t
                          :arguments 
                            ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [57313 57325])
                              ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [57326 57338])
                              ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [57339 57351])
                              ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [57352 57364])
                              ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [57365 57377])
                              ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [57378 57390]))                            
                          :type ("Lisp_Object" type (:type "class") nil nil))
                          (reparse-symbol classsubparts) [57294 57391])
                      ("a7" function
                         (:prototype-flag t
                          :function-pointer t
                          :arguments 
                            ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [57417 57429])
                              ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [57430 57442])
                              ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [57443 57455])
                              ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [57456 57468])
                              ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [57469 57481])
                              ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [57482 57494])
                              ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [57495 57507]))                            
                          :type ("Lisp_Object" type (:type "class") nil nil))
                          (reparse-symbol classsubparts) [57398 57508])
                      ("a8" function
                         (:prototype-flag t
                          :function-pointer t
                          :arguments 
                            ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [57534 57546])
                              ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [57547 57559])
                              ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [57560 57572])
                              ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [57573 57585])
                              ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [57586 57598])
                              ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [57599 57611])
                              ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [57612 57624])
                              ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [57625 57637]))                            
                          :type ("Lisp_Object" type (:type "class") nil nil))
                          (reparse-symbol classsubparts) [57515 57638])
                      ("aUNEVALLED" function
                         (:prototype-flag t
                          :function-pointer t
                          :arguments 
                            ( ("args" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [57672 57689]))                            
                          :type ("Lisp_Object" type (:type "class") nil nil))
                          (reparse-symbol classsubparts) [57645 57690])
                      ("aMANY" function
                         (:prototype-flag t
                          :function-pointer t
                          :arguments 
                            ( ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [57719 57729])
                              ("" variable
                                 (:pointer 1
                                  :type ("Lisp_Object" type (:type "class") nil nil))
                                  (reparse-symbol arg-sub-list) [57730 57744]))                            
                          :type ("Lisp_Object" type (:type "class") nil nil))
                          (reparse-symbol classsubparts) [57697 57745]))                    
                  :type "union")
                  nil nil)) nil [56923 57761])
            ("min_args" variable (:type "short") nil [57766 57791])
            ("max_args" variable (:type "short") nil [57766 57791])
            ("symbol_name" variable
               (:pointer 1
                :constant-flag t
                :type "char")
                nil [57796 57820])
            ("intspec" variable
               (:pointer 1
                :constant-flag t
                :type "char")
                nil [57825 57845])
            ("doc" variable (:type ("EMACS_INT" type (:type "class") nil nil)) nil [57850 57864])
            ("PSEUDOVECTORP" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("a" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [57931 57933])
                    ("" variable (:type ("PVEC_SUBR" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [57934 57944]))                  
                :type "int")
                nil [57916 57945])
            ("XUNTAG" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("a" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [58039 58041])
                    ("" variable (:type ("Lisp_Vectorlike" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [58042 58058]))                  
                :type "int")
                nil [58031 58059])
            ("thread.h" include nil nil [59018 59037])
            ("assume" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("sym" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type "int")
                nil [59406 59467])
            ("alias" variable (:type "int") nil [59486 59492])
            ("assume" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("sym" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type "int")
                nil [59576 59636])
            ("blv" variable (:type "int") nil [59655 59659])
            ("assume" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("sym" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type "int")
                nil [59727 59787])
            ("fwd" variable (:type "int") nil [59806 59810])
            ("assume" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("sym" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type "int")
                nil [60005 60053])
            ("alias" variable
               (:default-value "v"
                :type "int")
                nil [60065 60075])
            ("assume" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("sym" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type "int")
                nil [60170 60219])
            ("blv" variable
               (:default-value "v"
                :type "int")
                nil [60231 60239])
            ("assume" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("sym" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type "int")
                nil [60318 60367])
            ("fwd" variable
               (:default-value "v"
                :type "int")
                nil [60379 60387])
            ("name" variable (:type "int") nil [60466 60471])
            ("SYMBOL_UNINTERNED" variable (:type "int") nil [60613 60631])
            ("SYMBOL_INTERNED_IN_INITIAL_OBARRAY" variable (:type "int") nil [60801 60836])
            ("DEFSYM" variable (:constant-flag t) nil [61543 61549])
            ("name" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [61867 61884])
            ("user_hash_function" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [61934 61965])
            ("user_cmp_function" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [62025 62055])
            ("cmpfn" function
               (:prototype-flag t
                :function-pointer t
                :arguments 
                  ( ("t" variable
                       (:pointer 1
                        :type ("hash_table_test" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [62115 62141])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [62142 62154])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [62155 62167]))                  
                :type "bool")
                nil [62100 62168])
            ("hashfn" function
               (:prototype-flag t
                :function-pointer t
                :arguments 
                  ( ("t" variable
                       (:pointer 1
                        :type ("hash_table_test" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [62236 62262])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [62263 62275]))                  
                :type ("EMACS_UINT" type (:type "class") nil nil))
                nil [62214 62276])
            ("header" variable (:type ("vectorlike_header" type
                 (:prototype t
                  :type "struct")
                  nil nil)) nil [62377 62409])
            ("weak" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [62511 62528])
            ("hash" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [62630 62647])
            ("next" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [62895 62912])
            ("index" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [63159 63177])
            ("count" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) nil [63429 63445])
            ("next_free" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) nil [63513 63533])
            ("pure" variable (:type "bool") nil [63629 63639])
            ("rehash_threshold" variable (:type "float") nil [63729 63752])
            ("rehash_size" variable (:type "float") nil [64088 64106])
            ("key_and_value" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [64289 64315])
            ("test" variable (:type ("hash_table_test" type
                 (:prototype t
                  :type "struct")
                  nil nil)) nil [64363 64391])
            ("next_weak" variable
               (:pointer 1
                :type ("Lisp_Hash_Table" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [64506 64540])
            ("PSEUDOVECTORP" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("a" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [64613 64615])
                    ("" variable (:type ("PVEC_HASH_TABLE" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [64616 64632]))                  
                :type "int")
                nil [64598 64633])
            ("XUNTAG" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("a" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [64746 64748])
                    ("" variable (:type ("Lisp_Vectorlike" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [64749 64765]))                  
                :type "int")
                nil [64738 64766])
            ("XSET_HASH_TABLE" variable (:constant-flag t) nil [64778 64793])
            ("AREF" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("h" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [65006 65008])
                    ("" variable (:type ("key_and_value" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [65009 65023])
                    ("" variable (:type ("idx" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [65028 65032]))                  
                :type "int")
                nil [65000 65033])
            ("AREF" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("h" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [65188 65190])
                    ("" variable (:type ("key_and_value" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [65191 65205])
                    ("" variable (:type ("idx" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [65210 65215]))                  
                :type "int")
                nil [65182 65219])
            ("AREF" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("h" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [65382 65384])
                    ("" variable (:type ("hash" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [65385 65390])
                    ("" variable (:type ("idx" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [65391 65395]))                  
                :type "int")
                nil [65376 65396])
            ("ASIZE" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("h" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [65521 65523])
                    ("" variable (:type ("next" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [65524 65529]))                  
                :type "int")
                nil [65514 65530])
            ("DEFAULT_REHASH_THRESHOLD" variable
               (:typemodifiers ("static")
                :default-value "0.8125"
                :type "float")
                nil [65809 65862])
            ("DEFAULT_REHASH_SIZE" variable
               (:typemodifiers ("static")
                :default-value "1.5 - 1"
                :type "float")
                nil [65943 65992])
            ("y" variable (:type "int") nil [66209 66211])
            ("type" variable
               (:suffix ":16"
                :type ("Lisp_Misc_Type" type (:type "enum") nil nil))
                nil [66509 66544])
            ("gcmarkbit" variable
               (:suffix ":1"
                :type ("bool_bf" type (:type "class") nil nil))
                nil [66570 66592])
            ("spacer" variable
               (:suffix ":15"
                :type "unsigned int")
                nil [66595 66616])
            ("XUNTAG" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("a" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [66786 66788])
                    ("" variable (:type ("Lisp_Misc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [66789 66799]))                  
                :type "int")
                nil [66778 66800])
            ("type" variable (:type "int") nil [66882 66887])
            ("type" variable
               (:suffix ":16"
                :type ("Lisp_Misc_Type" type (:type "enum") nil nil))
                nil [66914 66949])
            ("gcmarkbit" variable
               (:suffix ":1"
                :type ("bool_bf" type (:type "class") nil nil))
                nil [66978 67000])
            ("spacer" variable
               (:suffix ":13"
                :type "unsigned int")
                nil [67003 67024])
            ("need_adjustment" variable
               (:suffix ":1"
                :type ("bool_bf" type (:type "class") nil nil))
                nil [67195 67223])
            ("insertion_type" variable
               (:suffix ":1"
                :type ("bool_bf" type (:type "class") nil nil))
                nil [67336 67363])
            ("buffer" variable
               (:pointer 1
                :type ("buffer" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [67929 67951])
            ("next" variable
               (:pointer 1
                :type ("Lisp_Marker" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [68280 68305])
            ("charpos" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) nil [68368 68386])
            ("bytepos" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) nil [68626 68644])
            ("type" variable
               (:suffix ":16"
                :type ("Lisp_Misc_Type" type (:type "enum") nil nil))
                nil [69264 69299])
            ("gcmarkbit" variable
               (:suffix ":1"
                :type ("bool_bf" type (:type "class") nil nil))
                nil [69330 69352])
            ("spacer" variable
               (:suffix ":15"
                :type "unsigned int")
                nil [69357 69378])
            ("next" variable
               (:pointer 1
                :type ("Lisp_Overlay" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [69383 69409])
            ("start" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [69414 69432])
            ("end" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [69437 69453])
            ("plist" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [69458 69476])
            ("type" variable
               (:suffix ":16"
                :type ("Lisp_Misc_Type" type (:type "enum") nil nil))
                nil [72015 72050])
            ("gcmarkbit" variable
               (:suffix ":1"
                :type ("bool_bf" type (:type "class") nil nil))
                nil [72084 72106])
            ("SAVE_TYPE_BITS" variable (:type "int") nil [72638 72653])
            ("data" variable
               (:dereference 1
                :type ("" type
                     (:members 
                        ( ("pointer" variable
                             (:pointer 1
                              :type "void")
                              (reparse-symbol classsubparts) [72672 72686])
                          ("funcpointer" variable (:type ("voidfuncptr" type (:type "class") nil nil)) (reparse-symbol classsubparts) [72693 72717])
                          ("integer" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [72724 72742])
                          ("object" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [72749 72768]))                        
                      :type "union")
                      nil nil))
                nil [72658 72798])
            ("Lisp_Misc_Save_Value" variable (:type "int") nil [72886 72907])
            ("XUNTAG" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("a" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [73019 73021])
                    ("" variable (:type ("Lisp_Misc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [73022 73032]))                  
                :type "int")
                nil [73011 73033])
            ("pointer" variable (:type "int") nil [73464 73472])
            ("pointer" variable
               (:default-value "val"
                :type "int")
                nil [73633 73647])
            ("funcpointer" variable (:type "int") nil [73816 73828])
            ("integer" variable (:type "int") nil [74028 74036])
            ("integer" variable
               (:default-value "val"
                :type "int")
                nil [74201 74215])
            ("object" variable (:type "int") nil [74409 74416])
            ("base" variable (:type ("Lisp_Misc_Any" type
                 (:prototype t
                  :type "struct")
                  nil nil)) nil [74694 74720])
            ("prev" variable
               (:pointer 1
                :type ("Lisp_Finalizer" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [74782 74810])
            ("next" variable
               (:pointer 1
                :type ("Lisp_Finalizer" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [74815 74843])
            ("function" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [75052 75073])
            ("Lisp_Misc_Finalizer" variable (:type "int") nil [75160 75180])
            ("XUNTAG" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("a" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [75289 75291])
                    ("" variable (:type ("Lisp_Misc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [75292 75302]))                  
                :type "int")
                nil [75281 75303])
            ("type" variable
               (:suffix ":16"
                :type ("Lisp_Misc_Type" type (:type "enum") nil nil))
                nil [75391 75426])
            ("gcmarkbit" variable
               (:suffix ":1"
                :type ("bool_bf" type (:type "class") nil nil))
                nil [75454 75476])
            ("spacer" variable
               (:suffix ":15"
                :type "unsigned int")
                nil [75481 75502])
            ("chain" variable
               (:pointer 1
                :type ("Lisp_Misc" type (:type "union") nil nil))
                nil [75507 75530])
            ("u_any" variable (:type ("Lisp_Misc_Any" type
                 (:prototype t
                  :type "struct")
                  nil nil)) nil [75691 75718])
            ("u_free" variable (:type ("Lisp_Free" type
                 (:prototype t
                  :type "struct")
                  nil nil)) nil [75762 75786])
            ("u_marker" variable (:type ("Lisp_Marker" type
                 (:prototype t
                  :type "struct")
                  nil nil)) nil [75791 75819])
            ("u_overlay" variable (:type ("Lisp_Overlay" type
                 (:prototype t
                  :type "struct")
                  nil nil)) nil [75824 75854])
            ("u_save_value" variable (:type ("Lisp_Save_Value" type
                 (:prototype t
                  :type "struct")
                  nil nil)) nil [75859 75895])
            ("u_finalizer" variable (:type ("Lisp_Finalizer" type
                 (:prototype t
                  :type "struct")
                  nil nil)) nil [75900 75934])
            ("XUNTAG" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("a" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [76071 76073])
                    ("" variable (:type ("Lisp_Misc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [76074 76084]))                  
                :type "int")
                nil [76063 76085])
            ("XUNTAG" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("a" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [76257 76259])
                    ("" variable (:type ("Lisp_Misc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [76260 76270]))                  
                :type "int")
                nil [76249 76271])
            ("Lisp_Misc_Overlay" variable (:type "int") nil [76353 76371])
            ("XUNTAG" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("a" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [76474 76476])
                    ("" variable (:type ("Lisp_Misc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [76477 76487]))                  
                :type "int")
                nil [76466 76488])
            ("type" variable (:type ("Lisp_Fwd_Type" type (:type "enum") nil nil)) nil [76958 76982])
            ("intvar" variable
               (:pointer 1
                :type ("EMACS_INT" type (:type "class") nil nil))
                nil [77008 77026])
            ("type" variable (:type ("Lisp_Fwd_Type" type (:type "enum") nil nil)) nil [77253 77277])
            ("boolvar" variable
               (:pointer 1
                :type "bool")
                nil [77304 77318])
            ("type" variable (:type ("Lisp_Fwd_Type" type (:type "enum") nil nil)) nil [77543 77567])
            ("objvar" variable
               (:pointer 1
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [77593 77613])
            ("type" variable (:type ("Lisp_Fwd_Type" type (:type "enum") nil nil)) nil [77782 77806])
            ("offset" variable (:type "int") nil [77839 77850])
            ("predicate" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [77931 77953])
            ("local_if_set" variable
               (:suffix ":1"
                :type ("bool_bf" type (:type "class") nil nil))
                nil [79418 79443])
            ("found" variable
               (:suffix ":1"
                :type ("bool_bf" type (:type "class") nil nil))
                nil [79561 79579])
            ("fwd" variable
               (:pointer 1
                :type ("Lisp_Fwd" type (:type "union") nil nil))
                nil [79663 79683])
            ("where" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [79806 79824])
            ("defcell" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [79932 79952])
            ("valcell" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [80236 80256])
            ("type" variable (:type ("Lisp_Fwd_Type" type (:type "enum") nil nil)) nil [80381 80405])
            ("offset" variable (:type "int") nil [80438 80449])
            ("u_intfwd" variable (:type ("Lisp_Intfwd" type
                 (:prototype t
                  :type "struct")
                  nil nil)) nil [80479 80507])
            ("u_boolfwd" variable (:type ("Lisp_Boolfwd" type
                 (:prototype t
                  :type "struct")
                  nil nil)) nil [80512 80542])
            ("u_objfwd" variable (:type ("Lisp_Objfwd" type
                 (:prototype t
                  :type "struct")
                  nil nil)) nil [80547 80575])
            ("u_buffer_objfwd" variable (:type ("Lisp_Buffer_Objfwd" type
                 (:prototype t
                  :type "struct")
                  nil nil)) nil [80580 80622])
            ("u_kboard_objfwd" variable (:type ("Lisp_Kboard_Objfwd" type
                 (:prototype t
                  :type "struct")
                  nil nil)) nil [80627 80669])
            ("type" variable (:type "int") nil [80754 80759])
            ("Lisp_Fwd_Buffer_Obj" variable (:type "int") nil [80837 80857])
            ("u_buffer_objfwd" variable (:type "int") nil [80978 80994])
            ("u" variable (:type ("" type
                 (:members 
                    ( ("data" variable (:type "double") (reparse-symbol classsubparts) [81076 81088])
                      ("chain" variable
                         (:pointer 1
                          :type ("Lisp_Float" type
                               (:prototype t
                                :type "struct")
                                nil nil))
                          (reparse-symbol classsubparts) [81095 81120]))                    
                  :type "union")
                  nil nil)) nil [81058 81129])
            ("XUNTAG" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("a" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [81299 81301])
                    ("" variable (:type ("Lisp_Float" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [81302 81313]))                  
                :type "int")
                nil [81291 81314])
            ("data" variable (:type "int") nil [81385 81390])
            ("_UCHAR_T" variable (:constant-flag t) nil [82172 82180])
            ("UCHAR" type
               (:typedef ("unsigned char")
                :type "typedef")
                nil [82181 82209])
            ("FLOATP" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("x" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [83236 83238]))                  
                :type "int")
                nil [83228 83239])
            ("XINT" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("x" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [83316 83318]))                  
                :type "int")
                nil [83310 83319])
            ("hi" variable (:type "int") nil [83450 83453])
            ("TYPE_RANGED_INTEGERP" variable (:constant-flag t) nil [83465 83485])
            ("EQ" variable (:type "int") nil [83702 83729])
            ("PSEUDOVECTORP" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("a" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [83856 83858])
                    ("" variable (:type ("PVEC_WINDOW_CONFIGURATION" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [83859 83885]))                  
                :type "int")
                nil [83841 83886])
            ("PSEUDOVECTORP" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("a" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [83954 83956])
                    ("" variable (:type ("PVEC_COMPILED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [83957 83971]))                  
                :type "int")
                nil [83939 83972])
            ("PSEUDOVECTORP" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("a" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [84037 84039])
                    ("" variable (:type ("PVEC_FRAME" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [84040 84051]))                  
                :type "int")
                nil [84022 84052])
            ("PSEUDOVECTORP" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("a" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [84118 84120])
                    ("" variable (:type ("PVEC_RECORD" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [84121 84133]))                  
                :type "int")
                nil [84103 84134])
            ("CHECK_TYPE" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("RECORDP" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [84195 84206])
                    ("" variable (:type ("Qrecordp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [84208 84217])
                    ("" variable (:type ("x" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [84218 84220]))                  
                :type "int")
                nil [84183 84221])
            ("EQ" variable (:type "int") nil [84319 84343])
            ("BOOL_VECTOR_P" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("x" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [84478 84480]))                  
                :type "int")
                nil [84463 84481])
            ("CHECK_TYPE" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("CONSP" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [84541 84550])
                    ("" variable (:type ("NILP" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [84554 84562])
                    ("" variable (:type ("Qlistp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [84564 84571])
                    ("" variable (:type ("x" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [84572 84574]))                  
                :type "int")
                nil [84529 84575])
            ("CHECK_TYPE" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("NILP" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [84653 84661])
                    ("" variable (:type ("Qlistp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [84663 84670])
                    ("" variable (:type ("y" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [84671 84673]))                  
                :type "int")
                nil [84641 84674])
            ("CHECK_TYPE" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("INTEGERP" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("Qintegerp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("x" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type "int")
                nil [84725 84749])
            ("CHECK_TYPE" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("STRINGP" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [84814 84832])
                    ("" variable (:type ("Qstringp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [84834 84843])
                    ("" variable (:type ("XCAR" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [84844 84852]))                  
                :type "int")
                nil [84802 84854])
            ("ASIZE" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("x" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [85021 85023]))                  
                :type "int")
                nil [85014 85024])
            ("SCHARS" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("x" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [85063 85065]))                  
                :type "int")
                nil [85055 85066])
            ("wrong_type_argument" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("Qarrayp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [85090 85098])
                    ("" variable (:type ("x" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [85099 85101]))                  
                :type "int")
                nil [85069 85102])
            ("CHECK_TYPE" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("ARRAYP" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [85184 85194])
                    ("" variable (:type ("predicate" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [85196 85206])
                    ("" variable (:type ("x" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [85207 85209]))                  
                :type "int")
                nil [85172 85210])
            ("CHECK_TYPE" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("NATNUMP" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [85270 85281])
                    ("" variable (:type ("Qwholenump" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [85283 85294])
                    ("" variable (:type ("x" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [85295 85297]))                  
                :type "int")
                nil [85258 85298])
            ("CHECK_RANGED_INTEGER" variable (:constant-flag t) nil [85310 85330])
            ("CHECK_TYPE_RANGED_INTEGER" variable (:constant-flag t) nil [85693 85718])
            ("CHECK_NUMBER_COERCE_MARKER" variable (:constant-flag t) nil [85963 85989])
            ("XINT" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("n" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [86282 86284]))                  
                :type "int")
                nil [86276 86285])
            ("CHECK_TYPE" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("NUMBERP" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [86355 86366])
                    ("" variable (:type ("Qnumberp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [86368 86377])
                    ("" variable (:type ("x" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [86378 86380]))                  
                :type "int")
                nil [86343 86381])
            ("CHECK_NUMBER_OR_FLOAT_COERCE_MARKER" variable (:constant-flag t) nil [86393 86428])
            ("tmp" variable
               (:default-value "XCAR (x)"
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [86819 86846])
            ("CHECK_NUMBER" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("tmp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [86863 86867]))                  
                :type "int")
                nil [86849 86868])
            ("XSETCAR" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("x" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [86880 86882])
                    ("" variable (:type ("tmp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [86883 86887]))                  
                :type "int")
                nil [86871 86888])
            ("tmp" variable
               (:default-value "XCDR (x)"
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [86941 86968])
            ("CHECK_NUMBER" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("tmp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [86985 86989]))                  
                :type "int")
                nil [86971 86990])
            ("XSETCDR" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("x" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [87002 87004])
                    ("" variable (:type ("tmp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [87005 87009]))                  
                :type "int")
                nil [86993 87010])
            ("DEFUN" variable (:constant-flag t) nil [88975 88980])
            ("CALLMANY" variable (:constant-flag t) nil [89550 89558])
            ("CALLN" variable (:constant-flag t) nil [89903 89908])
            ("DEFVAR_LISP" variable (:constant-flag t) nil [91108 91119])
            ("DEFVAR_LISP_NOPRO" variable (:constant-flag t) nil [91280 91297])
            ("DEFVAR_BOOL" variable (:constant-flag t) nil [91462 91473])
            ("DEFVAR_INT" variable (:constant-flag t) nil [91635 91645])
            ("DEFVAR_KBOARD" variable (:constant-flag t) nil [91806 91819])
            ("sys_jmp_buf" type
               (:typedef ("jmp_buf" type (:type "class") nil nil)
                :type "typedef")
                nil [92489 92517])
            ("sys_setjmp" variable (:constant-flag t) nil [92527 92537])
            ("sys_longjmp" variable (:constant-flag t) nil [92561 92572])
            ("CHAR_BIT" variable (:type "int") nil [94219 94228])
            ("unwind" variable (:type ("" type
                 (:members 
                    ( ("CHAR_BIT" variable (:type "int") (reparse-symbol classsubparts) [94278 94287])
                      ("func" function
                         (:prototype-flag t
                          :function-pointer t
                          :arguments 
                            ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [94308 94320]))                            
                          :type "void")
                          (reparse-symbol classsubparts) [94294 94321])
                      ("arg" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [94328 94344]))                    
                  :type "struct")
                  nil nil)) nil [94233 94358])
            ("unwind_ptr" variable (:type ("" type
                 (:members 
                    ( ("CHAR_BIT" variable (:type "int") (reparse-symbol classsubparts) [94408 94417])
                      ("func" function
                         (:prototype-flag t
                          :function-pointer t
                          :arguments 
                            ( ("" variable
                                 (:pointer 1
                                  :type "void")
                                  (reparse-symbol arg-sub-list) [94438 94445]))                            
                          :type "void")
                          (reparse-symbol classsubparts) [94424 94446])
                      ("arg" variable
                         (:pointer 1
                          :type "void")
                          (reparse-symbol classsubparts) [94453 94463]))                    
                  :type "struct")
                  nil nil)) nil [94363 94481])
            ("unwind_int" variable (:type ("" type
                 (:members 
                    ( ("CHAR_BIT" variable (:type "int") (reparse-symbol classsubparts) [94531 94540])
                      ("func" function
                         (:prototype-flag t
                          :function-pointer t
                          :arguments 
                            ( ("" variable (:type "int") (reparse-symbol arg-sub-list) [94561 94565]))                            
                          :type "void")
                          (reparse-symbol classsubparts) [94547 94566])
                      ("arg" variable (:type "int") (reparse-symbol classsubparts) [94573 94581]))                    
                  :type "struct")
                  nil nil)) nil [94486 94599])
            ("unwind_void" variable (:type ("" type
                 (:members 
                    ( ("CHAR_BIT" variable (:type "int") (reparse-symbol classsubparts) [94649 94658])
                      ("func" function
                         (:prototype-flag t
                          :function-pointer t
                          :arguments 
                            ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [94679 94684]))                            
                          :type "void")
                          (reparse-symbol classsubparts) [94665 94685]))                    
                  :type "struct")
                  nil nil)) nil [94604 94704])
            ("let" variable (:type ("" type
                 (:members 
                    ( ("CHAR_BIT" variable (:type "int") (reparse-symbol classsubparts) [94754 94763])
                      ("symbol" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [94831 94868])
                      ("old_value" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [94831 94868])
                      ("where" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [94831 94868])
                      ("saved_value" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [94989 95013]))                    
                  :type "struct")
                  nil nil)) nil [94709 95024])
            ("bt" variable (:type ("" type
                 (:members 
                    ( ("CHAR_BIT" variable (:type "int") (reparse-symbol classsubparts) [95074 95083])
                      ("debug_on_exit" variable
                         (:suffix ":1"
                          :type ("bool_bf" type (:type "class") nil nil))
                          (reparse-symbol classsubparts) [95090 95116])
                      ("function" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [95123 95144])
                      ("args" variable
                         (:pointer 1
                          :type ("Lisp_Object" type (:type "class") nil nil))
                          (reparse-symbol classsubparts) [95151 95169])
                      ("nargs" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [95176 95192]))                    
                  :type "struct")
                  nil nil)) nil [95029 95202])
            ("specpdl" variable (:type "int") nil [95446 95454])
            ("type" variable (:type ("handlertype" type (:type "enum") nil nil)) nil [96662 96684])
            ("tag_or_ch" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [96687 96709])
            ("val" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [96712 96728])
            ("next" variable
               (:pointer 1
                :type ("handler" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [96731 96752])
            ("nextfree" variable
               (:pointer 1
                :type ("handler" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [96755 96780])
            ("bytecode_top" variable
               (:pointer 1
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [97113 97139])
            ("bytecode_dest" variable (:type "int") nil [97142 97160])
            ("jmp" variable (:type ("sys_jmp_buf" type (:type "class") nil nil)) nil [97305 97321])
            ("f_lisp_eval_depth" variable (:type ("EMACS_INT" type (:type "class") nil nil)) nil [97324 97352])
            ("pdlcount" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) nil [97355 97374])
            ("poll_suppress_count" variable (:type "int") nil [97377 97401])
            ("interrupt_input_blocked" variable (:type "int") nil [97404 97432])
            ("memory_signal_data" variable
               (:typemodifiers ("extern")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [97437 97475])
            ("QUITP" variable (:constant-flag t) nil [97552 97557])
            ("maybe_quit" function
               (:prototype-flag t
                :type "int")
                nil [97843 97857])
            ("Vascii_downcase_table" variable
               (:typemodifiers ("extern")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [97862 97903])
            ("Vascii_canon_table" variable
               (:typemodifiers ("extern")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [97904 97942])
            ("window" type
               (:prototype t
                :type "struct")
                nil [98087 98101])
            ("frame" type
               (:prototype t
                :type "struct")
                nil [98102 98115])
            ("memcpy" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("XVECTOR" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [98368 98379])
                    ("" variable (:type ("contents" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [98381 98391])
                    ("" variable (:type ("offset" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [98392 98399])
                    ("" variable (:type ("args" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [98400 98405])
                    ("" variable
                       (:pointer 1
                        :type ("count" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [98406 98420])
                    ("" variable (:type ("args" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [98422 98427]))                  
                :type "int")
                nil [98360 98428])
            ("gc_aset" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("h" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [98576 98578])
                    ("" variable (:type ("key_and_value" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [98579 98593])
                    ("" variable (:type ("idx" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [98598 98602])
                    ("" variable (:type ("val" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [98603 98607]))                  
                :type "int")
                nil [98567 98608])
            ("gc_aset" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("h" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [98717 98719])
                    ("" variable (:type ("key_and_value" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [98720 98734])
                    ("" variable (:type ("idx" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [98739 98744])
                    ("" variable (:type ("val" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [98748 98752]))                  
                :type "int")
                nil [98708 98753])
            ("function" variable
               (:default-value "function"
                :type "int")
                nil [98938 98958])
            ("plist" variable
               (:default-value "plist"
                :type "int")
                nil [99047 99061])
            ("next" variable
               (:default-value "next"
                :type "int")
                nil [99156 99168])
            ("trapped_write" variable
               (:default-value "SYMBOL_NOWRITE"
                :type "int")
                nil [99242 99273])
            ("found" variable (:type "int") nil [99460 99466])
            ("plist" variable
               (:default-value "plist"
                :type "int")
                nil [99602 99616])
            ("intervals" variable (:type "int") nil [99727 99737])
            ("intervals" variable
               (:default-value "i"
                :type "int")
                nil [99858 99872])
            ("defalt" variable
               (:default-value "val"
                :type "int")
                nil [100078 100091])
            ("purpose" variable
               (:default-value "val"
                :type "int")
                nil [100191 100205])
            ("extras" variable
               (:dereference 1
                :default-value "val"
                :type "int")
                nil [100450 100468])
            ("contents" variable
               (:dereference 1
                :default-value "val"
                :type "int")
                nil [100643 100663])
            ("contents" variable
               (:dereference 1
                :default-value "val"
                :type "int")
                nil [100788 100808])
            ("INTEGER_TO_CONS" variable (:constant-flag t) nil [101573 101588])
            ("CONS_TO_INTEGER" variable (:constant-flag t) nil [102044 102059])
            ("charset" type
               (:prototype t
                :type "struct")
                nil [103942 103957])
            ("ATTRIBUTE_CONST" variable (:type "int") nil [104171 104187])
            ("hashtest_eq" variable
               (:typemodifiers ("extern")
                :type ("hash_table_test" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [104811 104889])
            ("hashtest_eql" variable
               (:typemodifiers ("extern")
                :type ("hash_table_test" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [104811 104889])
            ("hashtest_equal" variable
               (:typemodifiers ("extern")
                :type ("hash_table_test" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [104811 104889])
            ("Vwindow_system" variable
               (:typemodifiers ("extern")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [109077 109111])
            ("noninteractive_need_newline" variable
               (:typemodifiers ("extern")
                :type "bool")
                nil [109193 109233])
            ("pending_malloc_warning" variable
               (:pointer 1
                :typemodifiers ("extern")
                :constant-flag t
                :type "char")
                nil [111552 111594])
            ("zero_vector" variable
               (:typemodifiers ("extern")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [111595 111626])
            ("consing_since_gc" variable
               (:typemodifiers ("extern")
                :type ("EMACS_INT" type (:type "class") nil nil))
                nil [111627 111661])
            ("gc_relative_threshold" variable
               (:typemodifiers ("extern")
                :type ("EMACS_INT" type (:type "class") nil nil))
                nil [111662 111701])
            ("memory_full_cons_threshold" variable
               (:typemodifiers ("extern")
                :type ("EMACS_INT" type (:type "class") nil nil))
                nil [111702 111746])
            ("list2" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("make_number" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [112324 112339])
                    ("" variable (:type ("make_number" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [112341 112356]))                  
                :type "int")
                nil [112317 112358])
            ("list3" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("make_number" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [112446 112461])
                    ("" variable (:type ("make_number" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [112463 112478])
                    ("" variable (:type ("make_number" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [112480 112495]))                  
                :type "int")
                nil [112439 112497])
            ("list4" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("make_number" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [112598 112613])
                    ("" variable (:type ("make_number" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [112615 112630])
                    ("" variable (:type ("make_number" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [112634 112649])
                    ("" variable (:type ("make_number" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [112651 112666]))                  
                :type "int")
                nil [112591 112668])
            ("make_unibyte_string" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("str" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [113227 113231])
                    ("" variable (:type ("strlen" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [113232 113244]))                  
                :type "int")
                nil [113206 113246])
            ("make_pure_c_string" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("str" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [113993 113997])
                    ("" variable (:type ("strlen" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [113998 114010]))                  
                :type "int")
                nil [113973 114012])
            ("make_string" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("str" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [114184 114188])
                    ("" variable (:type ("strlen" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [114189 114201]))                  
                :type "int")
                nil [114171 114203])
            ("v" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [114740 114754])
            ("p" variable
               (:pointer 1
                :type ("Lisp_Vector" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [114757 114779])
            ("p" variable
               (:default-value "allocate_vector (size)"
                :type "int")
                nil [114783 114810])
            ("v" variable (:type "int") nil [114841 114843])
            ("slots" variable
               (:default-value "SUB_CHAR_TABLE_OFFSET + chartab_size[depth]"
                :type "int")
                nil [114976 115032])
            ("v" variable
               (:default-value "make_uninit_vector (slots)"
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [115035 115078])
            ("depth" variable
               (:default-value "depth"
                :type "int")
                nil [115154 115168])
            ("min_char" variable
               (:default-value "min_char"
                :type "int")
                nil [115192 115212])
            ("v" variable (:type "int") nil [115222 115224])
            ("ALLOCATE_PSEUDOVECTOR" variable (:constant-flag t) nil [115471 115492])
            ("ALLOCATE_ZEROED_PSEUDOVECTOR" variable (:constant-flag t) nil [115807 115835])
            ("gc_in_progress" variable
               (:typemodifiers ("extern")
                :type "bool")
                nil [116000 116027])
            ("__malloc_extra_blocks" variable
               (:typemodifiers ("extern")
                :type ("size_t" type (:type "class") nil nil))
                nil [117313 117349])
            ("Vprin1_to_string_buffer" variable
               (:typemodifiers ("extern")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [118581 118624])
            ("EXTERNALLY_VISIBLE" variable (:type "int") nil [118663 118682])
            ("print_level" variable
               (:typemodifiers ("extern")
                :type "int")
                nil [118736 118759])
            ("Lisp_Object" function (:type "int") nil [118930 118959])
            ("FLOAT_TO_STRING_BUFSIZE" variable (:constant-flag t) nil [118983 119006])
            ("Vcurrent_load_list" variable
               (:default-value "Fcons (x, Vcurrent_load_list)"
                :type "int")
                nil [120070 120121])
            ("intern_1" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("str" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [120628 120632])
                    ("" variable (:type ("strlen" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [120633 120645]))                  
                :type "int")
                nil [120618 120647])
            ("intern_c_string_1" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("str" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [120734 120738])
                    ("" variable (:type ("strlen" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [120739 120751]))                  
                :type "int")
                nil [120715 120753])
            ("Vautoload_queue" variable
               (:typemodifiers ("extern")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [120783 120818])
            ("Vrun_hooks" variable
               (:typemodifiers ("extern")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [120819 120849])
            ("Vsignaling_function" variable
               (:typemodifiers ("extern")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [120850 120889])
            ("inhibit_lisp_code" variable
               (:typemodifiers ("extern")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [120890 120927])
            ("Lisp_Object" function
               (:arguments 
                  ( ("" variable (:type ("funcall" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [121344 121352]))                  
                :type "int")
                nil [121330 121400])
            ("Fsignal" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("error_symbol" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [121523 121536])
                    ("" variable (:type ("data" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [121537 121542]))                  
                :type "int")
                nil [121514 121543])
            ("Lisp_Object" function (:type "int") nil [122993 123022])
            ("Lisp_Object" function (:type "int") nil [123171 123193])
            ("Lisp_Object" function (:type "int") nil [123208 123237])
            ("Lisp_Object" function (:type "int") nil [123286 123315])
            ("Lisp_Object" function (:type "int") nil [123343 123372])
            ("Lisp_Object" function (:type "int") nil [123421 123463])
            ("Lisp_Object" function (:type "int") nil [123504 123533])
            ("Lisp_Object" function (:type "int") nil [123586 123628])
            ("Lisp_Object" function (:type "int") nil [123674 123729])
            ("emacs-module.h" include nil nil [125840 125865])
            ("header" variable (:type ("vectorlike_header" type
                 (:prototype t
                  :type "struct")
                  nil nil)) nil [126327 126359])
            ("documentation" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [126416 126442])
            ("min_arity" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) nil [126477 126508])
            ("max_arity" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) nil [126477 126508])
            ("subr" variable (:type ("emacs_subr" type (:type "class") nil nil)) nil [126511 126527])
            ("data" variable
               (:pointer 1
                :type "void")
                nil [126530 126541])
            ("PSEUDOVECTORP" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("o" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [126617 126619])
                    ("" variable (:type ("PVEC_MODULE_FUNCTION" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [126620 126641]))                  
                :type "int")
                nil [126602 126642])
            ("XUNTAG" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("o" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [126769 126771])
                    ("" variable (:type ("Lisp_Vectorlike" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [126772 126788]))                  
                :type "int")
                nil [126761 126789])
            ("re_registers" type
               (:prototype t
                :type "struct")
                nil [130570 130590])
            ("fast_string_match_internal" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("regexp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [130930 130937])
                    ("" variable (:type ("string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [130938 130945])
                    ("" variable (:type ("Qnil" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [130946 130951]))                  
                :type "int")
                nil [130902 130952])
            ("fast_string_match_internal" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("regexp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [131083 131090])
                    ("" variable (:type ("string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [131091 131098])
                    ("" variable (:type ("Vascii_canon_table" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [131099 131118]))                  
                :type "int")
                nil [131055 131119])
            ("Vminibuffer_list" variable
               (:typemodifiers ("extern")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [131971 132007])
            ("last_minibuf_string" variable
               (:typemodifiers ("extern")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [132008 132047])
            ("echo_message_buffer" variable
               (:typemodifiers ("extern")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [132485 132524])
            ("echo_kboard" variable
               (:pointer 1
                :typemodifiers ("extern")
                :type ("kboard" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [132525 132559])
            ("input_pending" variable
               (:typemodifiers ("extern")
                :type "bool")
                nil [132595 132621])
            ("pending_funcalls" variable
               (:typemodifiers ("extern")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [132922 132958])
            ("initial_argv" variable
               (:pointer 2
                :typemodifiers ("extern")
                :type "char")
                nil [134168 134195])
            ("initial_argc" variable
               (:typemodifiers ("extern")
                :type "int")
                nil [134196 134220])
            ("empty_unibyte_string" variable
               (:typemodifiers ("extern")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [134374 134438])
            ("empty_multibyte_string" variable
               (:typemodifiers ("extern")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [134374 134438])
            ("noninteractive" variable
               (:typemodifiers ("extern")
                :type "bool")
                nil [135012 135039])
            ("no_site_lisp" variable
               (:typemodifiers ("extern")
                :type "bool")
                nil [135104 135129])
            ("build_details" variable
               (:typemodifiers ("extern")
                :type "bool")
                nil [135191 135217])
            ("daemon_type" variable
               (:typemodifiers ("extern")
                :type "int")
                nil [135302 135325])
            ("IS_DAEMON" variable (:constant-flag t) nil [135334 135343])
            ("DAEMON_RUNNING" variable (:constant-flag t) nil [135371 135385])
            ("fatal_error_in_progress" variable
               (:typemodifiers ("extern")
                :type "bool")
                nil [135625 135661])
            ("inhibit_window_system" variable
               (:typemodifiers ("extern")
                :type "bool")
                nil [135731 135765])
            ("running_asynch_code" variable
               (:typemodifiers ("extern")
                :type "bool")
                nil [135824 135856])
            ("Lisp_Process" type
               (:prototype t
                :type "struct")
                nil [135887 135907])
            ("WAIT_READING_MAX" variable (:constant-flag t) nil [136418 136434])
            ("CHILD_SETUP_TYPE" variable (:constant-flag t) nil [136921 136937])
            ("tty_display_info" type
               (:prototype t
                :type "struct")
                nil [138793 138817])
            ("false" variable (:type "int") nil [139003 139009])
            ("NO_INLINE" variable (:type "int") nil [139845 139855])
            ("char_ins_del_vector" variable
               (:pointer 1
                :typemodifiers ("extern")
                :type "int")
                nil [141252 141284])
            ("Vface_alternative_font_family_alist" variable
               (:typemodifiers ("extern")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [142153 142208])
            ("Vface_alternative_font_registry_alist" variable
               (:typemodifiers ("extern")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [142209 142266])
            ("profiler_memory_running" variable
               (:typemodifiers ("extern")
                :type "bool")
                nil [143230 143266])
            ("my_endbss_static" variable
               (:pointer 1
                :typemodifiers ("extern")
                :type "char")
                nil [143525 143555])
            ("ATTRIBUTE_MALLOC" variable (:type "int") nil [144046 144063])
            ("ATTRIBUTE_MALLOC" variable (:type "int") nil [144103 144120])
            ("len" variable
               (:default-value "SBYTES (string)"
                :type ("ptrdiff_t" type (:type "class") nil nil))
                nil [144386 144418])
            ("memcpy" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("dest" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [144429 144434])
                    ("" variable (:type ("SDATA" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [144435 144449])
                    ("" variable (:type ("len" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [144451 144456]))                  
                :type "int")
                nil [144421 144460])
            ("len" variable (:type "int") nil [144477 144481])
            ("egetenv_internal" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("var" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [144718 144722])
                    ("" variable (:type ("strlen" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [144723 144735]))                  
                :type "int")
                nil [144700 144737])
            ("eabs" variable (:constant-flag t) nil [145098 145102])
            ("make_fixnum_or_float" variable (:constant-flag t) nil [145243 145263])
            ("USE_SAFE_ALLOCA" variable (:constant-flag t) nil [145605 145620])
            ("AVAIL_ALLOCA" variable (:constant-flag t) nil [145738 145750])
            ("SAFE_ALLOCA" variable (:constant-flag t) nil [145849 145860])
            ("SAFE_NALLOCA" variable (:constant-flag t) nil [146190 146202])
            ("SAFE_ALLOCA_STRING" variable (:constant-flag t) nil [146666 146684])
            ("SAFE_FREE" variable (:constant-flag t) nil [146918 146927])
            ("SAFE_ALLOCA_LISP_EXTRA" variable (:constant-flag t) nil [147196 147218])
            ("SAFE_ALLOCA_LISP" variable (:constant-flag t) nil [148000 148016])
            ("USE_STACK_LISP_OBJECTS" variable (:constant-flag t) nil [148837 148859])
            ("s" variable (:type ("Lisp_Cons" type
                 (:prototype t
                  :type "struct")
                  nil nil)) nil [149112 149131])
            ("d" variable (:type "double") nil [149134 149143])
            ("i" variable (:type ("intmax_t" type (:type "class") nil nil)) nil [149144 149155])
            ("p" variable
               (:pointer 1
                :type "void")
                nil [149156 149164])
            ("s" variable (:type ("Lisp_String" type
                 (:prototype t
                  :type "struct")
                  nil nil)) nil [149194 149215])
            ("d" variable (:type "double") nil [149218 149227])
            ("i" variable (:type ("intmax_t" type (:type "class") nil nil)) nil [149228 149239])
            ("p" variable
               (:pointer 1
                :type "void")
                nil [149240 149248])
            ("STACK_CONS" variable (:constant-flag t) nil [149975 149985])
            ("AUTO_CONS_EXPR" variable (:constant-flag t) nil [150074 150088])
            ("AUTO_CONS" variable (:constant-flag t) nil [150437 150446])
            ("AUTO_LIST1" variable (:constant-flag t) nil [150508 150518])
            ("AUTO_LIST2" variable (:constant-flag t) nil [150616 150626])
            ("AUTO_LIST3" variable (:constant-flag t) nil [150771 150781])
            ("AUTO_LIST4" variable (:constant-flag t) nil [150946 150956])
            ("AUTO_STRING" variable (:constant-flag t) nil [151485 151496])
            ("AUTO_STRING_WITH_LEN" variable (:constant-flag t) nil [151909 151929])
            ("FOR_EACH_TAIL" variable (:constant-flag t) nil [152569 152582])
            ("FOR_EACH_TAIL_SAFE" variable (:constant-flag t) nil [152789 152807])
            ("tortoise" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [152983 153004])
            ("n" variable (:type "int") nil [153021 153023])
            ("q" variable (:type "unsigned short int") nil [153026 153047])
            ("FOR_EACH_TAIL_INTERNAL" variable (:constant-flag t) nil [153747 153769])
            ("FOR_EACH_ALIST_VALUE" variable (:constant-flag t) nil [154227 154247])
            ("Fgarbage_collect" function
               (:prototype-flag t
                :type "int")
                nil [154709 154729]))          
      :file "lisp.h"
      :pointmax 154778
      :fsize 154789
      :lastmodtime '(22986 14552 0 0)
      :unmatched-syntax '((symbol 154733 . 154750) (close-paren 154730 . 154731) (semantic-list 154529 . 154704) (IF 154526 . 154528) (open-paren 154522 . 154523) (close-paren 154520 . 154521) (VOID 154516 . 154520) (open-paren 154515 . 154516) (symbol 154506 . 154514) (VOID 154501 . 154505) (symbol 154494 . 154500) (punctuation 153049 . 153050) (close-paren 153048 . 153049) (semantic-list #("((a) > (b) ? (a) : (b))" 0 1 (macros (("b") ("a")))) 153016 . 153020) (symbol 153007 . 153015) (open-paren 152979 . 152980) (symbol 152956 . 152978) (STRUCT 152949 . 152955) (punctuation 149766 . 149767) (close-paren 149765 . 149766) (semantic-list 149653 . 149762) (punctuation 149651 . 149652) (symbol 149634 . 149650) (punctuation 149628 . 149629) (semantic-list 149545 . 149628) (punctuation 149543 . 149544) (symbol 149528 . 149542) (open-paren 149522 . 149523) (ENUM 149515 . 149519) (punctuation 149250 . 149251) (close-paren 149249 . 149250) (open-paren 149190 . 149191) (symbol 149175 . 149189) (UNION 149169 . 149174) (punctuation 149166 . 149167) (close-paren 149165 . 149166) (open-paren 149108 . 149109) (symbol 149095 . 149107) (UNION 149089 . 149094) (punctuation 149001 . 149002) (close-paren 149000 . 149001) (symbol 148994 . 148999) (punctuation 148992 . 148993) (symbol 148962 . 148991) (open-paren 148960 . 148961) (ENUM 148955 . 148959) (punctuation 145594 . 145595) (close-paren 145593 . 145594) (semantic-list 145590 . 145593) (open-paren 145589 . 145590) (symbol 145568 . 145588) (close-paren 145566 . 145567) (symbol 145560 . 145566) (open-paren 145559 . 145560) (symbol 145544 . 145558) (punctuation 145543 . 145544) (VOID 145538 . 145542) (EXTERN 145531 . 145537) (punctuation 145528 . 145529) (close-paren 145527 . 145528) (number 145522 . 145526) (punctuation 145520 . 145521) (number 145517 . 145519) (punctuation 145515 . 145516) (symbol 145504 . 145514) (open-paren 145502 . 145503) (symbol 145491 . 145501) (ENUM 145486 . 145490) (punctuation 144832 . 144833) (close-paren 144831 . 144832) (VOID 144827 . 144831) (open-paren 144826 . 144827) (symbol 144809 . 144825) (VOID 144804 . 144808) (EXTERN 144797 . 144803) (close-paren 144738 . 144739) (semantic-list 144730 . 144735) (RETURN 144693 . 144699) (open-paren 144620 . 144621) (close-paren 144618 . 144619) (symbol 144615 . 144618) (punctuation 144614 . 144615) (CHAR 144609 . 144613) (CONST 144603 . 144608) (open-paren 144602 . 144603) (symbol 144594 . 144601) (punctuation 144592 . 144593) (CHAR 144587 . 144591) (symbol 144580 . 144586) (punctuation 144577 . 144578) (close-paren 144576 . 144577) (symbol 144567 . 144576) (punctuation 144565 . 144566) (punctuation 144564 . 144565) (CHAR 144559 . 144563) (CONST 144553 . 144558) (open-paren 144552 . 144553) (symbol 144535 . 144551) (punctuation 144534 . 144535) (CHAR 144529 . 144533) (EXTERN 144522 . 144528) (punctuation 144519 . 144520) (close-paren 144518 . 144519) (punctuation 144517 . 144518) (CHAR 144512 . 144516) (CONST 144506 . 144511) (open-paren 144505 . 144506) (symbol 144497 . 144504) (VOID 144492 . 144496) (EXTERN 144485 . 144491) (close-paren 144482 . 144483) (punctuation 144475 . 144476) (symbol 144470 . 144474) (RETURN 144463 . 144469) (number 144457 . 144458) (punctuation 144455 . 144456) (semantic-list 144441 . 144449) (open-paren 144382 . 144383) (close-paren 144380 . 144381) (symbol 144374 . 144380) (symbol 144362 . 144373) (punctuation 144360 . 144361) (symbol 144356 . 144360) (punctuation 144355 . 144356) (CHAR 144350 . 144354) (open-paren 144349 . 144350) (symbol 144338 . 144348) (punctuation 144336 . 144337) (CHAR 144331 . 144335) (symbol 144324 . 144330) (punctuation 144166 . 144167) (close-paren 144165 . 144166) (punctuation 144164 . 144165) (CONST 144158 . 144163) (CHAR 144153 . 144157) (punctuation 144151 . 144152) (punctuation 144150 . 144151) (punctuation 144149 . 144150) (CHAR 144144 . 144148) (open-paren 144143 . 144144) (symbol 144133 . 144142) (VOID 144128 . 144132) (EXTERN 144121 . 144127) (close-paren 144101 . 144102) (symbol 144090 . 144101) (open-paren 144089 . 144090) (symbol 144077 . 144088) (punctuation 144076 . 144077) (CHAR 144071 . 144075) (EXTERN 144064 . 144070) (close-paren 144044 . 144045) (punctuation 144043 . 144044) (CHAR 144038 . 144042) (CONST 144032 . 144037) (open-paren 144031 . 144032) (symbol 144023 . 144030) (punctuation 144022 . 144023) (CHAR 144017 . 144021) (EXTERN 144010 . 144016) (punctuation 144007 . 144008) (close-paren 144006 . 144007) (symbol 143997 . 144006) (punctuation 143995 . 143996) (symbol 143986 . 143995) (punctuation 143984 . 143985) (symbol 143975 . 143984) (punctuation 143973 . 143974) (punctuation 143972 . 143973) (symbol 143962 . 143971) (punctuation 143960 . 143961) (punctuation 143959 . 143960) (VOID 143954 . 143958) (open-paren 143953 . 143954) (symbol 143945 . 143952) (punctuation 143944 . 143945) (VOID 143939 . 143943) (EXTERN 143932 . 143938) (punctuation 143930 . 143931) (close-paren 143929 . 143930) (semantic-list 143924 . 143929) (open-paren 143923 . 143924) (symbol 143902 . 143922) (close-paren 143898 . 143899) (symbol 143889 . 143898) (punctuation 143887 . 143888) (symbol 143878 . 143887) (punctuation 143876 . 143877) (punctuation 143875 . 143876) (VOID 143870 . 143874) (open-paren 143869 . 143870) (symbol 143859 . 143868) (punctuation 143858 . 143859) (VOID 143853 . 143857) (EXTERN 143846 . 143852) (punctuation 143844 . 143845) (close-paren 143843 . 143844) (semantic-list 143838 . 143843) (open-paren 143837 . 143838) (symbol 143815 . 143836) (close-paren 143813 . 143814) (symbol 143804 . 143813) (punctuation 143802 . 143803) (symbol 143793 . 143802) (open-paren 143792 . 143793) (symbol 143783 . 143791) (punctuation 143782 . 143783) (VOID 143777 . 143781) (EXTERN 143770 . 143776) (punctuation 143768 . 143769) (close-paren 143767 . 143768) (punctuation 143766 . 143767) (VOID 143761 . 143765) (open-paren 143760 . 143761) (symbol 143754 . 143759) (VOID 143749 . 143753) (EXTERN 143742 . 143748) (punctuation 143740 . 143741) (close-paren 143739 . 143740) (semantic-list 143736 . 143739) (open-paren 143735 . 143736) (symbol 143714 . 143734) (close-paren 143712 . 143713) (symbol 143706 . 143712) (punctuation 143704 . 143705) (punctuation 143703 . 143704) (VOID 143698 . 143702) (open-paren 143697 . 143698) (symbol 143688 . 143696) (punctuation 143687 . 143688) (VOID 143682 . 143686) (EXTERN 143675 . 143681) (punctuation 143673 . 143674) (close-paren 143672 . 143673) (semantic-list 143669 . 143672) (open-paren 143668 . 143669) (symbol 143646 . 143667) (close-paren 143644 . 143645) (symbol 143638 . 143644) (open-paren 143637 . 143638) (symbol 143629 . 143636) (punctuation 143628 . 143629) (VOID 143623 . 143627) (EXTERN 143616 . 143622) (punctuation 143614 . 143615) (close-paren 143613 . 143614) (semantic-list 143610 . 143613) (open-paren 143609 . 143610) (symbol 143587 . 143608) (close-paren 143585 . 143586) (symbol 143579 . 143585) (open-paren 143578 . 143579) (symbol 143570 . 143577) (punctuation 143569 . 143570) (VOID 143564 . 143568) (EXTERN 143557 . 143563) (punctuation 143523 . 143524) (close-paren 143522 . 143523) (open-paren 143521 . 143522) (symbol 143512 . 143521) (CHAR 143507 . 143511) (EXTERN 143500 . 143506) (punctuation 143498 . 143499) (close-paren 143497 . 143498) (open-paren 143496 . 143497) (symbol 143488 . 143496) (CHAR 143483 . 143487) (EXTERN 143476 . 143482) (punctuation 143337 . 143338) (close-paren 143336 . 143337) (VOID 143332 . 143336) (open-paren 143331 . 143332) (symbol 143314 . 143330) (VOID 143309 . 143313) (EXTERN 143302 . 143308) (punctuation 143300 . 143301) (close-paren 143299 . 143300) (symbol 143293 . 143299) (open-paren 143292 . 143293) (symbol 143279 . 143291) (VOID 143274 . 143278) (EXTERN 143267 . 143273) (punctuation 142300 . 142301) (close-paren 142299 . 142300) (VOID 142295 . 142299) (open-paren 142294 . 142295) (symbol 142279 . 142293) (VOID 142274 . 142278) (EXTERN 142267 . 142273) (punctuation 141561 . 141562) (close-paren 141560 . 141561) (VOID 141556 . 141560) (open-paren 141555 . 141556) (symbol 141545 . 141554) (VOID 141540 . 141544) (EXTERN 141533 . 141539) (punctuation 141531 . 141532) (close-paren 141530 . 141531) (VOID 141526 . 141530) (open-paren 141525 . 141526) (symbol 141512 . 141524) (VOID 141507 . 141511) (EXTERN 141500 . 141506) (punctuation 141471 . 141472) (close-paren 141470 . 141471) (VOID 141466 . 141470) (open-paren 141465 . 141466) (symbol 141448 . 141464) (VOID 141443 . 141447) (EXTERN 141436 . 141442) (punctuation 141403 . 141404) (close-paren 141402 . 141403) (number 141401 . 141402) (punctuation 141399 . 141400) (number 141398 . 141399) (open-paren 141397 . 141398) (symbol 141373 . 141396) (close-paren 141369 . 141370) (punctuation 141368 . 141369) (punctuation 141367 . 141368) (punctuation 141366 . 141367) (punctuation 141364 . 141365) (symbol 141359 . 141364) (punctuation 141358 . 141359) (CHAR 141353 . 141357) (CONST 141347 . 141352) (open-paren 141346 . 141347) (symbol 141340 . 141345) (VOID 141335 . 141339) (symbol 141325 . 141334) (EXTERN 141318 . 141324) (punctuation 141316 . 141317) (close-paren 141315 . 141316) (VOID 141311 . 141315) (open-paren 141310 . 141311) (symbol 141297 . 141309) (VOID 141292 . 141296) (EXTERN 141285 . 141291) (punctuation 141223 . 141224) (close-paren 141222 . 141223) (symbol 141211 . 141222) (punctuation 141209 . 141210) (BOOL 141205 . 141209) (punctuation 141158 . 141159) (symbol 141147 . 141158) (punctuation 141145 . 141146) (symbol 141134 . 141145) (punctuation 141087 . 141088) (symbol 141076 . 141087) (punctuation 141074 . 141075) (symbol 141063 . 141074) (open-paren 141062 . 141063) (symbol 141037 . 141061) (symbol 141025 . 141036) (EXTERN 141018 . 141024) (punctuation 141016 . 141017) (close-paren 141015 . 141016) (VOID 141011 . 141015) (open-paren 141010 . 141011) (symbol 140996 . 141009) (VOID 140991 . 140995) (EXTERN 140984 . 140990) (punctuation 140954 . 140955) (close-paren 140953 . 140954) (VOID 140949 . 140953) (open-paren 140948 . 140949) (symbol 140936 . 140947) (VOID 140931 . 140935) (EXTERN 140924 . 140930) (punctuation 140896 . 140897) (close-paren 140895 . 140896) (VOID 140891 . 140895) (open-paren 140890 . 140891) (symbol 140873 . 140889) (VOID 140868 . 140872) (EXTERN 140861 . 140867) (punctuation 140859 . 140860) (close-paren 140858 . 140859) (INT 140855 . 140858) (open-paren 140854 . 140855) (symbol 140836 . 140853) (symbol 140824 . 140835) (EXTERN 140817 . 140823) (punctuation 140815 . 140816) (close-paren 140814 . 140815) (VOID 140810 . 140814) (open-paren 140809 . 140810) (symbol 140790 . 140808) (VOID 140785 . 140789) (EXTERN 140778 . 140784) (punctuation 140745 . 140746) (close-paren 140744 . 140745) (VOID 140740 . 140744) (open-paren 140739 . 140740) (symbol 140725 . 140738) (VOID 140720 . 140724) (EXTERN 140713 . 140719) (punctuation 140683 . 140684) (close-paren 140682 . 140683) (VOID 140678 . 140682) (open-paren 140677 . 140678) (symbol 140660 . 140676) (VOID 140655 . 140659) (EXTERN 140648 . 140654) (punctuation 140646 . 140647) (close-paren 140645 . 140646) (punctuation 140644 . 140645) (symbol 140637 . 140643) (STRUCT 140630 . 140636) (open-paren 140629 . 140630) (symbol 140615 . 140628) (VOID 140610 . 140614) (EXTERN 140603 . 140609) (punctuation 140601 . 140602) (close-paren 140600 . 140601) (VOID 140596 . 140600) (open-paren 140595 . 140596) (symbol 140578 . 140594) (VOID 140573 . 140577) (EXTERN 140566 . 140572) (punctuation 140564 . 140565) (close-paren 140563 . 140564) (symbol 140552 . 140563) (open-paren 140551 . 140552) (symbol 140539 . 140550) (VOID 140534 . 140538) (EXTERN 140527 . 140533) (punctuation 140525 . 140526) (close-paren 140524 . 140525) (symbol 140513 . 140524) (open-paren 140512 . 140513) (symbol 140502 . 140511) (VOID 140497 . 140501) (EXTERN 140490 . 140496) (punctuation 140457 . 140458) (close-paren 140456 . 140457) (symbol 140445 . 140456) (punctuation 140443 . 140444) (symbol 140432 . 140443) (punctuation 140430 . 140431) (symbol 140419 . 140430) (punctuation 140417 . 140418) (symbol 140406 . 140417) (open-paren 140405 . 140406) (symbol 140393 . 140404) (INT 140389 . 140392) (EXTERN 140382 . 140388) (punctuation 140380 . 140381) (close-paren 140379 . 140380) (punctuation 140378 . 140379) (CONST 140372 . 140377) (CHAR 140367 . 140371) (punctuation 140365 . 140366) (INT 140362 . 140365) (punctuation 140360 . 140361) (punctuation 140359 . 140360) (CONST 140353 . 140358) (CHAR 140348 . 140352) (punctuation 140346 . 140347) (INT 140343 . 140346) (open-paren 140342 . 140343) (symbol 140323 . 140341) (INT 140319 . 140322) (EXTERN 140312 . 140318) (punctuation 140310 . 140311) (close-paren 140309 . 140310) (punctuation 140308 . 140309) (CONST 140302 . 140307) (CHAR 140297 . 140301) (open-paren 140296 . 140297) (symbol 140283 . 140295) (VOID 140278 . 140282) (EXTERN 140271 . 140277) (punctuation 140269 . 140270) (close-paren 140268 . 140269) (symbol 140259 . 140268) (punctuation 140257 . 140258) (punctuation 140256 . 140257) (CONST 140250 . 140255) (VOID 140245 . 140249) (punctuation 140243 . 140244) (INT 140240 . 140243) (open-paren 140239 . 140240) (symbol 140222 . 140238) (symbol 140212 . 140221) (EXTERN 140205 . 140211) (punctuation 140203 . 140204) (close-paren 140202 . 140203) (symbol 140193 . 140202) (punctuation 140191 . 140192) (punctuation 140190 . 140191) (CONST 140184 . 140189) (VOID 140179 . 140183) (punctuation 140177 . 140178) (INT 140174 . 140177) (open-paren 140173 . 140174) (symbol 140157 . 140172) (symbol 140147 . 140156) (EXTERN 140140 . 140146) (punctuation 140138 . 140139) (close-paren 140137 . 140138) (symbol 140128 . 140137) (punctuation 140126 . 140127) (punctuation 140125 . 140126) (CONST 140119 . 140124) (VOID 140114 . 140118) (punctuation 140112 . 140113) (INT 140109 . 140112) (open-paren 140108 . 140109) (symbol 140096 . 140107) (symbol 140086 . 140095) (EXTERN 140079 . 140085) (punctuation 140077 . 140078) (close-paren 140076 . 140077) (symbol 140067 . 140076) (punctuation 140065 . 140066) (punctuation 140064 . 140065) (VOID 140059 . 140063) (punctuation 140057 . 140058) (INT 140054 . 140057) (open-paren 140053 . 140054) (symbol 140037 . 140052) (symbol 140027 . 140036) (EXTERN 140020 . 140026) (punctuation 140018 . 140019) (close-paren 140017 . 140018) (symbol 140008 . 140017) (punctuation 140006 . 140007) (punctuation 140005 . 140006) (VOID 140000 . 140004) (punctuation 139998 . 139999) (INT 139995 . 139998) (open-paren 139994 . 139995) (symbol 139983 . 139993) (symbol 139973 . 139982) (EXTERN 139966 . 139972) (punctuation 139964 . 139965) (close-paren 139963 . 139964) (INT 139960 . 139963) (open-paren 139959 . 139960) (symbol 139947 . 139958) (INT 139943 . 139946) (EXTERN 139936 . 139942) (punctuation 139934 . 139935) (close-paren 139933 . 139934) (semantic-list 139930 . 139933) (INT 139927 . 139930) (open-paren 139926 . 139927) (symbol 139915 . 139925) (INT 139911 . 139914) (EXTERN 139904 . 139910) (punctuation 139902 . 139903) (close-paren 139901 . 139902) (INT 139898 . 139901) (punctuation 139896 . 139897) (INT 139893 . 139896) (punctuation 139891 . 139892) (punctuation 139890 . 139891) (CHAR 139885 . 139889) (CONST 139879 . 139884) (open-paren 139878 . 139879) (symbol 139867 . 139877) (INT 139863 . 139866) (EXTERN 139856 . 139862) (close-paren 139843 . 139844) (VOID 139839 . 139843) (open-paren 139838 . 139839) (symbol 139826 . 139837) (VOID 139821 . 139825) (symbol 139811 . 139820) (EXTERN 139804 . 139810) (punctuation 139802 . 139803) (close-paren 139801 . 139802) (INT 139798 . 139801) (open-paren 139797 . 139798) (symbol 139781 . 139796) (VOID 139776 . 139780) (EXTERN 139769 . 139775) (punctuation 139767 . 139768) (close-paren 139766 . 139767) (VOID 139762 . 139766) (open-paren 139761 . 139762) (symbol 139749 . 139760) (VOID 139744 . 139748) (EXTERN 139737 . 139743) (punctuation 139735 . 139736) (close-paren 139734 . 139735) (symbol 139725 . 139734) (punctuation 139723 . 139724) (punctuation 139722 . 139723) (VOID 139717 . 139721) (open-paren 139716 . 139717) (symbol 139704 . 139715) (VOID 139699 . 139703) (EXTERN 139692 . 139698) (punctuation 139690 . 139691) (close-paren 139689 . 139690) (VOID 139685 . 139689) (open-paren 139684 . 139685) (symbol 139673 . 139683) (symbol 139663 . 139672) (EXTERN 139656 . 139662) (punctuation 139654 . 139655) (close-paren 139653 . 139654) (INT 139650 . 139653) (punctuation 139648 . 139649) (INT 139645 . 139648) (punctuation 139643 . 139644) (INT 139640 . 139643) (open-paren 139639 . 139640) (symbol 139623 . 139638) (INT 139619 . 139622) (EXTERN 139612 . 139618) (punctuation 139610 . 139611) (close-paren 139609 . 139610) (INT 139606 . 139609) (open-paren 139605 . 139606) (symbol 139595 . 139604) (VOID 139590 . 139594) (EXTERN 139583 . 139589) (punctuation 139581 . 139582) (close-paren 139580 . 139581) (INT 139577 . 139580) (open-paren 139576 . 139577) (symbol 139560 . 139575) (VOID 139555 . 139559) (EXTERN 139548 . 139554) (punctuation 139546 . 139547) (close-paren 139545 . 139546) (VOID 139541 . 139545) (open-paren 139540 . 139541) (symbol 139520 . 139539) (VOID 139515 . 139519) (EXTERN 139508 . 139514) (punctuation 139506 . 139507) (close-paren 139505 . 139506) (VOID 139501 . 139505) (open-paren 139500 . 139501) (symbol 139481 . 139499) (VOID 139476 . 139480) (EXTERN 139469 . 139475) (punctuation 139467 . 139468) (close-paren 139466 . 139467) (punctuation 139465 . 139466) (symbol 139448 . 139464) (STRUCT 139441 . 139447) (open-paren 139440 . 139441) (symbol 139424 . 139439) (VOID 139419 . 139423) (EXTERN 139412 . 139418) (punctuation 139410 . 139411) (close-paren 139409 . 139410) (punctuation 139408 . 139409) (symbol 139391 . 139407) (STRUCT 139384 . 139390) (open-paren 139383 . 139384) (symbol 139368 . 139382) (VOID 139363 . 139367) (EXTERN 139356 . 139362) (punctuation 139354 . 139355) (close-paren 139353 . 139354) (VOID 139349 . 139353) (open-paren 139348 . 139349) (symbol 139330 . 139347) (VOID 139325 . 139329) (EXTERN 139318 . 139324) (punctuation 139316 . 139317) (close-paren 139315 . 139316) (VOID 139311 . 139315) (open-paren 139310 . 139311) (symbol 139298 . 139309) (VOID 139293 . 139297) (EXTERN 139286 . 139292) (punctuation 139284 . 139285) (close-paren 139283 . 139284) (VOID 139279 . 139283) (open-paren 139278 . 139279) (symbol 139265 . 139277) (VOID 139260 . 139264) (EXTERN 139253 . 139259) (punctuation 139251 . 139252) (close-paren 139250 . 139251) (VOID 139246 . 139250) (open-paren 139245 . 139246) (symbol 139223 . 139244) (VOID 139218 . 139222) (EXTERN 139211 . 139217) (punctuation 139209 . 139210) (close-paren 139208 . 139209) (symbol 139207 . 139208) (CHAR 139202 . 139206) (open-paren 139201 . 139202) (symbol 139190 . 139200) (VOID 139185 . 139189) (EXTERN 139178 . 139184) (punctuation 139176 . 139177) (close-paren 139175 . 139176) (VOID 139171 . 139175) (open-paren 139170 . 139171) (symbol 139143 . 139169) (punctuation 139142 . 139143) (CHAR 139137 . 139141) (EXTERN 139130 . 139136) (punctuation 139128 . 139129) (close-paren 139127 . 139128) (VOID 139123 . 139127) (open-paren 139122 . 139123) (symbol 139104 . 139121) (VOID 139099 . 139103) (EXTERN 139092 . 139098) (punctuation 139090 . 139091) (close-paren 139089 . 139090) (punctuation 139088 . 139089) (CONST 139082 . 139087) (punctuation 139081 . 139082) (CHAR 139076 . 139080) (punctuation 139074 . 139075) (punctuation 139073 . 139074) (CONST 139067 . 139072) (punctuation 139066 . 139067) (CHAR 139061 . 139065) (punctuation 139059 . 139060) (punctuation 139058 . 139059) (CONST 139052 . 139057) (CHAR 139047 . 139051) (open-paren 139046 . 139047) (symbol 139030 . 139045) (INT 139026 . 139029) (EXTERN 139019 . 139025) (close-paren 139010 . 139011) (RETURN 138996 . 139002) (open-paren 138994 . 138995) (close-paren 138992 . 138993) (VOID 138988 . 138992) (open-paren 138987 . 138988) (symbol 138957 . 138986) (BOOL 138952 . 138956) (symbol 138945 . 138951) (punctuation 138760 . 138761) (close-paren 138759 . 138760) (VOID 138755 . 138759) (open-paren 138754 . 138755) (symbol 138740 . 138753) (VOID 138735 . 138739) (EXTERN 138728 . 138734) (punctuation 138698 . 138699) (close-paren 138697 . 138698) (VOID 138693 . 138697) (open-paren 138692 . 138693) (symbol 138679 . 138691) (VOID 138674 . 138678) (EXTERN 138667 . 138673) (punctuation 138638 . 138639) (close-paren 138637 . 138638) (symbol 138626 . 138637) (punctuation 138624 . 138625) (symbol 138613 . 138624) (open-paren 138612 . 138613) (symbol 138583 . 138611) (VOID 138578 . 138582) (EXTERN 138571 . 138577) (punctuation 138538 . 138539) (close-paren 138537 . 138538) (VOID 138533 . 138537) (open-paren 138532 . 138533) (symbol 138519 . 138531) (VOID 138514 . 138518) (EXTERN 138507 . 138513) (punctuation 138505 . 138506) (close-paren 138504 . 138505) (symbol 138493 . 138504) (punctuation 138455 . 138456) (symbol 138444 . 138455) (punctuation 138442 . 138443) (symbol 138431 . 138442) (punctuation 138421 . 138422) (symbol 138412 . 138421) (punctuation 138410 . 138411) (symbol 138401 . 138410) (open-paren 138400 . 138401) (symbol 138377 . 138399) (VOID 138372 . 138376) (EXTERN 138365 . 138371) (punctuation 138363 . 138364) (close-paren 138362 . 138363) (symbol 138353 . 138362) (punctuation 138351 . 138352) (symbol 138342 . 138351) (open-paren 138341 . 138342) (symbol 138327 . 138340) (VOID 138322 . 138326) (EXTERN 138315 . 138321) (punctuation 138313 . 138314) (close-paren 138312 . 138313) (VOID 138308 . 138312) (open-paren 138307 . 138308) (symbol 138287 . 138306) (VOID 138282 . 138286) (EXTERN 138275 . 138281) (punctuation 138273 . 138274) (close-paren 138272 . 138273) (BOOL 138268 . 138272) (punctuation 138266 . 138267) (symbol 138255 . 138266) (punctuation 138253 . 138254) (symbol 138244 . 138253) (open-paren 138243 . 138244) (symbol 138229 . 138242) (VOID 138224 . 138228) (EXTERN 138217 . 138223) (punctuation 138215 . 138216) (close-paren 138214 . 138215) (symbol 138205 . 138214) (punctuation 138203 . 138204) (symbol 138194 . 138203) (open-paren 138193 . 138194) (symbol 138179 . 138192) (VOID 138174 . 138178) (EXTERN 138167 . 138173) (punctuation 138165 . 138166) (close-paren 138164 . 138165) (punctuation 138163 . 138164) (symbol 138156 . 138162) (STRUCT 138149 . 138155) (open-paren 138148 . 138149) (symbol 138129 . 138147) (VOID 138124 . 138128) (EXTERN 138117 . 138123) (punctuation 138088 . 138089) (close-paren 138087 . 138088) (VOID 138083 . 138087) (open-paren 138082 . 138083) (symbol 138067 . 138081) (VOID 138062 . 138066) (EXTERN 138055 . 138061) (punctuation 138053 . 138054) (close-paren 138052 . 138053) (VOID 138048 . 138052) (open-paren 138047 . 138048) (symbol 138035 . 138046) (VOID 138030 . 138034) (EXTERN 138023 . 138029) (punctuation 137992 . 137993) (close-paren 137991 . 137992) (symbol 137980 . 137991) (open-paren 137979 . 137980) (symbol 137959 . 137978) (symbol 137947 . 137958) (EXTERN 137940 . 137946) (punctuation 137938 . 137939) (close-paren 137937 . 137938) (punctuation 137936 . 137937) (symbol 137924 . 137935) (punctuation 137922 . 137923) (symbol 137913 . 137922) (punctuation 137911 . 137912) (symbol 137900 . 137911) (punctuation 137891 . 137892) (symbol 137880 . 137891) (punctuation 137878 . 137879) (symbol 137867 . 137878) (punctuation 137865 . 137866) (symbol 137854 . 137865) (open-paren 137853 . 137854) (symbol 137838 . 137852) (symbol 137826 . 137837) (EXTERN 137819 . 137825) (punctuation 137817 . 137818) (close-paren 137816 . 137817) (VOID 137812 . 137816) (open-paren 137811 . 137812) (symbol 137794 . 137810) (VOID 137789 . 137793) (EXTERN 137782 . 137788) (punctuation 137749 . 137750) (close-paren 137748 . 137749) (BOOL 137744 . 137748) (open-paren 137743 . 137744) (symbol 137724 . 137742) (INT 137720 . 137723) (EXTERN 137713 . 137719) (punctuation 137711 . 137712) (close-paren 137710 . 137711) (VOID 137706 . 137710) (open-paren 137705 . 137706) (symbol 137693 . 137704) (VOID 137688 . 137692) (EXTERN 137681 . 137687) (punctuation 137679 . 137680) (close-paren 137678 . 137679) (BOOL 137674 . 137678) (punctuation 137672 . 137673) (BOOL 137668 . 137672) (punctuation 137666 . 137667) (symbol 137655 . 137666) (open-paren 137654 . 137655) (symbol 137639 . 137653) (symbol 137627 . 137638) (EXTERN 137620 . 137626) (punctuation 137618 . 137619) (close-paren 137617 . 137618) (symbol 137606 . 137617) (open-paren 137605 . 137606) (symbol 137589 . 137604) (symbol 137577 . 137588) (EXTERN 137570 . 137576) (punctuation 137568 . 137569) (close-paren 137567 . 137568) (VOID 137563 . 137567) (open-paren 137562 . 137563) (symbol 137543 . 137561) (symbol 137524 . 137542) (ENUM 137519 . 137523) (EXTERN 137512 . 137518) (punctuation 137510 . 137511) (close-paren 137509 . 137510) (symbol 137484 . 137506) (punctuation 137437 . 137438) (symbol 137418 . 137437) (punctuation 137354 . 137355) (symbol 137335 . 137354) (open-paren 137280 . 137281) (symbol 137259 . 137277) (ENUM 137254 . 137258) (punctuation 137226 . 137227) (close-paren 137225 . 137226) (VOID 137221 . 137225) (open-paren 137220 . 137221) (symbol 137203 . 137219) (VOID 137198 . 137202) (EXTERN 137191 . 137197) (punctuation 137189 . 137190) (close-paren 137188 . 137189) (VOID 137184 . 137188) (open-paren 137183 . 137184) (symbol 137159 . 137182) (VOID 137154 . 137158) (EXTERN 137147 . 137153) (punctuation 137145 . 137146) (close-paren 137144 . 137145) (VOID 137140 . 137144) (open-paren 137139 . 137140) (symbol 137125 . 137138) (VOID 137120 . 137124) (EXTERN 137113 . 137119) (punctuation 137111 . 137112) (close-paren 137110 . 137111) (VOID 137106 . 137110) (open-paren 137105 . 137106) (symbol 137089 . 137104) (VOID 137084 . 137088) (EXTERN 137077 . 137083) (punctuation 137075 . 137076) (close-paren 137074 . 137075) (symbol 137063 . 137074) (punctuation 137061 . 137062) (BOOL 137057 . 137061) (punctuation 137055 . 137056) (punctuation 137054 . 137055) (punctuation 137053 . 137054) (CHAR 137048 . 137052) (punctuation 137046 . 137047) (INT 137043 . 137046) (punctuation 137041 . 137042) (INT 137038 . 137041) (punctuation 137036 . 137037) (INT 137033 . 137036) (open-paren 137032 . 137033) (symbol 137020 . 137031) (VOID "void" 137003 . 137019) (symbol "_Noreturn" 137003 . 137019) (EXTERN 136996 . 137002) (punctuation 136864 . 136865) (close-paren 136863 . 136864) (symbol 136852 . 136863) (open-paren 136851 . 136852) (symbol 136822 . 136850) (VOID 136817 . 136821) (EXTERN 136810 . 136816) (punctuation 136808 . 136809) (close-paren 136807 . 136808) (VOID 136803 . 136807) (open-paren 136802 . 136803) (symbol 136786 . 136801) (VOID 136781 . 136785) (EXTERN 136774 . 136780) (punctuation 136772 . 136773) (close-paren 136771 . 136772) (INT 136768 . 136771) (open-paren 136767 . 136768) (symbol 136748 . 136766) (VOID 136743 . 136747) (EXTERN 136736 . 136742) (punctuation 136622 . 136623) (close-paren 136621 . 136622) (INT 136618 . 136621) (open-paren 136617 . 136618) (symbol 136585 . 136616) (VOID 136580 . 136584) (EXTERN 136573 . 136579) (punctuation 136571 . 136572) (close-paren 136570 . 136571) (INT 136567 . 136570) (open-paren 136566 . 136567) (symbol 136537 . 136565) (VOID 136532 . 136536) (EXTERN 136525 . 136531) (punctuation 136068 . 136069) (close-paren 136067 . 136068) (INT 136064 . 136067) (punctuation 136062 . 136063) (punctuation 136061 . 136062) (symbol 136048 . 136060) (STRUCT 136041 . 136047) (punctuation 136034 . 136035) (symbol 136023 . 136034) (punctuation 136021 . 136022) (BOOL 136017 . 136021) (punctuation 136015 . 136016) (INT 136012 . 136015) (punctuation 136010 . 136011) (INT 136007 . 136010) (punctuation 136005 . 136006) (symbol 135997 . 136005) (open-paren 135996 . 135997) (symbol 135968 . 135995) (INT 135964 . 135967) (EXTERN 135957 . 135963) (punctuation 135955 . 135956) (close-paren 135954 . 135955) (symbol 135943 . 135954) (open-paren 135942 . 135943) (symbol 135920 . 135941) (VOID 135915 . 135919) (EXTERN 135908 . 135914) (punctuation 134932 . 134933) (close-paren 134931 . 134932) (symbol 134920 . 134931) (punctuation 134918 . 134919) (INT 134915 . 134918) (open-paren 134914 . 134915) (symbol 134898 . 134913) (VOID 134893 . 134897) (EXTERN 134886 . 134892) (punctuation 134884 . 134885) (close-paren 134883 . 134884) (INT 134880 . 134883) (open-paren 134879 . 134880) (symbol 134864 . 134878) (punctuation 134863 . 134864) (CHAR 134858 . 134862) (EXTERN 134851 . 134857) (close-paren 134842 . 134843) (open-paren 134841 . 134842) (close-paren 134839 . 134840) (VOID 134835 . 134839) (open-paren 134834 . 134835) (symbol 134803 . 134833) (VOID 134798 . 134802) (symbol 134791 . 134797) (close-paren 134789 . 134790) (open-paren 134788 . 134789) (close-paren 134786 . 134787) (VOID 134782 . 134786) (open-paren 134781 . 134782) (symbol 134746 . 134780) (VOID 134741 . 134745) (symbol 134734 . 134740) (close-paren 134732 . 134733) (open-paren 134731 . 134732) (close-paren 134729 . 134730) (VOID 134725 . 134729) (open-paren 134724 . 134725) (symbol 134711 . 134723) (VOID 134706 . 134710) (symbol 134699 . 134705) (punctuation 134495 . 134496) (close-paren 134494 . 134495) (INT 134491 . 134494) (punctuation 134489 . 134490) (INT 134486 . 134489) (open-paren 134485 . 134486) (symbol 134461 . 134484) (VOID 134456 . 134460) (symbol 134446 . 134455) (EXTERN 134439 . 134445) (punctuation 134372 . 134373) (close-paren 134371 . 134372) (BOOL 134367 . 134371) (punctuation 134365 . 134366) (punctuation 134364 . 134365) (CHAR 134359 . 134363) (CONST 134353 . 134358) (punctuation 134351 . 134352) (punctuation 134350 . 134351) (CHAR 134345 . 134349) (CONST 134339 . 134344) (open-paren 134338 . 134339) (symbol 134322 . 134337) (symbol 134310 . 134321) (EXTERN 134303 . 134309) (punctuation 134138 . 134139) (close-paren 134137 . 134138) (VOID 134133 . 134137) (open-paren 134132 . 134133) (symbol 134118 . 134131) (VOID 134113 . 134117) (EXTERN 134106 . 134112) (punctuation 134104 . 134105) (close-paren 134103 . 134104) (symbol 134092 . 134103) (open-paren 134091 . 134092) (symbol 134069 . 134090) (VOID 134064 . 134068) (EXTERN 134057 . 134063) (punctuation 134055 . 134056) (close-paren 134054 . 134055) (symbol 134043 . 134054) (punctuation 134041 . 134042) (punctuation 134040 . 134041) (symbol 134034 . 134039) (STRUCT 134027 . 134033) (open-paren 134026 . 134027) (symbol 134010 . 134025) (symbol 133998 . 134009) (EXTERN 133991 . 133997) (punctuation 133989 . 133990) (close-paren 133988 . 133989) (symbol 133977 . 133988) (punctuation 133975 . 133976) (INT 133972 . 133975) (punctuation 133970 . 133971) (INT 133967 . 133970) (punctuation 133965 . 133966) (symbol 133954 . 133965) (open-paren 133953 . 133954) (symbol 133937 . 133952) (symbol 133925 . 133936) (EXTERN 133918 . 133924) (punctuation 133916 . 133917) (close-paren 133915 . 133916) (symbol 133904 . 133915) (punctuation 133902 . 133903) (symbol 133891 . 133902) (punctuation 133889 . 133890) (punctuation 133888 . 133889) (symbol 133876 . 133887) (open-paren 133875 . 133876) (symbol 133860 . 133874) (VOID 133855 . 133859) (EXTERN 133848 . 133854) (punctuation 133846 . 133847) (close-paren 133845 . 133846) (symbol 133834 . 133845) (punctuation 133832 . 133833) (symbol 133821 . 133832) (punctuation 133819 . 133820) (punctuation 133818 . 133819) (symbol 133812 . 133817) (STRUCT 133805 . 133811) (open-paren 133804 . 133805) (symbol 133786 . 133803) (VOID 133781 . 133785) (EXTERN 133774 . 133780) (punctuation 133744 . 133745) (close-paren 133743 . 133744) (VOID 133739 . 133743) (open-paren 133738 . 133739) (symbol 133723 . 133737) (VOID 133718 . 133722) (EXTERN 133711 . 133717) (punctuation 133709 . 133710) (close-paren 133708 . 133709) (symbol 133699 . 133708) (punctuation 133697 . 133698) (symbol 133688 . 133697) (punctuation 133686 . 133687) (symbol 133677 . 133686) (open-paren 133676 . 133677) (symbol 133658 . 133675) (BOOL 133653 . 133657) (EXTERN 133646 . 133652) (punctuation 133644 . 133645) (close-paren 133643 . 133644) (VOID 133639 . 133643) (open-paren 133638 . 133639) (symbol 133612 . 133637) (VOID 133607 . 133611) (EXTERN 133600 . 133606) (punctuation 133598 . 133599) (close-paren 133597 . 133598) (VOID 133593 . 133597) (open-paren 133592 . 133593) (symbol 133577 . 133591) (symbol 133567 . 133576) (EXTERN 133560 . 133566) (punctuation 133529 . 133530) (close-paren 133528 . 133529) (VOID 133524 . 133528) (open-paren 133523 . 133524) (symbol 133506 . 133522) (VOID 133501 . 133505) (EXTERN 133494 . 133500) (punctuation 133492 . 133493) (close-paren 133491 . 133492) (VOID 133487 . 133491) (open-paren 133486 . 133487) (symbol 133469 . 133485) (VOID 133464 . 133468) (EXTERN 133457 . 133463) (punctuation 133455 . 133456) (close-paren 133454 . 133455) (VOID 133450 . 133454) (open-paren 133449 . 133450) (symbol 133435 . 133448) (VOID 133430 . 133434) (EXTERN 133423 . 133429) (punctuation 133421 . 133422) (close-paren 133420 . 133421) (VOID 133416 . 133420) (open-paren 133415 . 133416) (symbol 133394 . 133414) (VOID 133389 . 133393) (EXTERN 133382 . 133388) (punctuation 133380 . 133381) (close-paren 133379 . 133380) (VOID 133375 . 133379) (open-paren 133374 . 133375) (symbol 133357 . 133373) (VOID 133352 . 133356) (EXTERN 133345 . 133351) (punctuation 133343 . 133344) (close-paren 133342 . 133343) (VOID 133338 . 133342) (open-paren 133337 . 133338) (symbol 133320 . 133336) (symbol 133308 . 133319) (EXTERN 133301 . 133307) (punctuation 133299 . 133300) (close-paren 133298 . 133299) (VOID 133294 . 133298) (open-paren 133293 . 133294) (symbol 133275 . 133292) (symbol 133263 . 133274) (EXTERN 133256 . 133262) (punctuation 133254 . 133255) (close-paren 133253 . 133254) (VOID 133249 . 133253) (open-paren 133248 . 133249) (symbol 133233 . 133247) (symbol 133221 . 133232) (EXTERN 133214 . 133220) (punctuation 133212 . 133213) (close-paren 133211 . 133212) (punctuation 133210 . 133211) (CHAR 133205 . 133209) (CONST 133199 . 133204) (punctuation 133197 . 133198) (symbol 133186 . 133197) (open-paren 133185 . 133186) (symbol 133166 . 133184) (VOID 133161 . 133165) (EXTERN 133154 . 133160) (punctuation 133152 . 133153) (close-paren 133151 . 133152) (symbol 133140 . 133151) (open-paren 133139 . 133140) (symbol 133124 . 133138) (VOID 133119 . 133123) (EXTERN 133112 . 133118) (punctuation 133110 . 133111) (close-paren 133109 . 133110) (BOOL 133105 . 133109) (open-paren 133104 . 133105) (symbol 133072 . 133103) (BOOL 133067 . 133071) (EXTERN 133060 . 133066) (punctuation 133058 . 133059) (close-paren 133057 . 133058) (VOID 133053 . 133057) (open-paren 133052 . 133053) (symbol 133012 . 133051) (BOOL 133007 . 133011) (EXTERN 133000 . 133006) (punctuation 132998 . 132999) (close-paren 132997 . 132998) (VOID 132993 . 132997) (open-paren 132992 . 132993) (symbol 132971 . 132991) (BOOL 132966 . 132970) (EXTERN 132959 . 132965) (punctuation 132851 . 132852) (close-paren 132850 . 132851) (VOID 132846 . 132850) (open-paren 132845 . 132846) (symbol 132824 . 132844) (VOID 132819 . 132823) (EXTERN 132812 . 132818) (punctuation 132810 . 132811) (close-paren 132809 . 132810) (punctuation 132808 . 132809) (INT 132804 . 132807) (punctuation 132802 . 132803) (symbol 132791 . 132802) (open-paren 132790 . 132791) (symbol 132775 . 132789) (symbol 132763 . 132774) (EXTERN 132756 . 132762) (punctuation 132754 . 132755) (close-paren 132753 . 132754) (symbol 132742 . 132753) (open-paren 132741 . 132742) (symbol 132726 . 132740) (symbol 132714 . 132725) (EXTERN 132707 . 132713) (punctuation 132593 . 132594) (close-paren 132592 . 132593) (VOID 132588 . 132592) (open-paren 132587 . 132588) (symbol 132572 . 132586) (VOID 132567 . 132571) (EXTERN 132560 . 132566) (punctuation 132451 . 132452) (close-paren 132450 . 132451) (VOID 132446 . 132450) (open-paren 132445 . 132446) (symbol 132429 . 132444) (VOID 132424 . 132428) (EXTERN 132417 . 132423) (punctuation 132415 . 132416) (close-paren 132414 . 132415) (VOID 132410 . 132414) (open-paren 132409 . 132410) (symbol 132391 . 132408) (VOID 132386 . 132390) (EXTERN 132379 . 132385) (punctuation 132346 . 132347) (close-paren 132345 . 132346) (VOID 132341 . 132345) (open-paren 132340 . 132341) (symbol 132321 . 132339) (VOID 132316 . 132320) (EXTERN 132309 . 132315) (punctuation 132307 . 132308) (close-paren 132306 . 132307) (VOID 132302 . 132306) (open-paren 132301 . 132302) (symbol 132282 . 132300) (VOID 132277 . 132281) (EXTERN 132270 . 132276) (punctuation 132234 . 132235) (close-paren 132233 . 132234) (VOID 132229 . 132233) (open-paren 132228 . 132229) (symbol 132212 . 132227) (VOID 132207 . 132211) (EXTERN 132200 . 132206) (punctuation 132167 . 132168) (close-paren 132166 . 132167) (VOID 132162 . 132166) (open-paren 132161 . 132162) (symbol 132145 . 132160) (VOID 132140 . 132144) (EXTERN 132133 . 132139) (punctuation 132131 . 132132) (close-paren 132130 . 132131) (VOID 132126 . 132130) (open-paren 132125 . 132126) (symbol 132107 . 132124) (VOID 132102 . 132106) (EXTERN 132095 . 132101) (punctuation 132093 . 132094) (close-paren 132092 . 132093) (symbol 132083 . 132092) (open-paren 132082 . 132083) (symbol 132067 . 132081) (symbol 132055 . 132066) (EXTERN 132048 . 132054) (punctuation 131938 . 131939) (close-paren 131937 . 131938) (VOID 131933 . 131937) (open-paren 131932 . 131933) (symbol 131913 . 131931) (VOID 131908 . 131912) (EXTERN 131901 . 131907) (punctuation 131899 . 131900) (close-paren 131898 . 131899) (VOID 131894 . 131898) (open-paren 131893 . 131894) (symbol 131878 . 131892) (VOID 131873 . 131877) (EXTERN 131866 . 131872) (punctuation 131864 . 131865) (close-paren 131863 . 131864) (punctuation 131862 . 131863) (symbol 131852 . 131861) (punctuation 131850 . 131851) (symbol 131841 . 131850) (punctuation 131831 . 131832) (symbol 131822 . 131831) (punctuation 131820 . 131821) (symbol 131811 . 131820) (open-paren 131810 . 131811) (symbol 131785 . 131809) (symbol 131775 . 131784) (EXTERN 131768 . 131774) (punctuation 131766 . 131767) (close-paren 131765 . 131766) (punctuation 131764 . 131765) (symbol 131754 . 131763) (punctuation 131752 . 131753) (symbol 131743 . 131752) (punctuation 131730 . 131731) (symbol 131721 . 131730) (punctuation 131719 . 131720) (symbol 131710 . 131719) (open-paren 131709 . 131710) (symbol 131688 . 131708) (symbol 131678 . 131687) (EXTERN 131671 . 131677) (punctuation 131669 . 131670) (close-paren 131668 . 131669) (punctuation 131667 . 131668) (symbol 131657 . 131666) (punctuation 131655 . 131656) (punctuation 131654 . 131655) (symbol 131644 . 131653) (punctuation 131642 . 131643) (symbol 131633 . 131642) (open-paren 131632 . 131633) (symbol 131608 . 131631) (symbol 131598 . 131607) (EXTERN 131591 . 131597) (punctuation 131589 . 131590) (close-paren 131588 . 131589) (BOOL 131584 . 131588) (punctuation 131582 . 131583) (symbol 131573 . 131582) (punctuation 131561 . 131562) (symbol 131552 . 131561) (punctuation 131550 . 131551) (symbol 131541 . 131550) (punctuation 131539 . 131540) (symbol 131530 . 131539) (punctuation 131528 . 131529) (symbol 131519 . 131528) (open-paren 131518 . 131519) (symbol 131505 . 131517) (symbol 131495 . 131504) (EXTERN 131488 . 131494) (punctuation 131486 . 131487) (close-paren 131485 . 131486) (BOOL 131481 . 131485) (punctuation 131479 . 131480) (punctuation 131478 . 131479) (symbol 131468 . 131477) (punctuation 131466 . 131467) (punctuation 131465 . 131466) (symbol 131455 . 131464) (punctuation 131453 . 131454) (symbol 131444 . 131453) (punctuation 131432 . 131433) (symbol 131423 . 131432) (punctuation 131421 . 131422) (symbol 131412 . 131421) (punctuation 131410 . 131411) (symbol 131401 . 131410) (punctuation 131399 . 131400) (symbol 131390 . 131399) (open-paren 131389 . 131390) (symbol 131376 . 131388) (symbol 131366 . 131375) (EXTERN 131359 . 131365) (punctuation 131357 . 131358) (close-paren 131356 . 131357) (symbol 131345 . 131356) (punctuation 131343 . 131344) (symbol 131334 . 131343) (punctuation 131332 . 131333) (symbol 131323 . 131332) (punctuation 131287 . 131288) (symbol 131278 . 131287) (punctuation 131276 . 131277) (symbol 131267 . 131276) (punctuation 131265 . 131266) (symbol 131254 . 131265) (open-paren 131253 . 131254) (symbol 131237 . 131252) (symbol 131227 . 131236) (EXTERN 131220 . 131226) (punctuation 131218 . 131219) (close-paren 131217 . 131218) (symbol 131208 . 131217) (punctuation 131198 . 131199) (punctuation 131197 . 131198) (CHAR 131192 . 131196) (CONST 131186 . 131191) (punctuation 131184 . 131185) (symbol 131173 . 131184) (open-paren 131172 . 131173) (symbol 131140 . 131171) (symbol 131130 . 131139) (EXTERN 131123 . 131129) (close-paren 131120 . 131121) (RETURN 131048 . 131054) (open-paren 131044 . 131045) (close-paren 131042 . 131043) (symbol 131036 . 131042) (symbol 131024 . 131035) (punctuation 131022 . 131023) (symbol 131016 . 131022) (symbol 131004 . 131015) (open-paren 131003 . 131004) (symbol 130973 . 131002) (symbol 130963 . 130972) (symbol 130956 . 130962) (close-paren 130953 . 130954) (RETURN 130895 . 130901) (open-paren 130891 . 130892) (close-paren 130889 . 130890) (symbol 130883 . 130889) (symbol 130871 . 130882) (punctuation 130869 . 130870) (symbol 130863 . 130869) (symbol 130851 . 130862) (open-paren 130850 . 130851) (symbol 130832 . 130849) (symbol 130822 . 130831) (symbol 130815 . 130821) (punctuation 130812 . 130813) (close-paren 130811 . 130812) (symbol 130800 . 130811) (punctuation 130788 . 130789) (symbol 130777 . 130788) (punctuation 130775 . 130776) (symbol 130764 . 130775) (open-paren 130763 . 130764) (symbol 130736 . 130762) (symbol 130726 . 130735) (EXTERN 130719 . 130725) (punctuation 130717 . 130718) (close-paren 130716 . 130717) (BOOL 130712 . 130716) (punctuation 130710 . 130711) (BOOL 130706 . 130710) (punctuation 130704 . 130705) (symbol 130693 . 130704) (punctuation 130683 . 130684) (punctuation 130682 . 130683) (symbol 130669 . 130681) (STRUCT 130662 . 130668) (punctuation 130652 . 130653) (symbol 130641 . 130652) (open-paren 130640 . 130641) (symbol 130624 . 130639) (punctuation 130623 . 130624) (symbol 130605 . 130622) (STRUCT 130598 . 130604) (EXTERN 130591 . 130597) (punctuation 130568 . 130569) (close-paren 130567 . 130568) (VOID 130563 . 130567) (open-paren 130562 . 130563) (symbol 130532 . 130561) (VOID 130527 . 130531) (EXTERN 130520 . 130526) (punctuation 130518 . 130519) (close-paren 130517 . 130518) (symbol 130511 . 130517) (symbol 130501 . 130510) (punctuation 130499 . 130500) (symbol 130493 . 130499) (symbol 130483 . 130492) (punctuation 130449 . 130450) (symbol 130441 . 130449) (symbol 130431 . 130440) (open-paren 130430 . 130431) (symbol 130411 . 130429) (VOID 130406 . 130410) (EXTERN 130399 . 130405) (punctuation 130397 . 130398) (close-paren 130396 . 130397) (VOID 130392 . 130396) (open-paren 130391 . 130392) (symbol 130371 . 130390) (VOID 130366 . 130370) (EXTERN 130359 . 130365) (punctuation 130357 . 130358) (close-paren 130356 . 130357) (VOID 130352 . 130356) (open-paren 130351 . 130352) (symbol 130331 . 130350) (VOID 130326 . 130330) (EXTERN 130319 . 130325) (punctuation 130288 . 130289) (close-paren 130287 . 130288) (VOID 130283 . 130287) (open-paren 130282 . 130283) (symbol 130267 . 130281) (VOID 130262 . 130266) (EXTERN 130255 . 130261) (punctuation 130253 . 130254) (close-paren 130252 . 130253) (VOID 130248 . 130252) (open-paren 130247 . 130248) (symbol 130235 . 130246) (VOID 130230 . 130234) (EXTERN 130223 . 130229) (punctuation 130221 . 130222) (close-paren 130220 . 130221) (symbol 130209 . 130220) (open-paren 130208 . 130209) (symbol 130180 . 130207) (BOOL 130175 . 130179) (EXTERN 130168 . 130174) (punctuation 130166 . 130167) (close-paren 130165 . 130166) (punctuation 130164 . 130165) (CHAR 130159 . 130163) (CONST 130153 . 130158) (open-paren 130152 . 130153) (symbol 130135 . 130151) (BOOL 130130 . 130134) (EXTERN 130123 . 130129) (punctuation 130121 . 130122) (close-paren 130120 . 130121) (punctuation 130119 . 130120) (CHAR 130114 . 130118) (CONST 130108 . 130113) (punctuation 130106 . 130107) (INT 130103 . 130106) (open-paren 130102 . 130103) (symbol 130085 . 130101) (symbol 130073 . 130084) (EXTERN 130066 . 130072) (punctuation 130064 . 130065) (close-paren 130063 . 130064) (symbol 130052 . 130063) (open-paren 130051 . 130052) (symbol 130030 . 130050) (BOOL 130025 . 130029) (EXTERN 130018 . 130024) (punctuation 130016 . 130017) (close-paren 130015 . 130016) (symbol 130004 . 130015) (punctuation 130002 . 130003) (punctuation 130001 . 130002) (CHAR 129996 . 130000) (CONST 129990 . 129995) (open-paren 129989 . 129990) (symbol 129964 . 129988) (VOID 129959 . 129963) (symbol 129949 . 129958) (EXTERN 129942 . 129948) (punctuation 129940 . 129941) (close-paren 129939 . 129940) (symbol 129928 . 129939) (punctuation 129926 . 129927) (punctuation 129925 . 129926) (CHAR 129920 . 129924) (CONST 129914 . 129919) (open-paren 129913 . 129914) (symbol 129895 . 129912) (VOID 129890 . 129894) (symbol 129880 . 129889) (EXTERN 129873 . 129879) (punctuation 129871 . 129872) (close-paren 129870 . 129871) (INT 129867 . 129870) (punctuation 129865 . 129866) (symbol 129854 . 129865) (punctuation 129852 . 129853) (punctuation 129851 . 129852) (CHAR 129846 . 129850) (CONST 129840 . 129845) (open-paren 129839 . 129840) (symbol 129821 . 129838) (VOID 129816 . 129820) (symbol 129806 . 129815) (EXTERN 129799 . 129805) (punctuation 129797 . 129798) (close-paren 129796 . 129797) (symbol 129785 . 129796) (open-paren 129784 . 129785) (symbol 129763 . 129783) (VOID 129758 . 129762) (EXTERN 129751 . 129757) (punctuation 129749 . 129750) (close-paren 129748 . 129749) (punctuation 129747 . 129748) (VOID 129742 . 129746) (open-paren 129741 . 129742) (symbol 129727 . 129740) (VOID 129722 . 129726) (EXTERN 129715 . 129721) (punctuation 129713 . 129714) (close-paren 129712 . 129713) (INT 129709 . 129712) (open-paren 129708 . 129709) (symbol 129690 . 129707) (VOID 129685 . 129689) (EXTERN 129678 . 129684) (punctuation 129676 . 129677) (close-paren 129675 . 129676) (INT 129672 . 129675) (punctuation 129670 . 129671) (symbol 129659 . 129670) (punctuation 129652 . 129653) (symbol 129641 . 129652) (punctuation 129639 . 129640) (symbol 129628 . 129639) (punctuation 129626 . 129627) (symbol 129615 . 129626) (punctuation 129608 . 129609) (symbol 129597 . 129608) (punctuation 129595 . 129596) (symbol 129584 . 129595) (punctuation 129582 . 129583) (symbol 129571 . 129582) (open-paren 129570 . 129571) (symbol 129557 . 129569) (symbol 129545 . 129556) (EXTERN 129538 . 129544) (punctuation 129536 . 129537) (close-paren 129535 . 129536) (symbol 129524 . 129535) (open-paren 129523 . 129524) (symbol 129500 . 129522) (symbol 129488 . 129499) (EXTERN 129481 . 129487) (punctuation 129449 . 129450) (close-paren 129448 . 129449) (VOID 129444 . 129448) (open-paren 129443 . 129444) (symbol 129428 . 129442) (VOID 129423 . 129427) (EXTERN 129416 . 129422) (punctuation 129414 . 129415) (close-paren 129413 . 129414) (symbol 129404 . 129413) (punctuation 129402 . 129403) (symbol 129393 . 129402) (punctuation 129391 . 129392) (punctuation 129390 . 129391) (symbol 129383 . 129389) (STRUCT 129376 . 129382) (open-paren 129375 . 129376) (symbol 129362 . 129374) (symbol 129350 . 129361) (EXTERN 129343 . 129349) (punctuation 129341 . 129342) (close-paren 129340 . 129341) (symbol 129331 . 129340) (punctuation 129329 . 129330) (symbol 129320 . 129329) (punctuation 129271 . 129272) (symbol 129260 . 129271) (punctuation 129258 . 129259) (symbol 129247 . 129258) (open-paren 129246 . 129247) (symbol 129219 . 129245) (symbol 129207 . 129218) (EXTERN 129200 . 129206) (punctuation 129198 . 129199) (close-paren 129197 . 129198) (symbol 129188 . 129197) (punctuation 129186 . 129187) (symbol 129177 . 129186) (punctuation 129175 . 129176) (symbol 129164 . 129175) (punctuation 129162 . 129163) (symbol 129151 . 129162) (open-paren 129150 . 129151) (symbol 129134 . 129149) (symbol 129122 . 129133) (EXTERN 129115 . 129121) (punctuation 129113 . 129114) (close-paren 129112 . 129113) (symbol 129101 . 129112) (punctuation 129099 . 129100) (symbol 129088 . 129099) (punctuation 129086 . 129087) (symbol 129075 . 129086) (open-paren 129074 . 129075) (symbol 129052 . 129073) (symbol 129040 . 129051) (EXTERN 129033 . 129039) (punctuation 129031 . 129032) (close-paren 129030 . 129031) (symbol 129024 . 129030) (punctuation 129023 . 129024) (symbol 129011 . 129022) (STRUCT 129004 . 129010) (open-paren 129003 . 129004) (symbol 128988 . 129002) (VOID 128983 . 128987) (EXTERN 128976 . 128982) (punctuation 128974 . 128975) (close-paren 128973 . 128974) (symbol 128964 . 128973) (punctuation 128962 . 128963) (punctuation 128961 . 128962) (symbol 128954 . 128960) (STRUCT 128947 . 128953) (open-paren 128946 . 128947) (symbol 128923 . 128945) (symbol 128913 . 128922) (EXTERN 128906 . 128912) (punctuation 128904 . 128905) (close-paren 128903 . 128904) (symbol 128894 . 128903) (punctuation 128892 . 128893) (punctuation 128891 . 128892) (symbol 128884 . 128890) (STRUCT 128877 . 128883) (open-paren 128876 . 128877) (symbol 128853 . 128875) (symbol 128843 . 128852) (EXTERN 128836 . 128842) (punctuation 128834 . 128835) (close-paren 128833 . 128834) (punctuation 128832 . 128833) (symbol 128825 . 128831) (STRUCT 128818 . 128824) (open-paren 128817 . 128818) (symbol 128797 . 128816) (VOID 128792 . 128796) (EXTERN 128785 . 128791) (punctuation 128783 . 128784) (close-paren 128782 . 128783) (symbol 128771 . 128782) (open-paren 128770 . 128771) (symbol 128749 . 128769) (symbol 128739 . 128748) (EXTERN 128732 . 128738) (punctuation 128730 . 128731) (close-paren 128729 . 128730) (symbol 128718 . 128729) (open-paren 128717 . 128718) (symbol 128701 . 128716) (symbol 128691 . 128700) (EXTERN 128684 . 128690) (punctuation 128652 . 128653) (close-paren 128651 . 128652) (VOID 128647 . 128651) (open-paren 128646 . 128647) (symbol 128631 . 128645) (VOID 128626 . 128630) (EXTERN 128619 . 128625) (punctuation 128617 . 128618) (close-paren 128616 . 128617) (VOID 128612 . 128616) (open-paren 128611 . 128612) (symbol 128596 . 128610) (VOID 128591 . 128595) (EXTERN 128584 . 128590) (punctuation 128582 . 128583) (close-paren 128581 . 128582) (INT 128578 . 128581) (open-paren 128577 . 128578) (symbol 128565 . 128576) (VOID 128560 . 128564) (EXTERN 128553 . 128559) (punctuation 128551 . 128552) (close-paren 128550 . 128551) (VOID 128546 . 128550) (open-paren 128545 . 128546) (symbol 128528 . 128544) (VOID 128523 . 128527) (EXTERN 128516 . 128522) (punctuation 128514 . 128515) (close-paren 128513 . 128514) (symbol 128502 . 128513) (open-paren 128501 . 128502) (symbol 128481 . 128500) (symbol 128469 . 128480) (EXTERN 128462 . 128468) (punctuation 128460 . 128461) (close-paren 128459 . 128460) (symbol 128448 . 128459) (open-paren 128447 . 128448) (symbol 128427 . 128446) (symbol 128415 . 128426) (EXTERN 128408 . 128414) (punctuation 128406 . 128407) (close-paren 128405 . 128406) (symbol 128396 . 128405) (open-paren 128395 . 128396) (symbol 128377 . 128394) (BOOL 128372 . 128376) (EXTERN 128365 . 128371) (punctuation 128363 . 128364) (close-paren 128362 . 128363) (symbol 128351 . 128362) (punctuation 128349 . 128350) (symbol 128338 . 128349) (punctuation 128336 . 128337) (symbol 128325 . 128336) (punctuation 128282 . 128283) (BOOL 128278 . 128282) (punctuation 128276 . 128277) (symbol 128265 . 128276) (punctuation 128263 . 128264) (symbol 128252 . 128263) (open-paren 128251 . 128252) (symbol 128223 . 128250) (VOID 128218 . 128222) (EXTERN 128211 . 128217) (punctuation 128209 . 128210) (close-paren 128208 . 128209) (symbol 128199 . 128208) (punctuation 128197 . 128198) (symbol 128188 . 128197) (open-paren 128187 . 128188) (symbol 128161 . 128186) (VOID 128156 . 128160) (EXTERN 128149 . 128155) (punctuation 128147 . 128148) (close-paren 128146 . 128147) (symbol 128137 . 128146) (punctuation 128135 . 128136) (symbol 128126 . 128135) (open-paren 128125 . 128126) (symbol 128098 . 128124) (VOID 128093 . 128097) (EXTERN 128086 . 128092) (punctuation 128084 . 128085) (close-paren 128083 . 128084) (symbol 128074 . 128083) (punctuation 128072 . 128073) (symbol 128063 . 128072) (open-paren 128062 . 128063) (symbol 128035 . 128061) (VOID 128030 . 128034) (EXTERN 128023 . 128029) (punctuation 128021 . 128022) (close-paren 128020 . 128021) (symbol 128009 . 128020) (open-paren 128008 . 128009) (symbol 127999 . 128007) (VOID 127994 . 127998) (symbol 127984 . 127993) (EXTERN 127977 . 127983) (punctuation 127975 . 127976) (close-paren 127974 . 127975) (VOID 127970 . 127974) (open-paren 127969 . 127970) (symbol 127933 . 127968) (symbol 127921 . 127932) (EXTERN 127914 . 127920) (punctuation 127912 . 127913) (close-paren 127911 . 127912) (symbol 127900 . 127911) (open-paren 127899 . 127900) (symbol 127871 . 127898) (BOOL 127866 . 127870) (EXTERN 127859 . 127865) (punctuation 127828 . 127829) (close-paren 127827 . 127828) (VOID 127823 . 127827) (open-paren 127822 . 127823) (symbol 127806 . 127821) (VOID 127801 . 127805) (EXTERN 127794 . 127800) (punctuation 127792 . 127793) (close-paren 127791 . 127792) (BOOL 127787 . 127791) (open-paren 127786 . 127787) (symbol 127773 . 127785) (VOID 127768 . 127772) (EXTERN 127761 . 127767) (punctuation 127759 . 127760) (close-paren 127758 . 127759) (BOOL 127754 . 127758) (punctuation 127752 . 127753) (symbol 127743 . 127752) (punctuation 127732 . 127733) (symbol 127723 . 127732) (punctuation 127721 . 127722) (symbol 127712 . 127721) (punctuation 127710 . 127711) (symbol 127701 . 127710) (open-paren 127700 . 127701) (symbol 127676 . 127699) (symbol 127664 . 127675) (EXTERN 127657 . 127663) (punctuation 127655 . 127656) (close-paren 127654 . 127655) (BOOL 127650 . 127654) (punctuation 127648 . 127649) (symbol 127639 . 127648) (punctuation 127637 . 127638) (symbol 127628 . 127637) (open-paren 127627 . 127628) (symbol 127608 . 127626) (symbol 127596 . 127607) (EXTERN 127589 . 127595) (punctuation 127587 . 127588) (close-paren 127586 . 127587) (VOID 127582 . 127586) (open-paren 127581 . 127582) (symbol 127567 . 127580) (VOID 127562 . 127566) (symbol 127552 . 127561) (EXTERN 127545 . 127551) (punctuation 127543 . 127544) (close-paren 127542 . 127543) (symbol 127531 . 127542) (open-paren 127530 . 127531) (symbol 127505 . 127529) (VOID 127500 . 127504) (EXTERN 127493 . 127499) (punctuation 127491 . 127492) (close-paren 127490 . 127491) (symbol 127479 . 127490) (open-paren 127478 . 127479) (symbol 127455 . 127477) (VOID 127450 . 127454) (EXTERN 127443 . 127449) (punctuation 127441 . 127442) (close-paren 127440 . 127441) (VOID 127436 . 127440) (open-paren 127435 . 127436) (symbol 127413 . 127434) (symbol 127401 . 127412) (EXTERN 127394 . 127400) (punctuation 127392 . 127393) (close-paren 127391 . 127392) (VOID 127387 . 127391) (open-paren 127386 . 127387) (symbol 127366 . 127385) (symbol 127354 . 127365) (EXTERN 127347 . 127353) (punctuation 127345 . 127346) (close-paren 127344 . 127345) (symbol 127333 . 127344) (open-paren 127332 . 127333) (symbol 127324 . 127331) (VOID 127319 . 127323) (EXTERN 127312 . 127318) (punctuation 127280 . 127281) (close-paren 127279 . 127280) (VOID 127275 . 127279) (open-paren 127274 . 127275) (symbol 127261 . 127273) (VOID 127256 . 127260) (EXTERN 127249 . 127255) (close-paren 126790 . 126791) (RETURN 126754 . 126760) (punctuation 126750 . 126751) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "MODULE_FUNCTIONP" 126729 . 126745)))) 126720 . 126750) (open-paren 126716 . 126717) (close-paren 126714 . 126715) (symbol 126713 . 126714) (symbol 126701 . 126712) (open-paren 126700 . 126701) (symbol 126683 . 126699) (punctuation 126681 . 126682) (symbol 126660 . 126680) (STRUCT 126653 . 126659) (symbol 126646 . 126652) (close-paren 126643 . 126644) (RETURN 126595 . 126601) (open-paren 126591 . 126592) (close-paren 126589 . 126590) (symbol 126588 . 126589) (symbol 126576 . 126587) (open-paren 126575 . 126576) (symbol 126558 . 126574) (BOOL 126553 . 126557) (symbol 126546 . 126552) (punctuation 126543 . 126544) (close-paren 126542 . 126543) (open-paren 126323 . 126324) (symbol 126302 . 126322) (STRUCT 126295 . 126301) (punctuation 126013 . 126014) (close-paren 126012 . 126013) (punctuation 126011 . 126012) (VOID 126006 . 126010) (punctuation 126004 . 126005) (semantic-list 126002 . 126004) (symbol 125990 . 126001) (punctuation 125981 . 125982) (symbol 125972 . 125981) (punctuation 125970 . 125971) (punctuation 125969 . 125970) (symbol 125959 . 125968) (open-paren 125958 . 125959) (close-paren 125956 . 125957) (symbol 125946 . 125956) (punctuation 125945 . 125946) (open-paren 125944 . 125945) (symbol 125932 . 125943) (TYPEDEF 125924 . 125931) (punctuation 125591 . 125592) (close-paren 125590 . 125591) (symbol 125584 . 125590) (punctuation 125583 . 125584) (symbol 125571 . 125582) (STRUCT 125564 . 125570) (open-paren 125563 . 125564) (symbol 125534 . 125562) (BOOL 125529 . 125533) (EXTERN 125522 . 125528) (punctuation 125520 . 125521) (close-paren 125519 . 125520) (VOID 125515 . 125519) (open-paren 125514 . 125515) (symbol 125491 . 125513) (symbol 125479 . 125490) (punctuation 125477 . 125478) (close-paren 125476 . 125477) (symbol 125471 . 125476) (symbol 125459 . 125470) (open-paren 125458 . 125459) (symbol 125444 . 125457) (VOID 125439 . 125443) (EXTERN 125432 . 125438) (punctuation 125430 . 125431) (close-paren 125429 . 125430) (symbol 125426 . 125429) (punctuation 125425 . 125426) (symbol 125413 . 125424) (UNION 125407 . 125412) (punctuation 125405 . 125406) (symbol 125400 . 125405) (punctuation 125399 . 125400) (symbol 125387 . 125398) (UNION 125381 . 125386) (open-paren 125380 . 125381) (symbol 125367 . 125379) (VOID 125362 . 125366) (EXTERN 125355 . 125361) (punctuation 125353 . 125354) (close-paren 125352 . 125353) (symbol 125343 . 125352) (punctuation 125341 . 125342) (punctuation 125340 . 125341) (symbol 125328 . 125339) (punctuation 125326 . 125327) (symbol 125315 . 125326) (open-paren 125314 . 125315) (symbol 125294 . 125313) (symbol 125284 . 125293) (EXTERN 125277 . 125283) (punctuation 125275 . 125276) (close-paren 125274 . 125275) (symbol 125263 . 125274) (open-paren 125262 . 125263) (symbol 125250 . 125261) (VOID 125245 . 125249) (EXTERN 125238 . 125244) (punctuation 125236 . 125237) (close-paren 125235 . 125236) (VOID 125231 . 125235) (open-paren 125230 . 125231) (symbol 125217 . 125229) (VOID 125212 . 125216) (EXTERN 125205 . 125211) (punctuation 125203 . 125204) (close-paren 125202 . 125203) (VOID 125198 . 125202) (open-paren 125197 . 125198) (symbol 125187 . 125196) (VOID 125182 . 125186) (EXTERN 125175 . 125181) (punctuation 125173 . 125174) (close-paren 125172 . 125173) (symbol 125161 . 125172) (punctuation 125159 . 125160) (symbol 125148 . 125159) (punctuation 125146 . 125147) (symbol 125135 . 125146) (open-paren 125134 . 125135) (symbol 125123 . 125133) (symbol 125111 . 125122) (EXTERN 125104 . 125110) (punctuation 125102 . 125103) (close-paren 125101 . 125102) (symbol 125090 . 125101) (punctuation 125088 . 125089) (symbol 125077 . 125088) (open-paren 125076 . 125077) (symbol 125065 . 125075) (symbol 125053 . 125064) (EXTERN 125046 . 125052) (punctuation 125044 . 125045) (close-paren 125043 . 125044) (punctuation 125042 . 125043) (punctuation 125041 . 125042) (punctuation 125040 . 125041) (punctuation 125038 . 125039) (symbol 125027 . 125038) (punctuation 125025 . 125026) (symbol 125016 . 125025) (open-paren 125015 . 125016) (symbol 125005 . 125014) (symbol 124993 . 125004) (EXTERN 124986 . 124992) (punctuation 124984 . 124985) (close-paren 124983 . 124984) (VOID 124979 . 124983) (open-paren 124978 . 124979) (symbol 124963 . 124977) (VOID 124958 . 124962) (EXTERN 124951 . 124957) (punctuation 124949 . 124950) (close-paren 124948 . 124949) (symbol 124945 . 124948) (symbol 124933 . 124944) (open-paren 124932 . 124933) (symbol 124918 . 124931) (symbol 124906 . 124917) (EXTERN 124899 . 124905) (punctuation 124897 . 124898) (close-paren 124896 . 124897) (symbol 124885 . 124896) (open-paren 124884 . 124885) (symbol 124872 . 124883) (VOID 124867 . 124871) (EXTERN 124860 . 124866) (punctuation 124858 . 124859) (close-paren 124857 . 124858) (number 124856 . 124857) (punctuation 124854 . 124855) (number 124853 . 124854) (open-paren 124852 . 124853) (symbol 124828 . 124851) (close-paren 124824 . 124825) (symbol 124817 . 124824) (punctuation 124815 . 124816) (punctuation 124814 . 124815) (CHAR 124809 . 124813) (CONST 124803 . 124808) (open-paren 124802 . 124803) (symbol 124787 . 124801) (symbol 124775 . 124786) (EXTERN 124768 . 124774) (punctuation 124766 . 124767) (close-paren 124765 . 124766) (number 124764 . 124765) (punctuation 124762 . 124763) (number 124761 . 124762) (open-paren 124760 . 124761) (symbol 124736 . 124759) (close-paren 124732 . 124733) (symbol 124725 . 124732) (punctuation 124723 . 124724) (punctuation 124722 . 124723) (CHAR 124717 . 124721) (CONST 124711 . 124716) (open-paren 124710 . 124711) (symbol 124703 . 124709) (VOID 124698 . 124702) (symbol 124688 . 124697) (EXTERN 124681 . 124687) (punctuation 124679 . 124680) (close-paren 124678 . 124679) (number 124677 . 124678) (punctuation 124675 . 124676) (number 124674 . 124675) (open-paren 124673 . 124674) (symbol 124649 . 124672) (close-paren 124647 . 124648) (punctuation 124646 . 124647) (punctuation 124645 . 124646) (punctuation 124644 . 124645) (punctuation 124642 . 124643) (punctuation 124641 . 124642) (CHAR 124636 . 124640) (CONST 124630 . 124635) (open-paren 124629 . 124630) (symbol 124623 . 124628) (VOID 124618 . 124622) (symbol 124608 . 124617) (EXTERN 124601 . 124607) (punctuation 124599 . 124600) (close-paren 124598 . 124599) (punctuation 124597 . 124598) (symbol 124584 . 124596) (STRUCT 124577 . 124583) (open-paren 124576 . 124577) (symbol 124551 . 124575) (VOID 124546 . 124550) (EXTERN 124539 . 124545) (punctuation 124537 . 124538) (close-paren 124536 . 124537) (VOID 124532 . 124536) (open-paren 124531 . 124532) (symbol 124506 . 124530) (VOID 124501 . 124505) (EXTERN 124494 . 124500) (punctuation 124492 . 124493) (close-paren 124491 . 124492) (symbol 124480 . 124491) (punctuation 124478 . 124479) (symbol 124469 . 124478) (open-paren 124468 . 124469) (symbol 124458 . 124467) (symbol 124446 . 124457) (EXTERN 124439 . 124445) (punctuation 124437 . 124438) (close-paren 124436 . 124437) (punctuation 124435 . 124436) (VOID 124430 . 124434) (punctuation 124428 . 124429) (semantic-list 124420 . 124428) (semantic-list 124416 . 124419) (VOID 124411 . 124415) (punctuation 124409 . 124410) (symbol 124400 . 124409) (open-paren 124399 . 124400) (symbol 124376 . 124398) (VOID 124371 . 124375) (EXTERN 124364 . 124370) (punctuation 124362 . 124363) (close-paren 124361 . 124362) (symbol 124350 . 124361) (punctuation 124348 . 124349) (semantic-list 124335 . 124348) (semantic-list 124331 . 124334) (VOID 124326 . 124330) (punctuation 124324 . 124325) (symbol 124315 . 124324) (open-paren 124314 . 124315) (symbol 124295 . 124313) (VOID 124290 . 124294) (EXTERN 124283 . 124289) (punctuation 124281 . 124282) (close-paren 124280 . 124281) (symbol 124271 . 124280) (open-paren 124270 . 124271) (symbol 124249 . 124269) (VOID 124244 . 124248) (EXTERN 124237 . 124243) (punctuation 124235 . 124236) (close-paren 124234 . 124235) (VOID 124230 . 124234) (open-paren 124229 . 124230) (symbol 124199 . 124228) (VOID 124194 . 124198) (EXTERN 124187 . 124193) (punctuation 124185 . 124186) (close-paren 124184 . 124185) (semantic-list 124178 . 124184) (semantic-list 124174 . 124177) (VOID 124169 . 124173) (open-paren 124168 . 124169) (symbol 124141 . 124167) (VOID 124136 . 124140) (EXTERN 124129 . 124135) (punctuation 124127 . 124128) (close-paren 124126 . 124127) (INT 124123 . 124126) (punctuation 124121 . 124122) (semantic-list 124116 . 124121) (semantic-list 124112 . 124115) (VOID 124107 . 124111) (open-paren 124106 . 124107) (symbol 124080 . 124105) (VOID 124075 . 124079) (EXTERN 124068 . 124074) (punctuation 124066 . 124067) (close-paren 124065 . 124066) (punctuation 124064 . 124065) (VOID 124059 . 124063) (punctuation 124057 . 124058) (semantic-list 124049 . 124057) (semantic-list 124045 . 124048) (VOID 124040 . 124044) (open-paren 124039 . 124040) (symbol 124013 . 124038) (VOID 124008 . 124012) (EXTERN 124001 . 124007) (punctuation 123999 . 124000) (close-paren 123998 . 123999) (symbol 123987 . 123998) (punctuation 123985 . 123986) (semantic-list 123972 . 123985) (semantic-list 123968 . 123971) (VOID 123963 . 123967) (open-paren 123962 . 123963) (symbol 123940 . 123961) (VOID 123935 . 123939) (EXTERN 123928 . 123934) (punctuation 123926 . 123927) (close-paren 123925 . 123926) (symbol 123914 . 123925) (punctuation 123912 . 123913) (symbol 123901 . 123912) (open-paren 123900 . 123901) (symbol 123891 . 123899) (VOID 123886 . 123890) (EXTERN 123879 . 123885) (punctuation 123877 . 123878) (close-paren 123876 . 123877) (symbol 123865 . 123876) (ENUM 123860 . 123864) (punctuation 123858 . 123859) (symbol 123847 . 123858) (open-paren 123846 . 123847) (symbol 123824 . 123845) (punctuation 123823 . 123824) (symbol 123815 . 123822) (STRUCT 123808 . 123814) (EXTERN 123801 . 123807) (punctuation 123799 . 123800) (close-paren 123798 . 123799) (symbol 123787 . 123798) (ENUM 123782 . 123786) (punctuation 123780 . 123781) (symbol 123769 . 123780) (open-paren 123768 . 123769) (symbol 123755 . 123767) (punctuation 123754 . 123755) (symbol 123746 . 123753) (STRUCT 123739 . 123745) (EXTERN 123732 . 123738) (punctuation 123730 . 123731) (close-paren 123729 . 123730) (punctuation 123687 . 123688) (punctuation 123672 . 123673) (symbol 123661 . 123672) (punctuation 123654 . 123655) (punctuation 123653 . 123654) (symbol 123641 . 123652) (punctuation 123639 . 123640) (symbol 123630 . 123639) (punctuation 123628 . 123629) (punctuation 123599 . 123600) (open-paren 123585 . 123586) (symbol 123555 . 123580) (symbol 123543 . 123554) (EXTERN 123536 . 123542) (punctuation 123534 . 123535) (close-paren 123533 . 123534) (punctuation 123517 . 123518) (punctuation 123502 . 123503) (symbol 123491 . 123502) (punctuation 123489 . 123490) (symbol 123478 . 123489) (punctuation 123476 . 123477) (symbol 123465 . 123476) (punctuation 123463 . 123464) (punctuation 123434 . 123435) (open-paren 123420 . 123421) (symbol 123394 . 123419) (symbol 123382 . 123393) (EXTERN 123375 . 123381) (punctuation 123373 . 123374) (close-paren 123372 . 123373) (punctuation 123356 . 123357) (punctuation 123341 . 123342) (symbol 123330 . 123341) (punctuation 123328 . 123329) (symbol 123317 . 123328) (punctuation 123315 . 123316) (punctuation 123299 . 123300) (open-paren 123285 . 123286) (symbol 123259 . 123284) (symbol 123247 . 123258) (EXTERN 123240 . 123246) (punctuation 123238 . 123239) (close-paren 123237 . 123238) (punctuation 123221 . 123222) (punctuation 123206 . 123207) (symbol 123195 . 123206) (punctuation 123193 . 123194) (punctuation 123184 . 123185) (open-paren 123170 . 123171) (symbol 123146 . 123169) (symbol 123134 . 123145) (EXTERN 123127 . 123133) (punctuation 123125 . 123126) (close-paren 123124 . 123125) (symbol 123113 . 123124) (punctuation 123111 . 123112) (symbol 123100 . 123111) (punctuation 123098 . 123099) (symbol 123087 . 123098) (open-paren 123086 . 123087) (symbol 123057 . 123085) (symbol 123045 . 123056) (EXTERN 123038 . 123044) (punctuation 123036 . 123037) (close-paren 123035 . 123036) (symbol 123024 . 123035) (punctuation 123022 . 123023) (punctuation 123006 . 123007) (punctuation 122991 . 122992) (symbol 122980 . 122991) (open-paren 122979 . 122980) (symbol 122964 . 122978) (symbol 122952 . 122963) (EXTERN 122945 . 122951) (punctuation 122943 . 122944) (close-paren 122942 . 122943) (symbol 122931 . 122942) (punctuation 122929 . 122930) (symbol 122918 . 122929) (punctuation 122916 . 122917) (symbol 122905 . 122916) (punctuation 122903 . 122904) (symbol 122892 . 122903) (punctuation 122890 . 122891) (symbol 122879 . 122890) (punctuation 122877 . 122878) (symbol 122866 . 122877) (punctuation 122864 . 122865) (symbol 122853 . 122864) (punctuation 122851 . 122852) (symbol 122840 . 122851) (punctuation 122838 . 122839) (symbol 122827 . 122838) (open-paren 122826 . 122827) (symbol 122820 . 122825) (symbol 122808 . 122819) (EXTERN 122801 . 122807) (punctuation 122799 . 122800) (close-paren 122798 . 122799) (symbol 122787 . 122798) (punctuation 122785 . 122786) (symbol 122774 . 122785) (punctuation 122772 . 122773) (symbol 122761 . 122772) (punctuation 122759 . 122760) (symbol 122748 . 122759) (punctuation 122746 . 122747) (symbol 122735 . 122746) (punctuation 122733 . 122734) (symbol 122722 . 122733) (punctuation 122720 . 122721) (symbol 122709 . 122720) (punctuation 122707 . 122708) (symbol 122696 . 122707) (open-paren 122695 . 122696) (symbol 122689 . 122694) (symbol 122677 . 122688) (EXTERN 122670 . 122676) (punctuation 122668 . 122669) (close-paren 122667 . 122668) (symbol 122656 . 122667) (punctuation 122654 . 122655) (symbol 122643 . 122654) (punctuation 122641 . 122642) (symbol 122630 . 122641) (punctuation 122628 . 122629) (symbol 122617 . 122628) (punctuation 122615 . 122616) (symbol 122604 . 122615) (punctuation 122602 . 122603) (symbol 122591 . 122602) (punctuation 122589 . 122590) (symbol 122578 . 122589) (open-paren 122577 . 122578) (symbol 122571 . 122576) (symbol 122559 . 122570) (EXTERN 122552 . 122558) (punctuation 122550 . 122551) (close-paren 122549 . 122550) (symbol 122538 . 122549) (punctuation 122536 . 122537) (symbol 122525 . 122536) (punctuation 122523 . 122524) (symbol 122512 . 122523) (punctuation 122510 . 122511) (symbol 122499 . 122510) (punctuation 122497 . 122498) (symbol 122486 . 122497) (punctuation 122484 . 122485) (symbol 122473 . 122484) (open-paren 122472 . 122473) (symbol 122466 . 122471) (symbol 122454 . 122465) (EXTERN 122447 . 122453) (punctuation 122445 . 122446) (close-paren 122444 . 122445) (symbol 122433 . 122444) (punctuation 122431 . 122432) (symbol 122420 . 122431) (punctuation 122418 . 122419) (symbol 122407 . 122418) (punctuation 122405 . 122406) (symbol 122394 . 122405) (punctuation 122392 . 122393) (symbol 122381 . 122392) (open-paren 122380 . 122381) (symbol 122374 . 122379) (symbol 122362 . 122373) (EXTERN 122355 . 122361) (punctuation 122353 . 122354) (close-paren 122352 . 122353) (symbol 122341 . 122352) (punctuation 122339 . 122340) (symbol 122328 . 122339) (punctuation 122326 . 122327) (symbol 122315 . 122326) (punctuation 122313 . 122314) (symbol 122302 . 122313) (open-paren 122301 . 122302) (symbol 122295 . 122300) (symbol 122283 . 122294) (EXTERN 122276 . 122282) (punctuation 122274 . 122275) (close-paren 122273 . 122274) (symbol 122262 . 122273) (punctuation 122260 . 122261) (symbol 122249 . 122260) (punctuation 122247 . 122248) (symbol 122236 . 122247) (open-paren 122235 . 122236) (symbol 122229 . 122234) (symbol 122217 . 122228) (EXTERN 122210 . 122216) (punctuation 122208 . 122209) (close-paren 122207 . 122208) (symbol 122196 . 122207) (punctuation 122194 . 122195) (symbol 122183 . 122194) (open-paren 122182 . 122183) (symbol 122176 . 122181) (symbol 122164 . 122175) (EXTERN 122157 . 122163) (punctuation 122155 . 122156) (close-paren 122154 . 122155) (symbol 122143 . 122154) (open-paren 122142 . 122143) (symbol 122136 . 122141) (symbol 122124 . 122135) (EXTERN 122117 . 122123) (punctuation 122115 . 122116) (close-paren 122114 . 122115) (symbol 122103 . 122114) (punctuation 122101 . 122102) (symbol 122090 . 122101) (open-paren 122089 . 122090) (symbol 122082 . 122088) (symbol 122070 . 122081) (EXTERN 122063 . 122069) (punctuation 122061 . 122062) (close-paren 122060 . 122061) (symbol 122056 . 122060) (symbol 122044 . 122055) (open-paren 122043 . 122044) (symbol 122034 . 122042) (symbol 122022 . 122033) (EXTERN 122015 . 122021) (punctuation 122013 . 122014) (close-paren 122012 . 122013) (symbol 122002 . 122012) (punctuation 122001 . 122002) (symbol 121989 . 122000) (punctuation 121987 . 121988) (symbol 121980 . 121987) (symbol 121970 . 121979) (punctuation 121968 . 121969) (symbol 121964 . 121968) (punctuation 121963 . 121964) (symbol 121953 . 121962) (STRUCT 121946 . 121952) (open-paren 121945 . 121946) (symbol 121932 . 121944) (symbol 121920 . 121931) (EXTERN 121913 . 121919) (punctuation 121911 . 121912) (close-paren 121910 . 121911) (symbol 121899 . 121910) (open-paren 121898 . 121899) (symbol 121888 . 121897) (BOOL 121883 . 121887) (EXTERN 121876 . 121882) (punctuation 121874 . 121875) (close-paren 121873 . 121874) (symbol 121862 . 121873) (punctuation 121860 . 121861) (punctuation 121859 . 121860) (CHAR 121854 . 121858) (CONST 121848 . 121853) (open-paren 121847 . 121848) (symbol 121834 . 121846) (VOID 121829 . 121833) (symbol 121819 . 121828) (EXTERN 121812 . 121818) (punctuation 121810 . 121811) (close-paren 121809 . 121810) (symbol 121798 . 121809) (punctuation 121792 . 121793) (symbol 121781 . 121792) (punctuation 121779 . 121780) (symbol 121768 . 121779) (punctuation 121766 . 121767) (symbol 121755 . 121766) (open-paren 121754 . 121755) (symbol 121745 . 121753) (VOID 121740 . 121744) (symbol 121730 . 121739) (EXTERN 121723 . 121729) (punctuation 121721 . 121722) (close-paren 121720 . 121721) (symbol 121709 . 121720) (punctuation 121707 . 121708) (symbol 121696 . 121707) (punctuation 121694 . 121695) (symbol 121683 . 121694) (open-paren 121682 . 121683) (symbol 121673 . 121681) (VOID 121668 . 121672) (symbol 121658 . 121667) (EXTERN 121651 . 121657) (punctuation 121649 . 121650) (close-paren 121648 . 121649) (symbol 121637 . 121648) (punctuation 121635 . 121636) (symbol 121624 . 121635) (open-paren 121623 . 121624) (symbol 121614 . 121622) (VOID 121609 . 121613) (symbol 121599 . 121608) (EXTERN 121592 . 121598) (punctuation 121590 . 121591) (close-paren 121589 . 121590) (symbol 121578 . 121589) (open-paren 121577 . 121578) (symbol 121568 . 121576) (VOID 121563 . 121567) (symbol 121553 . 121562) (EXTERN 121546 . 121552) (close-paren 121544 . 121545) (open-paren 121510 . 121511) (close-paren 121508 . 121509) (symbol 121504 . 121508) (symbol 121492 . 121503) (punctuation 121490 . 121491) (symbol 121478 . 121490) (symbol 121466 . 121477) (open-paren 121465 . 121466) (symbol 121457 . 121464) (VOID 121452 . 121456) (symbol 121442 . 121451) (symbol 121435 . 121441) (punctuation 121433 . 121434) (close-paren 121432 . 121433) (VOID 121428 . 121432) (open-paren 121427 . 121428) (symbol 121422 . 121426) (symbol 121410 . 121421) (EXTERN 121403 . 121409) (punctuation 121401 . 121402) (close-paren 121400 . 121401) (punctuation 121343 . 121344) (punctuation 121317 . 121318) (symbol 121313 . 121317) (punctuation 121312 . 121313) (symbol 121300 . 121311) (punctuation 121298 . 121299) (symbol 121293 . 121298) (symbol 121283 . 121292) (open-paren 121282 . 121283) (symbol 121263 . 121281) (symbol 121251 . 121262) (EXTERN 121244 . 121250) (punctuation 121242 . 121243) (close-paren 121241 . 121242) (symbol 121230 . 121241) (punctuation 121228 . 121229) (symbol 121217 . 121228) (punctuation 121215 . 121216) (symbol 121204 . 121215) (open-paren 121203 . 121204) (symbol 121182 . 121202) (VOID 121177 . 121181) (EXTERN 121170 . 121176) (punctuation 121168 . 121169) (close-paren 121167 . 121168) (symbol 121156 . 121167) (open-paren 121155 . 121156) (symbol 121146 . 121154) (VOID 121141 . 121145) (EXTERN 121134 . 121140) (close-paren 120754 . 120755) (semantic-list 120746 . 120751) (RETURN 120708 . 120714) (open-paren 120704 . 120705) (close-paren 120702 . 120703) (symbol 120699 . 120702) (punctuation 120698 . 120699) (CHAR 120693 . 120697) (CONST 120687 . 120692) (open-paren 120686 . 120687) (symbol 120670 . 120685) (symbol 120658 . 120669) (symbol 120651 . 120657) (close-paren 120648 . 120649) (semantic-list 120640 . 120645) (RETURN 120611 . 120617) (open-paren 120607 . 120608) (close-paren 120605 . 120606) (symbol 120602 . 120605) (punctuation 120601 . 120602) (CHAR 120596 . 120600) (CONST 120590 . 120595) (open-paren 120589 . 120590) (symbol 120582 . 120588) (symbol 120570 . 120581) (symbol 120563 . 120569) (punctuation 120560 . 120561) (close-paren 120559 . 120560) (VOID 120555 . 120559) (open-paren 120554 . 120555) (symbol 120540 . 120553) (VOID 120535 . 120539) (EXTERN 120528 . 120534) (punctuation 120526 . 120527) (close-paren 120525 . 120526) (VOID 120521 . 120525) (open-paren 120520 . 120521) (symbol 120509 . 120519) (VOID 120504 . 120508) (EXTERN 120497 . 120503) (punctuation 120495 . 120496) (close-paren 120494 . 120495) (VOID 120490 . 120494) (open-paren 120489 . 120490) (symbol 120476 . 120488) (VOID 120471 . 120475) (EXTERN 120464 . 120470) (punctuation 120462 . 120463) (close-paren 120461 . 120462) (symbol 120450 . 120461) (punctuation 120448 . 120449) (punctuation 120447 . 120448) (CHAR 120442 . 120446) (CONST 120436 . 120441) (open-paren 120435 . 120436) (symbol 120423 . 120434) (VOID 120418 . 120422) (EXTERN 120411 . 120417) (punctuation 120409 . 120410) (close-paren 120408 . 120409) (symbol 120397 . 120408) (punctuation 120370 . 120371) (semantic-list 120344 . 120370) (semantic-list 120340 . 120343) (VOID 120335 . 120339) (punctuation 120333 . 120334) (symbol 120322 . 120333) (open-paren 120321 . 120322) (symbol 120309 . 120320) (VOID 120304 . 120308) (EXTERN 120297 . 120303) (punctuation 120295 . 120296) (close-paren 120294 . 120295) (BOOL 120290 . 120294) (punctuation 120288 . 120289) (INT 120285 . 120288) (punctuation 120283 . 120284) (punctuation 120282 . 120283) (CONST 120276 . 120281) (CHAR 120271 . 120275) (open-paren 120270 . 120271) (symbol 120253 . 120269) (symbol 120241 . 120252) (EXTERN 120234 . 120240) (punctuation 120232 . 120233) (close-paren 120231 . 120232) (BOOL 120227 . 120231) (punctuation 120225 . 120226) (symbol 120214 . 120225) (punctuation 120212 . 120213) (punctuation 120211 . 120212) (symbol 120199 . 120210) (punctuation 120179 . 120180) (symbol 120168 . 120179) (punctuation 120166 . 120167) (symbol 120155 . 120166) (punctuation 120153 . 120154) (symbol 120142 . 120153) (open-paren 120141 . 120142) (symbol 120135 . 120140) (INT 120131 . 120134) (EXTERN 120124 . 120130) (close-paren 120122 . 120123) (semantic-list 120052 . 120065) (IF 120049 . 120051) (open-paren 120045 . 120046) (close-paren 120043 . 120044) (symbol 120042 . 120043) (symbol 120030 . 120041) (open-paren 120029 . 120030) (symbol 120013 . 120028) (VOID 120008 . 120012) (symbol 120001 . 120007) (punctuation 119999 . 120000) (close-paren 119998 . 119999) (symbol 119989 . 119998) (punctuation 119987 . 119988) (symbol 119978 . 119987) (punctuation 119976 . 119977) (punctuation 119975 . 119976) (CHAR 119970 . 119974) (CONST 119964 . 119969) (punctuation 119962 . 119963) (symbol 119951 . 119962) (open-paren 119950 . 119951) (symbol 119941 . 119949) (symbol 119929 . 119940) (EXTERN 119922 . 119928) (punctuation 119920 . 119921) (close-paren 119919 . 119920) (symbol 119908 . 119919) (punctuation 119906 . 119907) (symbol 119895 . 119906) (open-paren 119894 . 119895) (symbol 119882 . 119893) (VOID 119877 . 119881) (EXTERN 119870 . 119876) (punctuation 119868 . 119869) (close-paren 119867 . 119868) (symbol 119856 . 119867) (punctuation 119854 . 119855) (symbol 119843 . 119854) (punctuation 119841 . 119842) (symbol 119830 . 119841) (open-paren 119829 . 119830) (symbol 119815 . 119828) (symbol 119803 . 119814) (EXTERN 119796 . 119802) (punctuation 119794 . 119795) (close-paren 119793 . 119794) (symbol 119784 . 119793) (punctuation 119782 . 119783) (punctuation 119781 . 119782) (CHAR 119776 . 119780) (CONST 119770 . 119775) (open-paren 119769 . 119770) (symbol 119751 . 119768) (symbol 119739 . 119750) (EXTERN 119732 . 119738) (punctuation 119730 . 119731) (close-paren 119729 . 119730) (symbol 119720 . 119729) (punctuation 119718 . 119719) (punctuation 119717 . 119718) (CHAR 119712 . 119716) (CONST 119706 . 119711) (open-paren 119705 . 119706) (symbol 119696 . 119704) (symbol 119684 . 119695) (EXTERN 119677 . 119683) (punctuation 119675 . 119676) (close-paren 119674 . 119675) (symbol 119663 . 119674) (open-paren 119662 . 119663) (symbol 119648 . 119661) (symbol 119636 . 119647) (EXTERN 119629 . 119635) (punctuation 119599 . 119600) (close-paren 119598 . 119599) (number 119597 . 119598) (punctuation 119595 . 119596) (number 119594 . 119595) (open-paren 119593 . 119594) (symbol 119569 . 119592) (close-paren 119565 . 119566) (symbol 119558 . 119565) (punctuation 119556 . 119557) (punctuation 119555 . 119556) (CONST 119549 . 119554) (CHAR 119544 . 119548) (punctuation 119535 . 119536) (symbol 119526 . 119535) (punctuation 119524 . 119525) (punctuation 119523 . 119524) (CONST 119517 . 119522) (CHAR 119512 . 119516) (punctuation 119510 . 119511) (punctuation 119509 . 119510) (symbol 119499 . 119508) (punctuation 119497 . 119498) (punctuation 119496 . 119497) (punctuation 119495 . 119496) (CHAR 119490 . 119494) (open-paren 119489 . 119490) (symbol 119479 . 119488) (symbol 119469 . 119478) (EXTERN 119462 . 119468) (punctuation 119460 . 119461) (close-paren 119459 . 119460) (number 119458 . 119459) (punctuation 119456 . 119457) (number 119455 . 119456) (open-paren 119454 . 119455) (symbol 119430 . 119453) (close-paren 119426 . 119427) (punctuation 119425 . 119426) (punctuation 119424 . 119425) (punctuation 119423 . 119424) (punctuation 119421 . 119422) (punctuation 119420 . 119421) (CONST 119414 . 119419) (CHAR 119409 . 119413) (punctuation 119401 . 119402) (symbol 119392 . 119401) (punctuation 119390 . 119391) (punctuation 119389 . 119390) (CONST 119383 . 119388) (CHAR 119378 . 119382) (punctuation 119376 . 119377) (punctuation 119375 . 119376) (symbol 119365 . 119374) (punctuation 119363 . 119364) (punctuation 119362 . 119363) (punctuation 119361 . 119362) (CHAR 119356 . 119360) (open-paren 119355 . 119356) (symbol 119346 . 119354) (symbol 119336 . 119345) (EXTERN 119329 . 119335) (punctuation 119327 . 119328) (close-paren 119326 . 119327) (number 119325 . 119326) (punctuation 119323 . 119324) (number 119322 . 119323) (open-paren 119321 . 119322) (symbol 119297 . 119320) (close-paren 119293 . 119294) (punctuation 119292 . 119293) (punctuation 119291 . 119292) (punctuation 119290 . 119291) (punctuation 119288 . 119289) (punctuation 119287 . 119288) (CONST 119281 . 119286) (CHAR 119276 . 119280) (punctuation 119274 . 119275) (punctuation 119273 . 119274) (CHAR 119268 . 119272) (open-paren 119267 . 119268) (symbol 119258 . 119266) (symbol 119248 . 119257) (EXTERN 119241 . 119247) (punctuation 119239 . 119240) (close-paren 119238 . 119239) (symbol 119231 . 119238) (punctuation 119225 . 119226) (punctuation 119224 . 119225) (CHAR 119219 . 119223) (CONST 119213 . 119218) (punctuation 119211 . 119212) (punctuation 119210 . 119211) (CHAR 119205 . 119209) (CONST 119199 . 119204) (punctuation 119197 . 119198) (symbol 119188 . 119197) (punctuation 119186 . 119187) (punctuation 119185 . 119186) (CHAR 119180 . 119184) (open-paren 119179 . 119180) (symbol 119172 . 119178) (symbol 119162 . 119171) (EXTERN 119155 . 119161) (punctuation 119124 . 119125) (close-paren 119123 . 119124) (VOID 119119 . 119123) (open-paren 119118 . 119119) (symbol 119104 . 119117) (VOID 119099 . 119103) (EXTERN 119092 . 119098) (punctuation 119090 . 119091) (close-paren 119089 . 119090) (VOID 119085 . 119089) (open-paren 119084 . 119085) (symbol 119068 . 119083) (VOID 119063 . 119067) (EXTERN 119056 . 119062) (punctuation 119054 . 119055) (close-paren 119053 . 119054) (DOUBLE 119047 . 119053) (punctuation 119045 . 119046) (punctuation 119044 . 119045) (CHAR 119039 . 119043) (open-paren 119038 . 119039) (symbol 119022 . 119037) (INT 119018 . 119021) (EXTERN 119011 . 119017) (punctuation 118973 . 118974) (close-paren 118972 . 118973) (symbol 118961 . 118972) (punctuation 118959 . 118960) (punctuation 118943 . 118944) (punctuation 118928 . 118929) (punctuation 118927 . 118928) (CHAR 118922 . 118926) (CONST 118916 . 118921) (open-paren 118915 . 118916) (symbol 118871 . 118906) (symbol 118859 . 118870) (EXTERN 118852 . 118858) (punctuation 118850 . 118851) (close-paren 118849 . 118850) (symbol 118838 . 118849) (punctuation 118831 . 118832) (punctuation 118830 . 118831) (CHAR 118825 . 118829) (CONST 118819 . 118824) (punctuation 118817 . 118818) (symbol 118806 . 118817) (punctuation 118804 . 118805) (symbol 118793 . 118804) (open-paren 118792 . 118793) (symbol 118772 . 118791) (VOID 118767 . 118771) (EXTERN 118760 . 118766) (punctuation 118734 . 118735) (close-paren 118733 . 118734) (punctuation 118732 . 118733) (CHAR 118727 . 118731) (CONST 118721 . 118726) (open-paren 118720 . 118721) (symbol 118695 . 118719) (VOID 118690 . 118694) (EXTERN 118683 . 118689) (close-paren 118661 . 118662) (symbol 118650 . 118661) (open-paren 118649 . 118650) (symbol 118637 . 118648) (VOID 118632 . 118636) (EXTERN 118625 . 118631) (punctuation 118551 . 118552) (close-paren 118550 . 118551) (VOID 118546 . 118550) (open-paren 118545 . 118546) (symbol 118529 . 118544) (VOID 118524 . 118528) (EXTERN 118517 . 118523) (punctuation 118515 . 118516) (close-paren 118514 . 118515) (symbol 118503 . 118514) (open-paren 118502 . 118503) (symbol 118488 . 118501) (symbol 118476 . 118487) (EXTERN 118469 . 118475) (punctuation 118467 . 118468) (close-paren 118466 . 118467) (UNSIGNED 118458 . 118466) (punctuation 118456 . 118457) (UNSIGNED 118448 . 118456) (punctuation 118441 . 118442) (punctuation 118440 . 118441) (symbol 118432 . 118439) (STRUCT 118425 . 118431) (punctuation 118423 . 118424) (symbol 118412 . 118423) (punctuation 118405 . 118406) (symbol 118394 . 118405) (punctuation 118392 . 118393) (symbol 118381 . 118392) (punctuation 118374 . 118375) (semantic-list 118348 . 118374) (semantic-list 118334 . 118347) (VOID 118329 . 118333) (open-paren 118328 . 118329) (symbol 118301 . 118327) (VOID 118296 . 118300) (EXTERN 118289 . 118295) (punctuation 118287 . 118288) (close-paren 118286 . 118287) (symbol 118275 . 118286) (punctuation 118273 . 118274) (symbol 118262 . 118273) (punctuation 118260 . 118261) (symbol 118249 . 118260) (punctuation 118219 . 118220) (semantic-list 118152 . 118219) (semantic-list 118148 . 118151) (VOID 118143 . 118147) (open-paren 118142 . 118143) (symbol 118127 . 118141) (VOID 118122 . 118126) (EXTERN 118115 . 118121) (punctuation 118113 . 118114) (close-paren 118112 . 118113) (symbol 118101 . 118112) (punctuation 118099 . 118100) (INT 118096 . 118099) (punctuation 118094 . 118095) (INT 118091 . 118094) (punctuation 118089 . 118090) (symbol 118078 . 118089) (open-paren 118077 . 118078) (symbol 118056 . 118076) (VOID 118051 . 118055) (EXTERN 118044 . 118050) (punctuation 118042 . 118043) (close-paren 118041 . 118042) (punctuation 118040 . 118041) (INT 118036 . 118039) (punctuation 118034 . 118035) (punctuation 118033 . 118034) (INT 118029 . 118032) (punctuation 117982 . 117983) (INT 117979 . 117982) (punctuation 117977 . 117978) (symbol 117966 . 117977) (open-paren 117965 . 117966) (symbol 117940 . 117964) (symbol 117928 . 117939) (EXTERN 117921 . 117927) (punctuation 117919 . 117920) (close-paren 117918 . 117919) (symbol 117907 . 117918) (open-paren 117906 . 117907) (symbol 117890 . 117905) (symbol 117878 . 117889) (EXTERN 117871 . 117877) (punctuation 117505 . 117506) (close-paren 117504 . 117505) (VOID 117500 . 117504) (open-paren 117499 . 117500) (symbol 117478 . 117498) (VOID 117473 . 117477) (EXTERN 117466 . 117472) (punctuation 117457 . 117458) (close-paren 117456 . 117457) (semantic-list 117453 . 117456) (open-paren 117452 . 117453) (symbol 117430 . 117451) (close-paren 117428 . 117429) (symbol 117422 . 117428) (punctuation 117420 . 117421) (symbol 117414 . 117420) (open-paren 117413 . 117414) (symbol 117399 . 117412) (punctuation 117398 . 117399) (VOID 117393 . 117397) (EXTERN 117386 . 117392) (close-paren 117193 . 117194) (punctuation 117191 . 117192) (semantic-list 117189 . 117191) (semantic-list "((void) 0)" 117166 . 117188) (spp-arg-list nil 117166 . 117188) (open-paren 117164 . 117165) (close-paren 117162 . 117163) (VOID 117158 . 117162) (open-paren 117157 . 117158) (close-paren 117155 . 117156) (symbol 117140 . 117155) (open-paren 117139 . 117140) (VOID 117134 . 117138) (symbol 117127 . 117133) (punctuation 117057 . 117058) (close-paren 117056 . 117057) (symbol 117045 . 117056) (open-paren 117044 . 117045) (symbol 117024 . 117043) (INT 117020 . 117023) (EXTERN 117013 . 117019) (punctuation 117011 . 117012) (close-paren 117010 . 117011) (VOID 117006 . 117010) (open-paren 117005 . 117006) (symbol 116989 . 117004) (punctuation 116987 . 116988) (symbol 116980 . 116986) (STRUCT 116973 . 116979) (EXTERN 116966 . 116972) (punctuation 116964 . 116965) (close-paren 116963 . 116964) (VOID 116959 . 116963) (open-paren 116958 . 116959) (symbol 116944 . 116957) (VOID 116939 . 116943) (EXTERN 116932 . 116938) (punctuation 116930 . 116931) (close-paren 116929 . 116930) (VOID 116925 . 116929) (open-paren 116924 . 116925) (symbol 116913 . 116923) (VOID 116908 . 116912) (EXTERN 116901 . 116907) (punctuation 116899 . 116900) (close-paren 116898 . 116899) (VOID 116894 . 116898) (open-paren 116893 . 116894) (symbol 116877 . 116892) (VOID 116872 . 116876) (EXTERN 116865 . 116871) (punctuation 116863 . 116864) (close-paren 116862 . 116863) (punctuation 116861 . 116862) (symbol 116851 . 116860) (STRUCT 116844 . 116850) (open-paren 116843 . 116844) (symbol 116833 . 116842) (VOID 116828 . 116832) (EXTERN 116821 . 116827) (punctuation 116819 . 116820) (close-paren 116818 . 116819) (symbol 116807 . 116818) (open-paren 116806 . 116807) (symbol 116794 . 116805) (VOID 116789 . 116793) (EXTERN 116782 . 116788) (punctuation 116780 . 116781) (close-paren 116779 . 116780) (symbol 116768 . 116779) (punctuation 116766 . 116767) (symbol 116755 . 116766) (punctuation 116753 . 116754) (symbol 116742 . 116753) (open-paren 116741 . 116742) (symbol 116727 . 116740) (symbol 116715 . 116726) (EXTERN 116708 . 116714) (punctuation 116706 . 116707) (close-paren 116705 . 116706) (symbol 116694 . 116705) (open-paren 116693 . 116694) (symbol 116677 . 116692) (VOID 116672 . 116676) (EXTERN 116665 . 116671) (punctuation 116663 . 116664) (close-paren 116662 . 116663) (symbol 116653 . 116662) (punctuation 116651 . 116652) (punctuation 116650 . 116651) (symbol 116638 . 116649) (open-paren 116637 . 116638) (symbol 116620 . 116636) (symbol 116608 . 116619) (EXTERN 116601 . 116607) (punctuation 116599 . 116600) (close-paren 116598 . 116599) (symbol 116587 . 116598) (punctuation 116574 . 116575) (punctuation 116573 . 116574) (VOID 116568 . 116572) (punctuation 116566 . 116567) (semantic-list 116560 . 116566) (semantic-list 116556 . 116559) (VOID 116551 . 116555) (open-paren 116550 . 116551) (symbol 116524 . 116549) (symbol 116512 . 116523) (EXTERN 116505 . 116511) (punctuation 116503 . 116504) (close-paren 116502 . 116503) (punctuation 116501 . 116502) (VOID 116496 . 116500) (punctuation 116494 . 116495) (punctuation 116493 . 116494) (VOID 116488 . 116492) (open-paren 116487 . 116488) (symbol 116469 . 116486) (symbol 116457 . 116468) (EXTERN 116450 . 116456) (punctuation 116448 . 116449) (close-paren 116447 . 116448) (symbol 116438 . 116447) (punctuation 116436 . 116437) (punctuation 116435 . 116436) (VOID 116430 . 116434) (open-paren 116429 . 116430) (symbol 116411 . 116428) (symbol 116399 . 116410) (EXTERN 116392 . 116398) (punctuation 116390 . 116391) (close-paren 116389 . 116390) (punctuation 116388 . 116389) (VOID 116383 . 116387) (open-paren 116382 . 116383) (symbol 116368 . 116381) (symbol 116356 . 116367) (EXTERN 116349 . 116355) (punctuation 116347 . 116348) (close-paren 116346 . 116347) (symbol 116335 . 116346) (punctuation 116333 . 116334) (symbol 116322 . 116333) (punctuation 116309 . 116310) (symbol 116298 . 116309) (punctuation 116296 . 116297) (symbol 116285 . 116296) (open-paren 116284 . 116285) (symbol 116258 . 116283) (symbol 116246 . 116257) (EXTERN 116239 . 116245) (punctuation 116237 . 116238) (close-paren 116236 . 116237) (symbol 116227 . 116236) (punctuation 116225 . 116226) (symbol 116216 . 116225) (punctuation 116214 . 116215) (symbol 116205 . 116214) (open-paren 116204 . 116205) (symbol 116182 . 116203) (symbol 116170 . 116181) (EXTERN 116163 . 116169) (punctuation 116161 . 116162) (close-paren 116160 . 116161) (VOID 116156 . 116160) (open-paren 116155 . 116156) (symbol 116128 . 116154) (symbol 116118 . 116127) (EXTERN 116111 . 116117) (punctuation 116109 . 116110) (close-paren 116108 . 116109) (VOID 116104 . 116108) (open-paren 116103 . 116104) (symbol 116080 . 116102) (VOID 116075 . 116079) (EXTERN 116068 . 116074) (punctuation 116066 . 116067) (close-paren 116065 . 116066) (DOUBLE 116059 . 116065) (open-paren 116058 . 116059) (symbol 116047 . 116057) (symbol 116035 . 116046) (EXTERN 116028 . 116034) (punctuation 115316 . 115317) (close-paren 115315 . 115316) (symbol 115306 . 115315) (ENUM 115301 . 115305) (punctuation 115291 . 115292) (INT 115288 . 115291) (punctuation 115286 . 115287) (INT 115283 . 115286) (punctuation 115281 . 115282) (INT 115278 . 115281) (open-paren 115277 . 115278) (symbol 115255 . 115276) (punctuation 115254 . 115255) (symbol 115242 . 115253) (STRUCT 115235 . 115241) (EXTERN 115228 . 115234) (close-paren 115225 . 115226) (RETURN 115215 . 115221) (punctuation 115191 . 115192) (punctuation 115190 . 115191) (semantic-list 115187 . 115190) (symbol 115171 . 115186) (punctuation 115153 . 115154) (punctuation 115152 . 115153) (semantic-list 115149 . 115152) (symbol 115133 . 115148) (punctuation 115129 . 115130) (semantic-list #("((v)->header.size |= PSEUDOVECTOR_FLAG | ((code) << PSEUDOVECTOR_AREA_BITS))" 0 1 (macros (("code" semantic-list "(v)" 115104 . 115107) ("v" symbol "XVECTOR" 115096 . 115103)))) 115082 . 115129) (open-paren 114972 . 114973) (close-paren 114970 . 114971) (symbol 114962 . 114970) (INT 114958 . 114961) (punctuation 114956 . 114957) (symbol 114951 . 114956) (INT 114947 . 114950) (open-paren 114946 . 114947) (symbol 114919 . 114945) (symbol 114907 . 114918) (symbol 114900 . 114906) (close-paren 114844 . 114845) (RETURN 114834 . 114840) (punctuation 114830 . 114831) (semantic-list #("((a) = make_lisp_ptr (b, Lisp_Vectorlike))" 0 1 (macros (("b" symbol "p" 114828 . 114829) ("a" symbol "v" 114825 . 114826)))) 114813 . 114830) (open-paren 114736 . 114737) (close-paren 114734 . 114735) (symbol 114730 . 114734) (symbol 114720 . 114729) (open-paren 114719 . 114720) (symbol 114700 . 114718) (symbol 114688 . 114699) (symbol 114681 . 114687) (punctuation 114369 . 114370) (close-paren 114368 . 114369) (symbol 114359 . 114368) (open-paren 114358 . 114359) (symbol 114342 . 114357) (punctuation 114341 . 114342) (symbol 114329 . 114340) (STRUCT 114322 . 114328) (EXTERN 114315 . 114321) (punctuation 114313 . 114314) (close-paren 114312 . 114313) (punctuation 114311 . 114312) (symbol 114299 . 114310) (STRUCT 114292 . 114298) (open-paren 114291 . 114292) (symbol 114276 . 114290) (VOID 114271 . 114275) (EXTERN 114264 . 114270) (punctuation 114262 . 114263) (close-paren 114261 . 114262) (symbol 114250 . 114261) (punctuation 114248 . 114249) (symbol 114237 . 114248) (open-paren 114236 . 114237) (symbol 114226 . 114235) (symbol 114214 . 114225) (EXTERN 114207 . 114213) (close-paren 114204 . 114205) (semantic-list 114196 . 114201) (RETURN 114164 . 114170) (open-paren 114160 . 114161) (close-paren 114158 . 114159) (symbol 114155 . 114158) (punctuation 114154 . 114155) (CHAR 114149 . 114153) (CONST 114143 . 114148) (open-paren 114142 . 114143) (symbol 114129 . 114141) (symbol 114117 . 114128) (symbol 114110 . 114116) (close-paren 114013 . 114014) (semantic-list 114005 . 114010) (RETURN 113966 . 113972) (open-paren 113962 . 113963) (close-paren 113960 . 113961) (symbol 113957 . 113960) (punctuation 113956 . 113957) (CHAR 113951 . 113955) (CONST 113945 . 113950) (open-paren 113944 . 113945) (symbol 113924 . 113943) (symbol 113912 . 113923) (symbol 113905 . 113911) (punctuation 113831 . 113832) (close-paren 113830 . 113831) (symbol 113821 . 113830) (punctuation 113819 . 113820) (punctuation 113818 . 113819) (CHAR 113813 . 113817) (CONST 113807 . 113812) (open-paren 113806 . 113807) (symbol 113787 . 113805) (symbol 113775 . 113786) (EXTERN 113768 . 113774) (punctuation 113766 . 113767) (close-paren 113765 . 113766) (BOOL 113761 . 113765) (punctuation 113759 . 113760) (symbol 113750 . 113759) (punctuation 113748 . 113749) (symbol 113739 . 113748) (punctuation 113737 . 113738) (punctuation 113736 . 113737) (CHAR 113731 . 113735) (CONST 113725 . 113730) (open-paren 113724 . 113725) (symbol 113707 . 113723) (symbol 113695 . 113706) (EXTERN 113688 . 113694) (punctuation 113686 . 113687) (close-paren 113685 . 113686) (BOOL 113681 . 113685) (punctuation 113679 . 113680) (symbol 113670 . 113679) (punctuation 113668 . 113669) (symbol 113659 . 113668) (punctuation 113650 . 113651) (punctuation 113649 . 113650) (CHAR 113644 . 113648) (CONST 113638 . 113643) (open-paren 113637 . 113638) (symbol 113615 . 113636) (symbol 113603 . 113614) (EXTERN 113596 . 113602) (punctuation 113594 . 113595) (close-paren 113593 . 113594) (symbol 113584 . 113593) (punctuation 113582 . 113583) (symbol 113573 . 113582) (punctuation 113571 . 113572) (punctuation 113570 . 113571) (CHAR 113565 . 113569) (CONST 113559 . 113564) (open-paren 113558 . 113559) (symbol 113535 . 113557) (symbol 113523 . 113534) (EXTERN 113516 . 113522) (punctuation 113514 . 113515) (close-paren 113513 . 113514) (symbol 113504 . 113513) (punctuation 113502 . 113503) (symbol 113493 . 113502) (open-paren 113492 . 113493) (symbol 113463 . 113491) (symbol 113451 . 113462) (EXTERN 113444 . 113450) (punctuation 113442 . 113443) (close-paren 113441 . 113442) (symbol 113432 . 113441) (open-paren 113431 . 113432) (symbol 113412 . 113430) (symbol 113400 . 113411) (EXTERN 113393 . 113399) (punctuation 113391 . 113392) (close-paren 113390 . 113391) (punctuation 113389 . 113390) (symbol 113377 . 113388) (punctuation 113375 . 113376) (symbol 113366 . 113375) (open-paren 113365 . 113366) (symbol 113348 . 113364) (symbol 113336 . 113347) (EXTERN 113329 . 113335) (punctuation 113327 . 113328) (close-paren 113326 . 113327) (symbol 113317 . 113326) (punctuation 113315 . 113316) (symbol 113306 . 113315) (punctuation 113304 . 113305) (punctuation 113303 . 113304) (CHAR 113298 . 113302) (CONST 113292 . 113297) (open-paren 113291 . 113292) (symbol 113269 . 113290) (symbol 113257 . 113268) (EXTERN 113250 . 113256) (close-paren 113247 . 113248) (semantic-list 113239 . 113244) (RETURN 113199 . 113205) (open-paren 113195 . 113196) (close-paren 113193 . 113194) (symbol 113190 . 113193) (punctuation 113189 . 113190) (CHAR 113184 . 113188) (CONST 113178 . 113183) (open-paren 113177 . 113178) (symbol 113156 . 113176) (symbol 113144 . 113155) (symbol 113137 . 113143) (punctuation 113063 . 113064) (close-paren 113062 . 113063) (symbol 113053 . 113062) (punctuation 113051 . 113052) (punctuation 113050 . 113051) (CHAR 113045 . 113049) (CONST 113039 . 113044) (open-paren 113038 . 113039) (symbol 113018 . 113037) (symbol 113006 . 113017) (EXTERN 112999 . 113005) (punctuation 112997 . 112998) (close-paren 112996 . 112997) (number 112995 . 112996) (punctuation 112993 . 112994) (number 112992 . 112993) (open-paren 112991 . 112992) (symbol 112967 . 112990) (close-paren 112963 . 112964) (punctuation 112962 . 112963) (punctuation 112961 . 112962) (punctuation 112960 . 112961) (punctuation 112958 . 112959) (punctuation 112957 . 112958) (CHAR 112952 . 112956) (CONST 112946 . 112951) (punctuation 112944 . 112945) (punctuation 112943 . 112944) (CHAR 112938 . 112942) (open-paren 112937 . 112938) (symbol 112915 . 112936) (symbol 112903 . 112914) (EXTERN 112896 . 112902) (punctuation 112894 . 112895) (close-paren 112893 . 112894) (symbol 112884 . 112893) (punctuation 112882 . 112883) (punctuation 112881 . 112882) (CHAR 112876 . 112880) (CONST 112870 . 112875) (open-paren 112869 . 112870) (symbol 112857 . 112868) (symbol 112845 . 112856) (EXTERN 112838 . 112844) (punctuation 112836 . 112837) (close-paren 112835 . 112836) (VOID 112831 . 112835) (open-paren 112830 . 112831) (symbol 112814 . 112829) (VOID 112809 . 112813) (symbol 112799 . 112808) (EXTERN 112792 . 112798) (punctuation 112790 . 112791) (close-paren 112789 . 112790) (symbol 112778 . 112789) (punctuation 112776 . 112777) (symbol 112765 . 112776) (open-paren 112764 . 112765) (symbol 112747 . 112763) (symbol 112735 . 112746) (EXTERN 112728 . 112734) (punctuation 112726 . 112727) (close-paren 112725 . 112726) (symbol 112716 . 112725) (open-paren 112715 . 112716) (symbol 112691 . 112714) (symbol 112679 . 112690) (EXTERN 112672 . 112678) (close-paren 112669 . 112670) (semantic-list 112663 . 112666) (semantic-list 112646 . 112649) (semantic-list 112627 . 112630) (semantic-list 112610 . 112613) (RETURN 112584 . 112590) (open-paren 112580 . 112581) (close-paren 112578 . 112579) (symbol 112577 . 112578) (symbol 112567 . 112576) (punctuation 112565 . 112566) (symbol 112564 . 112565) (symbol 112554 . 112563) (punctuation 112552 . 112553) (symbol 112551 . 112552) (symbol 112541 . 112550) (punctuation 112539 . 112540) (symbol 112538 . 112539) (symbol 112528 . 112537) (open-paren 112527 . 112528) (symbol 112520 . 112526) (symbol 112508 . 112519) (symbol 112501 . 112507) (close-paren 112498 . 112499) (semantic-list 112492 . 112495) (semantic-list 112475 . 112478) (semantic-list 112458 . 112461) (RETURN 112432 . 112438) (open-paren 112428 . 112429) (close-paren 112426 . 112427) (symbol 112425 . 112426) (symbol 112415 . 112424) (punctuation 112413 . 112414) (symbol 112412 . 112413) (symbol 112402 . 112411) (punctuation 112400 . 112401) (symbol 112399 . 112400) (symbol 112389 . 112398) (open-paren 112388 . 112389) (symbol 112381 . 112387) (symbol 112369 . 112380) (symbol 112362 . 112368) (close-paren 112359 . 112360) (semantic-list 112353 . 112356) (semantic-list 112336 . 112339) (RETURN 112310 . 112316) (open-paren 112306 . 112307) (close-paren 112304 . 112305) (symbol 112303 . 112304) (symbol 112293 . 112302) (punctuation 112291 . 112292) (symbol 112290 . 112291) (symbol 112280 . 112289) (open-paren 112279 . 112280) (symbol 112272 . 112278) (symbol 112260 . 112271) (symbol 112253 . 112259) (punctuation 112197 . 112198) (close-paren 112196 . 112197) (punctuation 112195 . 112196) (punctuation 112194 . 112195) (punctuation 112193 . 112194) (punctuation 112191 . 112192) (symbol 112180 . 112191) (punctuation 112178 . 112179) (symbol 112169 . 112178) (punctuation 112167 . 112168) (symbol 112159 . 112167) (ENUM 112154 . 112158) (open-paren 112153 . 112154) (symbol 112147 . 112152) (symbol 112135 . 112146) (EXTERN 112128 . 112134) (punctuation 112126 . 112127) (close-paren 112125 . 112126) (symbol 112112 . 112125) (punctuation 112110 . 112111) (symbol 112097 . 112110) (open-paren 112096 . 112097) (symbol 112087 . 112095) (ENUM 112082 . 112086) (punctuation 112080 . 112081) (close-paren 112079 . 112080) (symbol 112068 . 112079) (punctuation 112061 . 112062) (symbol 112050 . 112061) (punctuation 112048 . 112049) (symbol 112037 . 112048) (punctuation 112035 . 112036) (symbol 112024 . 112035) (punctuation 112022 . 112023) (symbol 112011 . 112022) (open-paren 112010 . 112011) (symbol 112004 . 112009) (symbol 111992 . 112003) (EXTERN 111985 . 111991) (punctuation 111983 . 111984) (close-paren 111982 . 111983) (symbol 111971 . 111982) (punctuation 111969 . 111970) (symbol 111958 . 111969) (punctuation 111956 . 111957) (symbol 111945 . 111956) (punctuation 111943 . 111944) (symbol 111932 . 111943) (open-paren 111931 . 111932) (symbol 111925 . 111930) (symbol 111913 . 111924) (EXTERN 111906 . 111912) (punctuation 111904 . 111905) (close-paren 111903 . 111904) (symbol 111892 . 111903) (punctuation 111890 . 111891) (symbol 111879 . 111890) (punctuation 111877 . 111878) (symbol 111866 . 111877) (open-paren 111865 . 111866) (symbol 111859 . 111864) (symbol 111847 . 111858) (EXTERN 111840 . 111846) (punctuation 111838 . 111839) (close-paren 111837 . 111838) (symbol 111826 . 111837) (punctuation 111824 . 111825) (symbol 111813 . 111824) (open-paren 111812 . 111813) (symbol 111806 . 111811) (symbol 111794 . 111805) (EXTERN 111787 . 111793) (punctuation 111785 . 111786) (close-paren 111784 . 111785) (symbol 111773 . 111784) (open-paren 111772 . 111773) (symbol 111766 . 111771) (symbol 111754 . 111765) (EXTERN 111747 . 111753) (punctuation 111550 . 111551) (close-paren 111549 . 111550) (symbol 111546 . 111549) (punctuation 111545 . 111546) (VOID 111540 . 111544) (punctuation 111538 . 111539) (semantic-list 111527 . 111538) (semantic-list 111519 . 111526) (VOID 111514 . 111518) (open-paren 111513 . 111514) (symbol 111491 . 111512) (VOID 111486 . 111490) (EXTERN 111479 . 111485) (punctuation 111477 . 111478) (close-paren 111476 . 111477) (punctuation 111475 . 111476) (CHAR 111470 . 111474) (punctuation 111468 . 111469) (punctuation 111467 . 111468) (CHAR 111462 . 111466) (open-paren 111461 . 111462) (symbol 111450 . 111460) (VOID 111445 . 111449) (EXTERN 111438 . 111444) (punctuation 111436 . 111437) (close-paren 111435 . 111436) (VOID 111431 . 111435) (open-paren 111430 . 111431) (symbol 111412 . 111429) (VOID 111407 . 111411) (EXTERN 111400 . 111406) (punctuation 111398 . 111399) (close-paren 111397 . 111398) (VOID 111393 . 111397) (open-paren 111392 . 111393) (symbol 111375 . 111391) (VOID 111370 . 111374) (EXTERN 111363 . 111369) (punctuation 111238 . 111239) (close-paren 111237 . 111238) (symbol 111226 . 111237) (open-paren 111225 . 111226) (symbol 111213 . 111224) (VOID 111208 . 111212) (EXTERN 111201 . 111207) (punctuation 111199 . 111200) (close-paren 111198 . 111199) (symbol 111187 . 111198) (open-paren 111186 . 111187) (symbol 111172 . 111185) (BOOL 111167 . 111171) (EXTERN 111160 . 111166) (punctuation 111158 . 111159) (close-paren 111157 . 111158) (symbol 111148 . 111157) (open-paren 111147 . 111148) (symbol 111128 . 111146) (VOID 111123 . 111127) (symbol 111113 . 111122) (EXTERN 111106 . 111112) (punctuation 111104 . 111105) (close-paren 111103 . 111104) (symbol 111097 . 111103) (open-paren 111096 . 111097) (symbol 111084 . 111095) (VOID 111079 . 111083) (symbol 111069 . 111078) (EXTERN 111062 . 111068) (punctuation 111060 . 111061) (close-paren 111059 . 111060) (punctuation 111058 . 111059) (CHAR 111053 . 111057) (CONST 111047 . 111052) (open-paren 111046 . 111047) (symbol 111031 . 111045) (VOID 111026 . 111030) (EXTERN 111019 . 111025) (punctuation 111017 . 111018) (close-paren 111016 . 111017) (symbol 111007 . 111016) (punctuation 111005 . 111006) (symbol 110996 . 111005) (punctuation 110994 . 110995) (punctuation 110993 . 110994) (symbol 110981 . 110992) (STRUCT 110974 . 110980) (open-paren 110973 . 110974) (symbol 110952 . 110972) (VOID 110947 . 110951) (EXTERN 110940 . 110946) (punctuation 110938 . 110939) (close-paren 110937 . 110938) (symbol 110926 . 110937) (open-paren 110925 . 110926) (symbol 110915 . 110924) (VOID 110910 . 110914) (EXTERN 110903 . 110909) (punctuation 110901 . 110902) (close-paren 110900 . 110901) (VOID 110896 . 110900) (open-paren 110895 . 110896) (symbol 110879 . 110894) (VOID 110874 . 110878) (EXTERN 110867 . 110873) (punctuation 110865 . 110866) (close-paren 110864 . 110865) (VOID 110860 . 110864) (open-paren 110859 . 110860) (symbol 110845 . 110858) (punctuation 110844 . 110845) (VOID 110839 . 110843) (EXTERN 110832 . 110838) (punctuation 110802 . 110803) (close-paren 110801 . 110802) (punctuation 110800 . 110801) (symbol 110790 . 110799) (punctuation 110788 . 110789) (punctuation 110787 . 110788) (symbol 110777 . 110786) (punctuation 110767 . 110768) (symbol 110758 . 110767) (punctuation 110756 . 110757) (punctuation 110755 . 110756) (CHAR 110750 . 110754) (UNSIGNED 110741 . 110749) (CONST 110735 . 110740) (open-paren 110734 . 110735) (symbol 110711 . 110733) (VOID 110706 . 110710) (EXTERN 110699 . 110705) (punctuation 110665 . 110666) (close-paren 110664 . 110665) (semantic-list 110650 . 110664) (semantic-list 110639 . 110649) (VOID 110634 . 110638) (punctuation 110632 . 110633) (punctuation 110631 . 110632) (VOID 110626 . 110630) (open-paren 110625 . 110626) (symbol 110609 . 110624) (VOID 110604 . 110608) (EXTERN 110597 . 110603) (punctuation 110564 . 110565) (close-paren 110563 . 110564) (VOID 110559 . 110563) (open-paren 110558 . 110559) (symbol 110540 . 110557) (VOID 110535 . 110539) (EXTERN 110528 . 110534) (punctuation 110494 . 110495) (close-paren 110493 . 110494) (punctuation 110492 . 110493) (INT 110488 . 110491) (punctuation 110486 . 110487) (punctuation 110485 . 110486) (INT 110481 . 110484) (punctuation 110479 . 110480) (punctuation 110478 . 110479) (INT 110474 . 110477) (punctuation 110472 . 110473) (punctuation 110471 . 110472) (INT 110467 . 110470) (punctuation 110465 . 110466) (punctuation 110464 . 110465) (INT 110460 . 110463) (punctuation 110452 . 110453) (punctuation 110451 . 110452) (INT 110447 . 110450) (punctuation 110445 . 110446) (symbol 110436 . 110445) (punctuation 110434 . 110435) (punctuation 110433 . 110434) (symbol 110426 . 110432) (STRUCT 110419 . 110425) (open-paren 110418 . 110419) (symbol 110404 . 110417) (BOOL 110399 . 110403) (EXTERN 110392 . 110398) (punctuation 110390 . 110391) (close-paren 110389 . 110390) (symbol 110378 . 110389) (open-paren 110377 . 110378) (symbol 110367 . 110376) (symbol 110355 . 110366) (EXTERN 110348 . 110354) (punctuation 110346 . 110347) (close-paren 110345 . 110346) (VOID 110341 . 110345) (open-paren 110340 . 110341) (symbol 110329 . 110339) (VOID 110324 . 110328) (EXTERN 110317 . 110323) (punctuation 110315 . 110316) (close-paren 110314 . 110315) (VOID 110310 . 110314) (open-paren 110309 . 110310) (symbol 110295 . 110308) (VOID 110290 . 110294) (EXTERN 110283 . 110289) (punctuation 110281 . 110282) (close-paren 110280 . 110281) (symbol 110269 . 110280) (punctuation 110267 . 110268) (punctuation 110266 . 110267) (symbol 110260 . 110265) (STRUCT 110253 . 110259) (open-paren 110252 . 110253) (symbol 110229 . 110251) (VOID 110224 . 110228) (punctuation 110221 . 110222) (close-paren 110220 . 110221) (VOID 110216 . 110220) (open-paren 110215 . 110216) (symbol 110205 . 110214) (VOID 110200 . 110204) (EXTERN 110193 . 110199) (punctuation 110191 . 110192) (close-paren 110190 . 110191) (symbol 110181 . 110190) (open-paren 110180 . 110181) (symbol 110161 . 110179) (VOID 110156 . 110160) (EXTERN 110149 . 110155) (punctuation 110147 . 110148) (close-paren 110146 . 110147) (VOID 110142 . 110146) (open-paren 110141 . 110142) (symbol 110124 . 110140) (VOID 110119 . 110123) (EXTERN 110112 . 110118) (punctuation 110110 . 110111) (close-paren 110109 . 110110) (VOID 110105 . 110109) (open-paren 110104 . 110105) (symbol 110078 . 110103) (VOID 110073 . 110077) (EXTERN 110066 . 110072) (punctuation 110064 . 110065) (close-paren 110063 . 110064) (BOOL 110059 . 110063) (punctuation 110057 . 110058) (symbol 110046 . 110057) (punctuation 110044 . 110045) (punctuation 110043 . 110044) (CHAR 110038 . 110042) (CONST 110032 . 110037) (open-paren 110031 . 110032) (symbol 110011 . 110030) (VOID 110006 . 110010) (EXTERN 109999 . 110005) (punctuation 109997 . 109998) (close-paren 109996 . 109997) (BOOL 109992 . 109996) (punctuation 109990 . 109991) (BOOL 109986 . 109990) (punctuation 109984 . 109985) (symbol 109975 . 109984) (punctuation 109973 . 109974) (punctuation 109972 . 109973) (CHAR 109967 . 109971) (CONST 109961 . 109966) (open-paren 109960 . 109961) (symbol 109946 . 109959) (VOID 109941 . 109945) (EXTERN 109934 . 109940) (punctuation 109932 . 109933) (close-paren 109931 . 109932) (symbol 109920 . 109931) (open-paren 109919 . 109920) (symbol 109904 . 109918) (VOID 109899 . 109903) (EXTERN 109892 . 109898) (punctuation 109890 . 109891) (close-paren 109889 . 109890) (symbol 109878 . 109889) (open-paren 109877 . 109878) (symbol 109868 . 109876) (VOID 109863 . 109867) (EXTERN 109856 . 109862) (punctuation 109854 . 109855) (close-paren 109853 . 109854) (punctuation 109852 . 109853) (CHAR 109847 . 109851) (CONST 109841 . 109846) (open-paren 109840 . 109841) (symbol 109825 . 109839) (VOID 109820 . 109824) (EXTERN 109813 . 109819) (punctuation 109811 . 109812) (close-paren 109810 . 109811) (punctuation 109809 . 109810) (CHAR 109804 . 109808) (CONST 109798 . 109803) (open-paren 109797 . 109798) (symbol 109788 . 109796) (VOID 109783 . 109787) (EXTERN 109776 . 109782) (punctuation 109774 . 109775) (close-paren 109773 . 109774) (number 109772 . 109773) (punctuation 109770 . 109771) (number 109769 . 109770) (open-paren 109768 . 109769) (symbol 109744 . 109767) (close-paren 109742 . 109743) (punctuation 109741 . 109742) (punctuation 109740 . 109741) (punctuation 109739 . 109740) (punctuation 109737 . 109738) (punctuation 109736 . 109737) (CHAR 109731 . 109735) (CONST 109725 . 109730) (open-paren 109724 . 109725) (symbol 109716 . 109723) (VOID 109711 . 109715) (EXTERN 109704 . 109710) (punctuation 109702 . 109703) (close-paren 109701 . 109702) (BOOL 109697 . 109701) (punctuation 109695 . 109696) (BOOL 109691 . 109695) (open-paren 109690 . 109691) (symbol 109676 . 109689) (VOID 109671 . 109675) (EXTERN 109664 . 109670) (punctuation 109662 . 109663) (close-paren 109661 . 109662) (VOID 109657 . 109661) (open-paren 109656 . 109657) (symbol 109640 . 109655) (symbol 109628 . 109639) (EXTERN 109621 . 109627) (punctuation 109619 . 109620) (close-paren 109618 . 109619) (VOID 109614 . 109618) (open-paren 109613 . 109614) (symbol 109597 . 109612) (VOID 109592 . 109596) (EXTERN 109585 . 109591) (punctuation 109583 . 109584) (close-paren 109582 . 109583) (symbol 109571 . 109582) (open-paren 109570 . 109571) (symbol 109547 . 109569) (symbol 109535 . 109546) (EXTERN 109528 . 109534) (punctuation 109526 . 109527) (close-paren 109525 . 109526) (VOID 109521 . 109525) (open-paren 109520 . 109521) (symbol 109501 . 109519) (VOID 109496 . 109500) (EXTERN 109489 . 109495) (punctuation 109487 . 109488) (close-paren 109486 . 109487) (VOID 109482 . 109486) (open-paren 109481 . 109482) (symbol 109468 . 109480) (BOOL 109463 . 109467) (EXTERN 109456 . 109462) (punctuation 109454 . 109455) (close-paren 109453 . 109454) (BOOL 109449 . 109453) (open-paren 109448 . 109449) (symbol 109419 . 109447) (VOID 109414 . 109418) (EXTERN 109407 . 109413) (punctuation 109405 . 109406) (close-paren 109404 . 109405) (VOID 109400 . 109404) (open-paren 109399 . 109400) (symbol 109379 . 109398) (VOID 109374 . 109378) (EXTERN 109367 . 109373) (punctuation 109365 . 109366) (close-paren 109364 . 109365) (symbol 109357 . 109364) (punctuation 109355 . 109356) (punctuation 109354 . 109355) (CONST 109348 . 109353) (CHAR 109343 . 109347) (open-paren 109342 . 109343) (symbol 109330 . 109341) (VOID 109325 . 109329) (EXTERN 109318 . 109324) (punctuation 109316 . 109317) (close-paren 109315 . 109316) (punctuation 109314 . 109315) (punctuation 109313 . 109314) (punctuation 109312 . 109313) (punctuation 109310 . 109311) (punctuation 109309 . 109310) (CONST 109303 . 109308) (CHAR 109298 . 109302) (open-paren 109297 . 109298) (symbol 109286 . 109296) (VOID 109281 . 109285) (EXTERN 109274 . 109280) (punctuation 109272 . 109273) (close-paren 109271 . 109272) (number 109270 . 109271) (open-paren 109269 . 109270) (symbol 109253 . 109269) (symbol 109241 . 109252) (EXTERN 109234 . 109240) (punctuation 109163 . 109164) (close-paren 109162 . 109163) (INT 109159 . 109162) (punctuation 109157 . 109158) (BOOL 109153 . 109157) (punctuation 109151 . 109152) (symbol 109140 . 109151) (open-paren 109139 . 109140) (symbol 109131 . 109138) (symbol 109119 . 109130) (EXTERN 109112 . 109118) (punctuation 108896 . 108897) (close-paren 108895 . 108896) (VOID 108891 . 108895) (open-paren 108890 . 108891) (symbol 108875 . 108889) (VOID 108870 . 108874) (EXTERN 108863 . 108869) (punctuation 108861 . 108862) (close-paren 108860 . 108861) (BOOL 108856 . 108860) (punctuation 108854 . 108855) (symbol 108845 . 108854) (punctuation 108843 . 108844) (symbol 108834 . 108843) (punctuation 108832 . 108833) (punctuation 108831 . 108832) (CHAR 108826 . 108830) (CONST 108820 . 108825) (punctuation 108810 . 108811) (symbol 108801 . 108810) (punctuation 108799 . 108800) (symbol 108790 . 108799) (punctuation 108788 . 108789) (symbol 108779 . 108788) (punctuation 108777 . 108778) (symbol 108768 . 108777) (open-paren 108767 . 108768) (symbol 108751 . 108766) (VOID 108746 . 108750) (EXTERN 108739 . 108745) (punctuation 108737 . 108738) (close-paren 108736 . 108737) (BOOL 108732 . 108736) (punctuation 108730 . 108731) (BOOL 108726 . 108730) (punctuation 108724 . 108725) (BOOL 108720 . 108724) (punctuation 108718 . 108719) (BOOL 108714 . 108718) (punctuation 108712 . 108713) (symbol 108701 . 108712) (punctuation 108699 . 108700) (symbol 108690 . 108699) (punctuation 108688 . 108689) (symbol 108679 . 108688) (open-paren 108678 . 108679) (symbol 108664 . 108677) (VOID 108659 . 108663) (EXTERN 108652 . 108658) (punctuation 108650 . 108651) (close-paren 108649 . 108650) (INT 108646 . 108649) (punctuation 108644 . 108645) (symbol 108635 . 108644) (punctuation 108633 . 108634) (symbol 108624 . 108633) (punctuation 108614 . 108615) (symbol 108605 . 108614) (punctuation 108603 . 108604) (symbol 108594 . 108603) (open-paren 108593 . 108594) (symbol 108570 . 108592) (VOID 108565 . 108569) (EXTERN 108558 . 108564) (punctuation 108556 . 108557) (close-paren 108555 . 108556) (symbol 108546 . 108555) (punctuation 108544 . 108545) (symbol 108535 . 108544) (punctuation 108522 . 108523) (symbol 108513 . 108522) (punctuation 108511 . 108512) (symbol 108502 . 108511) (open-paren 108501 . 108502) (symbol 108475 . 108500) (VOID 108470 . 108474) (EXTERN 108463 . 108469) (punctuation 108461 . 108462) (close-paren 108460 . 108461) (symbol 108451 . 108460) (punctuation 108449 . 108450) (symbol 108440 . 108449) (punctuation 108433 . 108434) (symbol 108424 . 108433) (punctuation 108422 . 108423) (symbol 108413 . 108422) (punctuation 108411 . 108412) (symbol 108402 . 108411) (open-paren 108401 . 108402) (symbol 108381 . 108400) (VOID 108376 . 108380) (EXTERN 108369 . 108375) (punctuation 108367 . 108368) (close-paren 108366 . 108367) (symbol 108357 . 108366) (punctuation 108355 . 108356) (symbol 108346 . 108355) (punctuation 108344 . 108345) (symbol 108335 . 108344) (open-paren 108334 . 108335) (symbol 108314 . 108333) (VOID 108309 . 108313) (EXTERN 108302 . 108308) (punctuation 108300 . 108301) (close-paren 108299 . 108300) (symbol 108290 . 108299) (punctuation 108288 . 108289) (symbol 108279 . 108288) (punctuation 108277 . 108278) (punctuation 108276 . 108277) (symbol 108269 . 108275) (STRUCT 108262 . 108268) (open-paren 108261 . 108262) (symbol 108236 . 108260) (VOID 108231 . 108235) (EXTERN 108224 . 108230) (punctuation 108222 . 108223) (close-paren 108221 . 108222) (punctuation 108220 . 108221) (symbol 108210 . 108219) (punctuation 108208 . 108209) (symbol 108199 . 108208) (punctuation 108197 . 108198) (symbol 108188 . 108197) (open-paren 108187 . 108188) (symbol 108160 . 108186) (VOID 108155 . 108159) (EXTERN 108148 . 108154) (punctuation 108146 . 108147) (close-paren 108145 . 108146) (punctuation 108144 . 108145) (symbol 108134 . 108143) (punctuation 108132 . 108133) (symbol 108123 . 108132) (punctuation 108121 . 108122) (symbol 108112 . 108121) (open-paren 108111 . 108112) (symbol 108086 . 108110) (VOID 108081 . 108085) (EXTERN 108074 . 108080) (punctuation 108072 . 108073) (close-paren 108071 . 108072) (symbol 108062 . 108071) (punctuation 108060 . 108061) (symbol 108051 . 108060) (open-paren 108050 . 108051) (symbol 108038 . 108049) (VOID 108033 . 108037) (EXTERN 108026 . 108032) (punctuation 108024 . 108025) (close-paren 108023 . 108024) (BOOL 108019 . 108023) (punctuation 108017 . 108018) (symbol 108008 . 108017) (punctuation 108006 . 108007) (symbol 107997 . 108006) (punctuation 107991 . 107992) (symbol 107982 . 107991) (punctuation 107980 . 107981) (symbol 107971 . 107980) (open-paren 107970 . 107971) (symbol 107958 . 107969) (symbol 107946 . 107957) (EXTERN 107939 . 107945) (punctuation 107937 . 107938) (close-paren 107936 . 107937) (BOOL 107932 . 107936) (punctuation 107930 . 107931) (symbol 107921 . 107930) (punctuation 107919 . 107920) (symbol 107910 . 107919) (punctuation 107908 . 107909) (symbol 107899 . 107908) (punctuation 107897 . 107898) (symbol 107888 . 107897) (open-paren 107887 . 107888) (symbol 107872 . 107886) (VOID 107867 . 107871) (EXTERN 107860 . 107866) (punctuation 107858 . 107859) (close-paren 107857 . 107858) (symbol 107848 . 107857) (punctuation 107846 . 107847) (symbol 107837 . 107846) (open-paren 107836 . 107837) (symbol 107821 . 107835) (VOID 107816 . 107820) (EXTERN 107809 . 107815) (punctuation 107807 . 107808) (close-paren 107806 . 107807) (BOOL 107802 . 107806) (punctuation 107800 . 107801) (BOOL 107796 . 107800) (punctuation 107794 . 107795) (symbol 107785 . 107794) (punctuation 107783 . 107784) (symbol 107774 . 107783) (open-paren 107773 . 107774) (symbol 107761 . 107772) (symbol 107749 . 107760) (EXTERN 107742 . 107748) (punctuation 107740 . 107741) (close-paren 107739 . 107740) (symbol 107730 . 107739) (punctuation 107728 . 107729) (symbol 107719 . 107728) (open-paren 107718 . 107719) (symbol 107708 . 107717) (VOID 107703 . 107707) (EXTERN 107696 . 107702) (punctuation 107694 . 107695) (close-paren 107693 . 107694) (BOOL 107689 . 107693) (punctuation 107687 . 107688) (symbol 107678 . 107687) (punctuation 107664 . 107665) (symbol 107655 . 107664) (punctuation 107653 . 107654) (symbol 107644 . 107653) (punctuation 107630 . 107631) (symbol 107621 . 107630) (punctuation 107619 . 107620) (symbol 107608 . 107619) (open-paren 107607 . 107608) (symbol 107573 . 107606) (VOID 107568 . 107572) (EXTERN 107561 . 107567) (punctuation 107559 . 107560) (close-paren 107558 . 107559) (symbol 107549 . 107558) (punctuation 107547 . 107548) (punctuation 107546 . 107547) (CHAR 107541 . 107545) (CONST 107535 . 107540) (open-paren 107534 . 107535) (symbol 107500 . 107533) (VOID 107495 . 107499) (EXTERN 107488 . 107494) (punctuation 107486 . 107487) (close-paren 107485 . 107486) (symbol 107476 . 107485) (punctuation 107474 . 107475) (punctuation 107473 . 107474) (CHAR 107468 . 107472) (CONST 107462 . 107467) (open-paren 107461 . 107462) (symbol 107439 . 107460) (VOID 107434 . 107438) (EXTERN 107427 . 107433) (punctuation 107425 . 107426) (close-paren 107424 . 107425) (punctuation 107423 . 107424) (CHAR 107418 . 107422) (CONST 107412 . 107417) (open-paren 107411 . 107412) (symbol 107397 . 107410) (VOID 107392 . 107396) (EXTERN 107385 . 107391) (punctuation 107383 . 107384) (close-paren 107382 . 107383) (INT 107379 . 107382) (open-paren 107378 . 107379) (symbol 107366 . 107377) (VOID 107361 . 107365) (EXTERN 107354 . 107360) (punctuation 107352 . 107353) (close-paren 107351 . 107352) (BOOL 107347 . 107351) (punctuation 107345 . 107346) (symbol 107336 . 107345) (punctuation 107334 . 107335) (symbol 107325 . 107334) (punctuation 107323 . 107324) (punctuation 107322 . 107323) (symbol 107315 . 107321) (STRUCT 107308 . 107314) (open-paren 107307 . 107308) (symbol 107288 . 107306) (VOID 107283 . 107287) (EXTERN 107276 . 107282) (punctuation 107274 . 107275) (close-paren 107273 . 107274) (BOOL 107269 . 107273) (punctuation 107267 . 107268) (symbol 107258 . 107267) (punctuation 107256 . 107257) (symbol 107247 . 107256) (punctuation 107241 . 107242) (symbol 107232 . 107241) (punctuation 107230 . 107231) (symbol 107221 . 107230) (punctuation 107219 . 107220) (symbol 107208 . 107219) (open-paren 107207 . 107208) (symbol 107188 . 107206) (VOID 107183 . 107187) (EXTERN 107176 . 107182) (punctuation 107174 . 107175) (close-paren 107173 . 107174) (symbol 107157 . 107173) (BOOL 107152 . 107156) (punctuation 107150 . 107151) (symbol 107141 . 107150) (punctuation 107139 . 107140) (symbol 107130 . 107139) (open-paren 107129 . 107130) (symbol 107113 . 107128) (VOID 107108 . 107112) (EXTERN 107101 . 107107) (punctuation 107099 . 107100) (close-paren 107098 . 107099) (BOOL 107094 . 107098) (punctuation 107092 . 107093) (BOOL 107088 . 107092) (punctuation 107086 . 107087) (BOOL 107082 . 107086) (punctuation 107074 . 107075) (symbol 107065 . 107074) (punctuation 107063 . 107064) (symbol 107054 . 107063) (punctuation 107052 . 107053) (punctuation 107051 . 107052) (CHAR 107046 . 107050) (CONST 107040 . 107045) (open-paren 107039 . 107040) (symbol 107025 . 107038) (VOID 107020 . 107024) (EXTERN 107013 . 107019) (punctuation 107011 . 107012) (close-paren 107010 . 107011) (symbol 107001 . 107010) (punctuation 106999 . 107000) (punctuation 106998 . 106999) (CHAR 106993 . 106997) (CONST 106987 . 106992) (open-paren 106986 . 106987) (symbol 106967 . 106985) (VOID 106962 . 106966) (EXTERN 106955 . 106961) (punctuation 106953 . 106954) (close-paren 106952 . 106953) (symbol 106943 . 106952) (punctuation 106941 . 106942) (punctuation 106940 . 106941) (CHAR 106935 . 106939) (CONST 106929 . 106934) (open-paren 106928 . 106929) (symbol 106921 . 106927) (VOID 106916 . 106920) (EXTERN 106909 . 106915) (punctuation 106907 . 106908) (close-paren 106906 . 106907) (symbol 106897 . 106906) (punctuation 106895 . 106896) (symbol 106886 . 106895) (punctuation 106884 . 106885) (symbol 106875 . 106884) (punctuation 106867 . 106868) (punctuation 106866 . 106867) (CHAR 106861 . 106865) (UNSIGNED 106852 . 106860) (CONST 106846 . 106851) (open-paren 106845 . 106846) (symbol 106823 . 106844) (INT 106819 . 106822) (EXTERN 106812 . 106818) (punctuation 106810 . 106811) (close-paren 106809 . 106810) (symbol 106800 . 106809) (punctuation 106798 . 106799) (symbol 106789 . 106798) (punctuation 106787 . 106788) (symbol 106778 . 106787) (punctuation 106769 . 106770) (punctuation 106768 . 106769) (CHAR 106763 . 106767) (UNSIGNED 106754 . 106762) (CONST 106748 . 106753) (open-paren 106747 . 106748) (symbol 106724 . 106746) (INT 106720 . 106723) (EXTERN 106713 . 106719) (punctuation 106711 . 106712) (close-paren 106710 . 106711) (BOOL 106706 . 106710) (punctuation 106704 . 106705) (BOOL 106700 . 106704) (punctuation 106698 . 106699) (symbol 106689 . 106698) (punctuation 106680 . 106681) (punctuation 106679 . 106680) (CHAR 106674 . 106678) (UNSIGNED 106665 . 106673) (punctuation 106663 . 106664) (punctuation 106662 . 106663) (CHAR 106657 . 106661) (UNSIGNED 106648 . 106656) (CONST 106642 . 106647) (open-paren 106641 . 106642) (symbol 106631 . 106640) (symbol 106621 . 106630) (EXTERN 106614 . 106620) (punctuation 106612 . 106613) (close-paren 106611 . 106612) (symbol 106602 . 106611) (punctuation 106600 . 106601) (punctuation 106599 . 106600) (symbol 106592 . 106598) (STRUCT 106585 . 106591) (open-paren 106584 . 106585) (symbol 106573 . 106583) (VOID 106568 . 106572) (EXTERN 106561 . 106567) (punctuation 106559 . 106560) (close-paren 106558 . 106559) (symbol 106549 . 106558) (open-paren 106548 . 106549) (symbol 106539 . 106547) (VOID 106534 . 106538) (EXTERN 106527 . 106533) (punctuation 106525 . 106526) (close-paren 106524 . 106525) (VOID 106520 . 106524) (open-paren 106519 . 106520) (symbol 106503 . 106518) (VOID 106498 . 106502) (symbol 106488 . 106497) (EXTERN 106481 . 106487) (punctuation 106479 . 106480) (close-paren 106478 . 106479) (symbol 106469 . 106478) (punctuation 106467 . 106468) (symbol 106458 . 106467) (open-paren 106457 . 106458) (symbol 106443 . 106456) (VOID 106438 . 106442) (EXTERN 106431 . 106437) (punctuation 106400 . 106401) (close-paren 106399 . 106400) (VOID 106395 . 106399) (open-paren 106394 . 106395) (symbol 106380 . 106393) (VOID 106375 . 106379) (EXTERN 106368 . 106374) (punctuation 106366 . 106367) (close-paren 106365 . 106366) (VOID 106361 . 106365) (open-paren 106360 . 106361) (symbol 106342 . 106359) (VOID 106337 . 106341) (EXTERN 106330 . 106336) (punctuation 106328 . 106329) (close-paren 106327 . 106328) (symbol 106318 . 106327) (punctuation 106316 . 106317) (punctuation 106315 . 106316) (symbol 106309 . 106314) (STRUCT 106302 . 106308) (open-paren 106301 . 106302) (symbol 106287 . 106300) (INT 106283 . 106286) (EXTERN 106276 . 106282) (punctuation 106114 . 106115) (close-paren 106113 . 106114) (VOID 106109 . 106113) (open-paren 106108 . 106109) (symbol 106096 . 106107) (VOID 106091 . 106095) (EXTERN 106084 . 106090) (punctuation 106082 . 106083) (close-paren 106081 . 106082) (VOID 106077 . 106081) (open-paren 106076 . 106077) (symbol 106061 . 106075) (VOID 106056 . 106060) (EXTERN 106049 . 106055) (punctuation 106018 . 106019) (close-paren 106017 . 106018) (symbol 106016 . 106017) (symbol 106004 . 106015) (punctuation 106002 . 106003) (symbol 106001 . 106002) (symbol 105989 . 106000) (open-paren 105988 . 105989) (symbol 105977 . 105987) (symbol 105965 . 105976) (EXTERN 105958 . 105964) (punctuation 105956 . 105957) (close-paren 105955 . 105956) (VOID 105951 . 105955) (open-paren 105950 . 105951) (symbol 105933 . 105949) (VOID 105928 . 105932) (EXTERN 105921 . 105927) (punctuation 105888 . 105889) (close-paren 105887 . 105888) (VOID 105883 . 105887) (open-paren 105882 . 105883) (symbol 105870 . 105881) (VOID 105865 . 105869) (EXTERN 105858 . 105864) (punctuation 105856 . 105857) (close-paren 105855 . 105856) (symbol 105844 . 105855) (open-paren 105843 . 105844) (symbol 105823 . 105842) (symbol 105811 . 105822) (EXTERN 105804 . 105810) (punctuation 105802 . 105803) (close-paren 105801 . 105802) (symbol 105790 . 105801) (open-paren 105789 . 105790) (symbol 105769 . 105788) (symbol 105757 . 105768) (EXTERN 105750 . 105756) (punctuation 105748 . 105749) (close-paren 105747 . 105748) (symbol 105738 . 105747) (punctuation 105736 . 105737) (symbol 105725 . 105736) (open-paren 105724 . 105725) (symbol 105704 . 105723) (symbol 105694 . 105703) (EXTERN 105687 . 105693) (punctuation 105685 . 105686) (close-paren 105684 . 105685) (symbol 105675 . 105684) (punctuation 105673 . 105674) (symbol 105662 . 105673) (open-paren 105661 . 105662) (symbol 105641 . 105660) (symbol 105631 . 105640) (EXTERN 105624 . 105630) (punctuation 105622 . 105623) (close-paren 105621 . 105622) (VOID 105617 . 105621) (open-paren 105616 . 105617) (symbol 105587 . 105615) (VOID 105582 . 105586) (EXTERN 105575 . 105581) (punctuation 105573 . 105574) (close-paren 105572 . 105573) (symbol 105561 . 105572) (punctuation 105559 . 105560) (symbol 105548 . 105559) (open-paren 105547 . 105548) (symbol 105533 . 105546) (symbol 105521 . 105532) (EXTERN 105514 . 105520) (punctuation 105512 . 105513) (close-paren 105511 . 105512) (symbol 105500 . 105511) (punctuation 105498 . 105499) (symbol 105487 . 105498) (open-paren 105486 . 105487) (symbol 105473 . 105485) (symbol 105461 . 105472) (EXTERN 105454 . 105460) (punctuation 105452 . 105453) (close-paren 105451 . 105452) (symbol 105440 . 105451) (punctuation 105438 . 105439) (symbol 105427 . 105438) (open-paren 105426 . 105427) (symbol 105419 . 105425) (symbol 105407 . 105418) (EXTERN 105400 . 105406) (punctuation 105398 . 105399) (close-paren 105397 . 105398) (symbol 105386 . 105397) (punctuation 105384 . 105385) (symbol 105373 . 105384) (open-paren 105372 . 105373) (symbol 105358 . 105371) (BOOL 105353 . 105357) (EXTERN 105346 . 105352) (punctuation 105344 . 105345) (close-paren 105343 . 105344) (symbol 105332 . 105343) (punctuation 105330 . 105331) (symbol 105319 . 105330) (punctuation 105317 . 105318) (symbol 105306 . 105317) (open-paren 105305 . 105306) (symbol 105297 . 105304) (symbol 105285 . 105296) (EXTERN 105278 . 105284) (punctuation 105276 . 105277) (close-paren 105275 . 105276) (symbol 105264 . 105275) (punctuation 105262 . 105263) (symbol 105251 . 105262) (open-paren 105250 . 105251) (symbol 105242 . 105249) (symbol 105230 . 105241) (EXTERN 105223 . 105229) (punctuation 105221 . 105222) (close-paren 105220 . 105221) (symbol 105209 . 105220) (open-paren 105208 . 105209) (symbol 105193 . 105207) (symbol 105181 . 105192) (EXTERN 105174 . 105180) (punctuation 105172 . 105173) (close-paren 105171 . 105172) (symbol 105160 . 105171) (punctuation 105158 . 105159) (symbol 105147 . 105158) (punctuation 105145 . 105146) (symbol 105134 . 105145) (open-paren 105133 . 105134) (symbol 105127 . 105132) (symbol 105115 . 105126) (EXTERN 105108 . 105114) (punctuation 105106 . 105107) (close-paren 105105 . 105106) (symbol 105096 . 105105) (punctuation 105094 . 105095) (symbol 105085 . 105094) (punctuation 105076 . 105077) (symbol 105067 . 105076) (punctuation 105065 . 105066) (symbol 105056 . 105065) (punctuation 105054 . 105055) (symbol 105043 . 105054) (open-paren 105042 . 105043) (symbol 105027 . 105041) (symbol 105015 . 105026) (EXTERN 105008 . 105014) (punctuation 105006 . 105007) (close-paren 105005 . 105006) (punctuation 105004 . 105005) (symbol 104994 . 105003) (punctuation 104992 . 104993) (punctuation 104991 . 104992) (symbol 104981 . 104990) (punctuation 104979 . 104980) (symbol 104970 . 104979) (punctuation 104958 . 104959) (symbol 104947 . 104958) (punctuation 104945 . 104946) (symbol 104934 . 104945) (punctuation 104932 . 104933) (symbol 104921 . 104932) (open-paren 104920 . 104921) (symbol 104902 . 104919) (VOID 104897 . 104901) (EXTERN 104890 . 104896) (punctuation 104809 . 104810) (close-paren 104808 . 104809) (symbol 104797 . 104808) (punctuation 104795 . 104796) (punctuation 104794 . 104795) (symbol 104778 . 104793) (STRUCT 104771 . 104777) (open-paren 104770 . 104771) (symbol 104747 . 104769) (VOID 104742 . 104746) (punctuation 104740 . 104741) (close-paren 104739 . 104740) (symbol 104729 . 104739) (punctuation 104721 . 104722) (symbol 104710 . 104721) (punctuation 104708 . 104709) (symbol 104697 . 104708) (punctuation 104695 . 104696) (punctuation 104694 . 104695) (symbol 104678 . 104693) (STRUCT 104671 . 104677) (open-paren 104670 . 104671) (symbol 104661 . 104669) (symbol 104651 . 104660) (punctuation 104649 . 104650) (close-paren 104648 . 104649) (punctuation 104647 . 104648) (symbol 104636 . 104646) (punctuation 104634 . 104635) (symbol 104623 . 104634) (punctuation 104621 . 104622) (punctuation 104620 . 104621) (symbol 104604 . 104619) (STRUCT 104597 . 104603) (open-paren 104596 . 104597) (symbol 104584 . 104595) (symbol 104574 . 104583) (punctuation 104572 . 104573) (close-paren 104571 . 104572) (BOOL 104567 . 104571) (punctuation 104565 . 104566) (symbol 104554 . 104565) (punctuation 104544 . 104545) (FLOAT 104539 . 104544) (punctuation 104537 . 104538) (FLOAT 104532 . 104537) (punctuation 104530 . 104531) (symbol 104521 . 104530) (punctuation 104519 . 104520) (symbol 104504 . 104519) (STRUCT 104497 . 104503) (open-paren 104496 . 104497) (symbol 104480 . 104495) (symbol 104468 . 104479) (punctuation 104466 . 104467) (close-paren 104465 . 104466) (INT 104462 . 104465) (punctuation 104460 . 104461) (symbol 104449 . 104460) (open-paren 104448 . 104449) (symbol 104441 . 104447) (symbol 104430 . 104440) (punctuation 104428 . 104429) (close-paren 104427 . 104428) (symbol 104418 . 104427) (punctuation 104416 . 104417) (punctuation 104415 . 104416) (CONST 104409 . 104414) (CHAR 104404 . 104408) (open-paren 104403 . 104404) (symbol 104391 . 104402) (symbol 104380 . 104390) (punctuation 104378 . 104379) (close-paren 104377 . 104378) (punctuation 104376 . 104377) (symbol 104366 . 104375) (punctuation 104364 . 104365) (punctuation 104363 . 104364) (symbol 104353 . 104362) (punctuation 104351 . 104352) (symbol 104340 . 104351) (open-paren 104339 . 104340) (symbol 104314 . 104338) (punctuation 104313 . 104314) (CHAR 104308 . 104312) (EXTERN 104301 . 104307) (punctuation 104299 . 104300) (close-paren 104298 . 104299) (VOID 104294 . 104298) (open-paren 104293 . 104294) (symbol 104270 . 104292) (VOID 104265 . 104269) (EXTERN 104258 . 104264) (punctuation 104256 . 104257) (close-paren 104255 . 104256) (symbol 104246 . 104255) (punctuation 104244 . 104245) (symbol 104235 . 104244) (punctuation 104233 . 104234) (symbol 104222 . 104233) (open-paren 104221 . 104222) (symbol 104207 . 104220) (symbol 104195 . 104206) (EXTERN 104188 . 104194) (close-paren 104169 . 104170) (symbol 104160 . 104169) (open-paren 104159 . 104160) (symbol 104141 . 104158) (symbol 104131 . 104140) (EXTERN 104124 . 104130) (punctuation 104122 . 104123) (close-paren 104121 . 104122) (number 104118 . 104120) (punctuation 104116 . 104117) (symbol 104092 . 104115) (open-paren 104090 . 104091) (ENUM 104085 . 104089) (punctuation 104057 . 104058) (close-paren 104056 . 104057) (VOID 104052 . 104056) (open-paren 104051 . 104052) (symbol 104036 . 104050) (VOID 104031 . 104035) (EXTERN 104024 . 104030) (punctuation 104022 . 104023) (close-paren 104021 . 104022) (VOID 104017 . 104021) (open-paren 104016 . 104017) (symbol 103999 . 104015) (VOID 103994 . 103998) (EXTERN 103987 . 103993) (punctuation 103901 . 103902) (close-paren 103900 . 103901) (VOID 103896 . 103900) (open-paren 103895 . 103896) (symbol 103879 . 103894) (VOID 103874 . 103878) (EXTERN 103867 . 103873) (punctuation 103865 . 103866) (close-paren 103864 . 103865) (VOID 103860 . 103864) (open-paren 103859 . 103860) (symbol 103841 . 103858) (VOID 103836 . 103840) (EXTERN 103829 . 103835) (punctuation 103827 . 103828) (close-paren 103826 . 103827) (VOID 103822 . 103826) (open-paren 103821 . 103822) (symbol 103808 . 103820) (VOID 103803 . 103807) (EXTERN 103796 . 103802) (punctuation 103764 . 103765) (close-paren 103763 . 103764) (VOID 103759 . 103763) (open-paren 103758 . 103759) (symbol 103740 . 103757) (VOID 103735 . 103739) (EXTERN 103728 . 103734) (punctuation 103726 . 103727) (close-paren 103725 . 103726) (symbol 103716 . 103725) (punctuation 103714 . 103715) (punctuation 103713 . 103714) (CHAR 103708 . 103712) (UNSIGNED 103699 . 103707) (CONST 103693 . 103698) (open-paren 103692 . 103693) (symbol 103668 . 103691) (symbol 103658 . 103667) (EXTERN 103651 . 103657) (punctuation 103649 . 103650) (close-paren 103648 . 103649) (symbol 103639 . 103648) (punctuation 103637 . 103638) (punctuation 103636 . 103637) (CHAR 103631 . 103635) (UNSIGNED 103622 . 103630) (CONST 103616 . 103621) (open-paren 103615 . 103616) (symbol 103601 . 103614) (symbol 103591 . 103600) (EXTERN 103584 . 103590) (punctuation 103550 . 103551) (close-paren 103549 . 103550) (VOID 103545 . 103549) (open-paren 103544 . 103545) (symbol 103529 . 103543) (VOID 103524 . 103528) (EXTERN 103517 . 103523) (punctuation 103515 . 103516) (close-paren 103514 . 103515) (VOID 103510 . 103514) (open-paren 103509 . 103510) (symbol 103492 . 103508) (VOID 103487 . 103491) (EXTERN 103480 . 103486) (punctuation 103478 . 103479) (close-paren 103477 . 103478) (VOID 103473 . 103477) (open-paren 103472 . 103473) (symbol 103460 . 103471) (VOID 103455 . 103459) (EXTERN 103448 . 103454) (punctuation 103446 . 103447) (close-paren 103445 . 103446) (symbol 103434 . 103445) (punctuation 103432 . 103433) (BOOL 103428 . 103432) (punctuation 103426 . 103427) (BOOL 103422 . 103426) (punctuation 103420 . 103421) (symbol 103411 . 103420) (punctuation 103368 . 103369) (symbol 103359 . 103368) (punctuation 103357 . 103358) (punctuation 103356 . 103357) (CHAR 103351 . 103355) (UNSIGNED 103342 . 103350) (CONST 103336 . 103341) (open-paren 103335 . 103336) (symbol 103314 . 103334) (symbol 103302 . 103313) (EXTERN 103295 . 103301) (punctuation 103264 . 103265) (close-paren 103263 . 103264) (VOID 103259 . 103263) (open-paren 103258 . 103259) (symbol 103245 . 103257) (VOID 103240 . 103244) (EXTERN 103233 . 103239) (punctuation 103231 . 103232) (close-paren 103230 . 103231) (VOID 103226 . 103230) (open-paren 103225 . 103226) (symbol 103212 . 103224) (VOID 103207 . 103211) (EXTERN 103200 . 103206) (punctuation 103173 . 103174) (close-paren 103172 . 103173) (punctuation 103171 . 103172) (symbol 103159 . 103170) (STRUCT 103152 . 103158) (open-paren 103151 . 103152) (symbol 103128 . 103150) (VOID 103123 . 103127) (EXTERN 103116 . 103122) (punctuation 103114 . 103115) (close-paren 103113 . 103114) (VOID 103109 . 103113) (open-paren 103108 . 103109) (symbol 103095 . 103107) (VOID 103090 . 103094) (EXTERN 103083 . 103089) (punctuation 103080 . 103081) (close-paren 103079 . 103080) (symbol 103071 . 103079) (symbol 103053 . 103070) (ENUM 103048 . 103052) (punctuation 103012 . 103013) (symbol 103001 . 103012) (punctuation 102999 . 103000) (symbol 102988 . 102999) (open-paren 102987 . 102988) (symbol 102966 . 102986) (VOID 102961 . 102965) (EXTERN 102954 . 102960) (punctuation 102952 . 102953) (close-paren 102951 . 102952) (symbol 102934 . 102951) (ENUM 102929 . 102933) (punctuation 102901 . 102902) (symbol 102890 . 102901) (punctuation 102888 . 102889) (symbol 102877 . 102888) (punctuation 102875 . 102876) (symbol 102864 . 102875) (open-paren 102863 . 102864) (symbol 102850 . 102862) (VOID 102845 . 102849) (EXTERN 102838 . 102844) (punctuation 102836 . 102837) (close-paren 102835 . 102836) (symbol 102808 . 102834) (punctuation 102804 . 102805) (symbol 102785 . 102804) (punctuation 102781 . 102782) (symbol 102764 . 102781) (punctuation 102760 . 102761) (symbol 102744 . 102760) (open-paren 102740 . 102741) (symbol 102722 . 102739) (ENUM 102717 . 102721) (punctuation 102715 . 102716) (close-paren 102714 . 102715) (punctuation 102713 . 102714) (symbol 102704 . 102712) (UNION 102698 . 102703) (open-paren 102697 . 102698) (symbol 102676 . 102696) (symbol 102664 . 102675) (EXTERN 102657 . 102663) (punctuation 102655 . 102656) (close-paren 102654 . 102655) (symbol 102643 . 102654) (open-paren 102642 . 102643) (symbol 102628 . 102641) (VOID 102623 . 102627) (symbol 102613 . 102622) (EXTERN 102606 . 102612) (punctuation 102604 . 102605) (close-paren 102603 . 102604) (symbol 102592 . 102603) (punctuation 102582 . 102583) (symbol 102571 . 102582) (punctuation 102569 . 102570) (symbol 102558 . 102569) (open-paren 102557 . 102558) (symbol 102537 . 102556) (VOID 102532 . 102536) (symbol 102522 . 102531) (EXTERN 102515 . 102521) (punctuation 102513 . 102514) (close-paren 102512 . 102513) (symbol 102501 . 102512) (punctuation 102499 . 102500) (symbol 102488 . 102499) (open-paren 102487 . 102488) (symbol 102469 . 102486) (VOID 102464 . 102468) (symbol 102454 . 102463) (EXTERN 102447 . 102453) (punctuation 102445 . 102446) (close-paren 102444 . 102445) (punctuation 102443 . 102444) (symbol 102431 . 102442) (STRUCT 102424 . 102430) (open-paren 102423 . 102424) (symbol 102405 . 102422) (punctuation 102404 . 102405) (symbol 102392 . 102403) (STRUCT 102385 . 102391) (EXTERN 102378 . 102384) (punctuation 102375 . 102376) (close-paren 102374 . 102375) (symbol 102365 . 102374) (punctuation 102363 . 102364) (symbol 102352 . 102363) (open-paren 102351 . 102352) (symbol 102334 . 102350) (symbol 102324 . 102333) (EXTERN 102317 . 102323) (punctuation 102315 . 102316) (close-paren 102314 . 102315) (symbol 102306 . 102314) (punctuation 102304 . 102305) (symbol 102296 . 102304) (punctuation 102294 . 102295) (symbol 102283 . 102294) (open-paren 102282 . 102283) (symbol 102267 . 102281) (symbol 102258 . 102266) (EXTERN 102251 . 102257) (punctuation 101828 . 101829) (close-paren 101827 . 101828) (symbol 101818 . 101827) (open-paren 101817 . 101818) (symbol 101801 . 101816) (symbol 101789 . 101800) (EXTERN 101782 . 101788) (punctuation 101780 . 101781) (close-paren 101779 . 101780) (symbol 101771 . 101779) (open-paren 101770 . 101771) (symbol 101755 . 101769) (symbol 101743 . 101754) (EXTERN 101736 . 101742) (punctuation 101374 . 101375) (close-paren 101373 . 101374) (symbol 101363 . 101373) (symbol 101346 . 101362) (ENUM 101341 . 101345) (punctuation 101306 . 101307) (symbol 101302 . 101306) (symbol 101290 . 101301) (punctuation 101288 . 101289) (symbol 101284 . 101288) (symbol 101272 . 101283) (open-paren 101271 . 101272) (symbol 101258 . 101270) (symbol 101246 . 101257) (EXTERN 101239 . 101245) (punctuation 101237 . 101238) (close-paren 101236 . 101237) (symbol 101216 . 101235) (punctuation 101212 . 101213) (symbol 101193 . 101212) (punctuation 101189 . 101190) (symbol 101179 . 101189) (punctuation 101175 . 101176) (symbol 101165 . 101175) (punctuation 101161 . 101162) (symbol 101147 . 101161) (punctuation 101143 . 101144) (symbol 101132 . 101143) (open-paren 101128 . 101129) (symbol 101111 . 101127) (ENUM 101106 . 101110) (punctuation 101104 . 101105) (close-paren 101103 . 101104) (symbol 101092 . 101103) (open-paren 101091 . 101092) (symbol 101073 . 101090) (symbol 101061 . 101072) (EXTERN 101054 . 101060) (punctuation 101052 . 101053) (close-paren 101051 . 101052) (symbol 101040 . 101051) (open-paren 101039 . 101040) (symbol 101021 . 101038) (symbol 101009 . 101020) (EXTERN 101002 . 101008) (punctuation 101000 . 101001) (close-paren 100999 . 101000) (symbol 100988 . 100999) (punctuation 100986 . 100987) (symbol 100975 . 100986) (punctuation 100963 . 100964) (symbol 100952 . 100963) (punctuation 100950 . 100951) (symbol 100939 . 100950) (open-paren 100938 . 100939) (symbol 100913 . 100937) (VOID 100908 . 100912) (EXTERN 100901 . 100907) (punctuation 100899 . 100900) (close-paren 100898 . 100899) (symbol 100887 . 100898) (punctuation 100885 . 100886) (symbol 100874 . 100885) (open-paren 100873 . 100874) (symbol 100860 . 100872) (VOID 100855 . 100859) (symbol 100845 . 100854) (EXTERN 100838 . 100844) (close-paren 100809 . 100810) (punctuation 100787 . 100788) (punctuation 100786 . 100787) (semantic-list 100779 . 100786) (symbol 100763 . 100778) (open-paren 100759 . 100760) (close-paren 100757 . 100758) (symbol 100754 . 100757) (symbol 100742 . 100753) (punctuation 100740 . 100741) (symbol 100737 . 100740) (symbol 100727 . 100736) (punctuation 100725 . 100726) (symbol 100720 . 100725) (symbol 100708 . 100719) (open-paren 100707 . 100708) (symbol 100679 . 100706) (VOID 100674 . 100678) (symbol 100667 . 100673) (close-paren 100664 . 100665) (punctuation 100642 . 100643) (punctuation 100641 . 100642) (semantic-list 100634 . 100641) (symbol 100622 . 100633) (punctuation 100618 . 100619) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" number "0" 100573 . 100574)))) 100564 . 100618) (open-paren 100560 . 100561) (close-paren 100558 . 100559) (symbol 100555 . 100558) (symbol 100543 . 100554) (punctuation 100541 . 100542) (symbol 100538 . 100541) (symbol 100528 . 100537) (punctuation 100526 . 100527) (symbol 100521 . 100526) (symbol 100509 . 100520) (open-paren 100508 . 100509) (symbol 100484 . 100507) (VOID 100479 . 100483) (symbol 100472 . 100478) (close-paren 100469 . 100470) (punctuation 100449 . 100450) (punctuation 100448 . 100449) (semantic-list 100441 . 100448) (symbol 100429 . 100440) (punctuation 100425 . 100426) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" number "0" 100362 . 100363)))) 100353 . 100425) (open-paren 100349 . 100350) (close-paren 100347 . 100348) (symbol 100344 . 100347) (symbol 100332 . 100343) (punctuation 100330 . 100331) (symbol 100327 . 100330) (symbol 100317 . 100326) (punctuation 100315 . 100316) (symbol 100310 . 100315) (symbol 100298 . 100309) (open-paren 100297 . 100298) (symbol 100275 . 100296) (VOID 100270 . 100274) (symbol 100263 . 100269) (close-paren 100206 . 100207) (punctuation 100190 . 100191) (punctuation 100189 . 100190) (semantic-list 100182 . 100189) (symbol 100170 . 100181) (open-paren 100166 . 100167) (close-paren 100164 . 100165) (symbol 100161 . 100164) (symbol 100149 . 100160) (punctuation 100147 . 100148) (symbol 100142 . 100147) (symbol 100130 . 100141) (open-paren 100129 . 100130) (symbol 100106 . 100128) (VOID 100101 . 100105) (symbol 100094 . 100100) (close-paren 100092 . 100093) (punctuation 100077 . 100078) (punctuation 100076 . 100077) (semantic-list 100069 . 100076) (symbol 100057 . 100068) (open-paren 100053 . 100054) (close-paren 100051 . 100052) (symbol 100048 . 100051) (symbol 100036 . 100047) (punctuation 100034 . 100035) (symbol 100029 . 100034) (symbol 100017 . 100028) (open-paren 100016 . 100017) (symbol 99994 . 100015) (VOID 99989 . 99993) (symbol 99982 . 99988) (close-paren 99873 . 99874) (punctuation 99857 . 99858) (punctuation 99856 . 99857) (semantic-list 99853 . 99856) (symbol 99845 . 99852) (open-paren 99841 . 99842) (close-paren 99839 . 99840) (symbol 99838 . 99839) (symbol 99829 . 99837) (punctuation 99827 . 99828) (symbol 99826 . 99827) (symbol 99814 . 99825) (open-paren 99813 . 99814) (symbol 99792 . 99812) (VOID 99787 . 99791) (symbol 99780 . 99786) (close-paren 99738 . 99739) (punctuation 99726 . 99727) (punctuation 99725 . 99726) (semantic-list 99722 . 99725) (symbol 99714 . 99721) (RETURN 99707 . 99713) (open-paren 99703 . 99704) (close-paren 99701 . 99702) (symbol 99700 . 99701) (symbol 99688 . 99699) (open-paren 99687 . 99688) (symbol 99670 . 99686) (symbol 99661 . 99669) (symbol 99654 . 99660) (close-paren 99617 . 99618) (punctuation 99601 . 99602) (punctuation 99600 . 99601) (semantic-list 99591 . 99600) (symbol 99582 . 99590) (open-paren 99578 . 99579) (close-paren 99576 . 99577) (symbol 99571 . 99576) (symbol 99559 . 99570) (punctuation 99557 . 99558) (symbol 99550 . 99557) (symbol 99538 . 99549) (open-paren 99537 . 99538) (symbol 99519 . 99536) (VOID 99514 . 99518) (symbol 99507 . 99513) (close-paren 99467 . 99468) (punctuation 99459 . 99460) (punctuation 99458 . 99459) (symbol 99455 . 99458) (RETURN 99448 . 99454) (punctuation 99444 . 99445) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "blv" 99397 . 99400)))) 99388 . 99444) (open-paren 99384 . 99385) (close-paren 99382 . 99383) (symbol 99379 . 99382) (punctuation 99378 . 99379) (symbol 99354 . 99377) (STRUCT 99347 . 99353) (open-paren 99346 . 99347) (symbol 99336 . 99345) (INT 99332 . 99335) (symbol 99325 . 99331) (close-paren 99274 . 99275) (punctuation 99241 . 99242) (punctuation 99240 . 99241) (semantic-list 99235 . 99240) (symbol 99227 . 99234) (open-paren 99223 . 99224) (close-paren 99221 . 99222) (symbol 99218 . 99221) (symbol 99206 . 99217) (open-paren 99205 . 99206) (symbol 99184 . 99204) (VOID 99179 . 99183) (symbol 99172 . 99178) (close-paren 99169 . 99170) (punctuation 99155 . 99156) (punctuation 99154 . 99155) (semantic-list 99149 . 99154) (symbol 99141 . 99148) (open-paren 99137 . 99138) (close-paren 99135 . 99136) (symbol 99131 . 99135) (punctuation 99130 . 99131) (symbol 99118 . 99129) (STRUCT 99111 . 99117) (punctuation 99109 . 99110) (symbol 99106 . 99109) (symbol 99094 . 99105) (open-paren 99093 . 99094) (symbol 99077 . 99092) (VOID 99072 . 99076) (symbol 99065 . 99071) (close-paren 99062 . 99063) (punctuation 99046 . 99047) (punctuation 99045 . 99046) (semantic-list 99040 . 99045) (symbol 99032 . 99039) (open-paren 99028 . 99029) (close-paren 99026 . 99027) (symbol 99021 . 99026) (symbol 99009 . 99020) (punctuation 99007 . 99008) (symbol 99004 . 99007) (symbol 98992 . 99003) (open-paren 98991 . 98992) (symbol 98974 . 98990) (VOID 98969 . 98973) (symbol 98962 . 98968) (close-paren 98959 . 98960) (punctuation 98937 . 98938) (punctuation 98936 . 98937) (semantic-list 98931 . 98936) (symbol 98923 . 98930) (open-paren 98919 . 98920) (close-paren 98917 . 98918) (symbol 98909 . 98917) (symbol 98897 . 98908) (punctuation 98895 . 98896) (symbol 98892 . 98895) (symbol 98880 . 98891) (open-paren 98879 . 98880) (symbol 98859 . 98878) (VOID 98854 . 98858) (symbol 98847 . 98853) (close-paren 98754 . 98755) (number 98745 . 98746) (punctuation 98743 . 98744) (punctuation 98737 . 98738) (number 98735 . 98736) (punctuation 98719 . 98720) (punctuation 98718 . 98719) (open-paren 98704 . 98705) (close-paren 98702 . 98703) (symbol 98699 . 98702) (symbol 98687 . 98698) (punctuation 98685 . 98686) (symbol 98682 . 98685) (symbol 98672 . 98681) (punctuation 98670 . 98671) (symbol 98669 . 98670) (punctuation 98668 . 98669) (symbol 98652 . 98667) (STRUCT 98645 . 98651) (open-paren 98644 . 98645) (symbol 98624 . 98643) (VOID 98619 . 98623) (symbol 98612 . 98618) (close-paren 98609 . 98610) (punctuation 98596 . 98597) (number 98594 . 98595) (punctuation 98578 . 98579) (punctuation 98577 . 98578) (open-paren 98563 . 98564) (close-paren 98561 . 98562) (symbol 98558 . 98561) (symbol 98546 . 98557) (punctuation 98544 . 98545) (symbol 98541 . 98544) (symbol 98531 . 98540) (punctuation 98529 . 98530) (symbol 98528 . 98529) (punctuation 98527 . 98528) (symbol 98511 . 98526) (STRUCT 98504 . 98510) (open-paren 98503 . 98504) (symbol 98485 . 98502) (VOID 98480 . 98484) (symbol 98473 . 98479) (close-paren 98429 . 98430) (punctuation 98421 . 98422) (SIZEOF 98414 . 98420) (punctuation 98390 . 98391) (punctuation 98380 . 98381) (punctuation 98379 . 98380) (semantic-list 98376 . 98379) (punctuation 98356 . 98357) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" number "0" 98299 . 98300)))) 98290 . 98356) (open-paren 98286 . 98287) (close-paren 98284 . 98285) (symbol 98279 . 98284) (symbol 98269 . 98278) (punctuation 98267 . 98268) (symbol 98263 . 98267) (punctuation 98262 . 98263) (symbol 98250 . 98261) (punctuation 98248 . 98249) (symbol 98242 . 98248) (symbol 98232 . 98241) (punctuation 98230 . 98231) (symbol 98229 . 98230) (symbol 98217 . 98228) (open-paren 98216 . 98217) (symbol 98210 . 98215) (VOID 98205 . 98209) (symbol 98198 . 98204) (punctuation 98039 . 98040) (close-paren 98038 . 98039) (punctuation 98037 . 98038) (symbol 98025 . 98036) (open-paren 98024 . 98025) (symbol 98014 . 98023) (VOID 98009 . 98013) (close-paren 97858 . 97859) (semantic-list 97829 . 97838) (IF 97826 . 97828) (open-paren 97822 . 97823) (close-paren 97820 . 97821) (symbol 97815 . 97820) (INT 97811 . 97814) (SHORT 97805 . 97810) (UNSIGNED 97796 . 97804) (open-paren 97795 . 97796) (symbol 97783 . 97794) (VOID 97778 . 97782) (symbol 97771 . 97777) (punctuation 97506 . 97507) (close-paren 97505 . 97506) (VOID 97501 . 97505) (open-paren 97500 . 97501) (symbol 97489 . 97499) (VOID 97484 . 97488) (EXTERN 97477 . 97483) (punctuation 97434 . 97435) (close-paren 97433 . 97434) (open-paren 96658 . 96659) (symbol 96650 . 96657) (STRUCT 96643 . 96649) (punctuation 96640 . 96641) (close-paren 96639 . 96640) (symbol 96627 . 96638) (punctuation 96625 . 96626) (symbol 96611 . 96625) (punctuation 96609 . 96610) (symbol 96602 . 96609) (open-paren 96600 . 96601) (symbol 96588 . 96599) (ENUM 96583 . 96587) (close-paren 95455 . 95456) (punctuation 95444 . 95445) (symbol 95432 . 95443) (RETURN 95425 . 95431) (open-paren 95421 . 95422) (close-paren 95419 . 95420) (VOID 95415 . 95419) (open-paren 95414 . 95415) (symbol 95400 . 95413) (symbol 95390 . 95399) (symbol 95383 . 95389) (punctuation 95206 . 95207) (close-paren 95205 . 95206) (punctuation 95072 . 95073) (symbol 95067 . 95071) (symbol "specbind_tag" 95044 . 95066) (ENUM "enum" 95044 . 95066) (punctuation 95072 . 95073) (symbol 95067 . 95071) (symbol "specbind_tag" 95044 . 95066) (ENUM "enum" 95044 . 95066) (punctuation 94752 . 94753) (symbol 94747 . 94751) (symbol "specbind_tag" 94724 . 94746) (ENUM "enum" 94724 . 94746) (punctuation 94752 . 94753) (symbol 94747 . 94751) (symbol "specbind_tag" 94724 . 94746) (ENUM "enum" 94724 . 94746) (punctuation 94647 . 94648) (symbol 94642 . 94646) (symbol "specbind_tag" 94619 . 94641) (ENUM "enum" 94619 . 94641) (punctuation 94647 . 94648) (symbol 94642 . 94646) (symbol "specbind_tag" 94619 . 94641) (ENUM "enum" 94619 . 94641) (punctuation 94529 . 94530) (symbol 94524 . 94528) (symbol "specbind_tag" 94501 . 94523) (ENUM "enum" 94501 . 94523) (punctuation 94529 . 94530) (symbol 94524 . 94528) (symbol "specbind_tag" 94501 . 94523) (ENUM "enum" 94501 . 94523) (punctuation 94406 . 94407) (symbol 94401 . 94405) (symbol "specbind_tag" 94378 . 94400) (ENUM "enum" 94378 . 94400) (punctuation 94406 . 94407) (symbol 94401 . 94405) (symbol "specbind_tag" 94378 . 94400) (ENUM "enum" 94378 . 94400) (punctuation 94276 . 94277) (symbol 94271 . 94275) (symbol "specbind_tag" 94248 . 94270) (ENUM "enum" 94248 . 94270) (punctuation 94276 . 94277) (symbol 94271 . 94275) (symbol "specbind_tag" 94248 . 94270) (ENUM "enum" 94248 . 94270) (punctuation 94217 . 94218) (symbol 94212 . 94216) (symbol "specbind_tag" 94189 . 94211) (ENUM "enum" 94189 . 94211) (open-paren 94183 . 94184) (symbol 94169 . 94180) (UNION 94163 . 94168) (punctuation 94160 . 94161) (close-paren 94159 . 94160) (symbol 94093 . 94112) (punctuation 94053 . 94054) (symbol 94036 . 94053) (punctuation 93917 . 93918) (symbol 93906 . 93917) (punctuation 93865 . 93866) (symbol 93848 . 93865) (punctuation 93813 . 93814) (symbol 93794 . 93813) (punctuation 93764 . 93765) (symbol 93746 . 93764) (punctuation 93713 . 93714) (symbol 93695 . 93713) (punctuation 93640 . 93641) (symbol 93626 . 93640) (open-paren 93622 . 93623) (symbol 93609 . 93621) (ENUM 93604 . 93608) (punctuation 90344 . 90345) (close-paren 90343 . 90344) (INT 90340 . 90343) (punctuation 90338 . 90339) (punctuation 90337 . 90338) (CHAR 90332 . 90336) (CONST 90326 . 90331) (punctuation 90324 . 90325) (punctuation 90323 . 90324) (symbol 90304 . 90322) (STRUCT 90297 . 90303) (open-paren 90296 . 90297) (symbol 90282 . 90295) (VOID 90277 . 90281) (EXTERN 90270 . 90276) (punctuation 90268 . 90269) (close-paren 90267 . 90268) (punctuation 90266 . 90267) (symbol 90256 . 90265) (punctuation 90254 . 90255) (punctuation 90253 . 90254) (CHAR 90248 . 90252) (CONST 90242 . 90247) (punctuation 90240 . 90241) (punctuation 90239 . 90240) (symbol 90227 . 90238) (STRUCT 90220 . 90226) (open-paren 90219 . 90220) (symbol 90208 . 90218) (VOID 90203 . 90207) (EXTERN 90196 . 90202) (punctuation 90194 . 90195) (close-paren 90193 . 90194) (punctuation 90192 . 90193) (BOOL 90187 . 90191) (punctuation 90185 . 90186) (punctuation 90184 . 90185) (CHAR 90179 . 90183) (CONST 90173 . 90178) (punctuation 90171 . 90172) (punctuation 90170 . 90171) (symbol 90157 . 90169) (STRUCT 90150 . 90156) (open-paren 90149 . 90150) (symbol 90137 . 90148) (VOID 90132 . 90136) (EXTERN 90125 . 90131) (punctuation 90123 . 90124) (close-paren 90122 . 90123) (punctuation 90121 . 90122) (symbol 90109 . 90120) (punctuation 90107 . 90108) (punctuation 90106 . 90107) (CHAR 90101 . 90105) (CONST 90095 . 90100) (punctuation 90093 . 90094) (punctuation 90092 . 90093) (symbol 90080 . 90091) (STRUCT 90073 . 90079) (open-paren 90072 . 90073) (symbol 90054 . 90071) (VOID 90049 . 90053) (EXTERN 90042 . 90048) (punctuation 90040 . 90041) (close-paren 90039 . 90040) (punctuation 90038 . 90039) (symbol 90026 . 90037) (punctuation 90024 . 90025) (punctuation 90023 . 90024) (CHAR 90018 . 90022) (CONST 90012 . 90017) (punctuation 90010 . 90011) (punctuation 90009 . 90010) (symbol 89997 . 90008) (STRUCT 89990 . 89996) (open-paren 89989 . 89990) (symbol 89977 . 89988) (VOID 89972 . 89976) (EXTERN 89965 . 89971) (punctuation 89461 . 89462) (close-paren 89460 . 89461) (number 89456 . 89457) (punctuation 89455 . 89456) (punctuation 89453 . 89454) (symbol 89443 . 89452) (punctuation 89437 . 89438) (number 89436 . 89437) (punctuation 89435 . 89436) (punctuation 89433 . 89434) (symbol 89428 . 89432) (open-paren 89422 . 89423) (symbol 89412 . 89419) (ENUM 89407 . 89411) (punctuation 89404 . 89405) (close-paren 89403 . 89404) (punctuation 89402 . 89403) (symbol 89392 . 89401) (STRUCT 89385 . 89391) (open-paren 89384 . 89385) (symbol 89376 . 89383) (VOID 89371 . 89375) (EXTERN 89364 . 89370) (close-paren 87011 . 87012) (open-paren 86937 . 86938) (close-paren 86935 . 86936) (symbol 86934 . 86935) (symbol 86922 . 86933) (open-paren 86921 . 86922) (symbol 86904 . 86920) (VOID 86899 . 86903) (symbol 86892 . 86898) (close-paren 86889 . 86890) (open-paren 86815 . 86816) (close-paren 86813 . 86814) (symbol 86812 . 86813) (symbol 86800 . 86811) (open-paren 86799 . 86800) (symbol 86782 . 86798) (VOID 86777 . 86781) (symbol 86770 . 86776) (close-paren 86382 . 86383) (semantic-list 86363 . 86366) (open-paren 86339 . 86340) (close-paren 86337 . 86338) (symbol 86336 . 86337) (symbol 86324 . 86335) (open-paren 86323 . 86324) (symbol 86301 . 86322) (VOID 86296 . 86300) (symbol 86289 . 86295) (close-paren 86286 . 86287) (punctuation 86274 . 86275) (semantic-list 86270 . 86273) (symbol 86258 . 86269) (punctuation 86256 . 86257) (semantic-list 86252 . 86255) (symbol 86245 . 86251) (RETURN 86238 . 86244) (open-paren 86234 . 86235) (close-paren 86232 . 86233) (symbol 86231 . 86232) (symbol 86219 . 86230) (open-paren 86218 . 86219) (symbol 86208 . 86217) (DOUBLE 86201 . 86207) (symbol 86194 . 86200) (close-paren 85299 . 85300) (semantic-list 85278 . 85281) (open-paren 85254 . 85255) (close-paren 85252 . 85253) (symbol 85251 . 85252) (symbol 85239 . 85250) (open-paren 85238 . 85239) (symbol 85225 . 85237) (VOID 85220 . 85224) (symbol 85213 . 85219) (close-paren 85211 . 85212) (semantic-list 85191 . 85194) (open-paren 85168 . 85169) (close-paren 85166 . 85167) (symbol 85157 . 85166) (symbol 85145 . 85156) (punctuation 85143 . 85144) (symbol 85142 . 85143) (symbol 85130 . 85141) (open-paren 85129 . 85130) (symbol 85117 . 85128) (VOID 85112 . 85116) (symbol 85105 . 85111) (close-paren 85103 . 85104) (RETURN 85048 . 85054) (semantic-list 85030 . 85043) (IF 85027 . 85029) (RETURN 85007 . 85013) (semantic-list 84989 . 85002) (IF 84986 . 84988) (open-paren 84982 . 84983) (close-paren 84980 . 84981) (symbol 84979 . 84980) (symbol 84967 . 84978) (open-paren 84966 . 84967) (symbol 84943 . 84965) (symbol 84933 . 84942) (symbol 84926 . 84932) (close-paren 84855 . 84856) (semantic-list 84849 . 84852) (semantic-list 84822 . 84832) (open-paren 84798 . 84799) (close-paren 84796 . 84797) (symbol 84795 . 84796) (symbol 84783 . 84794) (open-paren 84782 . 84783) (symbol 84765 . 84781) (VOID 84760 . 84764) (symbol 84753 . 84759) (close-paren 84750 . 84751) (open-paren 84721 . 84722) (close-paren 84719 . 84720) (symbol 84718 . 84719) (symbol 84706 . 84717) (open-paren 84705 . 84706) (close-paren 84703 . 84704) (symbol 84691 . 84703) (open-paren 84690 . 84691) (VOID 84685 . 84689) (symbol 84678 . 84684) (close-paren 84675 . 84676) (semantic-list 84658 . 84661) (open-paren 84637 . 84638) (close-paren 84635 . 84636) (symbol 84634 . 84635) (symbol 84622 . 84633) (punctuation 84620 . 84621) (symbol 84619 . 84620) (symbol 84607 . 84618) (open-paren 84606 . 84607) (symbol 84591 . 84605) (VOID 84586 . 84590) (symbol 84579 . 84585) (close-paren 84576 . 84577) (semantic-list 84559 . 84562) (punctuation 84552 . 84553) (punctuation 84551 . 84552) (semantic-list 84547 . 84550) (open-paren 84525 . 84526) (close-paren 84523 . 84524) (symbol 84522 . 84523) (symbol 84510 . 84521) (open-paren 84509 . 84510) (symbol 84498 . 84508) (VOID 84493 . 84497) (symbol 84486 . 84492) (close-paren 84482 . 84483) (punctuation 84461 . 84462) (punctuation 84460 . 84461) (semantic-list 84456 . 84459) (symbol 84443 . 84455) (punctuation 84441 . 84442) (punctuation 84440 . 84441) (semantic-list 84436 . 84439) (symbol 84428 . 84435) (punctuation 84426 . 84427) (punctuation 84425 . 84426) (semantic-list 84421 . 84424) (symbol 84413 . 84420) (RETURN 84406 . 84412) (open-paren 84402 . 84403) (close-paren 84400 . 84401) (symbol 84399 . 84400) (symbol 84387 . 84398) (open-paren 84386 . 84387) (symbol 84379 . 84385) (BOOL 84374 . 84378) (symbol 84367 . 84373) (close-paren 84344 . 84345) (punctuation 84318 . 84319) (semantic-list 84314 . 84317) (symbol 84308 . 84313) (RETURN 84301 . 84307) (open-paren 84297 . 84298) (close-paren 84295 . 84296) (symbol 84294 . 84295) (symbol 84282 . 84293) (open-paren 84281 . 84282) (symbol 84274 . 84280) (BOOL 84269 . 84273) (symbol 84262 . 84268) (close-paren 84222 . 84223) (semantic-list 84203 . 84206) (open-paren 84179 . 84180) (close-paren 84177 . 84178) (symbol 84176 . 84177) (symbol 84164 . 84175) (open-paren 84163 . 84164) (symbol 84150 . 84162) (VOID 84145 . 84149) (symbol 84138 . 84144) (close-paren 84135 . 84136) (RETURN 84096 . 84102) (open-paren 84092 . 84093) (close-paren 84090 . 84091) (symbol 84089 . 84090) (symbol 84077 . 84088) (open-paren 84076 . 84077) (symbol 84068 . 84075) (BOOL 84063 . 84067) (symbol 84056 . 84062) (close-paren 84053 . 84054) (RETURN 84015 . 84021) (open-paren 84011 . 84012) (close-paren 84009 . 84010) (symbol 84008 . 84009) (symbol 83996 . 84007) (open-paren 83995 . 83996) (symbol 83988 . 83994) (BOOL 83983 . 83987) (symbol 83976 . 83982) (close-paren 83973 . 83974) (RETURN 83932 . 83938) (open-paren 83928 . 83929) (close-paren 83926 . 83927) (symbol 83925 . 83926) (symbol 83913 . 83924) (open-paren 83912 . 83913) (symbol 83902 . 83911) (BOOL 83897 . 83901) (symbol 83890 . 83896) (close-paren 83887 . 83888) (RETURN 83834 . 83840) (open-paren 83830 . 83831) (close-paren 83828 . 83829) (symbol 83827 . 83828) (symbol 83815 . 83826) (open-paren 83814 . 83815) (symbol 83792 . 83813) (BOOL 83787 . 83791) (symbol 83780 . 83786) (close-paren 83730 . 83731) (punctuation 83701 . 83702) (semantic-list 83697 . 83700) (symbol 83691 . 83696) (RETURN 83684 . 83690) (open-paren 83680 . 83681) (close-paren 83678 . 83679) (symbol 83677 . 83678) (symbol 83665 . 83676) (open-paren 83664 . 83665) (symbol 83654 . 83663) (BOOL 83649 . 83653) (symbol 83642 . 83648) (close-paren 83454 . 83455) (punctuation 83448 . 83449) (punctuation 83447 . 83448) (semantic-list 83443 . 83446) (symbol 83438 . 83442) (punctuation 83436 . 83437) (punctuation 83435 . 83436) (semantic-list 83431 . 83434) (symbol 83426 . 83430) (punctuation 83424 . 83425) (punctuation 83423 . 83424) (symbol 83420 . 83422) (punctuation 83418 . 83419) (punctuation 83417 . 83418) (semantic-list 83413 . 83416) (symbol 83404 . 83412) (RETURN 83397 . 83403) (open-paren 83393 . 83394) (close-paren 83391 . 83392) (symbol 83389 . 83391) (symbol 83380 . 83388) (punctuation 83378 . 83379) (symbol 83377 . 83378) (symbol 83365 . 83376) (punctuation 83363 . 83364) (symbol 83361 . 83363) (symbol 83352 . 83360) (open-paren 83351 . 83352) (symbol 83335 . 83350) (BOOL 83330 . 83334) (symbol 83323 . 83329) (close-paren 83320 . 83321) (punctuation 83308 . 83309) (punctuation 83307 . 83308) (number 83305 . 83306) (punctuation 83303 . 83304) (punctuation 83302 . 83303) (semantic-list 83298 . 83301) (symbol 83289 . 83297) (RETURN 83282 . 83288) (open-paren 83278 . 83279) (close-paren 83276 . 83277) (symbol 83275 . 83276) (symbol 83263 . 83274) (open-paren 83262 . 83263) (symbol 83254 . 83261) (BOOL 83249 . 83253) (symbol 83242 . 83248) (close-paren 83240 . 83241) (punctuation 83226 . 83227) (punctuation 83225 . 83226) (semantic-list 83221 . 83224) (symbol 83212 . 83220) (RETURN 83205 . 83211) (open-paren 83201 . 83202) (close-paren 83199 . 83200) (symbol 83198 . 83199) (symbol 83186 . 83197) (open-paren 83185 . 83186) (symbol 83177 . 83184) (BOOL 83172 . 83176) (symbol 83165 . 83171) (punctuation 83133 . 83134) (close-paren 83132 . 83133) (number 83127 . 83129) (punctuation 83125 . 83126) (symbol 83111 . 83124) (punctuation 83013 . 83014) (symbol 83004 . 83013) (punctuation 83002 . 83003) (symbol 82993 . 83001) (punctuation 82991 . 82992) (symbol 82980 . 82990) (punctuation 82978 . 82979) (symbol 82967 . 82977) (punctuation 82965 . 82966) (symbol 82954 . 82964) (punctuation 82952 . 82953) (symbol 82943 . 82951) (punctuation 82935 . 82936) (symbol 82916 . 82934) (punctuation 82909 . 82910) (number 82900 . 82909) (punctuation 82898 . 82899) (symbol 82888 . 82897) (punctuation 82882 . 82883) (number 82873 . 82882) (punctuation 82871 . 82872) (symbol 82862 . 82870) (punctuation 82856 . 82857) (number 82847 . 82856) (punctuation 82845 . 82846) (symbol 82834 . 82844) (punctuation 82828 . 82829) (number 82819 . 82828) (punctuation 82817 . 82818) (symbol 82806 . 82816) (punctuation 82800 . 82801) (number 82791 . 82800) (punctuation 82789 . 82790) (symbol 82778 . 82788) (punctuation 82772 . 82773) (number 82763 . 82772) (punctuation 82761 . 82762) (symbol 82752 . 82760) (open-paren 82746 . 82747) (symbol 82734 . 82743) (ENUM 82729 . 82733) (punctuation 82459 . 82460) (close-paren 82458 . 82459) (number 82454 . 82455) (punctuation 82452 . 82453) (symbol 82431 . 82451) (punctuation 82425 . 82426) (number 82424 . 82425) (punctuation 82422 . 82423) (symbol 82402 . 82421) (punctuation 82396 . 82397) (number 82395 . 82396) (punctuation 82393 . 82394) (symbol 82372 . 82392) (punctuation 82366 . 82367) (number 82365 . 82366) (punctuation 82363 . 82364) (symbol 82344 . 82362) (punctuation 82338 . 82339) (number 82337 . 82338) (punctuation 82335 . 82336) (symbol 82317 . 82334) (punctuation 82311 . 82312) (number 82310 . 82311) (punctuation 82308 . 82309) (symbol 82291 . 82307) (open-paren 82285 . 82286) (symbol 82269 . 82282) (ENUM 82264 . 82268) (punctuation 81962 . 81963) (close-paren 81961 . 81962) (semantic-list 81873 . 81958) (punctuation 81871 . 81872) (symbol 81845 . 81864) (open-paren 81839 . 81840) (ENUM 81832 . 81836) (close-paren 81391 . 81392) (punctuation 81384 . 81385) (symbol 81383 . 81384) (punctuation 81382 . 81383) (punctuation 81381 . 81382) (semantic-list 81378 . 81381) (symbol 81371 . 81377) (RETURN 81364 . 81370) (open-paren 81360 . 81361) (close-paren 81358 . 81359) (symbol 81357 . 81358) (symbol 81345 . 81356) (open-paren 81344 . 81345) (symbol 81332 . 81343) (DOUBLE 81325 . 81331) (symbol 81318 . 81324) (close-paren 81315 . 81316) (RETURN 81284 . 81290) (punctuation 81280 . 81281) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "FLOATP" 81269 . 81275)))) 81260 . 81280) (open-paren 81256 . 81257) (close-paren 81254 . 81255) (symbol 81253 . 81254) (symbol 81241 . 81252) (open-paren 81240 . 81241) (symbol 81233 . 81239) (punctuation 81231 . 81232) (symbol 81220 . 81230) (STRUCT 81213 . 81219) (symbol 81206 . 81212) (close-paren 81203 . 81204) (punctuation 81201 . 81202) (semantic-list #("(XTYPE (x) == Lisp_Float)" 0 1 (macros (("x" symbol "x" 81199 . 81200)))) 81184 . 81201) (RETURN 81177 . 81183) (open-paren 81173 . 81174) (close-paren 81171 . 81172) (symbol 81170 . 81171) (symbol 81158 . 81169) (open-paren 81157 . 81158) (close-paren 81155 . 81156) (symbol 81149 . 81155) (open-paren 81148 . 81149) (BOOL 81143 . 81147) (symbol 81136 . 81142) (punctuation 81133 . 81134) (close-paren 81132 . 81133) (open-paren 81052 . 81053) (symbol 81039 . 81049) (STRUCT 81032 . 81038) (close-paren 80995 . 80996) (punctuation 80977 . 80978) (punctuation 80976 . 80977) (symbol 80975 . 80976) (punctuation 80974 . 80975) (RETURN 80967 . 80973) (punctuation 80963 . 80964) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "BUFFER_OBJFWDP" 80944 . 80958)))) 80935 . 80963) (open-paren 80931 . 80932) (close-paren 80929 . 80930) (symbol 80928 . 80929) (punctuation 80927 . 80928) (symbol 80918 . 80926) (UNION 80912 . 80917) (open-paren 80911 . 80912) (symbol 80896 . 80910) (punctuation 80894 . 80895) (symbol 80875 . 80893) (STRUCT 80868 . 80874) (symbol 80861 . 80867) (close-paren 80858 . 80859) (punctuation 80835 . 80836) (punctuation 80834 . 80835) (semantic-list 80830 . 80833) (symbol 80821 . 80829) (RETURN 80814 . 80820) (open-paren 80810 . 80811) (close-paren 80808 . 80809) (symbol 80807 . 80808) (punctuation 80806 . 80807) (symbol 80797 . 80805) (UNION 80791 . 80796) (open-paren 80790 . 80791) (symbol 80775 . 80789) (BOOL 80770 . 80774) (symbol 80763 . 80769) (close-paren 80760 . 80761) (punctuation 80753 . 80754) (symbol 80745 . 80753) (punctuation 80744 . 80745) (punctuation 80743 . 80744) (symbol 80742 . 80743) (RETURN 80735 . 80741) (open-paren 80731 . 80732) (close-paren 80729 . 80730) (symbol 80728 . 80729) (punctuation 80727 . 80728) (symbol 80718 . 80726) (UNION 80712 . 80717) (open-paren 80711 . 80712) (symbol 80702 . 80710) (symbol 80688 . 80701) (ENUM 80683 . 80687) (symbol 80676 . 80682) (punctuation 80673 . 80674) (close-paren 80672 . 80673) (open-paren 80473 . 80474) (symbol 80462 . 80470) (UNION 80456 . 80461) (punctuation 80453 . 80454) (close-paren 80452 . 80453) (open-paren 80375 . 80376) (symbol 80354 . 80372) (STRUCT 80347 . 80353) (punctuation 80260 . 80261) (close-paren 80259 . 80260) (open-paren 79302 . 79303) (symbol 79276 . 79299) (STRUCT 79269 . 79275) (punctuation 77957 . 77958) (close-paren 77956 . 77957) (open-paren 77776 . 77777) (symbol 77755 . 77773) (STRUCT 77748 . 77754) (punctuation 77617 . 77618) (close-paren 77616 . 77617) (open-paren 77537 . 77538) (symbol 77523 . 77534) (STRUCT 77516 . 77522) (punctuation 77322 . 77323) (close-paren 77321 . 77322) (open-paren 77247 . 77248) (symbol 77232 . 77244) (STRUCT 77225 . 77231) (punctuation 77030 . 77031) (close-paren 77029 . 77030) (open-paren 76952 . 76953) (symbol 76938 . 76949) (STRUCT 76931 . 76937) (close-paren 76489 . 76490) (RETURN 76459 . 76465) (punctuation 76455 . 76456) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "OVERLAYP" 76442 . 76450)))) 76433 . 76455) (open-paren 76429 . 76430) (close-paren 76427 . 76428) (symbol 76426 . 76427) (symbol 76414 . 76425) (open-paren 76413 . 76414) (symbol 76404 . 76412) (punctuation 76402 . 76403) (symbol 76389 . 76401) (STRUCT 76382 . 76388) (symbol 76375 . 76381) (close-paren 76372 . 76373) (punctuation 76351 . 76352) (punctuation 76350 . 76351) (semantic-list 76346 . 76349) (symbol 76336 . 76345) (punctuation 76334 . 76335) (punctuation 76333 . 76334) (semantic-list 76329 . 76332) (symbol 76323 . 76328) (RETURN 76316 . 76322) (open-paren 76312 . 76313) (close-paren 76310 . 76311) (symbol 76309 . 76310) (symbol 76297 . 76308) (open-paren 76296 . 76297) (symbol 76287 . 76295) (BOOL 76282 . 76286) (symbol 76275 . 76281) (close-paren 76272 . 76273) (RETURN 76242 . 76248) (punctuation 76238 . 76239) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "MARKERP" 76226 . 76233)))) 76217 . 76238) (open-paren 76213 . 76214) (close-paren 76211 . 76212) (symbol 76210 . 76211) (symbol 76198 . 76209) (open-paren 76197 . 76198) (symbol 76189 . 76196) (punctuation 76187 . 76188) (symbol 76175 . 76186) (STRUCT 76168 . 76174) (symbol 76161 . 76167) (close-paren 76158 . 76159) (punctuation 76156 . 76157) (semantic-list #("(MISCP (x) && XMISCTYPE (x) == Lisp_Misc_Marker)" 0 1 (macros (("x" symbol "x" 76154 . 76155)))) 76138 . 76156) (RETURN 76131 . 76137) (open-paren 76127 . 76128) (close-paren 76125 . 76126) (symbol 76124 . 76125) (symbol 76112 . 76123) (open-paren 76111 . 76112) (close-paren 76109 . 76110) (symbol 76102 . 76109) (open-paren 76101 . 76102) (BOOL 76096 . 76100) (symbol 76089 . 76095) (close-paren 76086 . 76087) (RETURN 76056 . 76062) (open-paren 76052 . 76053) (close-paren 76050 . 76051) (symbol 76049 . 76050) (symbol 76037 . 76048) (open-paren 76036 . 76037) (symbol 76030 . 76035) (punctuation 76028 . 76029) (symbol 76018 . 76027) (UNION 76012 . 76017) (symbol 76005 . 76011) (punctuation 76002 . 76003) (close-paren 76001 . 76002) (open-paren 75685 . 75686) (symbol 75673 . 75682) (UNION 75667 . 75672) (punctuation 75534 . 75535) (close-paren 75533 . 75534) (open-paren 75385 . 75386) (symbol 75373 . 75382) (STRUCT 75366 . 75372) (close-paren 75304 . 75305) (RETURN 75274 . 75280) (punctuation 75270 . 75271) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "FINALIZERP" 75255 . 75265)))) 75246 . 75270) (open-paren 75242 . 75243) (close-paren 75240 . 75241) (symbol 75239 . 75240) (symbol 75227 . 75238) (open-paren 75226 . 75227) (symbol 75215 . 75225) (punctuation 75213 . 75214) (symbol 75198 . 75212) (STRUCT 75191 . 75197) (symbol 75184 . 75190) (close-paren 75181 . 75182) (punctuation 75158 . 75159) (punctuation 75157 . 75158) (semantic-list 75153 . 75156) (symbol 75143 . 75152) (punctuation 75141 . 75142) (punctuation 75140 . 75141) (semantic-list 75136 . 75139) (symbol 75130 . 75135) (RETURN 75123 . 75129) (open-paren 75119 . 75120) (close-paren 75117 . 75118) (symbol 75116 . 75117) (symbol 75104 . 75115) (open-paren 75103 . 75104) (symbol 75092 . 75102) (BOOL 75087 . 75091) (symbol 75080 . 75086) (punctuation 75077 . 75078) (close-paren 75076 . 75077) (open-paren 74688 . 74689) (symbol 74671 . 74685) (STRUCT 74664 . 74670) (close-paren 74417 . 74418) (punctuation 74408 . 74409) (semantic-list 74405 . 74408) (symbol 74401 . 74405) (punctuation 74400 . 74401) (punctuation 74399 . 74400) (semantic-list 74394 . 74399) (symbol 74382 . 74393) (RETURN 74375 . 74381) (punctuation 74371 . 74372) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "save_type" 74323 . 74332)))) 74314 . 74371) (open-paren 74310 . 74311) (close-paren 74308 . 74309) (symbol 74307 . 74308) (INT 74303 . 74306) (punctuation 74301 . 74302) (symbol 74298 . 74301) (symbol 74286 . 74297) (open-paren 74285 . 74286) (symbol 74272 . 74284) (symbol 74260 . 74271) (symbol 74253 . 74259) (close-paren 74216 . 74217) (punctuation 74200 . 74201) (semantic-list 74197 . 74200) (symbol 74193 . 74197) (punctuation 74192 . 74193) (punctuation 74191 . 74192) (semantic-list 74186 . 74191) (symbol 74174 . 74185) (punctuation 74170 . 74171) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "save_type" 74121 . 74130)))) 74112 . 74170) (open-paren 74108 . 74109) (close-paren 74106 . 74107) (symbol 74103 . 74106) (symbol 74093 . 74102) (punctuation 74091 . 74092) (symbol 74090 . 74091) (INT 74086 . 74089) (punctuation 74084 . 74085) (symbol 74081 . 74084) (symbol 74069 . 74080) (open-paren 74068 . 74069) (symbol 74051 . 74067) (VOID 74046 . 74050) (symbol 74039 . 74045) (close-paren 74037 . 74038) (punctuation 74027 . 74028) (semantic-list 74024 . 74027) (symbol 74020 . 74024) (punctuation 74019 . 74020) (punctuation 74018 . 74019) (semantic-list 74013 . 74018) (symbol 74001 . 74012) (RETURN 73994 . 74000) (punctuation 73990 . 73991) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "save_type" 73941 . 73950)))) 73932 . 73990) (open-paren 73928 . 73929) (close-paren 73926 . 73927) (symbol 73925 . 73926) (INT 73921 . 73924) (punctuation 73919 . 73920) (symbol 73916 . 73919) (symbol 73904 . 73915) (open-paren 73903 . 73904) (symbol 73889 . 73902) (symbol 73879 . 73888) (symbol 73872 . 73878) (close-paren 73829 . 73830) (punctuation 73815 . 73816) (semantic-list 73812 . 73815) (symbol 73808 . 73812) (punctuation 73807 . 73808) (punctuation 73806 . 73807) (semantic-list 73801 . 73806) (symbol 73789 . 73800) (RETURN 73782 . 73788) (punctuation 73778 . 73779) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "save_type" 73725 . 73734)))) 73716 . 73778) (open-paren 73712 . 73713) (close-paren 73710 . 73711) (symbol 73709 . 73710) (INT 73705 . 73708) (punctuation 73703 . 73704) (symbol 73700 . 73703) (symbol 73688 . 73699) (open-paren 73687 . 73688) (symbol 73669 . 73686) (symbol 73657 . 73668) (symbol 73650 . 73656) (close-paren 73648 . 73649) (punctuation 73632 . 73633) (semantic-list 73629 . 73632) (symbol 73625 . 73629) (punctuation 73624 . 73625) (punctuation 73623 . 73624) (semantic-list 73618 . 73623) (symbol 73606 . 73617) (punctuation 73602 . 73603) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "save_type" 73553 . 73562)))) 73544 . 73602) (open-paren 73540 . 73541) (close-paren 73538 . 73539) (symbol 73535 . 73538) (punctuation 73534 . 73535) (VOID 73529 . 73533) (punctuation 73527 . 73528) (symbol 73526 . 73527) (INT 73522 . 73525) (punctuation 73520 . 73521) (symbol 73517 . 73520) (symbol 73505 . 73516) (open-paren 73504 . 73505) (symbol 73487 . 73503) (VOID 73482 . 73486) (symbol 73475 . 73481) (close-paren 73473 . 73474) (punctuation 73463 . 73464) (semantic-list 73460 . 73463) (symbol 73456 . 73460) (punctuation 73455 . 73456) (punctuation 73454 . 73455) (semantic-list 73449 . 73454) (symbol 73437 . 73448) (RETURN 73430 . 73436) (punctuation 73426 . 73427) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "save_type" 73377 . 73386)))) 73368 . 73426) (open-paren 73364 . 73365) (close-paren 73362 . 73363) (symbol 73361 . 73362) (INT 73357 . 73360) (punctuation 73355 . 73356) (symbol 73352 . 73355) (symbol 73340 . 73351) (open-paren 73339 . 73340) (symbol 73325 . 73338) (punctuation 73323 . 73324) (VOID 73318 . 73322) (symbol 73311 . 73317) (close-paren 73265 . 73266) (punctuation 73263 . 73264) (semantic-list 73195 . 73263) (RETURN 73188 . 73194) (punctuation 73184 . 73185) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" number "0" 73153 . 73154)))) 73144 . 73184) (open-paren 73140 . 73141) (close-paren 73138 . 73139) (symbol 73137 . 73138) (INT 73133 . 73136) (punctuation 73131 . 73132) (symbol 73130 . 73131) (punctuation 73129 . 73130) (symbol 73113 . 73128) (STRUCT 73106 . 73112) (open-paren 73105 . 73106) (symbol 73095 . 73104) (INT 73091 . 73094) (symbol 73084 . 73090) (close-paren 73034 . 73035) (RETURN 73004 . 73010) (punctuation 73000 . 73001) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "SAVE_VALUEP" 72984 . 72995)))) 72975 . 73000) (open-paren 72971 . 72972) (close-paren 72969 . 72970) (symbol 72968 . 72969) (symbol 72956 . 72967) (open-paren 72955 . 72956) (symbol 72943 . 72954) (punctuation 72941 . 72942) (symbol 72925 . 72940) (STRUCT 72918 . 72924) (symbol 72911 . 72917) (close-paren 72908 . 72909) (punctuation 72884 . 72885) (punctuation 72883 . 72884) (semantic-list 72879 . 72882) (symbol 72869 . 72878) (punctuation 72867 . 72868) (punctuation 72866 . 72867) (semantic-list 72862 . 72865) (symbol 72856 . 72861) (RETURN 72849 . 72855) (open-paren 72845 . 72846) (close-paren 72843 . 72844) (symbol 72842 . 72843) (symbol 72830 . 72841) (open-paren 72829 . 72830) (symbol 72817 . 72828) (BOOL 72812 . 72816) (symbol 72805 . 72811) (punctuation 72802 . 72803) (close-paren 72801 . 72802) (punctuation 72636 . 72637) (symbol 72626 . 72635) (symbol "Lisp_Save_Type" 72601 . 72625) (ENUM "enum" 72601 . 72625) (punctuation 72159 . 72160) (semantic-list 72134 . 72159) (punctuation 72132 . 72133) (number 72129 . 72131) (punctuation 72127 . 72128) (symbol 72120 . 72126) (UNSIGNED 72111 . 72119) (open-paren 72009 . 72010) (symbol 71991 . 72006) (STRUCT 71984 . 71990) (punctuation 71981 . 71982) (close-paren 71980 . 71981) (VOID 71976 . 71980) (open-paren 71975 . 71976) (close-paren 71973 . 71974) (symbol 71962 . 71973) (punctuation 71961 . 71962) (open-paren 71960 . 71961) (VOID 71955 . 71959) (TYPEDEF 71947 . 71954) (punctuation 71067 . 71068) (close-paren 71066 . 71067) (number 71065 . 71066) (punctuation 71063 . 71064) (punctuation 71062 . 71063) (semantic-list 70959 . 71060) (open-paren 70958 . 70959) (symbol 70951 . 70957) (punctuation 70878 . 70879) (close-paren 70877 . 70878) (semantic-list 70847 . 70874) (punctuation 70845 . 70846) (symbol 70827 . 70844) (punctuation 70825 . 70826) (symbol 70808 . 70824) (punctuation 70740 . 70741) (semantic-list 70703 . 70740) (punctuation 70701 . 70702) (symbol 70684 . 70700) (punctuation 70682 . 70683) (symbol 70650 . 70675) (punctuation 70644 . 70645) (semantic-list 70612 . 70644) (punctuation 70610 . 70611) (symbol 70597 . 70609) (punctuation 70595 . 70596) (symbol 70577 . 70594) (punctuation 70571 . 70572) (semantic-list 70540 . 70571) (punctuation 70538 . 70539) (symbol 70525 . 70537) (punctuation 70523 . 70524) (symbol 70505 . 70522) (punctuation 70499 . 70500) (semantic-list 70467 . 70499) (punctuation 70465 . 70466) (symbol 70452 . 70464) (punctuation 70450 . 70451) (symbol 70432 . 70449) (punctuation 70426 . 70427) (semantic-list 70385 . 70426) (punctuation 70383 . 70384) (symbol 70371 . 70382) (punctuation 70369 . 70370) (symbol 70337 . 70362) (punctuation 70331 . 70332) (semantic-list 70294 . 70331) (punctuation 70292 . 70293) (symbol 70280 . 70291) (punctuation 70278 . 70279) (symbol 70256 . 70277) (punctuation 70250 . 70251) (semantic-list 70219 . 70250) (punctuation 70217 . 70218) (symbol 70205 . 70216) (punctuation 70203 . 70204) (symbol 70185 . 70202) (punctuation 70179 . 70180) (semantic-list 70125 . 70179) (punctuation 70123 . 70124) (symbol 70095 . 70116) (punctuation 70089 . 70090) (semantic-list 70057 . 70089) (punctuation 70055 . 70056) (symbol 70042 . 70054) (punctuation 70040 . 70041) (symbol 70022 . 70039) (punctuation 70016 . 70017) (symbol 70005 . 70016) (punctuation 69999 . 70000) (symbol 69987 . 69999) (punctuation 69981 . 69982) (symbol 69965 . 69981) (punctuation 69959 . 69960) (symbol 69947 . 69959) (punctuation 69941 . 69942) (symbol 69930 . 69941) (open-paren 69924 . 69925) (symbol 69907 . 69921) (ENUM 69902 . 69906) (punctuation 69836 . 69837) (close-paren 69835 . 69836) (number 69833 . 69834) (punctuation 69831 . 69832) (symbol 69816 . 69830) (punctuation 69814 . 69815) (symbol 69797 . 69813) (punctuation 69795 . 69796) (symbol 69780 . 69794) (open-paren 69778 . 69779) (ENUM 69773 . 69777) (punctuation 69694 . 69695) (close-paren 69693 . 69694) (number 69691 . 69692) (punctuation 69689 . 69690) (symbol 69672 . 69688) (open-paren 69670 . 69671) (ENUM 69665 . 69669) (punctuation 69595 . 69596) (close-paren 69594 . 69595) (number 69592 . 69593) (punctuation 69590 . 69591) (symbol 69575 . 69589) (open-paren 69573 . 69574) (ENUM 69568 . 69572) (punctuation 69480 . 69481) (close-paren 69479 . 69480) (open-paren 69258 . 69259) (symbol 68759 . 68771) (STRUCT 68752 . 68758) (punctuation 68646 . 68647) (close-paren 68645 . 68646) (open-paren 66910 . 66911) (symbol 66898 . 66909) (STRUCT 66891 . 66897) (close-paren 66888 . 66889) (punctuation 66881 . 66882) (punctuation 66880 . 66881) (semantic-list 66877 . 66880) (symbol 66868 . 66876) (RETURN 66861 . 66867) (open-paren 66857 . 66858) (close-paren 66855 . 66856) (symbol 66854 . 66855) (symbol 66842 . 66853) (open-paren 66841 . 66842) (symbol 66831 . 66840) (symbol 66816 . 66830) (ENUM 66811 . 66815) (symbol 66804 . 66810) (close-paren 66801 . 66802) (RETURN 66771 . 66777) (punctuation 66767 . 66768) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "MISCP" 66757 . 66762)))) 66748 . 66767) (open-paren 66744 . 66745) (close-paren 66742 . 66743) (symbol 66741 . 66742) (symbol 66729 . 66740) (open-paren 66728 . 66729) (symbol 66719 . 66727) (punctuation 66717 . 66718) (symbol 66703 . 66716) (STRUCT 66696 . 66702) (symbol 66689 . 66695) (close-paren 66686 . 66687) (punctuation 66684 . 66685) (semantic-list #("(XTYPE (x) == Lisp_Misc)" 0 1 (macros (("x" symbol "x" 66682 . 66683)))) 66668 . 66684) (RETURN 66661 . 66667) (open-paren 66657 . 66658) (close-paren 66655 . 66656) (symbol 66654 . 66655) (symbol 66642 . 66653) (open-paren 66641 . 66642) (close-paren 66639 . 66640) (symbol 66634 . 66639) (open-paren 66633 . 66634) (BOOL 66628 . 66632) (symbol 66621 . 66627) (punctuation 66618 . 66619) (close-paren 66617 . 66618) (open-paren 66505 . 66506) (symbol 66454 . 66467) (STRUCT 66447 . 66453) (close-paren 66386 . 66387) (punctuation 66384 . 66385) (semantic-list "(EMACS_INT_MAX >> (INTTYPEBITS - 1))" 66377 . 66384) (punctuation 66375 . 66376) (semantic-list 66332 . 66374) (RETURN 66325 . 66331) (open-paren 66321 . 66322) (close-paren 66319 . 66320) (symbol 66318 . 66319) (symbol 66307 . 66317) (open-paren 66306 . 66307) (symbol 66292 . 66305) (symbol 66281 . 66291) (symbol 66274 . 66280) (close-paren 66212 . 66213) (punctuation 66207 . 66208) (semantic-list 66178 . 66206) (punctuation 66176 . 66177) (semantic-list 66167 . 66175) (RETURN 66160 . 66166) (open-paren 66156 . 66157) (close-paren 66154 . 66155) (symbol 66153 . 66154) (symbol 66142 . 66152) (punctuation 66140 . 66141) (symbol 66139 . 66140) (symbol 66128 . 66138) (open-paren 66127 . 66128) (symbol 66112 . 66126) (symbol 66101 . 66111) (symbol 66094 . 66100) (punctuation 65638 . 65639) (close-paren 65637 . 65638) (number 65634 . 65636) (punctuation 65632 . 65633) (symbol 65614 . 65631) (open-paren 65612 . 65613) (symbol 65594 . 65611) (ENUM 65589 . 65593) (close-paren 65531 . 65532) (punctuation 65523 . 65524) (punctuation 65522 . 65523) (RETURN 65507 . 65513) (open-paren 65503 . 65504) (close-paren 65501 . 65502) (symbol 65500 . 65501) (punctuation 65499 . 65500) (symbol 65483 . 65498) (STRUCT 65476 . 65482) (open-paren 65475 . 65476) (symbol 65459 . 65474) (symbol 65449 . 65458) (symbol 65442 . 65448) (close-paren 65397 . 65398) (punctuation 65384 . 65385) (punctuation 65383 . 65384) (RETURN 65369 . 65375) (open-paren 65365 . 65366) (close-paren 65363 . 65364) (symbol 65360 . 65363) (symbol 65350 . 65359) (punctuation 65348 . 65349) (symbol 65347 . 65348) (punctuation 65346 . 65347) (symbol 65330 . 65345) (STRUCT 65323 . 65329) (open-paren 65322 . 65323) (symbol 65312 . 65321) (symbol 65300 . 65311) (symbol 65293 . 65299) (close-paren 65220 . 65221) (number 65216 . 65217) (punctuation 65214 . 65215) (punctuation 65208 . 65209) (number 65206 . 65207) (punctuation 65190 . 65191) (punctuation 65189 . 65190) (RETURN 65175 . 65181) (open-paren 65171 . 65172) (close-paren 65169 . 65170) (symbol 65166 . 65169) (symbol 65156 . 65165) (punctuation 65154 . 65155) (symbol 65153 . 65154) (punctuation 65152 . 65153) (symbol 65136 . 65151) (STRUCT 65129 . 65135) (open-paren 65128 . 65129) (symbol 65117 . 65127) (symbol 65105 . 65116) (symbol 65098 . 65104) (close-paren 65034 . 65035) (punctuation 65026 . 65027) (number 65024 . 65025) (punctuation 65008 . 65009) (punctuation 65007 . 65008) (RETURN 64993 . 64999) (open-paren 64989 . 64990) (close-paren 64987 . 64988) (symbol 64984 . 64987) (symbol 64974 . 64983) (punctuation 64972 . 64973) (symbol 64971 . 64972) (punctuation 64970 . 64971) (symbol 64954 . 64969) (STRUCT 64947 . 64953) (open-paren 64946 . 64947) (symbol 64937 . 64945) (symbol 64925 . 64936) (symbol 64918 . 64924) (close-paren 64767 . 64768) (RETURN 64731 . 64737) (punctuation 64727 . 64728) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "HASH_TABLE_P" 64710 . 64722)))) 64701 . 64727) (open-paren 64697 . 64698) (close-paren 64695 . 64696) (symbol 64694 . 64695) (symbol 64682 . 64693) (open-paren 64681 . 64682) (symbol 64669 . 64680) (punctuation 64667 . 64668) (symbol 64651 . 64666) (STRUCT 64644 . 64650) (symbol 64637 . 64643) (close-paren 64634 . 64635) (RETURN 64591 . 64597) (open-paren 64587 . 64588) (close-paren 64585 . 64586) (symbol 64584 . 64585) (symbol 64572 . 64583) (open-paren 64571 . 64572) (symbol 64558 . 64570) (BOOL 64553 . 64557) (symbol 64546 . 64552) (punctuation 64542 . 64543) (close-paren 64541 . 64542) (open-paren 62304 . 62305) (symbol 62288 . 62303) (STRUCT 62281 . 62287) (punctuation 62278 . 62279) (close-paren 62277 . 62278) (open-paren 61811 . 61812) (symbol 61795 . 61810) (STRUCT 61788 . 61794) (close-paren 61422 . 61423) (punctuation 61420 . 61421) (semantic-list #("(XSYMBOL (sym)->trapped_write == SYMBOL_NOWRITE)" 0 1 (macros (("sym" symbol "sym" 61416 . 61419)))) 61390 . 61420) (RETURN 61383 . 61389) (open-paren 61379 . 61380) (close-paren 61377 . 61378) (symbol 61374 . 61377) (symbol 61362 . 61373) (open-paren 61361 . 61362) (close-paren 61359 . 61360) (symbol 61342 . 61359) (open-paren 61341 . 61342) (INT 61337 . 61340) (symbol 61330 . 61336) (close-paren 61106 . 61107) (punctuation 61104 . 61105) (semantic-list #("(XSYMBOL (sym)->trapped_write)" 0 1 (macros (("sym" symbol "sym" 61100 . 61103)))) 61069 . 61104) (RETURN 61062 . 61068) (open-paren 61058 . 61059) (close-paren 61056 . 61057) (symbol 61053 . 61056) (symbol 61041 . 61052) (open-paren 61040 . 61041) (close-paren 61038 . 61039) (symbol 61016 . 61038) (open-paren 61015 . 61016) (INT 61011 . 61014) (symbol 61004 . 61010) (close-paren 60837 . 60838) (punctuation 60799 . 60800) (punctuation 60798 . 60799) (symbol 60789 . 60797) (punctuation 60788 . 60789) (punctuation 60787 . 60788) (semantic-list 60782 . 60787) (symbol 60774 . 60781) (RETURN 60767 . 60773) (open-paren 60763 . 60764) (close-paren 60761 . 60762) (symbol 60758 . 60761) (symbol 60746 . 60757) (open-paren 60745 . 60746) (symbol 60708 . 60744) (BOOL 60703 . 60707) (symbol 60696 . 60702) (close-paren 60632 . 60633) (punctuation 60611 . 60612) (punctuation 60610 . 60611) (symbol 60601 . 60609) (punctuation 60600 . 60601) (punctuation 60599 . 60600) (semantic-list 60594 . 60599) (symbol 60586 . 60593) (RETURN 60579 . 60585) (open-paren 60575 . 60576) (close-paren 60573 . 60574) (symbol 60570 . 60573) (symbol 60558 . 60569) (open-paren 60557 . 60558) (symbol 60539 . 60556) (BOOL 60534 . 60538) (symbol 60527 . 60533) (close-paren 60472 . 60473) (punctuation 60465 . 60466) (punctuation 60464 . 60465) (semantic-list 60459 . 60464) (symbol 60451 . 60458) (RETURN 60444 . 60450) (open-paren 60440 . 60441) (close-paren 60438 . 60439) (symbol 60435 . 60438) (symbol 60423 . 60434) (open-paren 60422 . 60423) (symbol 60410 . 60421) (symbol 60398 . 60409) (symbol 60391 . 60397) (close-paren 60388 . 60389) (punctuation 60378 . 60379) (symbol 60375 . 60378) (punctuation 60374 . 60375) (punctuation 60373 . 60374) (symbol 60370 . 60373) (open-paren 60314 . 60315) (close-paren 60312 . 60313) (symbol 60311 . 60312) (punctuation 60310 . 60311) (symbol 60301 . 60309) (UNION 60295 . 60300) (punctuation 60293 . 60294) (symbol 60290 . 60293) (punctuation 60289 . 60290) (symbol 60277 . 60288) (STRUCT 60270 . 60276) (open-paren 60269 . 60270) (symbol 60254 . 60268) (VOID 60249 . 60253) (symbol 60242 . 60248) (close-paren 60240 . 60241) (punctuation 60230 . 60231) (symbol 60227 . 60230) (punctuation 60226 . 60227) (punctuation 60225 . 60226) (symbol 60222 . 60225) (open-paren 60166 . 60167) (close-paren 60164 . 60165) (symbol 60163 . 60164) (punctuation 60162 . 60163) (symbol 60138 . 60161) (STRUCT 60131 . 60137) (punctuation 60129 . 60130) (symbol 60126 . 60129) (punctuation 60125 . 60126) (symbol 60113 . 60124) (STRUCT 60106 . 60112) (open-paren 60105 . 60106) (symbol 60090 . 60104) (VOID 60085 . 60089) (symbol 60078 . 60084) (close-paren 60076 . 60077) (punctuation 60064 . 60065) (symbol 60061 . 60064) (punctuation 60060 . 60061) (punctuation 60059 . 60060) (symbol 60056 . 60059) (open-paren 60001 . 60002) (close-paren 59999 . 60000) (symbol 59998 . 59999) (punctuation 59997 . 59998) (symbol 59985 . 59996) (STRUCT 59978 . 59984) (punctuation 59976 . 59977) (symbol 59973 . 59976) (punctuation 59972 . 59973) (symbol 59960 . 59971) (STRUCT 59953 . 59959) (open-paren 59952 . 59953) (symbol 59935 . 59951) (VOID 59930 . 59934) (symbol 59923 . 59929) (close-paren 59920 . 59921) (punctuation 59918 . 59919) (semantic-list #("(eassert ((sym)->redirect == SYMBOL_PLAINVAL), (sym)->val.value = (v))" 0 1 (macros (("v" symbol "v" 59916 . 59917) ("sym" symbol "sym" 59911 . 59914)))) 59888 . 59918) (open-paren 59884 . 59885) (close-paren 59882 . 59883) (symbol 59881 . 59882) (symbol 59869 . 59880) (punctuation 59867 . 59868) (symbol 59864 . 59867) (punctuation 59863 . 59864) (symbol 59851 . 59862) (STRUCT 59844 . 59850) (open-paren 59843 . 59844) (close-paren 59841 . 59842) (symbol 59827 . 59841) (open-paren 59826 . 59827) (VOID 59821 . 59825) (symbol 59814 . 59820) (close-paren 59811 . 59812) (punctuation 59805 . 59806) (symbol 59802 . 59805) (punctuation 59801 . 59802) (punctuation 59800 . 59801) (symbol 59797 . 59800) (RETURN 59790 . 59796) (open-paren 59723 . 59724) (close-paren 59721 . 59722) (symbol 59718 . 59721) (punctuation 59717 . 59718) (symbol 59705 . 59716) (STRUCT 59698 . 59704) (open-paren 59697 . 59698) (symbol 59686 . 59696) (punctuation 59684 . 59685) (symbol 59675 . 59683) (UNION 59669 . 59674) (symbol 59662 . 59668) (close-paren 59660 . 59661) (punctuation 59654 . 59655) (symbol 59651 . 59654) (punctuation 59650 . 59651) (punctuation 59649 . 59650) (symbol 59646 . 59649) (RETURN 59639 . 59645) (open-paren 59572 . 59573) (close-paren 59570 . 59571) (symbol 59567 . 59570) (punctuation 59566 . 59567) (symbol 59554 . 59565) (STRUCT 59547 . 59553) (open-paren 59546 . 59547) (symbol 59535 . 59545) (punctuation 59533 . 59534) (symbol 59509 . 59532) (STRUCT 59502 . 59508) (symbol 59495 . 59501) (close-paren 59493 . 59494) (punctuation 59485 . 59486) (symbol 59482 . 59485) (punctuation 59481 . 59482) (punctuation 59480 . 59481) (symbol 59477 . 59480) (RETURN 59470 . 59476) (open-paren 59402 . 59403) (close-paren 59400 . 59401) (symbol 59397 . 59400) (punctuation 59396 . 59397) (symbol 59384 . 59395) (STRUCT 59377 . 59383) (open-paren 59376 . 59377) (symbol 59363 . 59375) (punctuation 59361 . 59362) (symbol 59349 . 59360) (STRUCT 59342 . 59348) (symbol 59335 . 59341) (close-paren 59332 . 59333) (punctuation 59330 . 59331) (semantic-list #("(eassert ((sym)->redirect == SYMBOL_PLAINVAL), (sym)->val.value)" 0 1 (macros (("sym" symbol "sym" 59326 . 59329)))) 59307 . 59330) (RETURN 59300 . 59306) (open-paren 59296 . 59297) (close-paren 59294 . 59295) (symbol 59291 . 59294) (punctuation 59290 . 59291) (symbol 59278 . 59289) (STRUCT 59271 . 59277) (open-paren 59270 . 59271) (close-paren 59268 . 59269) (symbol 59258 . 59268) (open-paren 59257 . 59258) (symbol 59245 . 59256) (symbol 59238 . 59244) (punctuation 59015 . 59016) (close-paren 59014 . 59015) (semantic-list 58921 . 59014) (punctuation 58919 . 58920) (punctuation 58918 . 58919) (semantic-list 58878 . 58916) (symbol 58869 . 58877) (open-paren 58868 . 58869) (symbol 58861 . 58867) (close-paren 58782 . 58783) (punctuation 58780 . 58781) (semantic-list 58705 . 58780) (RETURN 58698 . 58704) (open-paren 58694 . 58695) (close-paren 58692 . 58693) (symbol 58690 . 58692) (punctuation 58689 . 58690) (symbol 58673 . 58688) (STRUCT 58666 . 58672) (open-paren 58665 . 58666) (symbol 58642 . 58664) (INT 58638 . 58641) (symbol 58631 . 58637) (punctuation 58563 . 58564) (close-paren 58562 . 58563) (semantic-list #("((offsetof (type, nonlispfield) - header_size) / word_size)" 0 1 (macros (("nonlispfield" symbol "Lisp_Sub_Char_Table" 58529 . 58548) ("type" STRUCT "struct" 58522 . 58528)))) 58507 . 58559) (punctuation 58505 . 58506) (symbol 58483 . 58504) (punctuation 58336 . 58337) (semantic-list #("((offsetof (type, nonlispfield) - header_size) / word_size)" 0 1 (macros (("nonlispfield" symbol "Lisp_Char_Table" 58312 . 58327) ("type" STRUCT "struct" 58305 . 58311)))) 58290 . 58336) (punctuation 58288 . 58289) (symbol 58262 . 58287) (open-paren 58090 . 58091) (symbol 58068 . 58087) (ENUM 58063 . 58067) (close-paren 58060 . 58061) (RETURN 58024 . 58030) (punctuation 58020 . 58021) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "SUBRP" 58010 . 58015)))) 58001 . 58020) (open-paren 57997 . 57998) (close-paren 57995 . 57996) (symbol 57994 . 57995) (symbol 57982 . 57993) (open-paren 57981 . 57982) (symbol 57975 . 57980) (punctuation 57973 . 57974) (symbol 57963 . 57972) (STRUCT 57956 . 57962) (symbol 57949 . 57955) (close-paren 57946 . 57947) (RETURN 57909 . 57915) (open-paren 57905 . 57906) (close-paren 57903 . 57904) (symbol 57902 . 57903) (symbol 57890 . 57901) (open-paren 57889 . 57890) (symbol 57883 . 57888) (BOOL 57878 . 57882) (symbol 57871 . 57877) (punctuation 57868 . 57869) (close-paren 57867 . 57868) (open-paren 56880 . 56881) (symbol 56868 . 56877) (STRUCT 56861 . 56867) (close-paren 56720 . 56721) (ELSE 56680 . 56684) (punctuation 56659 . 56660) (punctuation 56658 . 56659) (semantic-list 56654 . 56658) (semantic-list 56542 . 56608) (IF 56539 . 56541) (open-paren 56535 . 56536) (close-paren 56533 . 56534) (symbol 56530 . 56533) (symbol 56518 . 56529) (punctuation 56516 . 56517) (symbol 56513 . 56516) (INT 56509 . 56512) (punctuation 56507 . 56508) (symbol 56505 . 56507) (symbol 56493 . 56504) (open-paren 56492 . 56493) (symbol 56477 . 56491) (VOID 56472 . 56476) (symbol 56465 . 56471) (close-paren 56328 . 56329) (punctuation 56326 . 56327) (semantic-list 56240 . 56326) (RETURN 56233 . 56239) (open-paren 56229 . 56230) (close-paren 56227 . 56228) (symbol 56224 . 56227) (INT 56220 . 56223) (punctuation 56218 . 56219) (symbol 56216 . 56218) (symbol 56204 . 56215) (open-paren 56203 . 56204) (symbol 56188 . 56202) (symbol 56176 . 56187) (symbol 56169 . 56175) (close-paren 56049 . 56050) (RETURN 56037 . 56043) (punctuation 56032 . 56033) (semantic-list 55996 . 56032) (WHILE 55990 . 55995) (semantic-list 55762 . 55987) (DO 55755 . 55757) (open-paren 55694 . 55695) (close-paren 55692 . 55693) (symbol 55689 . 55692) (symbol 55679 . 55688) (punctuation 55677 . 55678) (symbol 55675 . 55677) (symbol 55663 . 55674) (open-paren 55662 . 55663) (symbol 55641 . 55661) (symbol 55629 . 55640) (symbol 55622 . 55628) (close-paren 55619 . 55620) (RETURN 55583 . 55589) (punctuation 55579 . 55580) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "SUB_CHAR_TABLE_P" 55558 . 55574)))) 55549 . 55579) (open-paren 55545 . 55546) (close-paren 55543 . 55544) (symbol 55542 . 55543) (symbol 55530 . 55541) (open-paren 55529 . 55530) (symbol 55513 . 55528) (punctuation 55511 . 55512) (symbol 55491 . 55510) (STRUCT 55484 . 55490) (symbol 55477 . 55483) (close-paren 55474 . 55475) (RETURN 55427 . 55433) (open-paren 55423 . 55424) (close-paren 55421 . 55422) (symbol 55420 . 55421) (symbol 55408 . 55419) (open-paren 55407 . 55408) (symbol 55390 . 55406) (BOOL 55385 . 55389) (symbol 55378 . 55384) (punctuation 55375 . 55376) (close-paren 55374 . 55375) (open-paren 54612 . 54613) (symbol 54590 . 54609) (STRUCT 54583 . 54589) (close-paren 54580 . 54581) (RETURN 54544 . 54550) (punctuation 54540 . 54541) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "CHAR_TABLE_P" 54523 . 54535)))) 54514 . 54540) (open-paren 54510 . 54511) (close-paren 54508 . 54509) (symbol 54507 . 54508) (symbol 54495 . 54506) (open-paren 54494 . 54495) (symbol 54482 . 54493) (punctuation 54480 . 54481) (symbol 54464 . 54479) (STRUCT 54457 . 54463) (symbol 54450 . 54456) (close-paren 54447 . 54448) (RETURN 54404 . 54410) (open-paren 54400 . 54401) (close-paren 54398 . 54399) (symbol 54397 . 54398) (symbol 54385 . 54396) (open-paren 54384 . 54385) (symbol 54371 . 54383) (BOOL 54366 . 54370) (symbol 54359 . 54365) (punctuation 54356 . 54357) (close-paren 54355 . 54356) (open-paren 53304 . 53305) (symbol 53286 . 53301) (STRUCT 53279 . 53285) (punctuation 53276 . 53277) (close-paren 53275 . 53276) (number 53274 . 53275) (open-paren 53273 . 53274) (symbol 53261 . 53273) (INT 53257 . 53260) (CONST 53251 . 53256) (EXTERN 53244 . 53250) (punctuation 53241 . 53242) (close-paren 53240 . 53241) (number 53236 . 53237) (punctuation 53234 . 53235) (symbol 53214 . 53233) (punctuation 53208 . 53209) (number 53207 . 53208) (punctuation 53205 . 53206) (symbol 53185 . 53204) (punctuation 53179 . 53180) (number 53178 . 53179) (punctuation 53176 . 53177) (symbol 53156 . 53175) (punctuation 53150 . 53151) (number 53149 . 53150) (punctuation 53147 . 53148) (symbol 53127 . 53146) (open-paren 53121 . 53122) (symbol 53101 . 53118) (ENUM 53096 . 53100) (close-paren 51230 . 51231) (number 51218 . 51219) (punctuation 51133 . 51134) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" number "0" 51121 . 51122)))) 51112 . 51133) (open-paren 51108 . 51109) (close-paren 51106 . 51107) (symbol 51100 . 51106) (symbol 51090 . 51099) (punctuation 51088 . 51089) (symbol 51087 . 51088) (punctuation 51086 . 51087) (VOID 51081 . 51085) (open-paren 51080 . 51081) (symbol 51071 . 51079) (VOID 51066 . 51070) (symbol 51059 . 51065) (punctuation 50931 . 50932) (close-paren 50930 . 50931) (number 50928 . 50929) (punctuation 50926 . 50927) (punctuation 50925 . 50926) (semantic-list #("(USE_LSB_TAG \\
   ? (intptr_t) (ptr) + (tag) \\
   : (EMACS_INT) (((EMACS_UINT) (tag) << VALBITS) + (uintptr_t) (ptr)))" 0 1 (macros (("ptr" semantic-list "(iname)" 14 . 20) ("tag" symbol "Lisp_Symbol" 1 . 12)))) 50897 . 50924) (punctuation 50895 . 50896) (symbol 50883 . 50894) (open-paren 50881 . 50882) (ENUM 50876 . 50880) (close-paren 50657 . 50658) (punctuation 50635 . 50636) (punctuation 50634 . 50635) (semantic-list 50627 . 50634) (symbol 50619 . 50626) (punctuation 50615 . 50616) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" number "0" 50580 . 50581)))) 50571 . 50615) (open-paren 50427 . 50428) (close-paren 50425 . 50426) (symbol 50422 . 50425) (symbol 50410 . 50421) (punctuation 50408 . 50409) (symbol 50405 . 50408) (symbol 50395 . 50404) (punctuation 50393 . 50394) (symbol 50388 . 50393) (symbol 50376 . 50387) (open-paren 50375 . 50376) (symbol 50367 . 50374) (VOID 50362 . 50366) (symbol 50355 . 50361) (close-paren 50352 . 50353) (punctuation 50330 . 50331) (punctuation 50329 . 50330) (semantic-list 50322 . 50329) (symbol 50314 . 50321) (punctuation 50310 . 50311) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" number "0" 50278 . 50279)))) 50269 . 50310) (open-paren 50265 . 50266) (close-paren 50263 . 50264) (symbol 50260 . 50263) (symbol 50248 . 50259) (punctuation 50246 . 50247) (symbol 50243 . 50246) (symbol 50233 . 50242) (punctuation 50231 . 50232) (symbol 50226 . 50231) (symbol 50214 . 50225) (open-paren 50213 . 50214) (symbol 50208 . 50212) (VOID 50203 . 50207) (symbol 50196 . 50202) (close-paren 50193 . 50194) (punctuation 50175 . 50176) (punctuation 50173 . 50174) (symbol 50168 . 50172) (punctuation 50167 . 50168) (symbol 50161 . 50167) (punctuation 50160 . 50161) (punctuation 50159 . 50160) (semantic-list 50152 . 50159) (symbol 50144 . 50151) (RETURN 50137 . 50143) (open-paren 50065 . 50066) (close-paren 50063 . 50064) (symbol 50058 . 50063) (symbol 50046 . 50057) (open-paren 50045 . 50046) (symbol 50036 . 50044) (symbol 50026 . 50035) (symbol 50019 . 50025) (close-paren 50016 . 50017) (punctuation 50000 . 50001) (punctuation 49999 . 50000) (semantic-list 49992 . 49999) (symbol 49984 . 49991) (punctuation 49982 . 49983) (RETURN 49975 . 49981) (open-paren 49971 . 49972) (close-paren 49969 . 49970) (symbol 49966 . 49969) (symbol 49956 . 49965) (punctuation 49954 . 49955) (symbol 49949 . 49954) (symbol 49937 . 49948) (open-paren 49936 . 49937) (symbol 49926 . 49935) (punctuation 49924 . 49925) (symbol 49912 . 49923) (symbol 49905 . 49911) (close-paren 49902 . 49903) (punctuation 49886 . 49887) (punctuation 49885 . 49886) (semantic-list 49878 . 49885) (symbol 49870 . 49877) (RETURN 49863 . 49869) (open-paren 49859 . 49860) (close-paren 49857 . 49858) (symbol 49854 . 49857) (symbol 49844 . 49853) (punctuation 49842 . 49843) (symbol 49837 . 49842) (symbol 49825 . 49836) (open-paren 49824 . 49825) (symbol 49819 . 49823) (symbol 49807 . 49818) (symbol 49800 . 49806) (close-paren 49746 . 49747) (punctuation 49744 . 49745) (semantic-list 49706 . 49744) (punctuation 49704 . 49705) (punctuation 49702 . 49703) (punctuation 49701 . 49702) (symbol 49696 . 49700) (punctuation 49695 . 49696) (ELSE 49686 . 49690) (punctuation 49682 . 49683) (semantic-list 49651 . 49682) (punctuation 49649 . 49650) (punctuation 49648 . 49649) (number 49646 . 49647) (punctuation 49644 . 49645) (punctuation 49643 . 49644) (symbol 49638 . 49642) (punctuation 49637 . 49638) (semantic-list 49629 . 49632) (IF 49626 . 49628) (punctuation 49621 . 49622) (punctuation 49563 . 49564) (punctuation 49561 . 49562) (symbol 49556 . 49560) (open-paren 49480 . 49481) (close-paren 49478 . 49479) (symbol 49477 . 49478) (BOOL 49472 . 49476) (punctuation 49470 . 49471) (symbol 49469 . 49470) (symbol 49459 . 49468) (punctuation 49457 . 49458) (symbol 49456 . 49457) (symbol 49444 . 49455) (open-paren 49443 . 49444) (symbol 49427 . 49442) (VOID 49422 . 49426) (symbol 49415 . 49421) (close-paren 49382 . 49383) (punctuation 49374 . 49375) (symbol 49371 . 49373) (punctuation 49369 . 49370) (semantic-list 49362 . 49368) (symbol 49343 . 49361) (RETURN 49336 . 49342) (open-paren 49332 . 49333) (close-paren 49330 . 49331) (symbol 49329 . 49330) (symbol 49319 . 49328) (punctuation 49317 . 49318) (symbol 49316 . 49317) (symbol 49304 . 49315) (open-paren 49303 . 49304) (symbol 49287 . 49302) (symbol 49275 . 49286) (symbol 49268 . 49274) (close-paren 49265 . 49266) (punctuation 49263 . 49264) (semantic-list 49157 . 49263) (punctuation 49155 . 49156) (punctuation 49154 . 49155) (RETURN 49147 . 49153) (open-paren 49095 . 49096) (close-paren 49093 . 49094) (symbol 49092 . 49093) (symbol 49082 . 49091) (punctuation 49080 . 49081) (symbol 49079 . 49080) (symbol 49067 . 49078) (open-paren 49066 . 49067) (symbol 49047 . 49065) (BOOL 49042 . 49046) (symbol 49035 . 49041) (close-paren 48996 . 48997) (semantic-list 48956 . 48973) (RETURN 48949 . 48955) (open-paren 48945 . 48946) (close-paren 48943 . 48944) (symbol 48942 . 48943) (symbol 48930 . 48941) (open-paren 48929 . 48930) (symbol 48906 . 48928) (punctuation 48904 . 48905) (CHAR 48899 . 48903) (UNSIGNED 48890 . 48898) (symbol 48883 . 48889) (close-paren 48880 . 48881) (punctuation 48873 . 48874) (punctuation 48872 . 48873) (semantic-list 48869 . 48872) (symbol 48856 . 48868) (RETURN 48849 . 48855) (open-paren 48845 . 48846) (close-paren 48843 . 48844) (symbol 48842 . 48843) (symbol 48830 . 48841) (open-paren 48829 . 48830) (symbol 48812 . 48828) (punctuation 48810 . 48811) (symbol 48800 . 48809) (symbol 48793 . 48799) (close-paren 48790 . 48791) (RETURN 48777 . 48783) (open-paren 48707 . 48708) (close-paren 48705 . 48706) (symbol 48704 . 48705) (symbol 48692 . 48703) (open-paren 48691 . 48692) (symbol 48674 . 48690) (symbol 48664 . 48673) (symbol 48657 . 48663) (close-paren 48654 . 48655) (RETURN 48618 . 48624) (punctuation 48614 . 48615) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "BOOL_VECTOR_P" 48596 . 48609)))) 48587 . 48614) (open-paren 48583 . 48584) (close-paren 48581 . 48582) (symbol 48580 . 48581) (symbol 48568 . 48579) (open-paren 48567 . 48568) (symbol 48554 . 48566) (punctuation 48552 . 48553) (symbol 48535 . 48551) (STRUCT 48528 . 48534) (symbol 48521 . 48527) (close-paren 48518 . 48519) (semantic-list 48493 . 48496) (open-paren 48463 . 48464) (close-paren 48461 . 48462) (symbol 48460 . 48461) (symbol 48448 . 48459) (open-paren 48447 . 48448) (symbol 48429 . 48446) (VOID 48424 . 48428) (symbol 48417 . 48423) (close-paren 48414 . 48415) (RETURN 48370 . 48376) (open-paren 48366 . 48367) (close-paren 48364 . 48365) (symbol 48363 . 48364) (symbol 48351 . 48362) (open-paren 48350 . 48351) (symbol 48336 . 48349) (BOOL 48331 . 48335) (symbol 48324 . 48330) (close-paren 48321 . 48322) (punctuation 48292 . 48293) (semantic-list 48253 . 48291) (RETURN 48246 . 48252) (open-paren 48167 . 48168) (close-paren 48165 . 48166) (symbol 48161 . 48165) (symbol 48151 . 48160) (open-paren 48150 . 48151) (symbol 48132 . 48149) (symbol 48122 . 48131) (symbol 48115 . 48121) (close-paren 48112 . 48113) (punctuation 48090 . 48091) (semantic-list 48058 . 48089) (RETURN 48051 . 48057) (open-paren 47972 . 47973) (close-paren 47970 . 47971) (symbol 47966 . 47970) (symbol 47956 . 47965) (open-paren 47955 . 47956) (symbol 47937 . 47954) (symbol 47927 . 47936) (symbol 47920 . 47926) (punctuation 47841 . 47842) (close-paren 47840 . 47841) (semantic-list 47824 . 47837) (SIZEOF 47817 . 47823) (punctuation 47815 . 47816) (symbol 47805 . 47814) (punctuation 47799 . 47800) (semantic-list 47768 . 47799) (symbol 47759 . 47767) (punctuation 47757 . 47758) (symbol 47740 . 47756) (punctuation 47734 . 47735) (semantic-list 47704 . 47734) (symbol 47695 . 47703) (punctuation 47693 . 47694) (symbol 47681 . 47692) (open-paren 47675 . 47676) (ENUM 47668 . 47672) (punctuation 47567 . 47568) (close-paren 47566 . 47567) (open-paren 47092 . 47093) (symbol 47073 . 47089) (STRUCT 47066 . 47072) (close-paren 46988 . 46989) (semantic-list 46794 . 46987) (ELSE 46785 . 46789) (RETURN 46769 . 46775) (semantic-list 46745 . 46764) (IF 46742 . 46744) (open-paren 46738 . 46739) (close-paren 46736 . 46737) (symbol 46732 . 46736) (INT 46728 . 46731) (punctuation 46726 . 46727) (symbol 46725 . 46726) (symbol 46713 . 46724) (open-paren 46712 . 46713) (symbol 46698 . 46711) (BOOL 46693 . 46697) (symbol 46686 . 46692) (close-paren 46628 . 46629) (punctuation 46626 . 46627) (semantic-list 46515 . 46626) (RETURN 46508 . 46514) (open-paren 46399 . 46400) (close-paren 46397 . 46398) (symbol 46393 . 46397) (symbol 46383 . 46392) (ENUM 46378 . 46382) (punctuation 46376 . 46377) (symbol 46375 . 46376) (punctuation 46374 . 46375) (symbol 46356 . 46373) (STRUCT 46349 . 46355) (open-paren 46348 . 46349) (symbol 46329 . 46347) (BOOL 46324 . 46328) (symbol 46317 . 46323) (close-paren 46268 . 46269) (punctuation 46266 . 46267) (semantic-list 46147 . 46266) (RETURN 46140 . 46146) (open-paren 46101 . 46102) (close-paren 46099 . 46100) (symbol 46098 . 46099) (punctuation 46097 . 46098) (symbol 46085 . 46096) (STRUCT 46078 . 46084) (open-paren 46077 . 46078) (symbol 46059 . 46076) (symbol 46049 . 46058) (ENUM 46044 . 46048) (symbol 46037 . 46043) (close-paren 45957 . 45958) (semantic-list 45938 . 45941) (open-paren 45914 . 45915) (close-paren 45912 . 45913) (symbol 45911 . 45912) (symbol 45899 . 45910) (open-paren 45898 . 45899) (symbol 45885 . 45897) (VOID 45880 . 45884) (symbol 45873 . 45879) (close-paren 45870 . 45871) (punctuation 45868 . 45869) (semantic-list 45837 . 45868) (punctuation 45835 . 45836) (punctuation 45833 . 45834) (punctuation 45832 . 45833) (semantic-list 45828 . 45831) (symbol 45816 . 45827) (RETURN 45809 . 45815) (open-paren 45805 . 45806) (close-paren 45803 . 45804) (symbol 45802 . 45803) (symbol 45790 . 45801) (open-paren 45789 . 45790) (symbol 45781 . 45788) (BOOL 45776 . 45780) (symbol 45769 . 45775) (close-paren 45766 . 45767) (semantic-list 45735 . 45739) (symbol 45729 . 45734) (RETURN 45722 . 45728) (open-paren 45718 . 45719) (close-paren 45716 . 45717) (symbol 45714 . 45716) (symbol 45702 . 45713) (open-paren 45701 . 45702) (symbol 45694 . 45700) (symbol 45684 . 45693) (symbol 45677 . 45683) (close-paren 45674 . 45675) (RETURN 45661 . 45667) (open-paren 45585 . 45586) (close-paren 45583 . 45584) (symbol 45578 . 45583) (symbol 45566 . 45577) (open-paren 45565 . 45566) (symbol 45559 . 45564) (symbol 45549 . 45558) (symbol 45542 . 45548) (close-paren 45539 . 45540) (RETURN 45503 . 45509) (punctuation 45499 . 45500) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "VECTORLIKEP" 45483 . 45494)))) 45474 . 45499) (open-paren 45470 . 45471) (close-paren 45468 . 45469) (symbol 45467 . 45468) (symbol 45455 . 45466) (open-paren 45454 . 45455) (symbol 45446 . 45453) (punctuation 45444 . 45445) (symbol 45432 . 45443) (STRUCT 45425 . 45431) (symbol 45418 . 45424) (close-paren 45415 . 45416) (punctuation 45413 . 45414) (semantic-list #("(XTYPE (x) == Lisp_Vectorlike)" 0 1 (macros (("x" symbol "x" 45411 . 45412)))) 45391 . 45413) (RETURN 45384 . 45390) (open-paren 45380 . 45381) (close-paren 45378 . 45379) (symbol 45377 . 45378) (symbol 45365 . 45376) (open-paren 45364 . 45365) (close-paren 45362 . 45363) (symbol 45351 . 45362) (open-paren 45350 . 45351) (BOOL 45345 . 45349) (symbol 45338 . 45344) (punctuation 45335 . 45336) (close-paren 45334 . 45335) (open-paren 45244 . 45245) (symbol 45230 . 45241) (STRUCT 45223 . 45229) (close-paren 45147 . 45148) (punctuation 45130 . 45131) (punctuation 45129 . 45130) (semantic-list 45121 . 45129) (symbol 45113 . 45120) (punctuation 45109 . 45110) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "STRING_MULTIBYTE" 45001 . 45017)))) 44992 . 45109) (open-paren 44883 . 44884) (close-paren 44881 . 44882) (symbol 44874 . 44881) (symbol 44864 . 44873) (punctuation 44862 . 44863) (symbol 44856 . 44862) (symbol 44844 . 44855) (open-paren 44843 . 44844) (symbol 44826 . 44842) (VOID 44821 . 44825) (symbol 44814 . 44820) (close-paren 44812 . 44813) (semantic-list 44801 . 44809) (RETURN 44772 . 44778) (open-paren 44768 . 44769) (close-paren 44766 . 44767) (symbol 44760 . 44766) (symbol 44748 . 44759) (open-paren 44747 . 44748) (symbol 44740 . 44746) (symbol 44730 . 44739) (symbol 44723 . 44729) (close-paren 44720 . 44721) (RETURN 44705 . 44711) (punctuation 44659 . 44660) (punctuation 44658 . 44659) (symbol 44657 . 44658) (punctuation 44655 . 44656) (symbol 44650 . 44654) (punctuation 44649 . 44650) (punctuation 44648 . 44649) (symbol 44647 . 44648) (punctuation 44645 . 44646) (number 44643 . 44644) (punctuation 44641 . 44642) (symbol 44631 . 44640) (punctuation 44630 . 44631) (punctuation 44629 . 44630) (symbol 44628 . 44629) (punctuation 44626 . 44627) (symbol 44619 . 44625) (symbol 44609 . 44618) (open-paren 44531 . 44532) (close-paren 44529 . 44530) (symbol 44528 . 44529) (punctuation 44527 . 44528) (symbol 44515 . 44526) (STRUCT 44508 . 44514) (open-paren 44507 . 44508) (symbol 44494 . 44506) (symbol 44484 . 44493) (symbol 44477 . 44483) (close-paren 44384 . 44385) (RETURN 44369 . 44375) (open-paren 44295 . 44296) (close-paren 44293 . 44294) (symbol 44287 . 44293) (symbol 44275 . 44286) (open-paren 44274 . 44275) (symbol 44267 . 44273) (symbol 44257 . 44266) (symbol 44250 . 44256) (close-paren 44248 . 44249) (punctuation 44246 . 44247) (NEW 44243 . 44246) (punctuation 44241 . 44242) (open-paren 44215 . 44216) (close-paren 44213 . 44214) (NEW 44210 . 44213) (CHAR 44205 . 44209) (UNSIGNED 44196 . 44204) (punctuation 44194 . 44195) (symbol 44189 . 44194) (symbol 44179 . 44188) (punctuation 44177 . 44178) (symbol 44171 . 44177) (symbol 44159 . 44170) (open-paren 44158 . 44159) (symbol 44153 . 44157) (VOID 44148 . 44152) (symbol 44141 . 44147) (close-paren 44139 . 44140) (punctuation 44137 . 44138) (RETURN 44109 . 44115) (open-paren 44105 . 44106) (close-paren 44103 . 44104) (symbol 44098 . 44103) (symbol 44088 . 44097) (punctuation 44086 . 44087) (symbol 44080 . 44086) (symbol 44068 . 44079) (open-paren 44067 . 44068) (symbol 44062 . 44066) (CHAR 44057 . 44061) (UNSIGNED 44048 . 44056) (symbol 44041 . 44047) (close-paren 44039 . 44040) (semantic-list 44014 . 44022) (RETURN 44007 . 44013) (open-paren 43961 . 43962) (close-paren 43959 . 43960) (symbol 43953 . 43959) (symbol 43941 . 43952) (open-paren 43940 . 43941) (symbol 43933 . 43939) (punctuation 43931 . 43932) (CHAR 43926 . 43930) (symbol 43919 . 43925) (close-paren 43917 . 43918) (punctuation 43910 . 43911) (punctuation 43909 . 43910) (semantic-list 43901 . 43909) (symbol 43893 . 43900) (RETURN 43886 . 43892) (open-paren 43882 . 43883) (close-paren 43880 . 43881) (symbol 43874 . 43880) (symbol 43862 . 43873) (open-paren 43861 . 43862) (symbol 43855 . 43860) (punctuation 43853 . 43854) (CHAR 43848 . 43852) (UNSIGNED 43839 . 43847) (symbol 43832 . 43838) (close-paren 42365 . 42366) (punctuation 42353 . 42354) (punctuation 42352 . 42353) (semantic-list 42347 . 42352) (symbol 42339 . 42346) (punctuation 42337 . 42338) (punctuation 42336 . 42337) (number 42334 . 42335) (RETURN 42327 . 42333) (open-paren 42323 . 42324) (close-paren 42321 . 42322) (symbol 42318 . 42321) (symbol 42306 . 42317) (open-paren 42305 . 42306) (symbol 42288 . 42304) (BOOL 42283 . 42287) (symbol 42276 . 42282) (close-paren 42231 . 42232) (RETURN 42199 . 42205) (punctuation 42195 . 42196) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "STRINGP" 42183 . 42190)))) 42174 . 42195) (open-paren 42170 . 42171) (close-paren 42168 . 42169) (symbol 42167 . 42168) (symbol 42155 . 42166) (open-paren 42154 . 42155) (symbol 42146 . 42153) (punctuation 42144 . 42145) (symbol 42132 . 42143) (STRUCT 42125 . 42131) (symbol 42118 . 42124) (close-paren 42115 . 42116) (semantic-list 42096 . 42099) (open-paren 42072 . 42073) (close-paren 42070 . 42071) (symbol 42069 . 42070) (symbol 42057 . 42068) (open-paren 42056 . 42057) (symbol 42043 . 42055) (VOID 42038 . 42042) (symbol 42031 . 42037) (close-paren 42028 . 42029) (punctuation 42013 . 42014) (punctuation 42012 . 42013) (semantic-list 42008 . 42011) (symbol 42002 . 42007) (RETURN 41995 . 42001) (open-paren 41991 . 41992) (close-paren 41989 . 41990) (symbol 41988 . 41989) (symbol 41976 . 41987) (open-paren 41975 . 41976) (symbol 41967 . 41974) (BOOL 41962 . 41966) (symbol 41955 . 41961) (punctuation 41952 . 41953) (close-paren 41951 . 41952) (open-paren 41813 . 41814) (symbol 41799 . 41810) (STRUCT 41782 . 41788) (close-paren 41701 . 41702) (punctuation 41693 . 41694) (semantic-list 41689 . 41692) (symbol 41684 . 41688) (punctuation 41682 . 41683) (semantic-list 41678 . 41681) (symbol 41672 . 41677) (RETURN 41665 . 41671) (open-paren 41661 . 41662) (close-paren 41659 . 41660) (symbol 41658 . 41659) (symbol 41646 . 41657) (open-paren 41645 . 41646) (symbol 41636 . 41644) (symbol 41624 . 41635) (symbol 41617 . 41623) (close-paren 41615 . 41616) (punctuation 41607 . 41608) (semantic-list 41603 . 41606) (symbol 41598 . 41602) (punctuation 41596 . 41597) (semantic-list 41592 . 41595) (symbol 41586 . 41591) (RETURN 41579 . 41585) (open-paren 41575 . 41576) (close-paren 41573 . 41574) (symbol 41572 . 41573) (symbol 41560 . 41571) (open-paren 41559 . 41560) (symbol 41550 . 41558) (symbol 41538 . 41549) (symbol 41531 . 41537) (close-paren 41463 . 41464) (RETURN 41450 . 41456) (semantic-list 41399 . 41410) (IF 41396 . 41398) (RETURN 41377 . 41383) (semantic-list 41361 . 41372) (IF 41358 . 41360) (open-paren 41354 . 41355) (close-paren 41352 . 41353) (symbol 41351 . 41352) (symbol 41339 . 41350) (open-paren 41338 . 41339) (symbol 41334 . 41337) (symbol 41322 . 41333) (symbol 41315 . 41321) (close-paren 41313 . 41314) (RETURN 41300 . 41306) (semantic-list 41249 . 41260) (IF 41246 . 41248) (RETURN 41227 . 41233) (semantic-list 41211 . 41222) (IF 41208 . 41210) (open-paren 41204 . 41205) (close-paren 41202 . 41203) (symbol 41201 . 41202) (symbol 41189 . 41200) (open-paren 41188 . 41189) (symbol 41184 . 41187) (symbol 41172 . 41183) (symbol 41165 . 41171) (close-paren 41097 . 41098) (punctuation 41092 . 41093) (semantic-list 41088 . 41091) (symbol 41078 . 41087) (punctuation 41077 . 41078) (open-paren 41073 . 41074) (close-paren 41071 . 41072) (symbol 41070 . 41071) (symbol 41058 . 41069) (punctuation 41056 . 41057) (symbol 41055 . 41056) (symbol 41043 . 41054) (open-paren 41042 . 41043) (symbol 41034 . 41041) (VOID 41029 . 41033) (symbol 41022 . 41028) (close-paren 41020 . 41021) (punctuation 41015 . 41016) (semantic-list 41011 . 41014) (symbol 41001 . 41010) (punctuation 41000 . 41001) (open-paren 40996 . 40997) (close-paren 40994 . 40995) (symbol 40993 . 40994) (symbol 40981 . 40992) (punctuation 40979 . 40980) (symbol 40978 . 40979) (symbol 40966 . 40977) (open-paren 40965 . 40966) (symbol 40957 . 40964) (VOID 40952 . 40956) (symbol 40945 . 40951) (close-paren 40774 . 40775) (punctuation "." 40757 . 40772) (symbol "u" 40757 . 40772) (punctuation ">" 40757 . 40772) (punctuation "-" 40757 . 40772) (semantic-list #("(c)" 0 1 (macros (("c" symbol "c" 40770 . 40771)))) 40757 . 40772) (symbol "XCONS" 40757 . 40772) (RETURN 40750 . 40756) (open-paren 40746 . 40747) (close-paren 40744 . 40745) (symbol 40743 . 40744) (symbol 40731 . 40742) (open-paren 40730 . 40731) (close-paren 40728 . 40729) (symbol 40724 . 40728) (open-paren 40723 . 40724) (symbol 40711 . 40722) (symbol 40704 . 40710) (close-paren 40701 . 40702) (punctuation ">" 40684 . 40699) (punctuation "-" 40684 . 40699) (semantic-list #("(c)" 0 1 (macros (("c" symbol "c" 40697 . 40698)))) 40684 . 40699) (symbol "XCONS" 40684 . 40699) (RETURN 40677 . 40683) (open-paren 40673 . 40674) (close-paren 40671 . 40672) (symbol 40670 . 40671) (symbol 40658 . 40669) (open-paren 40657 . 40658) (close-paren 40655 . 40656) (symbol 40651 . 40655) (open-paren 40650 . 40651) (symbol 40638 . 40649) (symbol 40631 . 40637) (close-paren 40592 . 40593) (punctuation 40586 . 40587) (symbol 40585 . 40586) (punctuation 40584 . 40585) (punctuation 40583 . 40584) (semantic-list 40580 . 40583) (symbol 40574 . 40579) (punctuation 40573 . 40574) (RETURN 40566 . 40572) (open-paren 40562 . 40563) (close-paren 40560 . 40561) (symbol 40559 . 40560) (symbol 40547 . 40558) (open-paren 40546 . 40547) (symbol 40536 . 40545) (punctuation 40534 . 40535) (symbol 40522 . 40533) (symbol 40515 . 40521) (close-paren 40513 . 40514) (punctuation 40507 . 40508) (punctuation 40506 . 40507) (semantic-list 40503 . 40506) (symbol 40497 . 40502) (punctuation 40496 . 40497) (RETURN 40489 . 40495) (open-paren 40485 . 40486) (close-paren 40483 . 40484) (symbol 40482 . 40483) (symbol 40470 . 40481) (open-paren 40469 . 40470) (symbol 40459 . 40468) (punctuation 40457 . 40458) (symbol 40445 . 40456) (symbol 40438 . 40444) (close-paren 39978 . 39979) (punctuation 39976 . 39977) (semantic-list #("(eassert (CONSP (a)), (struct Lisp_Cons *) XUNTAG (a, Lisp_Cons))" 0 1 (macros (("a" symbol "a" 39974 . 39975)))) 39960 . 39976) (RETURN 39953 . 39959) (open-paren 39949 . 39950) (close-paren 39947 . 39948) (symbol 39946 . 39947) (symbol 39934 . 39945) (open-paren 39933 . 39934) (close-paren 39931 . 39932) (symbol 39926 . 39931) (open-paren 39925 . 39926) (punctuation 39923 . 39924) (symbol 39913 . 39922) (STRUCT 39906 . 39912) (symbol 39899 . 39905) (close-paren 39896 . 39897) (semantic-list 39879 . 39882) (open-paren 39857 . 39858) (close-paren 39855 . 39856) (symbol 39854 . 39855) (symbol 39842 . 39853) (open-paren 39841 . 39842) (symbol 39830 . 39840) (VOID 39825 . 39829) (symbol 39818 . 39824) (close-paren 39815 . 39816) (punctuation 39813 . 39814) (semantic-list #("(XTYPE (x) == Lisp_Cons)" 0 1 (macros (("x" symbol "x" 39811 . 39812)))) 39797 . 39813) (RETURN 39790 . 39796) (open-paren 39786 . 39787) (close-paren 39784 . 39785) (symbol 39783 . 39784) (symbol 39771 . 39782) (open-paren 39770 . 39771) (close-paren 39768 . 39769) (symbol 39763 . 39768) (open-paren 39762 . 39763) (BOOL 39757 . 39761) (symbol 39750 . 39756) (close-paren 39747 . 39748) (RETURN 39723 . 39729) (open-paren 39719 . 39720) (close-paren 39717 . 39718) (symbol 39716 . 39717) (symbol 39704 . 39715) (open-paren 39703 . 39704) (close-paren 39701 . 39702) (symbol 39697 . 39701) (open-paren 39696 . 39697) (BOOL 39691 . 39695) (symbol 39684 . 39690) (punctuation 39681 . 39682) (close-paren 39680 . 39681) (open-paren 39454 . 39455) (symbol 39442 . 39451) (STRUCT 39425 . 39431) (close-paren 39347 . 39348) (RETURN 39337 . 39343) (punctuation 39333 . 39334) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "INTEGERP" 39300 . 39308)))) 39291 . 39333) (open-paren 39239 . 39240) (close-paren 39237 . 39238) (symbol 39236 . 39237) (punctuation 39235 . 39236) (VOID 39230 . 39234) (open-paren 39229 . 39230) (symbol 39208 . 39228) (symbol 39196 . 39207) (symbol 39189 . 39195) (close-paren 39186 . 39187) (RETURN 39156 . 39162) (open-paren 39152 . 39153) (close-paren 39150 . 39151) (symbol 39149 . 39150) (symbol 39137 . 39148) (open-paren 39136 . 39137) (symbol 39128 . 39135) (punctuation 39126 . 39127) (VOID 39121 . 39125) (symbol 39114 . 39120) (close-paren 36631 . 36632) (punctuation 36629 . 36630) (semantic-list #("((XTYPE (x) & (Lisp_Int0 | ~Lisp_Int1)) == Lisp_Int0)" 0 1 (macros (("x" symbol "x" 36627 . 36628)))) 36610 . 36629) (RETURN 36603 . 36609) (open-paren 36599 . 36600) (close-paren 36597 . 36598) (symbol 36596 . 36597) (symbol 36584 . 36595) (open-paren 36583 . 36584) (close-paren 36581 . 36582) (symbol 36573 . 36581) (open-paren 36572 . 36573) (BOOL 36567 . 36571) (symbol 36560 . 36566) (close-paren 36557 . 36558) (RETURN 36547 . 36553) (punctuation 36543 . 36544) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "XTYPE" 36498 . 36503)))) 36489 . 36543) (open-paren 36440 . 36441) (close-paren 36438 . 36439) (symbol 36434 . 36438) (symbol 36424 . 36433) (ENUM 36419 . 36423) (punctuation 36417 . 36418) (symbol 36414 . 36417) (punctuation 36413 . 36414) (VOID 36408 . 36412) (open-paren 36407 . 36408) (symbol 36393 . 36406) (symbol 36381 . 36392) (symbol 36374 . 36380) (close-paren 36313 . 36314) (punctuation 36304 . 36305) (symbol 36300 . 36303) (punctuation 36298 . 36299) (symbol 36292 . 36297) (punctuation 36290 . 36291) (punctuation 36289 . 36290) (symbol 36285 . 36288) (punctuation 36283 . 36284) (symbol 36277 . 36282) (punctuation 36275 . 36276) (symbol 36269 . 36274) (punctuation 36267 . 36268) (symbol 36263 . 36266) (RETURN 36256 . 36262) (open-paren 36252 . 36253) (close-paren 36250 . 36251) (symbol 36245 . 36250) (symbol 36235 . 36244) (punctuation 36233 . 36234) (symbol 36230 . 36233) (symbol 36220 . 36229) (punctuation 36218 . 36219) (symbol 36213 . 36218) (symbol 36203 . 36212) (open-paren 36202 . 36203) (symbol 36187 . 36201) (symbol 36177 . 36186) (symbol 36170 . 36176) (close-paren 35976 . 35977) (punctuation 35974 . 35975) (semantic-list #("(XLI (x) == XLI (y))" 0 1 (macros (("y" symbol "y" 35972 . 35973) ("x" symbol "x" 35969 . 35970)))) 35958 . 35974) (RETURN 35951 . 35957) (open-paren 35947 . 35948) (close-paren 35945 . 35946) (symbol 35944 . 35945) (symbol 35932 . 35943) (punctuation 35930 . 35931) (symbol 35929 . 35930) (symbol 35917 . 35928) (open-paren 35916 . 35917) (close-paren 35914 . 35915) (symbol 35912 . 35914) (open-paren 35911 . 35912) (BOOL 35906 . 35910) (symbol 35899 . 35905) (close-paren 35844 . 35845) (semantic-list 35824 . 35841) (punctuation 35822 . 35823) (punctuation 35813 . 35814) (semantic-list 35809 . 35812) (symbol 35797 . 35808) (punctuation 35795 . 35796) (semantic-list "(VAL_MAX / 2 < INTPTR_MAX)" 35783 . 35794) (RETURN 35776 . 35782) (punctuation 35742 . 35743) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" number "0" 35706 . 35707)))) 35697 . 35742) (open-paren 35693 . 35694) (close-paren 35691 . 35692) (symbol 35690 . 35691) (symbol 35680 . 35689) (open-paren 35679 . 35680) (symbol 35667 . 35678) (symbol 35655 . 35666) (symbol 35648 . 35654) (close-paren 35564 . 35565) (RETURN 35539 . 35545) (open-paren 35535 . 35536) (close-paren 35533 . 35534) (symbol 35532 . 35533) (symbol 35520 . 35531) (open-paren 35519 . 35520) (close-paren 35517 . 35518) (symbol 35512 . 35517) (open-paren 35511 . 35512) (symbol 35501 . 35510) (symbol 35494 . 35500) (close-paren 35336 . 35337) (punctuation 35334 . 35335) (semantic-list "(EMACS_INT_MAX >> (INTTYPEBITS - 1))" 35327 . 35334) (punctuation 35325 . 35326) (symbol 35323 . 35324) (punctuation 35321 . 35322) (symbol 35309 . 35320) (punctuation 35307 . 35308) (punctuation 35306 . 35307) (symbol 35304 . 35305) (punctuation 35302 . 35303) (semantic-list "(VAL_MAX / 2 < INTPTR_MAX)" 35290 . 35301) (RETURN 35283 . 35289) (open-paren 35253 . 35254) (close-paren 35251 . 35252) (symbol 35250 . 35251) (symbol 35238 . 35249) (open-paren 35237 . 35238) (symbol 35231 . 35236) (symbol 35220 . 35230) (symbol 35213 . 35219) (close-paren 35133 . 35134) (RETURN 35123 . 35129) (punctuation 35099 . 35100) (semantic-list 35082 . 35099) (punctuation 35080 . 35081) (semantic-list 35076 . 35079) (symbol 35072 . 35075) (punctuation 35070 . 35071) (semantic-list 35066 . 35069) (symbol 35061 . 35065) (punctuation 35059 . 35060) (semantic-list "(VAL_MAX / 2 < INTPTR_MAX)" 35047 . 35058) (punctuation 35045 . 35046) (symbol 35043 . 35044) (symbol 35033 . 35042) (open-paren 34999 . 35000) (close-paren 34997 . 34998) (symbol 34996 . 34997) (symbol 34984 . 34995) (open-paren 34983 . 34984) (symbol 34974 . 34982) (symbol 34964 . 34973) (symbol 34957 . 34963) (close-paren 34783 . 34784) (punctuation 34768 . 34769) (punctuation 34767 . 34768) (symbol 34765 . 34766) (RETURN 34758 . 34764) (semantic-list 34696 . 34755) (semantic-list 34676 . 34691) (IF 34673 . 34675) (open-paren 34644 . 34645) (close-paren 34642 . 34643) (symbol 34641 . 34642) (symbol 34629 . 34640) (open-paren 34628 . 34629) (symbol 34623 . 34627) (symbol 34613 . 34622) (symbol 34606 . 34612) (close-paren 34557 . 34558) (RETURN 34541 . 34547) (semantic-list 34481 . 34538) (ELSE 34472 . 34476) (semantic-list 34393 . 34469) (semantic-list 34375 . 34388) (IF 34372 . 34374) (open-paren 34338 . 34339) (close-paren 34336 . 34337) (symbol 34335 . 34336) (symbol 34325 . 34334) (open-paren 34324 . 34325) (symbol 34312 . 34323) (symbol 34300 . 34311) (symbol 34293 . 34299) (punctuation 33225 . 33226) (close-paren 33224 . 33225) (symbol 33199 . 33221) (punctuation 33197 . 33198) (punctuation 33196 . 33197) (number 33191 . 33195) (punctuation 33189 . 33190) (symbol 33174 . 33188) (punctuation 33168 . 33169) (symbol 33146 . 33168) (punctuation 33144 . 33145) (symbol 33121 . 33143) (punctuation 33119 . 33120) (symbol 33096 . 33118) (punctuation 33028 . 33029) (semantic-list 32956 . 33028) (punctuation 32954 . 32955) (symbol 32931 . 32953) (punctuation 32925 . 32926) (number 32923 . 32925) (punctuation 32921 . 32922) (symbol 32898 . 32920) (punctuation 32746 . 32747) (number 32745 . 32746) (punctuation 32743 . 32744) (semantic-list 32713 . 32742) (punctuation 32711 . 32712) (symbol 32688 . 32710) (punctuation 32682 . 32683) (number 32680 . 32682) (punctuation 32678 . 32679) (symbol 32655 . 32677) (open-paren 32282 . 32283) (symbol 32265 . 32279) (ENUM 32260 . 32264) (punctuation 32257 . 32258) (close-paren 32256 . 32257) (symbol 32186 . 32195) (punctuation 32182 . 32183) (symbol 32171 . 32182) (punctuation 32167 . 32168) (symbol 32148 . 32167) (punctuation 32144 . 32145) (symbol 32129 . 32144) (punctuation 32125 . 32126) (symbol 32112 . 32125) (punctuation 32043 . 32044) (symbol 32023 . 32043) (punctuation 32019 . 32020) (symbol 32007 . 32019) (punctuation 32003 . 32004) (symbol 31993 . 32003) (punctuation 31989 . 31990) (symbol 31978 . 31989) (punctuation 31974 . 31975) (symbol 31957 . 31974) (punctuation 31953 . 31954) (symbol 31941 . 31953) (punctuation 31880 . 31881) (symbol 31870 . 31880) (punctuation 31866 . 31867) (symbol 31857 . 31866) (punctuation 31853 . 31854) (symbol 31828 . 31853) (punctuation 31824 . 31825) (symbol 31811 . 31824) (punctuation 31807 . 31808) (symbol 31792 . 31807) (punctuation 31788 . 31789) (symbol 31777 . 31788) (punctuation 31773 . 31774) (symbol 31757 . 31773) (punctuation 31753 . 31754) (symbol 31742 . 31753) (punctuation 31738 . 31739) (symbol 31728 . 31738) (punctuation 31724 . 31725) (symbol 31712 . 31724) (punctuation 31708 . 31709) (symbol 31699 . 31708) (punctuation 31695 . 31696) (symbol 31677 . 31695) (open-paren 31673 . 31674) (symbol 31663 . 31672) (ENUM 31658 . 31662) (punctuation ";" 31416 . 31457) (symbol "EXTERNALLY_VISIBLE" 31302 . 31356) (symbol "PSEUDOVECTOR_FLAG" 31302 . 31356) (CONST "const" 31302 . 31356) (symbol "ptrdiff_t" 31302 . 31356) (EXTERN "extern" 31302 . 31356) (punctuation ";" 31151 . 31190) (symbol "EXTERNALLY_VISIBLE" 31061 . 31113) (symbol "ARRAY_MARK_FLAG" 31061 . 31113) (CONST "const" 31061 . 31113) (symbol "ptrdiff_t" 31061 . 31113) (EXTERN "extern" 31061 . 31113) (close-paren 30977 . 30978) (open-paren 30948 . 30949) (close-paren 30946 . 30947) (symbol 30945 . 30946) (symbol 30933 . 30944) (open-paren 30932 . 30933) (close-paren 30930 . 30931) (symbol 30918 . 30930) (open-paren 30917 . 30918) (VOID 30912 . 30916) (symbol 30905 . 30911) (close-paren 30902 . 30903) (punctuation 30897 . 30898) (semantic-list 30890 . 30897) (punctuation 30882 . 30883) (RETURN 30857 . 30863) (open-paren 30853 . 30854) (close-paren 30851 . 30852) (symbol 30846 . 30851) (INT 30842 . 30845) (open-paren 30841 . 30842) (symbol 30821 . 30840) (symbol 30809 . 30820) (symbol 30802 . 30808) (close-paren 30799 . 30800) (RETURN 30789 . 30795) (punctuation 30785 . 30786) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "XSYMBOL" 30766 . 30773)))) 30757 . 30785) (open-paren 30680 . 30681) (close-paren 30678 . 30679) (symbol 30675 . 30678) (punctuation 30674 . 30675) (symbol 30662 . 30673) (STRUCT 30655 . 30661) (open-paren 30654 . 30655) (symbol 30637 . 30653) (symbol 30625 . 30636) (symbol 30618 . 30624) (close-paren 30615 . 30616) (RETURN 30598 . 30604) (punctuation 30509 . 30510) (semantic-list #("((void) (false && (cond)))" 0 1 (macros (("cond" symbol "SYMBOLP" 30497 . 30504)))) 30488 . 30509) (open-paren 30433 . 30434) (close-paren 30431 . 30432) (symbol 30430 . 30431) (symbol 30418 . 30429) (open-paren 30417 . 30418) (close-paren 30415 . 30416) (symbol 30408 . 30415) (open-paren 30407 . 30408) (punctuation 30405 . 30406) (symbol 30393 . 30404) (STRUCT 30386 . 30392) (symbol 30379 . 30385) (close-paren 30376 . 30377) (punctuation 30374 . 30375) (semantic-list #("(XTYPE (x) == Lisp_Symbol)" 0 1 (macros (("x" symbol "x" 30372 . 30373)))) 30356 . 30374) (RETURN 30349 . 30355) (open-paren 30345 . 30346) (close-paren 30343 . 30344) (symbol 30342 . 30343) (symbol 30330 . 30341) (open-paren 30329 . 30330) (close-paren 30327 . 30328) (symbol 30320 . 30327) (open-paren 30319 . 30320) (BOOL 30314 . 30318) (symbol 30307 . 30313) (punctuation 30304 . 30305) (close-paren 30303 . 30304) (open-paren 29157 . 29158) (symbol 29137 . 29154) (STRUCT 29130 . 29136) (punctuation 25528 . 25529) (close-paren 25527 . 25528) (open-paren 23980 . 23981) (symbol 23968 . 23979) (STRUCT 23961 . 23967) (punctuation 23958 . 23959) (close-paren 23957 . 23958) (number 23955 . 23956) (punctuation 23953 . 23954) (symbol 23932 . 23952) (punctuation 23928 . 23929) (number 23927 . 23928) (punctuation 23925 . 23926) (symbol 23910 . 23924) (punctuation 23906 . 23907) (number 23905 . 23906) (punctuation 23903 . 23904) (symbol 23880 . 23902) (open-paren 23876 . 23877) (symbol 23855 . 23875) (ENUM 23850 . 23854) (punctuation 23847 . 23848) (close-paren 23846 . 23847) (number 23844 . 23845) (punctuation 23842 . 23843) (symbol 23825 . 23841) (punctuation 23821 . 23822) (number 23820 . 23821) (punctuation 23818 . 23819) (symbol 23801 . 23817) (punctuation 23797 . 23798) (number 23796 . 23797) (punctuation 23794 . 23795) (symbol 23777 . 23792) (punctuation 23773 . 23774) (number 23772 . 23773) (punctuation 23770 . 23771) (symbol 23753 . 23768) (open-paren 23749 . 23750) (symbol 23733 . 23748) (ENUM 23728 . 23732) (punctuation 23725 . 23726) (close-paren 23724 . 23725) (number 23722 . 23723) (punctuation 23720 . 23721) (symbol 23685 . 23719) (punctuation 23681 . 23682) (number 23680 . 23681) (punctuation 23678 . 23679) (symbol 23662 . 23677) (punctuation 23658 . 23659) (number 23657 . 23658) (punctuation 23655 . 23656) (symbol 23637 . 23654) (open-paren 23633 . 23634) (symbol 23617 . 23632) (ENUM 23612 . 23616) (close-paren 23571 . 23572) (semantic-list 23552 . 23560) (RETURN 23545 . 23551) (punctuation 23541 . 23542) (semantic-list "(USE_LSB_TAG ? - (1 << GCTYPEBITS) : VAL_MAX)" 23534 . 23541) (punctuation 23532 . 23533) (semantic-list 23528 . 23531) (symbol 23524 . 23527) (punctuation 23522 . 23523) (symbol 23517 . 23521) (punctuation 23515 . 23516) (semantic-list 23511 . 23514) (symbol 23507 . 23510) (punctuation 23505 . 23506) (semantic-list "(VAL_MAX / 2 < INTPTR_MAX)" 23493 . 23504) (punctuation 23491 . 23492) (symbol 23489 . 23490) (symbol 23480 . 23488) (open-paren 23420 . 23421) (close-paren 23418 . 23419) (symbol 23414 . 23418) (INT 23410 . 23413) (punctuation 23408 . 23409) (symbol 23407 . 23408) (symbol 23395 . 23406) (open-paren 23394 . 23395) (close-paren 23392 . 23393) (symbol 23386 . 23392) (open-paren 23385 . 23386) (punctuation 23383 . 23384) (VOID 23378 . 23382) (symbol 23371 . 23377) (close-paren 23306 . 23307) (punctuation 23304 . 23305) (semantic-list #("((ok) ? (void) 0 : wrong_type_argument (predicate, x))" 0 1 (macros (("x" symbol "x" 23302 . 23303) ("predicate" symbol "predicate" 23291 . 23300) ("ok" symbol "ok" 23287 . 23289)))) 23268 . 23304) (open-paren 23264 . 23265) (close-paren 23262 . 23263) (symbol 23261 . 23262) (symbol 23249 . 23260) (punctuation 23247 . 23248) (symbol 23238 . 23247) (symbol 23226 . 23237) (punctuation 23224 . 23225) (symbol 23222 . 23224) (INT 23218 . 23221) (open-paren 23217 . 23218) (close-paren 23215 . 23216) (symbol 23205 . 23215) (open-paren 23204 . 23205) (VOID 23199 . 23203) (symbol 23192 . 23198) (close-paren 23189 . 23190) (punctuation 23171 . 23172) (punctuation 23170 . 23171) (symbol 23168 . 23169) (punctuation 23166 . 23167) (semantic-list "(USE_LSB_TAG ? - (1 << GCTYPEBITS) : VAL_MAX)" 23158 . 23165) (punctuation 23157 . 23158) (punctuation 23155 . 23156) (symbol 23153 . 23154) (punctuation 23151 . 23152) (semantic-list "(VAL_MAX / 2 < INTPTR_MAX)" 23139 . 23150) (RETURN 23132 . 23138) (open-paren 23053 . 23054) (close-paren 23051 . 23052) (symbol 23050 . 23051) (symbol 23038 . 23049) (open-paren 23037 . 23038) (close-paren 23035 . 23036) (symbol 23030 . 23035) (open-paren 23029 . 23030) (symbol 23019 . 23028) (ENUM 23014 . 23018) (symbol 23007 . 23013) (close-paren 22978 . 22979) (punctuation 22976 . 22977) (semantic-list #("(i)" 0 1 (macros (("i" symbol "i" 22974 . 22975)))) 22962 . 22976) (RETURN 22955 . 22961) (open-paren 22951 . 22952) (close-paren 22949 . 22950) (symbol 22948 . 22949) (symbol 22938 . 22947) (open-paren 22937 . 22938) (close-paren 22935 . 22936) (symbol 22932 . 22935) (open-paren 22931 . 22932) (symbol 22919 . 22930) (symbol 22912 . 22918) (close-paren 22909 . 22910) (punctuation 22907 . 22908) (semantic-list #("(o)" 0 1 (macros (("o" symbol "o" 22905 . 22906)))) 22893 . 22907) (RETURN 22886 . 22892) (open-paren 22882 . 22883) (close-paren 22880 . 22881) (symbol 22879 . 22880) (symbol 22867 . 22878) (open-paren 22866 . 22867) (close-paren 22864 . 22865) (symbol 22861 . 22864) (open-paren 22860 . 22861) (symbol 22850 . 22859) (symbol 22843 . 22849) (punctuation 22659 . 22660) (close-paren 22658 . 22659) (symbol 22647 . 22658) (open-paren 22646 . 22647) (symbol 22632 . 22645) (DOUBLE 22625 . 22631) (EXTERN 22618 . 22624) (punctuation 22310 . 22311) (close-paren 22309 . 22310) (symbol 22298 . 22309) (punctuation 22296 . 22297) (symbol 22285 . 22296) (open-paren 22284 . 22285) (symbol 22264 . 22283) (VOID 22259 . 22263) (symbol 22249 . 22258) (EXTERN 22242 . 22248) (punctuation 22213 . 22214) (close-paren 22212 . 22213) (symbol 22201 . 22212) (punctuation 22199 . 22200) (INT 22196 . 22199) (punctuation 22194 . 22195) (symbol 22183 . 22194) (open-paren 22182 . 22183) (symbol 22167 . 22181) (VOID 22162 . 22166) (EXTERN 22155 . 22161) (punctuation 22153 . 22154) (close-paren 22152 . 22153) (INT 22149 . 22152) (punctuation 22147 . 22148) (symbol 22136 . 22147) (open-paren 22135 . 22136) (symbol 22120 . 22134) (symbol 22108 . 22119) (EXTERN 22101 . 22107) (punctuation 22069 . 22070) (close-paren 22068 . 22069) (symbol 22057 . 22068) (punctuation 22044 . 22045) (symbol 22035 . 22044) (punctuation 22033 . 22034) (symbol 22022 . 22033) (open-paren 22021 . 22022) (symbol 21993 . 22020) (VOID 21988 . 21992) (symbol 21981 . 21987) (punctuation 21882 . 21883) (close-paren 21881 . 21882) (symbol 21875 . 21880) (punctuation 21873 . 21874) (symbol 21850 . 21872) (open-paren 21848 . 21849) (symbol 21825 . 21847) (ENUM 21820 . 21824) (punctuation 18274 . 18275) (close-paren 18273 . 18274) (symbol 18204 . 18223) (punctuation 18152 . 18153) (symbol 18133 . 18152) (punctuation 18086 . 18087) (symbol 18074 . 18086) (punctuation 18036 . 18037) (symbol 18023 . 18036) (punctuation 17982 . 17983) (symbol 17970 . 17982) (open-paren 17964 . 17965) (symbol 17948 . 17961) (ENUM 17943 . 17947) (punctuation 17782 . 17783) (close-paren 17781 . 17782) (symbol 17763 . 17778) (punctuation 17643 . 17644) (symbol 17624 . 17643) (punctuation 17618 . 17619) (symbol 17598 . 17618) (punctuation 17592 . 17593) (symbol 17575 . 17592) (punctuation 17569 . 17570) (symbol 17553 . 17569) (punctuation 17547 . 17548) (number 17541 . 17547) (punctuation 17539 . 17540) (symbol 17524 . 17538) (open-paren 17518 . 17519) (symbol 17501 . 17515) (ENUM 17496 . 17500) (punctuation 17172 . 17173) (close-paren 17171 . 17172) (number 17167 . 17168) (punctuation 17165 . 17166) (symbol 17154 . 17164) (punctuation 17147 . 17148) (number 17146 . 17147) (punctuation 17144 . 17145) (number 17142 . 17143) (punctuation 17140 . 17141) (semantic-list "(VAL_MAX / 2 < INTPTR_MAX)" 17128 . 17139) (punctuation 17126 . 17127) (symbol 17116 . 17125) (punctuation 17046 . 17047) (number 17045 . 17046) (punctuation 17043 . 17044) (symbol 17027 . 17042) (punctuation 16763 . 16764) (number 16762 . 16763) (punctuation 16760 . 16761) (symbol 16748 . 16759) (punctuation 16601 . 16602) (number 16600 . 16601) (punctuation 16598 . 16599) (number 16596 . 16597) (punctuation 16594 . 16595) (semantic-list "(VAL_MAX / 2 < INTPTR_MAX)" 16582 . 16593) (punctuation 16580 . 16581) (symbol 16570 . 16579) (punctuation 16564 . 16565) (number 16563 . 16564) (punctuation 16561 . 16562) (symbol 16551 . 16560) (punctuation 16490 . 16491) (number 16489 . 16490) (punctuation 16487 . 16488) (symbol 16477 . 16486) (punctuation 16350 . 16351) (number 16349 . 16350) (punctuation 16347 . 16348) (symbol 16335 . 16346) (open-paren 16260 . 16261) (symbol 16248 . 16257) (ENUM 16243 . 16247) (close-paren 13977 . 13978) (semantic-list 13945 . 13977) (punctuation 13943 . 13944) (punctuation 13941 . 13942) (punctuation 13940 . 13941) (symbol 13915 . 13932) (symbol 13907 . 13914) (punctuation 13905 . 13906) (punctuation 13903 . 13904) (punctuation 13902 . 13903) (symbol 13889 . 13901) (symbol 13881 . 13888) (punctuation 13879 . 13880) (punctuation 13877 . 13878) (punctuation 13876 . 13877) (punctuation 10213 . 10214) (punctuation 10212 . 10213) (symbol 10206 . 10211) (string 10144 . 10205) (string 10075 . 10140) (symbol 10069 . 10074) (punctuation 10067 . 10068) (punctuation ";" 9990 . 10021) (symbol "EXTERNALLY_VISIBLE" 9882 . 9926) (symbol "VALMASK" 9882 . 9926) (CONST "const" 9882 . 9926) (symbol "EMACS_INT" 9882 . 9926) (EXTERN "extern" 9882 . 9926) (punctuation ";" 9771 . 9806) (symbol "EXTERNALLY_VISIBLE" 9680 . 9723) (CONST "const" 9680 . 9723) (symbol "USE_LSB_TAG" 9680 . 9723) (EXTERN "extern" 9680 . 9723) (string 8967 . 9012) (symbol 8961 . 8966) (punctuation 8959 . 8960) (spp-macro-def 8601 . 8612) (number 4714 . 4715) (punctuation 4712 . 4713) (punctuation 4711 . 4712) (semantic-list 4686 . 4710) (punctuation 4684 . 4685) (punctuation 4683 . 4684) (number "8" 4081 . 4106) (spp-macro-def 4045 . 4070) (punctuation 4035 . 4036) (LONG 3102 . 3106) (UNSIGNED 3093 . 3101) (TYPEDEF 3085 . 3092) (LONG 3060 . 3064) (TYPEDEF 3052 . 3059) (string 2525 . 2551) (symbol 2519 . 2524) (punctuation 2516 . 2517) (punctuation ";" 2164 . 2198) (symbol "EXTERNALLY_VISIBLE" 2101 . 2142) (CONST "const" 2101 . 2142) (symbol "GCTYPEBITS" 2101 . 2142) (EXTERN "extern" 2101 . 2142) (symbol 1073 . 1092))
      :lexical-table 
        '(("pMd" . ((symbol "pI" 5218 . 5220) (string "\"d\"" 5220 . 5223)))
          ("VALMASK" . ((semantic-list "(USE_LSB_TAG ? - (1 << GCTYPEBITS) : VAL_MAX)" 9944 . 9989)))
          ("DEFUN_ARGS_0" . ((semantic-list "(void)" 26087 . 26093)))
          ("LISPSYM_INITIALLY" (spp-arg-list ("name") 27787 . 27793) . ((symbol "LISP_INITIALLY" 27794 . 27808) (semantic-list "(XLI_BUILTIN_LISPSYM (i##name))" 27809 . 27840)))
          ("ARRAY_MARK_FLAG" . ((symbol "PTRDIFF_MIN" 31139 . 31150)))
          ("XSETBUFFER" (spp-arg-list ("a" "b") 38374 . 38380) . ((semantic-list "(XSETPSEUDOVECTOR (a, b, PVEC_BUFFER))" 38381 . 38419)))
          ("DEFVAR_INT" (spp-arg-list ("lname" "vname" "doc") 91645 . 91664) . 
              ((DO "do" 91670 . 91672) (semantic-list "{						\\
    static struct Lisp_Intfwd i_fwd;		\\
    defvar_int (&i_fwd, lname, &globals.f_ ## vname);		\\
  }" 91673 . 91782) (WHILE "while" 91783 . 91788) (semantic-list "(false)" 91789 . 91796)))
          ("sys_longjmp" (spp-arg-list ("j" "v") 92572 . 92578) . ((symbol "longjmp" 92579 . 92586) (semantic-list "(j, v)" 92587 . 92593)))
          ("AUTO_LIST3" (spp-arg-list ("name" "a" "b" "c") 150781 . 150796) . 
              ((symbol "Lisp_Object" 150805 . 150816) (symbol "name" 150817 . 150821) (punctuation "=" 150822 . 150823) (semantic-list "(USE_STACK_CONS					\\
		      ? STACK_CONS (a, STACK_CONS (b, STACK_CONS (c, Qnil))) \\
		      : list3 (a, b, c))" 150824 . 150937)))
          ("FOR_EACH_TAIL_INTERNAL" (spp-arg-list ("tail" "cycle" "check_quit") 153769 . 153794) . ((FOR "for" 153801 . 153804) (semantic-list "(struct for_each_tail_internal li = { tail, 2, 0, 2 };		\\
       CONSP (tail);							\\
       ((tail) = XCDR (tail),						\\
	((--li.q != 0							\\
	  || ((check_quit) ? maybe_quit () : (void) 0, 0 < --li.n)	\\
	  || (li.q = li.n = li.max <<= 1, li.n >>= USHRT_WIDTH,		\\
	      li.tortoise = (tail), false))				\\
	 && EQ (tail, li.tortoise))					\\
	? (cycle) : (void) 0))" 153805 . 154174)))
          ("GCALIGNMENT" . ((number "8" 8613 . 8614)))
          ("EMACS_LISP_H")
          ("max" (spp-arg-list ("a" "b") 1887 . 1893) . ((semantic-list "((a) > (b) ? (a) : (b))" 1894 . 1917)))
          ("pD" . ((string "\"ll\"" 5714 . 5718)))
          ("case_Lisp_Int" . 
              ((CASE "case" 15844 . 15848) (symbol "Lisp_Int0" 15849 . 15858) (punctuation ":" 15858 . 15859) (CASE "case" 15860 . 15864) (symbol "Lisp_Int1" 15865 . 15874)))
          ("DEFUN_ARGS_MANY" . ((semantic-list "(ptrdiff_t, Lisp_Object *)" 25996 . 26022)))
          ("DEFUN_ARGS_1" . ((semantic-list "(Lisp_Object)" 26115 . 26128)))
          ("SYMBOL_INDEX" (spp-arg-list ("sym") 28274 . 28279) . ((spp-symbol-merge ((symbol "i" 28280 . 28281) (symbol "sym" 28283 . 28286)) 28280 . 28286)))
          ("XSETCONS" (spp-arg-list ("a" "b") 36746 . 36752) . ((semantic-list "((a) = make_lisp_ptr (b, Lisp_Cons))" 36753 . 36789)))
          ("DEFUN" (spp-arg-list ("lname" "fnname" "sname" "minargs" "maxargs" "intspec" "doc") 88980 . 89034) . 
              ((STATIC "static" 89040 . 89046) (STRUCT "struct" 89047 . 89053) (symbol "Lisp_Subr" 89054 . 89063) (symbol "alignas" 89064 . 89071) (semantic-list "(GCALIGNMENT)" 89072 . 89085) (symbol "sname" 89086 . 89091) (punctuation "=" 89092 . 89093) (semantic-list "{ { PVEC_SUBR << PSEUDOVECTOR_AREA_BITS },				\\
       { .a ## maxargs = fnname },					\\
       minargs, maxargs, lname, intspec, 0}" 89102 . 89234) (punctuation ";" 89234 . 89235) (symbol "Lisp_Object" 89244 . 89255) (symbol "fnname" 89256 . 89262)))
          ("SAFE_NALLOCA" (spp-arg-list ("buf" "multiplier" "nitems") 146202 . 146227) . 
              ((DO "do" 146235 . 146237) (semantic-list "{								 \\
    if ((nitems) <= sa_avail / sizeof *(buf) / (multiplier))	 \\
      (buf) = AVAIL_ALLOCA (sizeof *(buf) * (multiplier) * (nitems)); \\
    else							 \\
      {								 \\
	(buf) = xnmalloc (nitems, sizeof *(buf) * (multiplier)); \\
	sa_must_free = true;					 \\
	record_unwind_protect_ptr (xfree, buf);			 \\
      }								 \\
  }" 146238 . 146578) (WHILE "while" 146579 . 146584) (semantic-list "(false)" 146585 . 146592)))
          ("AUTO_LIST4" (spp-arg-list ("name" "a" "b" "c" "d") 150956 . 150974) . 
              ((symbol "Lisp_Object" 150985 . 150996) (symbol "name" 150997 . 151001) (punctuation "=" 151016 . 151017) (semantic-list "(USE_STACK_CONS							\\
	 ? STACK_CONS (a, STACK_CONS (b, STACK_CONS (c,			\\
						     STACK_CONS (d, Qnil)))) \\
	 : list4 (a, b, c, d))" 151018 . 151155)))
          ("min" (spp-arg-list ("a" "b") 1929 . 1935) . ((semantic-list "((a) < (b) ? (a) : (b))" 1936 . 1959)))
          ("BITS_WORD_MAX" . ((symbol "SIZE_MAX" 4444 . 4452)))
          ("USE_LSB_TAG" . ((semantic-list "(VAL_MAX / 2 < INTPTR_MAX)" 9744 . 9770)))
          ("lisp_h_MARKERP" (spp-arg-list ("x") 12198 . 12201) . ((semantic-list "(MISCP (x) && XMISCTYPE (x) == Lisp_Misc_Marker)" 12202 . 12250)))
          ("lisp_h_SYMBOL_TRAPPED_WRITE_P" (spp-arg-list ("sym") 12574 . 12579) . ((semantic-list "(XSYMBOL (sym)->trapped_write)" 12580 . 12610)))
          ("lisp_h_XCAR" (spp-arg-list ("c") 12845 . 12848) . 
              ((symbol "XCONS" 12849 . 12854) (semantic-list "(c)" 12855 . 12858) (punctuation "-" 12858 . 12859) (punctuation ">" 12859 . 12860) (symbol "car" 12860 . 12863)))
          ("lisp_h_check_cons_list" (spp-arg-list nil 13091 . 13093) . ((semantic-list "((void) 0)" 13094 . 13104)))
          ("DEFUN_ARGS_2" . ((semantic-list "(Lisp_Object, Lisp_Object)" 26150 . 26176)))
          ("TAG_SYMOFFSET" (spp-arg-list ("offset") 27342 . 27350) . ((symbol "TAG_PTR" 27351 . 27358) (semantic-list "(Lisp_Symbol, offset)" 27359 . 27380)))
          ("CHECK_RANGED_INTEGER" (spp-arg-list ("x" "lo" "hi") 85330 . 85341) . 
              ((DO "do" 85350 . 85352) (semantic-list "{									\\
    CHECK_NUMBER (x);							\\
    if (! ((lo) <= XINT (x) && XINT (x) <= (hi)))			\\
      args_out_of_range_3						\\
	(x,								\\
	 make_number ((lo) < 0 && (lo) < MOST_NEGATIVE_FIXNUM		\\
		      ? MOST_NEGATIVE_FIXNUM				\\
		      : (lo)),						\\
	 make_number (min (hi, MOST_POSITIVE_FIXNUM)));			\\
  }" 85353 . 85670) (WHILE "while" 85671 . 85676) (semantic-list "(false)" 85677 . 85684)))
          ("FOR_EACH_TAIL" (spp-arg-list ("tail") 152582 . 152588) . ((symbol "FOR_EACH_TAIL_INTERNAL" 152593 . 152615) (semantic-list "(tail, circular_list (tail), true)" 152616 . 152650)))
          ("eassume" (spp-arg-list ("cond") 7102 . 7108) . ((symbol "assume" 7109 . 7115) (semantic-list "(cond)" 7116 . 7122)))
          ("lisp_h_CHECK_NUMBER" (spp-arg-list ("x") 11733 . 11736) . ((symbol "CHECK_TYPE" 11737 . 11747) (semantic-list "(INTEGERP (x), Qintegerp, x)" 11748 . 11776)))
          ("lisp_h_EQ" (spp-arg-list ("x" "y") 12016 . 12022) . ((semantic-list "(XLI (x) == XLI (y))" 12023 . 12043)))
          ("DEFINE_KEY_OPS_AS_MACROS" . ((symbol "true" 14013 . 14017)))
          ("ENUM_BF" (spp-arg-list ("TYPE") 16217 . 16223) . ((ENUM "enum" 16224 . 16228) (symbol "TYPE" 16229 . 16233)))
          ("DEFUN_ARGS_3" . ((semantic-list "(Lisp_Object, Lisp_Object, Lisp_Object)" 26198 . 26237)))
          ("TAG_PTR" (spp-arg-list ("tag" "ptr") 27046 . 27056) . ((semantic-list "(USE_LSB_TAG \\
   ? (intptr_t) (ptr) + (tag) \\
   : (EMACS_INT) (((EMACS_UINT) (tag) << VALBITS) + (uintptr_t) (ptr)))" 27061 . 27179)))
          ("PSEUDOVECTOR_FLAG" . ((semantic-list "(PTRDIFF_MAX - PTRDIFF_MAX / 2)" 31384 . 31415)))
          ("XSETTERMINAL" (spp-arg-list ("a" "b") 38180 . 38186) . ((semantic-list "(XSETPSEUDOVECTOR (a, b, PVEC_TERMINAL))" 38187 . 38227)))
          ("XSETCOMPILED" (spp-arg-list ("a" "b") 38308 . 38314) . ((semantic-list "(XSETPSEUDOVECTOR (a, b, PVEC_COMPILED))" 38315 . 38355)))
          ("STRING_SET_UNIBYTE" (spp-arg-list ("STR") 43265 . 43270) . 
              ((DO "do" 43278 . 43280) (semantic-list "{							\\
    if (XSTRING (STR)->size == 0)			\\
      (STR) = empty_unibyte_string;			\\
    else						\\
      XSTRING (STR)->size_byte = -1;			\\
  }" 43281 . 43429) (WHILE "while" 43430 . 43435) (semantic-list "(false)" 43436 . 43443)))
          ("PSEUDOVECSIZE" (spp-arg-list ("type" "nonlispfield") 51675 . 51695) . ((semantic-list "((offsetof (type, nonlispfield) - header_size) / word_size)" 51702 . 51761)))
          ("UNSIGNED_CMP" (spp-arg-list ("a" "op" "b") 52107 . 52117) . ((semantic-list "(max (sizeof ((a) + 0), sizeof ((b) + 0)) <= sizeof (unsigned)	\\
   ? ((a) + (unsigned) 0) op ((b) + (unsigned) 0)			\\
   : ((a) + (uintmax_t) 0) op ((b) + (uintmax_t) 0))" 52127 . 52298)))
          ("FLOAT_TO_STRING_BUFSIZE" . ((number "350" 119007 . 119010)))
          ("AUTO_CONS_EXPR" (spp-arg-list ("a" "b") 150088 . 150094) . ((semantic-list "(USE_STACK_CONS ? STACK_CONS (a, b) : Fcons (a, b))" 150099 . 150150)))
          ("pMu" . ((symbol "pI" 5237 . 5239) (string "\"u\"" 5239 . 5242)))
          ("lisp_h_XLI" (spp-arg-list ("o") 11664 . 11667) . ((semantic-list "(o)" 11668 . 11671)))
          ("lisp_h_INTEGERP" (spp-arg-list ("x") 12118 . 12121) . ((semantic-list "((XTYPE (x) & (Lisp_Int0 | ~Lisp_Int1)) == Lisp_Int0)" 12122 . 12175)))
          ("DEFUN_ARGS_4" . ((semantic-list "(Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object)" 26259 . 26311)))
          ("DEFINE_NON_NIL_Q_SYMBOL_MACROS" . ((symbol "true" 28642 . 28646)))
          ("FIXNUM_OVERFLOW_P" (spp-arg-list ("i") 36082 . 36085) . ((semantic-list "(! ((0 <= (i) || MOST_NEGATIVE_FIXNUM <= (i)) && (i) <= MOST_POSITIVE_FIXNUM))" 36090 . 36168)))
          ("XSETSYMBOL" (spp-arg-list ("a" "b") 36940 . 36946) . ((semantic-list "((a) = make_lisp_symbol (b))" 36947 . 36975)))
          ("XSETPVECTYPESIZE" (spp-arg-list ("v" "code" "lispsize" "restsize") 37267 . 37296) . ((semantic-list "((v)->header.size = (PSEUDOVECTOR_FLAG			\\
		       | ((code) << PSEUDOVECTOR_AREA_BITS)	\\
		       | ((restsize) << PSEUDOVECTOR_SIZE_BITS) \\
		       | (lispsize)))" 37302 . 37468)))
          ("DEFSYM" (spp-arg-list ("sym" "name") 61549 . 61560))
          ("TYPE_RANGED_INTEGERP" (spp-arg-list ("type" "x") 83485 . 83494) . ((semantic-list "(INTEGERP (x)			      \\
   && (TYPE_SIGNED (type) ? TYPE_MINIMUM (type) <= XINT (x) : 0 <= XINT (x)) \\
   && XINT (x) <= TYPE_MAXIMUM (type))" 83499 . 83640)))
          ("CHECK_NUMBER_OR_FLOAT_COERCE_MARKER" (spp-arg-list ("x") 86428 . 86431) . 
              ((DO "do" 86439 . 86441) (semantic-list "{									\\
    if (MARKERP (x))							\\
      XSETFASTINT (x, marker_position (x));				\\
    else								\\
      CHECK_TYPE (NUMBERP (x), Qnumber_or_marker_p, x);			\\
  }" 86442 . 86613) (WHILE "while" 86614 . 86619) (semantic-list "(false)" 86620 . 86627)))
          ("QUITP" . ((semantic-list "(!NILP (Vquit_flag) && NILP (Vinhibit_quit))" 97558 . 97602)))
          ("ALLOCATE_ZEROED_PSEUDOVECTOR" (spp-arg-list ("type" "field" "tag") 115835 . 115853) . ((semantic-list "((type *) allocate_pseudovector (VECSIZE (type),		       \\
				   PSEUDOVECSIZE (type, field),	       \\
				   VECSIZE (type), tag))" 115866 . 115998)))
          ("WAIT_READING_MAX" . ((symbol "INTMAX_MAX" 136435 . 136445)))
          ("CHILD_SETUP_TYPE" . ((symbol "_Noreturn" 136938 . 136947) (VOID "void" 136948 . 136952)))
          ("SAFE_ALLOCA_LISP" (spp-arg-list ("buf" "nelt") 148016 . 148027) . ((symbol "SAFE_ALLOCA_LISP_EXTRA" 148028 . 148050) (semantic-list "(buf, nelt, 0)" 148051 . 148065)))
          ("DEFINE_GDB_SYMBOL_END" (spp-arg-list ("val") 1796 . 1801) . ((punctuation ";" 1802 . 1803)))
          ("DEFUN_ARGS_5" . ((semantic-list "(Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object, \\
			 Lisp_Object)" 26333 . 26404)))
          ("MOST_NEGATIVE_FIXNUM" . ((semantic-list "(-1 - MOST_POSITIVE_FIXNUM)" 33675 . 33702)))
          ("STRING_SET_MULTIBYTE" (spp-arg-list ("STR") 43575 . 43580) . 
              ((DO "do" 43587 . 43589) (semantic-list "{							\\
    if (XSTRING (STR)->size == 0)			\\
      (STR) = empty_multibyte_string;			\\
    else						\\
      XSTRING (STR)->size_byte = XSTRING (STR)->size;	\\
  }" 43590 . 43755) (WHILE "while" 43756 . 43761) (semantic-list "(false)" 43762 . 43769)))
          ("XSET_HASH_TABLE" (spp-arg-list ("VAR" "PTR") 64793 . 64803) . ((semantic-list "(XSETPSEUDOVECTOR (VAR, PTR, PVEC_HASH_TABLE))" 64811 . 64857)))
          ("CALLMANY" (spp-arg-list ("f" "array") 89558 . 89568) . ((semantic-list "(f)" 89569 . 89572) (semantic-list "(ARRAYELTS (array), array)" 89573 . 89599)))
          ("DEFVAR_KBOARD" (spp-arg-list ("lname" "vname" "doc") 91819 . 91838) . 
              ((DO "do" 91845 . 91847) (semantic-list "{								\\
    static struct Lisp_Kboard_Objfwd ko_fwd;			\\
    defvar_kboard (&ko_fwd, lname, offsetof (KBOARD, vname ## _)); \\
  }" 91848 . 91980) (WHILE "while" 91981 . 91986) (semantic-list "(false)" 91987 . 91994)))
          ("ALLOCATE_PSEUDOVECTOR" (spp-arg-list ("type" "field" "tag") 115492 . 115510) . ((semantic-list "((type *) allocate_pseudovector (VECSIZE (type),		       \\
				   PSEUDOVECSIZE (type, field),	       \\
				   PSEUDOVECSIZE (type, field), tag))" 115524 . 115669)))
          ("DAEMON_RUNNING" . ((semantic-list "(daemon_type >= 0)" 135386 . 135404)))
          ("eabs" (spp-arg-list ("x") 145102 . 145105) . ((semantic-list "((x) < 0 ? -(x) : (x))" 145114 . 145136)))
          ("SAFE_ALLOCA" (spp-arg-list ("size") 145860 . 145866) . ((semantic-list "((size) <= sa_avail				\\
			   ? AVAIL_ALLOCA (size)			\\
			   : (sa_must_free = true, record_xmalloc (size)))" 145867 . 145977)))
          ("AUTO_STRING" (spp-arg-list ("name" "str") 151496 . 151507) . ((symbol "AUTO_STRING_WITH_LEN" 151512 . 151532) (semantic-list "(name, str, strlen (str))" 151533 . 151558)))
          ("DEFINE_GDB_SYMBOL_BEGIN" (spp-arg-list ("type" "id") 1721 . 1731) . 
              ((EXTERN "extern" 1732 . 1738) (symbol "DECLARE_GDB_SYM" 1739 . 1754) (semantic-list "(type, id)" 1755 . 1765)))
          ("ARRAYELTS" (spp-arg-list ("arr") 2017 . 2022) . ((semantic-list "(sizeof (arr) / sizeof (arr)[0])" 2023 . 2055)))
          ("pI" . ((string "\"ll\"" 3788 . 3792)))
          ("eassert" (spp-arg-list ("cond") 7024 . 7030) . ((semantic-list "((void) (false && (cond)))" 7031 . 7057)))
          ("lisp_h_CHECK_SYMBOL" (spp-arg-list ("x") 11804 . 11807) . ((symbol "CHECK_TYPE" 11808 . 11818) (semantic-list "(SYMBOLP (x), Qsymbolp, x)" 11819 . 11845)))
          ("DEFUN_ARGS_6" . ((semantic-list "(Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object, \\
			 Lisp_Object, Lisp_Object)" 26426 . 26510)))
          ("DEFINE_LISP_SYMBOL" (spp-arg-list ("name") 28049 . 28055) . 
              ((symbol "DEFINE_GDB_SYMBOL_BEGIN" 28060 . 28083) (semantic-list "(Lisp_Object, name)" 28084 . 28103) (symbol "DEFINE_GDB_SYMBOL_END" 28108 . 28129) (semantic-list "(LISPSYM_INITIALLY (name))" 28130 . 28156)))
          ("XSETWINDOW_CONFIGURATION" (spp-arg-list ("a" "b") 37966 . 37972) . ((semantic-list "(XSETPSEUDOVECTOR (a, b, PVEC_WINDOW_CONFIGURATION))" 37977 . 38029)))
          ("XSETPROCESS" (spp-arg-list ("a" "b") 38049 . 38055) . ((semantic-list "(XSETPSEUDOVECTOR (a, b, PVEC_PROCESS))" 38056 . 38095)))
          ("CHECK_NUMBER_COERCE_MARKER" (spp-arg-list ("x") 85989 . 85992) . 
              ((DO "do" 86001 . 86003) (semantic-list "{									\\
    if (MARKERP ((x)))							\\
      XSETFASTINT (x, marker_position (x));				\\
    else								\\
      CHECK_TYPE (INTEGERP (x), Qinteger_or_marker_p, x);		\\
  }" 86004 . 86178) (WHILE "while" 86179 . 86184) (semantic-list "(false)" 86185 . 86192)))
          ("sys_setjmp" (spp-arg-list ("j") 92537 . 92540) . ((symbol "setjmp" 92541 . 92547) (semantic-list "(j)" 92548 . 92551)))
          ("INTEGER_TO_CONS" (spp-arg-list ("i") 101588 . 101591) . ((semantic-list "(! FIXNUM_OVERFLOW_P (i)					    \\
   ? make_number (i)						    \\
   : EXPR_SIGNED (i) ? intbig_to_lisp (i) : uintbig_to_lisp (i))" 101604 . 101735)))
          ("USE_SAFE_ALLOCA" . 
              ((symbol "ptrdiff_t" 145627 . 145636) (symbol "sa_avail" 145637 . 145645) (punctuation "=" 145646 . 145647) (symbol "MAX_ALLOCA" 145648 . 145658) (punctuation ";" 145658 . 145659) (symbol "ptrdiff_t" 145664 . 145673) (symbol "sa_count" 145674 . 145682) (punctuation "=" 145683 . 145684) (symbol "SPECPDL_INDEX" 145685 . 145698) (semantic-list "()" 145699 . 145701) (punctuation ";" 145701 . 145702) (BOOL "bool" 145703 . 145707) (symbol "sa_must_free" 145708 . 145720) (punctuation "=" 145721 . 145722) (symbol "false" 145723 . 145728)))
          ("EMACS_INT_MAX" . ((symbol "LLONG_MAX" 3225 . 3234)))
          ("VAL_MAX" . ((semantic-list "(EMACS_INT_MAX >> (GCTYPEBITS - 1))" 9290 . 9325)))
          ("lisp_h_MISCP" (spp-arg-list ("x") 12271 . 12274) . ((semantic-list "(XTYPE (x) == Lisp_Misc)" 12275 . 12299)))
          ("LISP_INITIALLY" (spp-arg-list ("i") 21812 . 21815) . ((semantic-list "(i)" 21816 . 21819)))
          ("DEFUN_ARGS_7" . ((semantic-list "(Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object, \\
			 Lisp_Object, Lisp_Object, Lisp_Object)" 26532 . 26629)))
          ("XLI_BUILTIN_LISPSYM" (spp-arg-list ("iname") 27572 . 27579) . ((symbol "TAG_SYMOFFSET" 27580 . 27593) (semantic-list "((iname) * sizeof *lispsym)" 27594 . 27621)))
          ("MOST_POSITIVE_FIXNUM" . ((semantic-list "(EMACS_INT_MAX >> INTTYPEBITS)" 33615 . 33645)))
          ("USE_STACK_LISP_OBJECTS" . ((symbol "true" 148860 . 148864)))
          ("lisp_h_XCONS" (spp-arg-list ("a") 12924 . 12927) . ((semantic-list "(eassert (CONSP (a)), (struct Lisp_Cons *) XUNTAG (a, Lisp_Cons))" 12933 . 12998)))
          ("lisp_h_XHASH" (spp-arg-list ("a") 13019 . 13022) . ((symbol "XUINT" 13023 . 13028) (semantic-list "(a)" 13029 . 13032)))
          ("DEFUN_ARGS_8" . ((semantic-list "(Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object, \\
			 Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object)" 26651 . 26761)))
          ("XSETINT" (spp-arg-list ("a" "b") 36649 . 36655) . ((semantic-list "((a) = make_number (b))" 36656 . 36679)))
          ("XSETMISC" (spp-arg-list ("a" "b") 37054 . 37060) . ((semantic-list "((a) = make_lisp_ptr (b, Lisp_Misc))" 37061 . 37097)))
          ("XSETPSEUDOVECTOR" (spp-arg-list ("a" "b" "code") 37564 . 37576) . ((symbol "XSETTYPED_PSEUDOVECTOR" 37581 . 37603) (semantic-list "(a, b,					\\
			  (((struct vectorlike_header *)	\\
			    XUNTAG (a, Lisp_Vectorlike))	\\
			   ->size),				\\
			  code)" 37604 . 37723)))
          ("XSETSUBR" (spp-arg-list ("a" "b") 38244 . 38250) . ((semantic-list "(XSETPSEUDOVECTOR (a, b, PVEC_SUBR))" 38251 . 38287)))
          ("STRING_BYTES_BOUND" . ((semantic-list "((ptrdiff_t) min (MOST_POSITIVE_FIXNUM, min (SIZE_MAX, PTRDIFF_MAX) - 1))" 43127 . 43200)))
          ("_UCHAR_T")
          ("CALLN" (spp-arg-list ("f" "...") 89908 . 89916) . ((symbol "CALLMANY" 89917 . 89925) (semantic-list "(f, ((Lisp_Object []) {__VA_ARGS__}))" 89926 . 89963)))
          ("GCALIGNED")
          ("XSETFLOAT" (spp-arg-list ("a" "b") 36993 . 36999) . ((semantic-list "((a) = make_lisp_ptr (b, Lisp_Float))" 37000 . 37037)))
          ("XSETPVECTYPE" (spp-arg-list ("v" "code") 37147 . 37156) . ((semantic-list "((v)->header.size |= PSEUDOVECTOR_FLAG | ((code) << PSEUDOVECTOR_AREA_BITS))" 37166 . 37242)))
          ("XSETTYPED_PSEUDOVECTOR" (spp-arg-list ("a" "b" "size" "code") 37754 . 37772) . ((semantic-list "(XSETVECTOR (a, b),							\\
   eassert ((size & (PSEUDOVECTOR_FLAG | PVEC_TYPE_MASK))		\\
	    == (PSEUDOVECTOR_FLAG | (code << PSEUDOVECTOR_AREA_BITS))))" 37779 . 37932)))
          ("XSETWINDOW" (spp-arg-list ("a" "b") 38114 . 38120) . ((semantic-list "(XSETPSEUDOVECTOR (a, b, PVEC_WINDOW))" 38121 . 38159)))
          ("XSETBOOL_VECTOR" (spp-arg-list ("a" "b") 38515 . 38521) . ((semantic-list "(XSETPSEUDOVECTOR (a, b, PVEC_BOOL_VECTOR))" 38522 . 38565)))
          ("XSETTHREAD" (spp-arg-list ("a" "b") 38664 . 38670) . ((semantic-list "(XSETPSEUDOVECTOR (a, b, PVEC_THREAD))" 38671 . 38709)))
          ("XSETMUTEX" (spp-arg-list ("a" "b") 38727 . 38733) . ((semantic-list "(XSETPSEUDOVECTOR (a, b, PVEC_MUTEX))" 38734 . 38771)))
          ("DEFVAR_LISP" (spp-arg-list ("lname" "vname" "doc") 91119 . 91138) . 
              ((DO "do" 91144 . 91146) (semantic-list "{						\\
    static struct Lisp_Objfwd o_fwd;		\\
    defvar_lisp (&o_fwd, lname, &globals.f_ ## vname);		\\
  }" 91147 . 91257) (WHILE "while" 91258 . 91263) (semantic-list "(false)" 91264 . 91271)))
          ("SAFE_ALLOCA_STRING" (spp-arg-list ("ptr" "string") 146684 . 146697) . 
              ((DO "do" 146704 . 146706) (semantic-list "{							\\
    (ptr) = SAFE_ALLOCA (SBYTES (string) + 1);		\\
    memcpy (ptr, SDATA (string), SBYTES (string) + 1);	\\
  }" 146707 . 146827) (WHILE "while" 146828 . 146833) (semantic-list "(false)" 146834 . 146841)))
          ("DECLARE_GDB_SYM" (spp-arg-list ("type" "id") 1508 . 1518) . 
              ((symbol "type" 1519 . 1523) (CONST "const" 1524 . 1529) (symbol "id" 1530 . 1532) (symbol "EXTERNALLY_VISIBLE" 1533 . 1551)))
          ("GCTYPEBITS" . ((number "3" 2162 . 2163)))
          ("lisp_h_CHECK_TYPE" (spp-arg-list ("ok" "predicate" "x") 11871 . 11889) . ((semantic-list "((ok) ? (void) 0 : wrong_type_argument (predicate, x))" 11895 . 11949)))
          ("lisp_h_SYMBOL_VAL" (spp-arg-list ("sym") 12636 . 12641) . ((semantic-list "(eassert ((sym)->redirect == SYMBOL_PLAINVAL), (sym)->val.value)" 12647 . 12711)))
          ("EXFUN" (spp-arg-list ("fnname" "maxargs") 25790 . 25807) . 
              ((EXTERN "extern" 25812 . 25818) (symbol "Lisp_Object" 25819 . 25830) (symbol "fnname" 25831 . 25837) (spp-symbol-merge ((symbol "DEFUN_ARGS_" 25838 . 25849) (symbol "maxargs" 25853 . 25860)) 25838 . 25860)))
          ("XSETSTRING" (spp-arg-list ("a" "b") 36876 . 36882) . ((semantic-list "((a) = make_lisp_ptr (b, Lisp_String))" 36883 . 36921)))
          ("XSETCONDVAR" (spp-arg-list ("a" "b") 38791 . 38797) . ((semantic-list "(XSETPSEUDOVECTOR (a, b, PVEC_CONDVAR))" 38798 . 38837)))
          ("CONS_TO_INTEGER" (spp-arg-list ("cons" "type" "var") 102059 . 102076) . ((semantic-list "(TYPE_SIGNED (type)							\\
  ? ((var) = cons_to_signed (cons, TYPE_MINIMUM (type), TYPE_MAXIMUM (type))) \\
  : ((var) = cons_to_unsigned (cons, TYPE_MAXIMUM (type))))" 102083 . 102250)))
          ("AVAIL_ALLOCA" (spp-arg-list ("size") 145750 . 145756) . ((semantic-list "(sa_avail -= (size), alloca (size))" 145757 . 145792)))
          ("SAFE_ALLOCA_LISP_EXTRA" (spp-arg-list ("buf" "nelt" "extra") 147218 . 147236) . 
              ((DO "do" 147248 . 147250) (semantic-list "{							       \\
    ptrdiff_t alloca_nbytes;				       \\
    if (INT_MULTIPLY_WRAPV (nelt, word_size, &alloca_nbytes)   \\
	|| INT_ADD_WRAPV (alloca_nbytes, extra, &alloca_nbytes) \\
	|| SIZE_MAX < alloca_nbytes)			       \\
      memory_full (SIZE_MAX);				       \\
    else if (alloca_nbytes <= sa_avail)			       \\
      (buf) = AVAIL_ALLOCA (alloca_nbytes);		       \\
    else						       \\
      {							       \\
	Lisp_Object arg_;				       \\
	(buf) = xmalloc (alloca_nbytes);		       \\
	arg_ = make_save_memory (buf, nelt);		       \\
	sa_must_free = true;				       \\
	record_unwind_protect (free_save_value, arg_);	       \\
      }							       \\
  }" 147251 . 147907) (WHILE "while" 147908 . 147913) (semantic-list "(false)" 147914 . 147921)))
          ("STACK_CONS" (spp-arg-list ("a" "b") 149985 . 149991) . ((symbol "make_lisp_ptr" 149996 . 150009) (semantic-list "(&((union Aligned_Cons) { { a, { b } } }).s, Lisp_Cons)" 150010 . 150065)))
          ("BOOL_VECTOR_BITS_PER_CHAR" . ((number "8" 4071 . 4072)))
          ("lisp_h_XIL" (spp-arg-list ("i") 11691 . 11694) . ((semantic-list "(i)" 11695 . 11698)))
          ("lisp_h_FLOATP" (spp-arg-list ("x") 12065 . 12068) . ((semantic-list "(XTYPE (x) == Lisp_Float)" 12069 . 12094)))
          ("lisp_h_XCDR" (spp-arg-list ("c") 12883 . 12886) . 
              ((symbol "XCONS" 12887 . 12892) (semantic-list "(c)" 12893 . 12896) (punctuation "-" 12896 . 12897) (punctuation ">" 12897 . 12898) (symbol "u" 12898 . 12899) (punctuation "." 12899 . 12900) (symbol "cdr" 12900 . 12903)))
          ("INTMASK" . ((semantic-list "(EMACS_INT_MAX >> (INTTYPEBITS - 1))" 15785 . 15821)))
          ("XSETFASTINT" (spp-arg-list ("a" "b") 36699 . 36705) . ((semantic-list "((a) = make_natnum (b))" 36706 . 36729)))
          ("XSETCHAR_TABLE" (spp-arg-list ("a" "b") 38442 . 38448) . ((semantic-list "(XSETPSEUDOVECTOR (a, b, PVEC_CHAR_TABLE))" 38449 . 38491)))
          ("XSETSUB_CHAR_TABLE" (spp-arg-list ("a" "b") 38592 . 38598) . ((semantic-list "(XSETPSEUDOVECTOR (a, b, PVEC_SUB_CHAR_TABLE))" 38599 . 38645)))
          ("VECSIZE" (spp-arg-list ("type") 51384 . 51390) . ((semantic-list "((sizeof (type) - header_size + word_size - 1) / word_size)" 51400 . 51459)))
          ("ASCII_CHAR_P" (spp-arg-list ("c") 52361 . 52364) . ((symbol "UNSIGNED_CMP" 52365 . 52377) (semantic-list "(c, <, 0x80)" 52378 . 52390)))
          ("DEFVAR_LISP_NOPRO" (spp-arg-list ("lname" "vname" "doc") 91297 . 91316) . 
              ((DO "do" 91321 . 91323) (semantic-list "{						\\
    static struct Lisp_Objfwd o_fwd;		\\
    defvar_lisp_nopro (&o_fwd, lname, &globals.f_ ## vname);	\\
  }" 91324 . 91439) (WHILE "while" 91440 . 91445) (semantic-list "(false)" 91446 . 91453)))
          ("DEFVAR_BOOL" (spp-arg-list ("lname" "vname" "doc") 91473 . 91492) . 
              ((DO "do" 91498 . 91500) (semantic-list "{						\\
    static struct Lisp_Boolfwd b_fwd;		\\
    defvar_bool (&b_fwd, lname, &globals.f_ ## vname);		\\
  }" 91501 . 91612) (WHILE "while" 91613 . 91618) (semantic-list "(false)" 91619 . 91626)))
          ("AUTO_LIST1" (spp-arg-list ("name" "a") 150518 . 150527) . 
              ((symbol "Lisp_Object" 150537 . 150548) (symbol "name" 150549 . 150553) (punctuation "=" 150554 . 150555) (semantic-list "(USE_STACK_CONS ? STACK_CONS (a, Qnil) : list1 (a))" 150556 . 150607)))
          ("lisp_h_CONSP" (spp-arg-list ("x") 11970 . 11973) . ((semantic-list "(XTYPE (x) == Lisp_Cons)" 11974 . 11998)))
          ("lisp_h_NILP" (spp-arg-list ("x") 12319 . 12322) . ((symbol "EQ" 12323 . 12325) (semantic-list "(x, Qnil)" 12326 . 12335)))
          ("lisp_h_SET_SYMBOL_VAL" (spp-arg-list ("sym" "v") 12365 . 12373) . ((semantic-list "(eassert ((sym)->redirect == SYMBOL_PLAINVAL), (sym)->val.value = (v))" 12379 . 12449)))
          ("lisp_h_SYMBOL_CONSTANT_P" (spp-arg-list ("sym") 12482 . 12487) . ((semantic-list "(XSYMBOL (sym)->trapped_write == SYMBOL_NOWRITE)" 12488 . 12536)))
          ("lisp_h_SYMBOLP" (spp-arg-list ("x") 12734 . 12737) . ((semantic-list "(XTYPE (x) == Lisp_Symbol)" 12738 . 12764)))
          ("lisp_h_VECTORLIKEP" (spp-arg-list ("x") 12791 . 12794) . ((semantic-list "(XTYPE (x) == Lisp_Vectorlike)" 12795 . 12825)))
          ("DEFUN_ARGS_UNEVALLED" . ((semantic-list "(Lisp_Object)" 26052 . 26065)))
          ("XSETVECTOR" (spp-arg-list ("a" "b") 36808 . 36814) . ((semantic-list "((a) = make_lisp_ptr (b, Lisp_Vectorlike))" 36815 . 36857)))
          ("CHECK_TYPE_RANGED_INTEGER" (spp-arg-list ("type" "x") 85718 . 85727) . 
              ((DO "do" 85732 . 85734) (semantic-list "{									\\
    if (TYPE_SIGNED (type))						\\
      CHECK_RANGED_INTEGER (x, TYPE_MINIMUM (type), TYPE_MAXIMUM (type)); \\
    else								\\
      CHECK_RANGED_INTEGER (x, 0, TYPE_MAXIMUM (type));			\\
  }" 85735 . 85939) (WHILE "while" 85940 . 85945) (semantic-list "(false)" 85946 . 85953)))
          ("IS_DAEMON" . ((semantic-list "(daemon_type != 0)" 135344 . 135362)))
          ("make_fixnum_or_float" (spp-arg-list ("val") 145263 . 145268) . ((semantic-list "(FIXNUM_OVERFLOW_P (val) ? make_float (val) : make_number (val))" 145274 . 145338)))
          ("SAFE_FREE" (spp-arg-list nil 146927 . 146929) . 
              ((DO "do" 146936 . 146938) (semantic-list "{					\\
    if (sa_must_free) {			\\
      sa_must_free = false;		\\
      unbind_to (sa_count, Qnil);	\\
    }					\\
  }" 146939 . 147057) (WHILE "while" 147058 . 147063) (semantic-list "(false)" 147064 . 147071)))
          ("AUTO_CONS" (spp-arg-list ("name" "a" "b") 150446 . 150458) . 
              ((symbol "Lisp_Object" 150459 . 150470) (symbol "name" 150471 . 150475) (punctuation "=" 150476 . 150477) (symbol "AUTO_CONS_EXPR" 150478 . 150492) (semantic-list "(a, b)" 150493 . 150499)))
          ("AUTO_LIST2" (spp-arg-list ("name" "a" "b") 150626 . 150638) . 
              ((symbol "Lisp_Object" 150648 . 150659) (symbol "name" 150660 . 150664) (punctuation "=" 150665 . 150666) (semantic-list "(USE_STACK_CONS					\\
		      ? STACK_CONS (a, STACK_CONS (b, Qnil))		\\
		      : list2 (a, b))" 150667 . 150762)))
          ("AUTO_STRING_WITH_LEN" (spp-arg-list ("name" "str" "len") 151929 . 151945) . 
              ((symbol "Lisp_Object" 151953 . 151964) (symbol "name" 151965 . 151969) (punctuation "=" 151970 . 151971) (semantic-list "(USE_STACK_STRING							\\
     ? (make_lisp_ptr							\\
	((&((union Aligned_String) {{len, -1, 0, (unsigned char *) (str)}}).s), \\
	 Lisp_String))							\\
     : make_unibyte_string (str, len))" 151984 . 152177)))
          ("FOR_EACH_TAIL_SAFE" (spp-arg-list ("tail") 152807 . 152813) . ((symbol "FOR_EACH_TAIL_INTERNAL" 152818 . 152840) (semantic-list "(tail, (void) ((tail) = Qnil), false)" 152841 . 152878)))
          ("FOR_EACH_ALIST_VALUE" (spp-arg-list ("head_var" "list_var" "value_var") 154247 . 154278) . ((FOR "for" 154284 . 154287) (semantic-list "((list_var) = (head_var);						\\
       (CONSP (list_var) && ((value_var) = XCDR (XCAR (list_var)), true)); \\
       (list_var) = XCDR (list_var))" 154288 . 154434)))
          )
)
    (semanticdb-table "semanticdb-table"
      :major-mode c-mode
      :tags 
        '( ("INLINE" variable (:constant-flag t) nil [803 809])
            ("config.h" include (:system-flag t) nil [824 843])
            ("errno.h" include (:system-flag t) nil [845 863])
            ("fcntl.h" include (:system-flag t) nil [864 882])
            ("stdlib.h" include (:system-flag t) nil [883 902])
            ("sys/file.h" include (:system-flag t) nil [904 925])
            ("unistd.h" include (:system-flag t) nil [926 945])
            ("close-stream.h" include (:system-flag t) nil [947 972])
            ("MAIN_PROGRAM" variable (:constant-flag t) nil [982 994])
            ("lisp.h" include nil nil [995 1012])
            ("sysstdio.h" include nil nil [1013 1034])
            ("intervals.h" include nil nil [1562 1584])
            ("character.h" include nil nil [1585 1607])
            ("buffer.h" include nil nil [1608 1627])
            ("window.h" include nil nil [1628 1647])
            ("xwidget.h" include nil nil [1648 1668])
            ("atimer.h" include nil nil [1669 1688])
            ("blockinput.h" include nil nil [1689 1712])
            ("syssignal.h" include nil nil [1713 1735])
            ("process.h" include nil nil [1736 1756])
            ("frame.h" include nil nil [1757 1775])
            ("termhooks.h" include nil nil [1776 1798])
            ("keyboard.h" include nil nil [1799 1820])
            ("keymap.h" include nil nil [1821 1840])
            ("category.h" include nil nil [1841 1862])
            ("charset.h" include nil nil [1863 1883])
            ("composite.h" include nil nil [1884 1906])
            ("dispextern.h" include nil nil [1907 1930])
            ("regex.h" include nil nil [1931 1949])
            ("sheap.h" include nil nil [1950 1968])
            ("syntax.h" include nil nil [1969 1988])
            ("sysselect.h" include nil nil [1989 2011])
            ("systime.h" include nil nil [2012 2032])
            ("puresize.h" include nil nil [2033 2054])
            ("getpagesize.h" include nil nil [2056 2080])
            ("gnutls.h" include nil nil [2081 2100])
            ("emacs_version" variable
               (:dereference 1
                :typemodifiers ("static")
                :constant-flag t
                :default-value "PACKAGE_VERSION"
                :type "char")
                nil [2441 2493])
            ("emacs_copyright" variable
               (:dereference 1
                :typemodifiers ("static")
                :constant-flag t
                :default-value "COPYRIGHT"
                :type "char")
                nil [2494 2542])
            ("emacs_bugreport" variable
               (:dereference 1
                :typemodifiers ("static")
                :constant-flag t
                :default-value "PACKAGE_BUGREPORT"
                :type "char")
                nil [2543 2599])
            ("empty_unibyte_string" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [2666 2723])
            ("empty_multibyte_string" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [2666 2723])
            ("initialized" variable (:type "bool") nil [2962 2979])
            ("might_dump" variable
               (:typemodifiers ("static")
                :type "bool")
                nil [3083 3114])
            ("inhibit_window_system" variable (:type "bool") nil [3270 3297])
            ("running_asynch_code" variable (:type "bool") nil [3444 3469])
            ("noninteractive" variable (:type "bool") nil [4448 4468])
            ("no_site_lisp" variable (:type "bool") nil [4533 4551])
            ("build_details" variable (:type "bool") nil [4613 4632])
            ("daemon_name" variable
               (:pointer 1
                :typemodifiers ("static")
                :type "char")
                nil [4682 4707])
            ("daemon_type" variable (:type "int") nil [4784 4800])
            ("daemon_pipe" variable
               (:dereference 1
                :typemodifiers ("static")
                :type "int")
                nil [4954 4980])
            ("initial_argv" variable
               (:pointer 2
                :type "char")
                nil [5047 5067])
            ("initial_argc" variable (:type "int") nil [5068 5085])
            ("sort_args" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("argc" variable (:type "int") (reparse-symbol arg-sub-list) [5110 5119])
                    ("argv" variable
                       (:pointer 2
                        :type "char")
                        (reparse-symbol arg-sub-list) [5120 5132]))                  
                :type "void")
                nil [5087 5133])
            ("syms_of_emacs" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [5161 5166]))                  
                :type "void")
                nil [5134 5167])
            ("usage_message" variable
               (:pointer 1
                :dereference 1
                :typemodifiers ("static")
                :default-value "{ \"\\
\\n\\
Run Emacs, the extensible, customizable, self-documenting real-time\\n\\
display editor.  The recommended way to start Emacs for normal editing\\n\\
is with no options at all.\\n\\
\\n\\
Run M-x info RET m emacs RET m emacs invocation RET inside Emacs to\\n\\
read the main documentation for these command-line arguments.\\n\\
\\n\\
Initialization options:\\n\\
\\n\\
\",
    \"\\
--batch                     do not do interactive display; implies -q\\n\\
--chdir DIR                 change to directory DIR\\n\\
--daemon, --bg-daemon[=NAME] start a (named) server in the background\\n\\
--fg-daemon[=NAME]          start a (named) server in the foreground\\n\\
--debug-init                enable Emacs Lisp debugger for init file\\n\\
--display, -d DISPLAY       use X server DISPLAY\\n\\
\",
#ifdef HAVE_MODULES
    \"\\
--module-assertions         assert behavior of dynamic modules\\n\\
\",
#endif
    \"\\
--no-build-details          do not add build details such as time stamps\\n\\
--no-desktop                do not load a saved desktop\\n\\
--no-init-file, -q          load neither ~/.emacs nor default.el\\n\\
--no-loadup, -nl            do not load loadup.el into bare Emacs\\n\\
--no-site-file              do not load site-start.el\\n\\
--no-x-resources            do not load X resources\\n\\
--no-site-lisp, -nsl        do not add site-lisp directories to load-path\\n\\
--no-splash                 do not display a splash screen on startup\\n\\
--no-window-system, -nw     do not communicate with X, ignoring $DISPLAY\\n\\
\",
    \"\\
--quick, -Q                 equivalent to:\\n\\
                              -q --no-site-file --no-site-lisp --no-splash\\n\\
                              --no-x-resources\\n\\
--script FILE               run FILE as an Emacs Lisp script\\n\\
--terminal, -t DEVICE       use DEVICE for terminal I/O\\n\\
--user, -u USER             load ~USER/.emacs instead of your own\\n\\
\\n\\
\",
    \"\\
Action options:\\n\\
\\n\\
FILE                    visit FILE\\n\\
+LINE                   go to line LINE in next FILE\\n\\
+LINE:COLUMN            go to line LINE, column COLUMN, in next FILE\\n\\
--directory, -L DIR     prepend DIR to load-path (with :DIR, append DIR)\\n\\
--eval EXPR             evaluate Emacs Lisp expression EXPR\\n\\
--execute EXPR          evaluate Emacs Lisp expression EXPR\\n\\
\",
    \"\\
--file FILE             visit FILE\\n\\
--find-file FILE        visit FILE\\n\\
--funcall, -f FUNC      call Emacs Lisp function FUNC with no arguments\\n\\
--insert FILE           insert contents of FILE into current buffer\\n\\
--kill                  exit without asking for confirmation\\n\\
--load, -l FILE         load Emacs Lisp FILE using the load function\\n\\
--visit FILE            visit FILE\\n\\
\\n\\
\",
    \"\\
Display options:\\n\\
\\n\\
--background-color, -bg COLOR   window background color\\n\\
--basic-display, -D             disable many display features;\\n\\
                                  used for debugging Emacs\\n\\
--border-color, -bd COLOR       main border color\\n\\
--border-width, -bw WIDTH       width of main border\\n\\
\",
    \"\\
--color, --color=MODE           override color mode for character terminals;\\n\\
                                  MODE defaults to `auto', and\\n\\
                                  can also be `never', `always',\\n\\
                                  or a mode name like `ansi8'\\n\\
--cursor-color, -cr COLOR       color of the Emacs cursor indicating point\\n\\
--font, -fn FONT                default font; must be fixed-width\\n\\
--foreground-color, -fg COLOR   window foreground color\\n\\
\",
    \"\\
--fullheight, -fh               make the first frame high as the screen\\n\\
--fullscreen, -fs               make the first frame fullscreen\\n\\
--fullwidth, -fw                make the first frame wide as the screen\\n\\
--maximized, -mm                make the first frame maximized\\n\\
--geometry, -g GEOMETRY         window geometry\\n\\
\",
    \"\\
--no-bitmap-icon, -nbi          do not use picture of gnu for Emacs icon\\n\\
--iconic                        start Emacs in iconified state\\n\\
--internal-border, -ib WIDTH    width between text and main border\\n\\
--line-spacing, -lsp PIXELS     additional space to put between lines\\n\\
--mouse-color, -ms COLOR        mouse cursor color in Emacs window\\n\\
--name NAME                     title for initial Emacs frame\\n\\
\",
    \"\\
--no-blinking-cursor, -nbc      disable blinking cursor\\n\\
--reverse-video, -r, -rv        switch foreground and background\\n\\
--title, -T TITLE               title for initial Emacs frame\\n\\
--vertical-scroll-bars, -vb     enable vertical scroll bars\\n\\
--xrm XRESOURCES                set additional X resources\\n\\
--parent-id XID                 set parent window\\n\\
--help                          display this help and exit\\n\\
--version                       output version information and exit\\n\\
\\n\\
\",
    \"\\
You can generally also specify long option names with a single -; for\\n\\
example, -batch as well as --batch.  You can use any unambiguous\\n\\
abbreviation for a --option.\\n\\
\\n\\
Various environment variables and window system resources also affect\\n\\
the operation of Emacs.  See the main documentation.\\n\\
\\n\\
Report bugs to \" PACKAGE_BUGREPORT \".  First, please see the Bugs\\n\\
section of the Emacs manual or the file BUGS.\\n\"
  }"
                :type "char")
                nil [5298 10581])
            ("fatal_error_in_progress" variable (:type "bool") nil [10632 10661])
            ("setlocale" function
               (:pointer 1
                :typemodifiers ("static")
                :arguments 
                  ( ("cat" variable (:type "int") (reparse-symbol arg-sub-list) [10803 10811])
                    ("locale" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [10812 10831]))                  
                :type "char")
                nil [10778 10847])
            ("using_utf8" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [10942 10947]))                  
                :type "bool")
                nil [10918 11104])
            ("terminate_due_to_signal" function
               (:arguments 
                  ( ("sig" variable (:type "int") (reparse-symbol arg-sub-list) [11260 11268])
                    ("backtrace_limit" variable (:type "int") (reparse-symbol arg-sub-list) [11269 11289]))                  
                :type "void")
                nil [11230 12238])
            ("init_cmdargs" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("argc" variable (:type "int") (reparse-symbol arg-sub-list) [12335 12344])
                    ("argv" variable
                       (:pointer 2
                        :type "char")
                        (reparse-symbol arg-sub-list) [12345 12357])
                    ("skip_args" variable (:type "int") (reparse-symbol arg-sub-list) [12358 12372])
                    ("original_pwd" variable
                       (:pointer 1
                        :type "char")
                        (reparse-symbol arg-sub-list) [12373 12392]))                  
                :type "void")
                nil [12309 17281])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Finvocation_name" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [17309 17326])
                    ("" variable (:type ("Sinvocation_name" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [17327 17344])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [17361 17365]))                  
                :type "int")
                nil [17283 17467])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Finvocation_directory" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [17548 17570])
                    ("" variable (:type ("Sinvocation_directory" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [17571 17593])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [17617 17621]))                  
                :type "int")
                nil [17517 17707])
            ("argmatch" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("argv" variable
                       (:pointer 2
                        :type "char")
                        (reparse-symbol arg-sub-list) [18290 18302])
                    ("argc" variable (:type "int") (reparse-symbol arg-sub-list) [18303 18312])
                    ("sstr" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [18313 18330])
                    ("lstr" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [18331 18348])
                    ("minlen" variable (:type "int") (reparse-symbol arg-sub-list) [18359 18370])
                    ("valptr" variable
                       (:pointer 2
                        :type "char")
                        (reparse-symbol arg-sub-list) [18371 18385])
                    ("skipptr" variable
                       (:pointer 1
                        :type "int")
                        (reparse-symbol arg-sub-list) [18386 18399]))                  
                :type "bool")
                nil [18268 19281])
            ("close_output_streams" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [19451 19456]))                  
                :type "void")
                nil [19417 19817])
            ("main" function
               (:arguments 
                  ( ("argc" variable (:type "int") (reparse-symbol arg-sub-list) [19844 19853])
                    ("argv" variable
                       (:pointer 2
                        :type "char")
                        (reparse-symbol arg-sub-list) [19854 19866]))                  
                :type "int")
                nil [19834 51205])
            ("standard_args" type
               (:members 
                  ( ("name" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol classsubparts) [51382 51399])
                    ("longname" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol classsubparts) [51402 51423])
                    ("priority" variable (:type "int") (reparse-symbol classsubparts) [51426 51439])
                    ("nargs" variable (:type "int") (reparse-symbol classsubparts) [51442 51452]))                  
                :type "struct")
                nil [51357 51455])
            ("standard_args" variable
               (:dereference 1
                :typemodifiers ("static")
                :constant-flag t
                :default-value "{
  { \"-version\", \"--version\", 150, 0 },
  { \"-chdir\", \"--chdir\", 130, 1 },
  { \"-t\", \"--terminal\", 120, 1 },
  { \"-nw\", \"--no-window-system\", 110, 0 },
  { \"-nw\", \"--no-windows\", 110, 0 },
  { \"-batch\", \"--batch\", 100, 0 },
  { \"-script\", \"--script\", 100, 1 },
  { \"-daemon\", \"--daemon\", 99, 0 },
  { \"-bg-daemon\", \"--bg-daemon\", 99, 0 },
  { \"-fg-daemon\", \"--fg-daemon\", 99, 0 },
  { \"-help\", \"--help\", 90, 0 },
  { \"-nl\", \"--no-loadup\", 70, 0 },
  { \"-nsl\", \"--no-site-lisp\", 65, 0 },
  { \"-no-build-details\", \"--no-build-details\", 63, 0 },
#ifdef HAVE_MODULES
  { \"-module-assertions\", \"--module-assertions\", 62, 0 },
#endif
  /* -d must come last before the options handled in startup.el.  */
  { \"-d\", \"--display\", 60, 1 },
  { \"-display\", 0, 60, 1 },
  /* Now for the options handled in `command-line' (startup.el).  */
  /* (Note that to imply -nsl, -Q is partially handled here.)  */
  { \"-Q\", \"--quick\", 55, 0 },
  { \"-quick\", 0, 55, 0 },
  { \"-q\", \"--no-init-file\", 50, 0 },
  { \"-no-init-file\", 0, 50, 0 },
  { \"-no-x-resources\", \"--no-x-resources\", 40, 0 },
  { \"-no-site-file\", \"--no-site-file\", 40, 0 },
  { \"-u\", \"--user\", 30, 1 },
  { \"-user\", 0, 30, 1 },
  { \"-debug-init\", \"--debug-init\", 20, 0 },
  { \"-iconic\", \"--iconic\", 15, 0 },
  { \"-D\", \"--basic-display\", 12, 0},
  { \"-basic-display\", 0, 12, 0},
  { \"-nbc\", \"--no-blinking-cursor\", 12, 0 },
  /* Now for the options handled in `command-line-1' (startup.el).  */
  { \"-nbi\", \"--no-bitmap-icon\", 10, 0 },
  { \"-bg\", \"--background-color\", 10, 1 },
  { \"-background\", 0, 10, 1 },
  { \"-fg\", \"--foreground-color\", 10, 1 },
  { \"-foreground\", 0, 10, 1 },
  { \"-bd\", \"--border-color\", 10, 1 },
  { \"-bw\", \"--border-width\", 10, 1 },
  { \"-ib\", \"--internal-border\", 10, 1 },
  { \"-ms\", \"--mouse-color\", 10, 1 },
  { \"-cr\", \"--cursor-color\", 10, 1 },
  { \"-fn\", \"--font\", 10, 1 },
  { \"-font\", 0, 10, 1 },
  { \"-fs\", \"--fullscreen\", 10, 0 },
  { \"-fw\", \"--fullwidth\", 10, 0 },
  { \"-fh\", \"--fullheight\", 10, 0 },
  { \"-mm\", \"--maximized\", 10, 0 },
  { \"-g\", \"--geometry\", 10, 1 },
  { \"-geometry\", 0, 10, 1 },
  { \"-T\", \"--title\", 10, 1 },
  { \"-title\", 0, 10, 1 },
  { \"-name\", \"--name\", 10, 1 },
  { \"-xrm\", \"--xrm\", 10, 1 },
  { \"-parent-id\", \"--parent-id\", 10, 1 },
  { \"-r\", \"--reverse-video\", 5, 0 },
  { \"-rv\", 0, 5, 0 },
  { \"-reverse\", 0, 5, 0 },
  { \"-hb\", \"--horizontal-scroll-bars\", 5, 0 },
  { \"-vb\", \"--vertical-scroll-bars\", 5, 0 },
  { \"-color\", \"--color\", 5, 0},
  { \"-no-splash\", \"--no-splash\", 3, 0 },
  { \"-no-desktop\", \"--no-desktop\", 3, 0 },
#ifdef HAVE_NS
  { \"-NSAutoLaunch\", 0, 5, 1 },
  { \"-NXAutoLaunch\", 0, 5, 1 },
  { \"-_NSMachLaunch\", 0, 85, 1 },
  { \"-MachLaunch\", 0, 85, 1 },
  { \"-macosx\", 0, 85, 0 },
  { \"-NSHost\", 0, 85, 1 },
#endif
  /* These have the same priority as ordinary file name args,
     so they are not reordered with respect to those.  */
  { \"-L\", \"--directory\", 0, 1 },
  { \"-directory\", 0, 0, 1 },
  { \"-l\", \"--load\", 0, 1 },
  { \"-load\", 0, 0, 1 },
  /* This has no longname, because using --scriptload confuses sort_args,
     because then the --script long option seems to match twice; ie
     you can't have a long option which is a prefix of another long
     option.  In any case, this is entirely an internal option.  */
  { \"-scriptload\", NULL, 0, 1 },
  { \"-f\", \"--funcall\", 0, 1 },
  { \"-funcall\", 0, 0, 1 },
  { \"-eval\", \"--eval\", 0, 1 },
  { \"-execute\", \"--execute\", 0, 1 },
  { \"-find-file\", \"--find-file\", 0, 1 },
  { \"-visit\", \"--visit\", 0, 1 },
  { \"-file\", \"--file\", 0, 1 },
  { \"-insert\", \"--insert\", 0, 1 },
#ifdef HAVE_NS
  { \"-NXOpen\", 0, 0, 1 },
  { \"-NXOpenTemp\", 0, 0, 1 },
  { \"-NSOpen\", 0, 0, 1 },
  { \"-NSOpenTemp\", 0, 0, 1 },
  { \"-GSFilePath\", 0, 0, 1 },
#endif
  /* This should be processed after ordinary file name args and the like.  */
  { \"-kill\", \"--kill\", -10, 0 },
}"
                :type ("standard_args" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [51457 55333])
            ("sort_args" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("argc" variable (:type "int") (reparse-symbol arg-sub-list) [55705 55714])
                    ("argv" variable
                       (:pointer 2
                        :type "char")
                        (reparse-symbol arg-sub-list) [55715 55727]))                  
                :type "void")
                nil [55682 59934])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fkill_emacs" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [59958 59970])
                    ("" variable (:type ("Skill_emacs" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [59971 59983])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [60002 60006])
                    ("" variable (:type ("attributes" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [60403 60414])
                    ("" variable (:type ("noreturn" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [60415 60424]))                  
                :type "int")
                nil [59937 60444])
            ("shut_down_emacs" function
               (:arguments 
                  ( ("sig" variable (:type "int") (reparse-symbol arg-sub-list) [61906 61914])
                    ("stuff" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [61915 61933]))                  
                :type "void")
                nil [61884 63421])
            ("unexec.h" include nil nil [63447 63466])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fdump_emacs" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [63489 63501])
                    ("" variable (:type ("Sdump_emacs" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [63502 63514])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [63531 63535]))                  
                :type "int")
                nil [63468 63836])
            ("emacs_strerror" function
               (:pointer 1
                :arguments 
                  ( ("error_number" variable (:type "int") (reparse-symbol arg-sub-list) [68461 68478]))                  
                :type "char")
                nil [68438 68557])
            ("decode_env_path" function
               (:arguments 
                  ( ("evarname" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [68590 68611])
                    ("defalt" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [68612 68631])
                    ("empty" variable (:type "bool") (reparse-symbol arg-sub-list) [68632 68643]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [68561 72325])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fdaemonp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [72345 72354])
                    ("" variable (:type ("Sdaemonp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [72355 72364])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [72381 72385]))                  
                :type "int")
                nil [72327 72517])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fdaemon_initialized" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [72681 72701])
                    ("" variable (:type ("Sdaemon_initialized" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [72702 72722])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [72739 72743]))                  
                :type "int")
                nil [72652 72935])
            ("syms_of_emacs" function
               (:arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [74655 74660]))                  
                :type "void")
                nil [74635 81748]))          
      :file "emacs.c"
      :pointmax 81749
      :fsize 81748
      :lastmodtime '(22986 14551 0 0)
      :unmatched-syntax '((semantic-list 72936 . 74633) (punctuation 72742 . 72743) (number 72729 . 72730) (number 72726 . 72727) (number 72723 . 72724) (string 72659 . 72679) (semantic-list 72518 . 72650) (punctuation 72384 . 72385) (number 72371 . 72372) (number 72368 . 72369) (number 72365 . 72366) (string 72334 . 72343) (semantic-list 63837 . 66635) (punctuation 63534 . 63535) (number 63521 . 63522) (number 63518 . 63519) (number 63515 . 63516) (string 63475 . 63487) (semantic-list 60445 . 61401) (punctuation 60413 . 60414) (punctuation 60005 . 60006) (string 59990 . 59993) (number 59987 . 59988) (number 59984 . 59985) (string 59944 . 59956) (semantic-list 17708 . 17760) (punctuation 17620 . 17621) (number 17607 . 17608) (number 17604 . 17605) (number 17601 . 17602) (string 17524 . 17546) (semantic-list 17468 . 17515) (punctuation 17364 . 17365) (number 17351 . 17352) (number 17348 . 17349) (number 17345 . 17346) (string 17290 . 17307) (symbol 11220 . 11229))
      :lexical-table 
        '(("MAIN_PROGRAM")
          ("INLINE" . ((symbol "EXTERN_INLINE" 810 . 823)))
          )
)
    (semanticdb-table "semanticdb-table"
      :file "thread.h"
      :fsize 9723
      :lastmodtime '(22986 14552 0 0))
    (semanticdb-table "semanticdb-table"
      :file "blockinput.h"
      :fsize 2324
      :lastmodtime '(22986 14551 0 0))
    (semanticdb-table "semanticdb-table"
      :file "commands.h"
      :fsize 1778
      :lastmodtime '(22986 14551 0 0))
    (semanticdb-table "semanticdb-table"
      :file "keyboard.h"
      :fsize 18470
      :lastmodtime '(22986 14551 0 0))
    (semanticdb-table "semanticdb-table"
      :file "dispextern.h"
      :fsize 124886
      :lastmodtime '(22986 14551 0 0))
    (semanticdb-table "semanticdb-table"
      :file "character.h"
      :fsize 22739
      :lastmodtime '(22986 14551 0 0))
    (semanticdb-table "semanticdb-table"
      :file "sysstdio.h"
      :fsize 2125
      :lastmodtime '(22986 14552 0 0))
    (semanticdb-table "semanticdb-table"
      :file "intervals.h"
      :fsize 11604
      :lastmodtime '(22986 14551 0 0))
    (semanticdb-table "semanticdb-table"
      :file "window.h"
      :fsize 40708
      :lastmodtime '(22986 14552 0 0))
    (semanticdb-table "semanticdb-table"
      :file "xwidget.h"
      :fsize 3624
      :lastmodtime '(22986 14552 0 0))
    (semanticdb-table "semanticdb-table"
      :file "atimer.h"
      :fsize 2172
      :lastmodtime '(22986 14551 0 0))
    (semanticdb-table "semanticdb-table"
      :file "syssignal.h"
      :fsize 2367
      :lastmodtime '(22986 14552 0 0))
    (semanticdb-table "semanticdb-table"
      :file "process.h"
      :fsize 9726
      :lastmodtime '(22986 14552 0 0))
    (semanticdb-table "semanticdb-table"
      :file "frame.h"
      :fsize 55941
      :lastmodtime '(22986 14551 0 0))
    (semanticdb-table "semanticdb-table"
      :file "termhooks.h"
      :fsize 28748
      :lastmodtime '(22986 14552 0 0))
    (semanticdb-table "semanticdb-table"
      :file "keymap.h"
      :fsize 2302
      :lastmodtime '(22986 14552 0 0))
    (semanticdb-table "semanticdb-table"
      :file "category.h"
      :fsize 4606
      :lastmodtime '(22986 14551 0 0))
    (semanticdb-table "semanticdb-table"
      :file "charset.h"
      :fsize 19498
      :lastmodtime '(22986 14551 0 0))
    (semanticdb-table "semanticdb-table"
      :file "composite.h"
      :fsize 12842
      :lastmodtime '(22986 14551 0 0))
    (semanticdb-table "semanticdb-table"
      :file "regex.h"
      :fsize 23784
      :lastmodtime '(22986 14552 0 0))
    (semanticdb-table "semanticdb-table"
      :file "sheap.h"
      :fsize 1162
      :lastmodtime '(22986 14552 0 0))
    (semanticdb-table "semanticdb-table"
      :file "syntax.h"
      :fsize 7762
      :lastmodtime '(22986 14552 0 0))
    (semanticdb-table "semanticdb-table"
      :file "sysselect.h"
      :fsize 2284
      :lastmodtime '(22986 14552 0 0))
    (semanticdb-table "semanticdb-table"
      :file "systime.h"
      :fsize 3187
      :lastmodtime '(22986 14552 0 0))
    (semanticdb-table "semanticdb-table"
      :file "puresize.h"
      :fsize 3443
      :lastmodtime '(22986 14552 0 0))
    (semanticdb-table "semanticdb-table"
      :file "getpagesize.h"
      :fsize 1543
      :lastmodtime '(22986 14551 0 0))
    (semanticdb-table "semanticdb-table"
      :file "gnutls.h"
      :fsize 3146
      :lastmodtime '(22986 14551 0 0))
    (semanticdb-table "semanticdb-table"
      :file "unexec.h"
      :fsize 116
      :lastmodtime '(22986 14552 0 0))
    (semanticdb-table "semanticdb-table"
      :major-mode c-mode
      :tags 
        '( ("config.h" include (:system-flag t) nil [789 808])
            ("errno.h" include (:system-flag t) nil [810 828])
            ("stdio.h" include (:system-flag t) nil [829 847])
            ("stdlib.h" include (:system-flag t) nil [848 867])
            ("limits.h" include (:system-flag t) nil [868 887])
            ("signal.h" include (:system-flag t) nil [910 929])
            ("lisp.h" include nil nil [1012 1029])
            ("dispextern.h" include nil nil [1030 1053])
            ("intervals.h" include nil nil [1054 1076])
            ("puresize.h" include nil nil [1077 1098])
            ("sheap.h" include nil nil [1099 1117])
            ("systime.h" include nil nil [1118 1138])
            ("character.h" include nil nil [1139 1161])
            ("buffer.h" include nil nil [1162 1181])
            ("window.h" include nil nil [1182 1201])
            ("keyboard.h" include nil nil [1202 1223])
            ("frame.h" include nil nil [1224 1242])
            ("blockinput.h" include nil nil [1243 1266])
            ("termhooks.h" include nil nil [1267 1289])
            ("flexmember.h" include (:system-flag t) nil [1399 1422])
            ("verify.h" include (:system-flag t) nil [1423 1442])
            ("execinfo.h" include (:system-flag t) nil [1443 1464])
            ("unistd.h" include (:system-flag t) nil [2534 2553])
            ("fcntl.h" include (:system-flag t) nil [2554 2572])
            ("alloc_unexec_pre" function
               (:arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [4645 4650]))                  
                :type "void")
                nil [4622 4867])
            ("alloc_unexec_post" function
               (:arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [4893 4898]))                  
                :type "void")
                nil [4869 5022])
            ("MARK_STRING" variable (:constant-flag t) nil [5143 5154])
            ("UNMARK_STRING" variable (:constant-flag t) nil [5198 5211])
            ("STRING_MARKED_P" variable (:constant-flag t) nil [5255 5270])
            ("VECTOR_MARK" variable (:constant-flag t) nil [5320 5331])
            ("VECTOR_UNMARK" variable (:constant-flag t) nil [5382 5395])
            ("VECTOR_MARKED_P" variable (:constant-flag t) nil [5446 5461])
            ("GC_DEFAULT_THRESHOLD" variable (:constant-flag t) nil [5574 5594])
            ("globals" variable (:type ("emacs_globals" type
                 (:prototype t
                  :type "struct")
                  nil nil)) nil [5642 5671])
            ("consing_since_gc" variable (:type ("EMACS_INT" type (:type "class") nil nil)) nil [5732 5759])
            ("gc_relative_threshold" variable (:type ("EMACS_INT" type (:type "class") nil nil)) nil [5821 5853])
            ("memory_full_cons_threshold" variable (:type ("EMACS_INT" type (:type "class") nil nil)) nil [5947 5984])
            ("gc_in_progress" variable (:type "bool") nil [6010 6030])
            ("total_conses" variable
               (:typemodifiers ("static")
                :type ("EMACS_INT" type (:type "class") nil nil))
                nil [6076 6151])
            ("total_markers" variable
               (:typemodifiers ("static")
                :type ("EMACS_INT" type (:type "class") nil nil))
                nil [6076 6151])
            ("total_symbols" variable
               (:typemodifiers ("static")
                :type ("EMACS_INT" type (:type "class") nil nil))
                nil [6076 6151])
            ("total_buffers" variable
               (:typemodifiers ("static")
                :type ("EMACS_INT" type (:type "class") nil nil))
                nil [6076 6151])
            ("total_free_conses" variable
               (:typemodifiers ("static")
                :type ("EMACS_INT" type (:type "class") nil nil))
                nil [6152 6227])
            ("total_free_markers" variable
               (:typemodifiers ("static")
                :type ("EMACS_INT" type (:type "class") nil nil))
                nil [6152 6227])
            ("total_free_symbols" variable
               (:typemodifiers ("static")
                :type ("EMACS_INT" type (:type "class") nil nil))
                nil [6152 6227])
            ("total_free_floats" variable
               (:typemodifiers ("static")
                :type ("EMACS_INT" type (:type "class") nil nil))
                nil [6228 6277])
            ("total_floats" variable
               (:typemodifiers ("static")
                :type ("EMACS_INT" type (:type "class") nil nil))
                nil [6228 6277])
            ("spare_memory" variable
               (:pointer 1
                :dereference 1
                :typemodifiers ("static")
                :type "char")
                nil [6442 6471])
            ("SPARE_MEMORY" variable (:constant-flag t) nil [6627 6639])
            ("pure" variable
               (:dereference 1
                :default-value "{1,}"
                :type ("EMACS_INT" type (:type "class") nil nil))
                nil [6983 7063])
            ("PUREBEG" variable (:constant-flag t) nil [7072 7079])
            ("purebeg" variable
               (:pointer 1
                :typemodifiers ("static")
                :type "char")
                nil [7143 7164])
            ("pure_size" variable
               (:typemodifiers ("static")
                :type ("ptrdiff_t" type (:type "class") nil nil))
                nil [7165 7192])
            ("pure_bytes_used_before_overflow" variable
               (:typemodifiers ("static")
                :type ("ptrdiff_t" type (:type "class") nil nil))
                nil [7335 7384])
            ("pure_bytes_used_lisp" variable
               (:typemodifiers ("static")
                :type ("ptrdiff_t" type (:type "class") nil nil))
                nil [7459 7497])
            ("pure_bytes_used_non_lisp" variable
               (:typemodifiers ("static")
                :type ("ptrdiff_t" type (:type "class") nil nil))
                nil [7571 7613])
            ("pending_malloc_warning" variable
               (:pointer 1
                :constant-flag t
                :type "char")
                nil [7699 7734])
            ("SUSPICIOUS_OBJECT_CHECKING" variable (:constant-flag t) nil [7972 7998])
            ("suspicious_free_record" type
               (:members 
                  ( ("suspicious_object" variable
                       (:pointer 1
                        :type "void")
                        (reparse-symbol classsubparts) [8070 8094])
                    ("backtrace" variable
                       (:pointer 1
                        :dereference 1
                        :type "void")
                        (reparse-symbol classsubparts) [8097 8118]))                  
                :type "struct")
                nil [8036 8121])
            ("suspicious_objects" variable
               (:pointer 1
                :dereference 1
                :typemodifiers ("static")
                :type "void")
                nil [8122 8158])
            ("suspicious_object_index" variable
               (:typemodifiers ("static")
                :type "int")
                nil [8159 8194])
            ("EXTERNALLY_VISIBLE" variable (:type "int") nil [8253 8272])
            ("suspicious_free_history_index" variable
               (:typemodifiers ("static")
                :type "int")
                nil [8273 8314])
            ("find_suspicious_object_in_range" function
               (:prototype-flag t
                :pointer 1
                :typemodifiers ("static")
                :arguments 
                  ( ("begin" variable
                       (:pointer 1
                        :type "void")
                        (reparse-symbol arg-sub-list) [8481 8493])
                    ("end" variable
                       (:pointer 1
                        :type "void")
                        (reparse-symbol arg-sub-list) [8494 8504]))                  
                :type "void")
                nil [8435 8505])
            ("detect_suspicious_free" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("ptr" variable
                       (:pointer 1
                        :type "void")
                        (reparse-symbol arg-sub-list) [8542 8552]))                  
                :type "void")
                nil [8506 8553])
            ("MAX_SAVE_STACK" variable (:constant-flag t) nil [8762 8776])
            ("stack_copy" variable
               (:pointer 1
                :typemodifiers ("static")
                :type "char")
                nil [8880 8904])
            ("stack_copy_size" variable
               (:typemodifiers ("static")
                :type ("ptrdiff_t" type (:type "class") nil nil))
                nil [8905 8938])
            ("no_sanitize_memcpy" function
               (:arguments 
                  ( ("dest" variable
                       (:pointer 1
                        :type "void")
                        (reparse-symbol arg-sub-list) [9110 9121])
                    ("src" variable
                       (:pointer 1
                        :constant-flag t
                        :type "void")
                        (reparse-symbol arg-sub-list) [9122 9138])
                    ("size" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [9139 9151]))                  
                :type ("ATTRIBUTE_NO_SANITIZE_ADDRESS" type (:type "class") nil nil))
                nil [9060 9369])
            ("mark_terminals" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [9432 9437]))                  
                :type "void")
                nil [9404 9438])
            ("gc_sweep" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [9461 9466]))                  
                :type "void")
                nil [9439 9467])
            ("make_pure_vector" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [9505 9515]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [9468 9516])
            ("mark_buffer" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("buffer" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [9542 9558]))                  
                :type "void")
                nil [9517 9559])
            ("refill_memory_reserve" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [9669 9674]))                  
                :type "void")
                nil [9634 9675])
            ("compact_small_strings" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [9718 9723]))                  
                :type "void")
                nil [9683 9724])
            ("free_large_strings" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [9757 9762]))                  
                :type "void")
                nil [9725 9763])
            ("EXTERNALLY_VISIBLE" variable (:type "int") nil [9822 9841])
            ("mem_type" type
               (:members 
                  ( ("MEM_TYPE_NON_LISP" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [10083 10101])
                    ("MEM_TYPE_BUFFER" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [10104 10120])
                    ("MEM_TYPE_CONS" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [10123 10137])
                    ("MEM_TYPE_STRING" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [10140 10156])
                    ("MEM_TYPE_MISC" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [10159 10173])
                    ("MEM_TYPE_SYMBOL" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [10176 10192])
                    ("MEM_TYPE_FLOAT" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [10195 10210])
                    ("MEM_TYPE_VECTORLIKE" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [10395 10415])
                    ("MEM_TYPE_VECTOR_BLOCK" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [10465 10487])
                    ("MEM_TYPE_SPARE" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [10539 10555]))                  
                :type "enum")
                nil [10065 10556])
            ("Vdead" variable
               (:typemodifiers ("static")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [10666 10691])
            ("DEADP" variable (:constant-flag t) nil [10700 10705])
            ("mem_node" type
               (:members 
                  ( ("left" variable
                       (:pointer 1
                        :type ("mem_node" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol classsubparts) [11962 11992])
                    ("right" variable
                       (:pointer 1
                        :type ("mem_node" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol classsubparts) [11962 11992])
                    ("parent" variable
                       (:pointer 1
                        :type ("mem_node" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol classsubparts) [12063 12087])
                    ("start" variable
                       (:pointer 1
                        :type "void")
                        (reparse-symbol classsubparts) [12135 12153])
                    ("end" variable
                       (:pointer 1
                        :type "void")
                        (reparse-symbol classsubparts) [12135 12153])
                    ("color" variable (:type ("" type
                         (:members 
                            ( ("MEM_BLACK" variable
                                 (:constant-flag t
                                  :type "int")
                                  (reparse-symbol enumsubparts) [12184 12194])
                              ("MEM_RED" variable
                                 (:constant-flag t
                                  :type "int")
                                  (reparse-symbol enumsubparts) [12195 12203]))                            
                          :type "enum")
                          nil nil)) (reparse-symbol classsubparts) [12178 12210])
                    ("type" variable (:type ("mem_type" type (:type "enum") nil nil)) (reparse-symbol classsubparts) [12236 12255]))                  
                :type "struct")
                nil [11796 12258])
            ("mem_root" variable
               (:pointer 1
                :typemodifiers ("static")
                :type ("mem_node" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [12319 12352])
            ("min_heap_address" variable
               (:pointer 1
                :typemodifiers ("static")
                :type "void")
                nil [12408 12457])
            ("max_heap_address" variable
               (:pointer 1
                :typemodifiers ("static")
                :type "void")
                nil [12408 12457])
            ("mem_z" variable
               (:typemodifiers ("static")
                :type ("mem_node" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [12494 12523])
            ("MEM_NIL" variable (:constant-flag t) nil [12532 12539])
            ("mem_insert" function
               (:prototype-flag t
                :pointer 1
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type "void")
                        (reparse-symbol arg-sub-list) [12584 12591])
                    ("" variable
                       (:pointer 1
                        :type "void")
                        (reparse-symbol arg-sub-list) [12592 12599])
                    ("" variable (:type ("mem_type" type (:type "enum") nil nil)) (reparse-symbol arg-sub-list) [12600 12614]))                  
                :type ("mem_node" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [12548 12615])
            ("mem_insert_fixup" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("mem_node" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [12646 12664]))                  
                :type "void")
                nil [12616 12665])
            ("mem_rotate_left" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("mem_node" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [12695 12713]))                  
                :type "void")
                nil [12666 12714])
            ("mem_rotate_right" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("mem_node" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [12745 12763]))                  
                :type "void")
                nil [12715 12764])
            ("mem_delete" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("mem_node" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [12789 12807]))                  
                :type "void")
                nil [12765 12808])
            ("mem_delete_fixup" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("mem_node" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [12839 12857]))                  
                :type "void")
                nil [12809 12858])
            ("mem_find" function
               (:prototype-flag t
                :pointer 1
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type "void")
                        (reparse-symbol arg-sub-list) [12893 12900]))                  
                :type ("mem_node" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [12859 12901])
            ("" type
               (:members 
                  ( ("NSTATICS" variable
                       (:constant-flag t
                        :default-value (13087 13091)
                        :type "int")
                        (reparse-symbol enumsubparts) [13076 13091]))                  
                :type "enum")
                nil [13069 13094])
            ("staticvec" variable
               (:pointer 1
                :dereference 1
                :typemodifiers ("static")
                :default-value "{&Vpurify_flag}"
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [13095 13153])
            ("staticidx" variable
               (:typemodifiers ("static")
                :type "int")
                nil [13203 13224])
            ("pure_alloc" function
               (:prototype-flag t
                :pointer 1
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [13251 13258])
                    ("" variable (:type "int") (reparse-symbol arg-sub-list) [13259 13263]))                  
                :type "void")
                nil [13226 13264])
            ("POWER_OF_2" variable (:constant-flag t) nil [13332 13342])
            ("ROUNDUP" variable (:constant-flag t) nil [13610 13617])
            ("pointer_align" function
               (:pointer 1
                :typemodifiers ("static")
                :arguments 
                  ( ("ptr" variable
                       (:pointer 1
                        :type "void")
                        (reparse-symbol arg-sub-list) [13838 13848])
                    ("alignment" variable (:type "int") (reparse-symbol arg-sub-list) [13849 13863]))                  
                :type "void")
                nil [13809 13923])
            ("macro_XPNTR_OR_SYMBOL_OFFSET" variable (:constant-flag t) nil [14095 14123])
            ("macro_XPNTR" variable (:constant-flag t) nil [14263 14274])
            ("XPNTR_OR_SYMBOL_OFFSET" function
               (:pointer 1
                :arguments 
                  ( ("a" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [14751 14765]))                  
                :type "void")
                nil [14720 14812])
            ("XPNTR" function
               (:pointer 1
                :arguments 
                  ( ("a" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [14851 14865]))                  
                :type "void")
                nil [14837 14895])
            ("XFLOAT_INIT" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("f" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [15061 15075])
                    ("n" variable (:type "double") (reparse-symbol arg-sub-list) [15076 15085]))                  
                :type "void")
                nil [15036 15115])
            ("finalizers" variable
               (:typemodifiers ("static")
                :type ("Lisp_Finalizer" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [15702 15742])
            ("doomed_finalizers" variable
               (:typemodifiers ("static")
                :type ("Lisp_Finalizer" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [15979 16026])
            ("malloc_warning" function
               (:arguments 
                  ( ("str" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [16368 16384]))                  
                :type "void")
                nil [16347 16420])
            ("display_malloc_warning" function
               (:arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [16510 16515]))                  
                :type "void")
                nil [16481 16672])
            ("buffer_memory_full" function
               (:arguments 
                  ( ("nbytes" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [16768 16785]))                  
                :type "void")
                nil [16743 17360])
            ("COMMON_MULTIPLE" variable (:constant-flag t) nil [17584 17599])
            ("XMALLOC_OVERRUN_CHECK_OVERHEAD" variable (:constant-flag t) nil [17707 17737])
            ("MALLOC_BLOCK_INPUT" variable (:constant-flag t) nil [23721 23739])
            ("MALLOC_UNBLOCK_INPUT" variable (:constant-flag t) nil [23760 23780])
            ("MALLOC_PROBE" variable (:constant-flag t) nil [23808 23820])
            ("ATTRIBUTE_MALLOC_SIZE" function
               (:prototype-flag t
                :type "int")
                nil [23957 23985])
            ("lrealloc" function
               (:prototype-flag t
                :pointer 1
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type "void")
                        (reparse-symbol arg-sub-list) [24009 24016])
                    ("" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [24017 24024]))                  
                :type "void")
                nil [23986 24025])
            ("xmalloc" function
               (:pointer 1
                :arguments 
                  ( ("size" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [24114 24126]))                  
                :type "void")
                nil [24098 24296])
            ("xzalloc" function
               (:pointer 1
                :arguments 
                  ( ("size" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [24380 24392]))                  
                :type "void")
                nil [24364 24587])
            ("xrealloc" function
               (:pointer 1
                :arguments 
                  ( ("block" variable
                       (:pointer 1
                        :type "void")
                        (reparse-symbol arg-sub-list) [24679 24691])
                    ("size" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [24692 24704]))                  
                :type "void")
                nil [24662 25029])
            ("xfree" function
               (:arguments 
                  ( ("block" variable
                       (:pointer 1
                        :type "void")
                        (reparse-symbol arg-sub-list) [25089 25101]))                  
                :type "void")
                nil [25077 25311])
            ("verify" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("INT_MAX" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [25478 25487])
                    ("" variable (:type ("PTRDIFF_MAX" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [25489 25501]))                  
                :type "int")
                nil [25470 25502])
            ("xnmalloc" function
               (:pointer 1
                :arguments 
                  ( ("nitems" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [25657 25674])
                    ("item_size" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [25675 25695]))                  
                :type "void")
                nil [25640 25892])
            ("xnrealloc" function
               (:pointer 1
                :arguments 
                  ( ("pa" variable
                       (:pointer 1
                        :type "void")
                        (reparse-symbol arg-sub-list) [26064 26073])
                    ("nitems" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [26074 26091])
                    ("item_size" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [26092 26112]))                  
                :type "void")
                nil [26046 26314])
            ("xpalloc" function
               (:pointer 1
                :arguments 
                  ( ("pa" variable
                       (:pointer 1
                        :type "void")
                        (reparse-symbol arg-sub-list) [27330 27339])
                    ("nitems" variable
                       (:pointer 1
                        :type ("ptrdiff_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [27340 27358])
                    ("nitems_incr_min" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [27359 27385])
                    ("nitems_max" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [27388 27409])
                    ("item_size" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [27410 27430]))                  
                :type "void")
                nil [27314 28782])
            ("xstrdup" function
               (:pointer 1
                :arguments 
                  ( ("s" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [28840 28854]))                  
                :type "char")
                nil [28824 28959])
            ("xlispstrdup" function
               (:pointer 1
                :arguments 
                  ( ("string" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [29041 29060]))                  
                :type "char")
                nil [29021 29161])
            ("dupstring" function
               (:arguments 
                  ( ("ptr" variable
                       (:pointer 2
                        :type "char")
                        (reparse-symbol arg-sub-list) [29405 29416])
                    ("string" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [29417 29436]))                  
                :type "void")
                nil [29389 29515])
            ("xputenv" function
               (:arguments 
                  ( ("string" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [29635 29654]))                  
                :type "void")
                nil [29621 29716])
            ("record_xmalloc" function
               (:pointer 1
                :arguments 
                  ( ("size" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [29843 29855]))                  
                :type "void")
                nil [29820 29939])
            ("EXTERNALLY_VISIBLE" variable (:type ("lisp_malloc_loser" type (:type "class") nil nil)) nil [30165 30202])
            ("lisp_malloc" function
               (:pointer 1
                :typemodifiers ("static")
                :arguments 
                  ( ("nbytes" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [30238 30252])
                    ("type" variable (:type ("mem_type" type (:type "enum") nil nil)) (reparse-symbol arg-sub-list) [30253 30272]))                  
                :type "void")
                nil [30211 31077])
            ("lisp_free" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("block" variable
                       (:pointer 1
                        :type "void")
                        (reparse-symbol arg-sub-list) [31199 31211]))                  
                :type "void")
                nil [31176 31341])
            ("BLOCK_ALIGN" variable (:constant-flag t) nil [31619 31630])
            ("verify" function
               (:prototype-flag t
                :type "int")
                nil [31641 31675])
            ("USE_ALIGNED_ALLOC" variable (:constant-flag t) nil [32154 32171])
            ("BLOCK_PADDING" variable (:constant-flag t) nil [33556 33569])
            ("BLOCK_BYTES" variable (:constant-flag t) nil [33580 33591])
            ("ABLOCKS_SIZE" variable (:constant-flag t) nil [33711 33723])
            ("x" variable (:type ("" type
                 (:members 
                    ( ("payload" variable
                         (:dereference 1
                          :type "char")
                          (reparse-symbol classsubparts) [33795 33821])
                      ("next_free" variable
                         (:pointer 1
                          :type ("ablock" type
                               (:prototype t
                                :type "struct")
                                nil nil))
                          (reparse-symbol classsubparts) [33826 33851]))                    
                  :type "union")
                  nil nil)) nil [33781 33858])
            ("abase" variable
               (:pointer 1
                :type ("ablocks" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [34431 34453])
            ("blocks" variable
               (:dereference 1
                :type ("ablock" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [34708 34743])
            ("ABLOCKS_BYTES" variable (:constant-flag t) nil [34821 34834])
            ("ABLOCK_ABASE" variable (:constant-flag t) nil [34886 34898])
            ("ABLOCKS_BUSY" variable (:constant-flag t) nil [35065 35077])
            ("ABLOCKS_BASE" variable (:constant-flag t) nil [35210 35222])
            ("free_ablock" variable
               (:pointer 1
                :typemodifiers ("static")
                :type ("ablock" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [35389 35423])
            ("base" variable
               (:pointer 1
                :type "void")
                nil [35645 35662])
            ("val" variable
               (:pointer 1
                :type "void")
                nil [35645 35662])
            ("abase" variable
               (:pointer 1
                :type ("ablocks" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [35665 35687])
            ("eassert" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("nbytes" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [35700 35708]))                  
                :type "int")
                nil [35691 35723])
            ("abase" variable
               (:default-value "ABLOCK_ABASE (free_ablock)"
                :type "int")
                nil [37707 37742])
            ("val" variable
               (:default-value "free_ablock"
                :type "int")
                nil [37832 37850])
            ("free_ablock" variable
               (:default-value "free_ablock->x.next_free;"
                :type "int")
                nil [37853 37892])
            ("mem_insert" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("val" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [37967 37971])
                    ("" variable (:type ("val" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [37981 37986])
                    ("" variable (:type ("nbytes" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [37987 37994])
                    ("" variable (:type ("type" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [37995 38000]))                  
                :type "int")
                nil [37955 38001])
            ("eassert" function
               (:prototype-flag t
                :type "int")
                nil [38063 38110])
            ("val" variable (:type "int") nil [38120 38124])
            ("ablock" variable
               (:pointer 1
                :default-value "block"
                :type ("ablock" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [38174 38204])
            ("abase" variable
               (:pointer 1
                :default-value "ABLOCK_ABASE (ablock)"
                :type ("ablocks" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [38207 38253])
            ("mem_delete" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("mem_find" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [38315 38331]))                  
                :type "int")
                nil [38303 38333])
            ("next_free" variable
               (:default-value "free_ablock"
                :type "int")
                nil [38380 38404])
            ("free_ablock" variable
               (:default-value "ablock"
                :type "int")
                nil [38407 38428])
            ("busy" variable
               (:default-value "(intptr_t) ABLOCKS_BUSY (abase) - 2"
                :type ("intptr_t" type (:type "class") nil nil))
                nil [38459 38511])
            ("eassume" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable
                       (:reference 1
                        :type ("busy" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [38528 38535])
                    ("" variable (:type ("busy" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [38536 38542]))                  
                :type "int")
                nil [38514 38566])
            ("busy" variable (:type "int") nil [38611 38616])
            ("MALLOC_IS_GC_ALIGNED" variable (:constant-flag t) nil [39919 39939])
            ("aligned_alloc" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("GCALIGNMENT" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [41373 41385])
                    ("" variable (:type ("size" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [41386 41391]))                  
                :type "int")
                nil [41358 41392])
            ("INTERVAL_BLOCK_SIZE" variable (:constant-flag t) nil [42128 42147])
            ("intervals" variable
               (:dereference 1
                :type ("interval" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [42396 42443])
            ("next" variable
               (:pointer 1
                :type ("interval_block" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [42446 42474])
            ("interval_block" variable
               (:pointer 1
                :typemodifiers ("static")
                :type ("interval_block" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [42558 42603])
            ("interval_block_index" variable
               (:typemodifiers ("static")
                :default-value "INTERVAL_BLOCK_SIZE"
                :type "int")
                nil [42685 42739])
            ("total_free_intervals" variable
               (:typemodifiers ("static")
                :type ("EMACS_INT" type (:type "class") nil nil))
                nil [42784 42839])
            ("total_intervals" variable
               (:typemodifiers ("static")
                :type ("EMACS_INT" type (:type "class") nil nil))
                nil [42784 42839])
            ("interval_free_list" variable
               (:typemodifiers ("static")
                :type ("INTERVAL" type (:type "class") nil nil))
                nil [42873 42908])
            ("val" variable (:type ("INTERVAL" type (:type "class") nil nil)) nil [42975 42988])
            ("RESET_INTERVAL" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("val" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [43653 43657]))                  
                :type "int")
                nil [43637 43658])
            ("gcmarkbit" variable
               (:default-value "0"
                :type "int")
                nil [43666 43680])
            ("val" variable (:type "int") nil [43690 43694])
            ("eassert" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("i" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [43955 43957])
                    ("" variable (:type ("gcmarkbit" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [43958 43968]))                  
                :type "int")
                nil [43945 43969])
            ("gcmarkbit" variable
               (:default-value "1"
                :type "int")
                nil [43975 43989])
            ("mark_object" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("i" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [44005 44007])
                    ("" variable (:type ("plist" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [44008 44014]))                  
                :type "int")
                nil [43992 44015])
            ("MARK_INTERVAL_TREE" variable (:constant-flag t) nil [44071 44089])
            ("SBLOCK_SIZE" variable (:constant-flag t) nil [45704 45715])
            ("LARGE_STRING_BYTES" variable (:constant-flag t) nil [45865 45883])
            ("string" variable
               (:pointer 1
                :type ("Lisp_String" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [46449 46476])
            ("data" variable
               (:dereference 1
                :type "unsigned char")
                nil [46537 46579])
            ("string" variable
               (:pointer 1
                :type ("Lisp_String" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [46736 46763])
            ("n" variable (:type ("" type
                 (:members 
                    ( ("string" variable
                         (:pointer 1
                          :type ("Lisp_String" type
                               (:prototype t
                                :type "struct")
                                nil nil))
                          (reparse-symbol classsubparts) [47331 47358])
                      ("nbytes" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [47363 47380]))                    
                  :type "struct")
                  nil nil)) nil [47316 47387])
            ("sdata" variable (:type "int") nil [47390 47396])
            ("SDATA_NBYTES" variable (:constant-flag t) nil [47406 47418])
            ("SDATA_DATA" variable (:constant-flag t) nil [47444 47454])
            ("next" variable
               (:pointer 1
                :type ("sblock" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [47863 47883])
            ("next_free" variable
               (:pointer 1
                :type ("sdata" type (:type "class") nil nil))
                nil [48024 48041])
            ("data" variable
               (:dereference 1
                :type ("sdata" type (:type "class") nil nil))
                nil [48067 48101])
            ("STRING_BLOCK_SIZE" variable (:constant-flag t) nil [48218 48235])
            ("strings" variable
               (:dereference 1
                :type ("Lisp_String" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [48481 48527])
            ("next" variable
               (:pointer 1
                :type ("string_block" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [48530 48556])
            ("oldest_sblock" variable
               (:pointer 1
                :typemodifiers ("static")
                :type ("sblock" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [48774 48827])
            ("current_sblock" variable
               (:pointer 1
                :typemodifiers ("static")
                :type ("sblock" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [48774 48827])
            ("large_sblocks" variable
               (:pointer 1
                :typemodifiers ("static")
                :type ("sblock" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [48872 48908])
            ("string_blocks" variable
               (:pointer 1
                :typemodifiers ("static")
                :type ("string_block" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [48951 48993])
            ("string_free_list" variable
               (:pointer 1
                :typemodifiers ("static")
                :type ("Lisp_String" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [49030 49074])
            ("total_strings" variable
               (:typemodifiers ("static")
                :type ("EMACS_INT" type (:type "class") nil nil))
                nil [49122 49173])
            ("total_free_strings" variable
               (:typemodifiers ("static")
                :type ("EMACS_INT" type (:type "class") nil nil))
                nil [49122 49173])
            ("total_string_bytes" variable
               (:typemodifiers ("static")
                :type ("EMACS_INT" type (:type "class") nil nil))
                nil [49221 49257])
            ("NEXT_FREE_LISP_STRING" variable (:constant-flag t) nil [49412 49433])
            ("SDATA_OF_STRING" variable (:constant-flag t) nil [49747 49762])
            ("GC_STRING_OVERRUN_COOKIE_SIZE" variable (:constant-flag t) nil [50190 50219])
            ("SDATA_SIZE" variable (:constant-flag t) nil [50855 50865])
            ("GC_STRING_EXTRA" variable (:constant-flag t) nil [51281 51296])
            ("empty_unibyte_string" variable
               (:default-value "make_pure_string (\"\", 0, 0, 0)"
                :type "int")
                nil [51972 52026])
            ("empty_multibyte_string" variable
               (:default-value "make_pure_string (\"\", 0, 0, 1)"
                :type "int")
                nil [52029 52085])
            ("check_string_bytes" variable (:constant-flag t) nil [53773 53791])
            ("check_string_free_list" variable (:constant-flag t) nil [54285 54307])
            ("s" variable
               (:pointer 1
                :type ("Lisp_String" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [54407 54429])
            ("s" variable
               (:default-value "string_free_list"
                :type "int")
                nil [55134 55155])
            ("string_free_list" variable
               (:default-value "NEXT_FREE_LISP_STRING (s)"
                :type "int")
                nil [55158 55203])
            ("total_free_strings" variable (:type "int") nil [55234 55253])
            ("total_strings" variable (:type "int") nil [55258 55272])
            ("strings_consed" variable (:type "int") nil [55277 55292])
            ("s" variable
               (:pointer 1
                :type "int")
                nil [55322 55325])
            ("s" variable (:type "int") nil [55583 55585])
            ("data" variable
               (:pointer 1
                :type ("sdata" type (:type "class") nil nil))
                nil [56014 56037])
            ("old_data" variable
               (:pointer 1
                :type ("sdata" type (:type "class") nil nil))
                nil [56014 56037])
            ("b" variable
               (:pointer 1
                :type ("sblock" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [56040 56057])
            ("needed" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) nil [56060 56089])
            ("old_nbytes" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) nil [56060 56089])
            ("string_overflow" function
               (:prototype-flag t
                :type "int")
                nil [56128 56147])
            ("needed" variable
               (:default-value "SDATA_SIZE (nbytes)"
                :type "int")
                nil [56240 56269])
            ("old_data" variable
               (:default-value "NULL"
                :type "int")
                nil [56383 56399])
            ("string" variable
               (:default-value "s"
                :type "int")
                nil [57461 57472])
            ("next_free" variable
               (:default-value "(sdata *) ((char *) data + needed + GC_STRING_EXTRA)"
                :type "int")
                nil [57478 57543])
            ("data" variable (:type "int") nil [57582 57600])
            ("size" variable
               (:default-value "nchars"
                :type "int")
                nil [57674 57688])
            ("size_byte" variable
               (:default-value "nbytes"
                :type "int")
                nil [57694 57713])
            ("data" variable
               (:dereference 1
                :default-value "'\\0'"
                :type "int")
                nil [57719 57739])
            ("needed" variable (:type "int") nil [58209 58216])
            ("b" variable
               (:pointer 1
                :type ("string_block" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [58333 58363])
            ("next" variable
               (:pointer 1
                :type ("string_block" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [58333 58363])
            ("live_blocks" variable
               (:pointer 1
                :default-value "NULL"
                :type ("string_block" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [58366 58406])
            ("string_free_list" variable
               (:default-value "NULL"
                :type "int")
                nil [58410 58434])
            ("total_free_strings" variable
               (:default-value "0"
                :type "int")
                nil [58453 58476])
            ("total_string_bytes" variable
               (:default-value "0"
                :type "int")
                nil [58479 58502])
            ("string_blocks" variable
               (:default-value "live_blocks"
                :type "int")
                nil [60442 60470])
            ("free_large_strings" function
               (:prototype-flag t
                :type "int")
                nil [60473 60495])
            ("compact_small_strings" function
               (:prototype-flag t
                :type "int")
                nil [60498 60523])
            ("b" variable
               (:pointer 1
                :type ("sblock" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [60633 60657])
            ("next" variable
               (:pointer 1
                :type ("sblock" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [60633 60657])
            ("live_blocks" variable
               (:pointer 1
                :default-value "NULL"
                :type ("sblock" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [60660 60694])
            ("large_sblocks" variable
               (:default-value "live_blocks"
                :type "int")
                nil [60889 60917])
            ("tb" variable
               (:pointer 1
                :default-value "oldest_sblock"
                :type ("sblock" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [61191 61225])
            ("current_sblock" variable
               (:default-value "tb"
                :type "int")
                nil [63631 63651])
            ("error" function
               (:prototype-flag t
                :type "int")
                nil [63687 63726])
            ("val" variable
               (:typemodifiers ("register")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [64009 64034])
            ("c" variable (:type "int") nil [64037 64043])
            ("nbytes" variable (:type ("EMACS_INT" type (:type "class") nil nil)) nil [64046 64063])
            ("CHECK_NATNUM" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("length" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [64081 64088]))                  
                :type "int")
                nil [64067 64089])
            ("CHECK_CHARACTER" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("init" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [64109 64114]))                  
                :type "int")
                nil [64092 64115])
            ("c" variable
               (:default-value "XFASTINT (init)"
                :type "int")
                nil [64119 64139])
            ("val" variable (:type "int") nil [65089 65093])
            ("nbits" variable
               (:default-value "bool_vector_size (a)"
                :type ("EMACS_INT" type (:type "class") nil nil))
                nil [65251 65290])
            ("a" variable (:type "int") nil [65681 65683])
            ("val" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [65820 65836])
            ("words" variable
               (:default-value "bool_vector_words (nbits)"
                :type ("EMACS_INT" type (:type "class") nil nil))
                nil [65839 65883])
            ("needed_elements" variable
               (:default-value "((bool_header_size - header_size + word_bytes
				+ word_size - 1)
			       / word_size)"
                :type ("EMACS_INT" type (:type "class") nil nil))
                nil [65939 66057])
            ("p" variable
               (:pointer 1
                :default-value "(struct Lisp_Bool_Vector *) allocate_vector (needed_elements)"
                :type ("Lisp_Bool_Vector" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [66060 66155])
            ("XSETVECTOR" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("val" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [66170 66174])
                    ("" variable (:type ("p" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [66175 66177]))                  
                :type "int")
                nil [66158 66178])
            ("XSETPVECTYPESIZE" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("XVECTOR" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [66199 66212])
                    ("" variable (:type ("PVEC_BOOL_VECTOR" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [66214 66231]))                  
                :type "int")
                nil [66181 66238])
            ("size" variable
               (:default-value "nbits"
                :type "int")
                nil [66244 66257])
            ("data" variable
               (:dereference 1
                :default-value "0"
                :type "int")
                nil [66314 66334])
            ("val" variable (:type "int") nil [66345 66349])
            ("val" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [66635 66651])
            ("CHECK_NATNUM" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("length" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [66669 66676]))                  
                :type "int")
                nil [66655 66677])
            ("val" variable
               (:default-value "make_uninit_bool_vector (XFASTINT (length))"
                :type "int")
                nil [66680 66730])
            ("bool_vector_fill" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("val" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [66758 66762])
                    ("" variable (:type ("init" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [66763 66768]))                  
                :type "int")
                nil [66740 66769])
            ("i" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) nil [67055 67067])
            ("vector" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [67070 67089])
            ("vector" variable
               (:default-value "make_uninit_bool_vector (nargs)"
                :type "int")
                nil [67093 67134])
            ("bool_vector_set" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("vector" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [67186 67193])
                    ("" variable (:type ("i" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [67194 67196])
                    ("" variable (:type ("NILP" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [67198 67212]))                  
                :type "int")
                nil [67169 67214])
            ("vector" variable (:type "int") nil [67225 67232])
            ("val" variable
               (:typemodifiers ("register")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [67489 67514])
            ("nchars" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) nil [67517 67552])
            ("multibyte_nbytes" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) nil [67517 67552])
            ("parse_str_as_multibyte" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("contents" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [67604 67613])
                    ("" variable (:type ("nbytes" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [67614 67621])
                    ("" variable (:type ("nchars" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [67628 67635])
                    ("" variable (:type ("multibyte_nbytes" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [67637 67654]))                  
                :type "int")
                nil [67556 67655])
            ("val" variable
               (:default-value "make_unibyte_string (contents, nbytes)"
                :type "int")
                nil [67846 67891])
            ("val" variable
               (:default-value "make_multibyte_string (contents, nchars, nbytes)"
                :type "int")
                nil [67903 67958])
            ("val" variable (:type "int") nil [67968 67972])
            ("val" variable
               (:typemodifiers ("register")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [68114 68139])
            ("val" variable
               (:default-value "make_uninit_string (length)"
                :type "int")
                nil [68142 68176])
            ("memcpy" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("SDATA" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [68187 68198])
                    ("" variable (:type ("contents" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [68200 68209])
                    ("" variable (:type ("length" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [68210 68217]))                  
                :type "int")
                nil [68179 68218])
            ("val" variable (:type "int") nil [68228 68232])
            ("val" variable
               (:typemodifiers ("register")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [68437 68462])
            ("val" variable
               (:default-value "make_uninit_multibyte_string (nchars, nbytes)"
                :type "int")
                nil [68465 68517])
            ("memcpy" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("SDATA" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [68528 68539])
                    ("" variable (:type ("contents" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [68541 68550])
                    ("" variable (:type ("nbytes" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [68551 68558]))                  
                :type "int")
                nil [68520 68559])
            ("val" variable (:type "int") nil [68569 68573])
            ("val" variable
               (:typemodifiers ("register")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [68810 68835])
            ("val" variable
               (:default-value "make_uninit_multibyte_string (nchars, nbytes)"
                :type "int")
                nil [68838 68890])
            ("memcpy" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("SDATA" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [68901 68912])
                    ("" variable (:type ("contents" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [68914 68923])
                    ("" variable (:type ("nbytes" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [68924 68931]))                  
                :type "int")
                nil [68893 68932])
            ("STRING_SET_UNIBYTE" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("val" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [68993 68997]))                  
                :type "int")
                nil [68973 68998])
            ("val" variable (:type "int") nil [69008 69012])
            ("val" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [69374 69390])
            ("val" variable
               (:default-value "make_uninit_multibyte_string (nchars, nbytes)"
                :type "int")
                nil [69559 69611])
            ("memcpy" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("SDATA" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [69622 69633])
                    ("" variable (:type ("contents" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [69635 69644])
                    ("" variable (:type ("nbytes" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [69645 69652]))                  
                :type "int")
                nil [69614 69653])
            ("STRING_SET_UNIBYTE" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("val" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [69696 69700]))                  
                :type "int")
                nil [69676 69701])
            ("val" variable (:type "int") nil [69711 69715])
            ("val" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [69871 69887])
            ("empty_unibyte_string" variable (:type "int") nil [69915 69936])
            ("val" variable
               (:default-value "make_uninit_multibyte_string (length, length)"
                :type "int")
                nil [69939 69991])
            ("STRING_SET_UNIBYTE" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("val" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [70014 70018]))                  
                :type "int")
                nil [69994 70019])
            ("val" variable (:type "int") nil [70029 70033])
            ("string" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [70222 70241])
            ("s" variable
               (:pointer 1
                :type ("Lisp_String" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [70244 70266])
            ("emacs_abort" function
               (:prototype-flag t
                :type "int")
                nil [70290 70305])
            ("empty_multibyte_string" variable (:type "int") nil [70332 70355])
            ("s" variable
               (:default-value "allocate_string ()"
                :type "int")
                nil [70359 70382])
            ("intervals" variable
               (:default-value "NULL"
                :type "int")
                nil [70388 70405])
            ("allocate_string_data" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("s" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [70430 70432])
                    ("" variable (:type ("nchars" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [70433 70440])
                    ("" variable (:type ("nbytes" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [70441 70448]))                  
                :type "int")
                nil [70408 70449])
            ("XSETSTRING" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [70464 70471])
                    ("" variable (:type ("s" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [70472 70474]))                  
                :type "int")
                nil [70452 70475])
            ("nbytes" variable (:type "int") nil [70501 70508])
            ("string" variable (:type "int") nil [70518 70525])
            ("ap" variable (:type ("va_list" type (:type "class") nil nil)) nil [70723 70734])
            ("length" variable (:type "int") nil [70737 70748])
            ("va_start" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("ap" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [70762 70765])
                    ("" variable (:type ("format" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [70766 70773]))                  
                :type "int")
                nil [70752 70774])
            ("length" variable
               (:default-value "vsprintf (buf, format, ap)"
                :type "int")
                nil [70777 70813])
            ("va_end" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("ap" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [70824 70827]))                  
                :type "int")
                nil [70816 70828])
            ("make_string" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("buf" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [70851 70855])
                    ("" variable (:type ("length" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [70856 70863]))                  
                :type "int")
                nil [70838 70864])
            ("FLOAT_BLOCK_SIZE" variable (:constant-flag t) nil [71309 71325])
            ("GETMARKBIT" variable (:constant-flag t) nil [71573 71583])
            ("SETMARKBIT" variable (:constant-flag t) nil [71706 71716])
            ("UNSETMARKBIT" variable (:constant-flag t) nil [71842 71854])
            ("FLOAT_BLOCK" variable (:constant-flag t) nil [71983 71994])
            ("FLOAT_INDEX" variable (:constant-flag t) nil [72083 72094])
            ("floats" variable
               (:dereference 1
                :type ("Lisp_Float" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [72275 72318])
            ("gcmarkbits" variable
               (:dereference 1
                :type ("bits_word" type (:type "class") nil nil))
                nil [72321 72385])
            ("next" variable
               (:pointer 1
                :type ("float_block" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [72388 72413])
            ("FLOAT_MARKED_P" variable (:constant-flag t) nil [72426 72440])
            ("FLOAT_MARK" variable (:constant-flag t) nil [72514 72524])
            ("FLOAT_UNMARK" variable (:constant-flag t) nil [72598 72610])
            ("float_block" variable
               (:pointer 1
                :typemodifiers ("static")
                :type ("float_block" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [72707 72746])
            ("float_block_index" variable
               (:typemodifiers ("static")
                :default-value "FLOAT_BLOCK_SIZE"
                :type "int")
                nil [72817 72865])
            ("float_free_list" variable
               (:pointer 1
                :typemodifiers ("static")
                :type ("Lisp_Float" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [72901 72943])
            ("val" variable
               (:typemodifiers ("register")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [73051 73076])
            ("XFLOAT_INIT" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("val" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [73812 73816])
                    ("" variable (:type ("float_value" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [73817 73829]))                  
                :type "int")
                nil [73799 73830])
            ("eassert" function
               (:prototype-flag t
                :type "int")
                nil [73833 73874])
            ("val" variable (:type "int") nil [73976 73980])
            ("CONS_BLOCK_SIZE" variable (:constant-flag t) nil [74419 74434])
            ("CONS_BLOCK" variable (:constant-flag t) nil [74681 74691])
            ("CONS_INDEX" variable (:constant-flag t) nil [74777 74787])
            ("conses" variable
               (:dereference 1
                :type ("Lisp_Cons" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [74963 75004])
            ("gcmarkbits" variable
               (:dereference 1
                :type ("bits_word" type (:type "class") nil nil))
                nil [75007 75070])
            ("next" variable
               (:pointer 1
                :type ("cons_block" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [75073 75097])
            ("CONS_MARKED_P" variable (:constant-flag t) nil [75110 75123])
            ("CONS_MARK" variable (:constant-flag t) nil [75195 75204])
            ("CONS_UNMARK" variable (:constant-flag t) nil [75276 75287])
            ("cons_block" variable
               (:pointer 1
                :typemodifiers ("static")
                :type ("cons_block" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [75381 75418])
            ("cons_block_index" variable
               (:typemodifiers ("static")
                :default-value "CONS_BLOCK_SIZE"
                :type "int")
                nil [75482 75528])
            ("cons_free_list" variable
               (:pointer 1
                :typemodifiers ("static")
                :type ("Lisp_Cons" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [75573 75613])
            ("chain" variable
               (:default-value "cons_free_list"
                :type "int")
                nil [75733 75756])
            ("car" variable
               (:default-value "Vdead"
                :type "int")
                nil [75764 75776])
            ("cons_free_list" variable
               (:default-value "ptr"
                :type "int")
                nil [75779 75800])
            ("ptr" variable
               (:pointer 1
                :type "int")
                nil [75830 75835])
            ("val" variable
               (:typemodifiers ("register")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [76030 76055])
            ("XSETCAR" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("val" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [76763 76767])
                    ("" variable (:type ("car" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [76768 76772]))                  
                :type "int")
                nil [76754 76773])
            ("XSETCDR" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("val" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [76785 76789])
                    ("" variable (:type ("cdr" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [76790 76794]))                  
                :type "int")
                nil [76776 76795])
            ("eassert" function
               (:prototype-flag t
                :type "int")
                nil [76798 76837])
            ("val" variable (:type "int") nil [76942 76946])
            ("Fcons" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("arg1" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [77281 77286])
                    ("" variable (:type ("Qnil" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [77287 77292]))                  
                :type "int")
                nil [77274 77293])
            ("Fcons" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("arg1" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [77370 77375])
                    ("" variable (:type ("Fcons" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [77376 77394]))                  
                :type "int")
                nil [77363 77396])
            ("Fcons" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("arg1" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [77492 77497])
                    ("" variable (:type ("Fcons" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [77498 77530]))                  
                :type "int")
                nil [77485 77532])
            ("Fcons" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("arg1" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [77646 77651])
                    ("" variable (:type ("Fcons" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [77652 77698]))                  
                :type "int")
                nil [77639 77700])
            ("Fcons" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("arg1" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [77832 77837])
                    ("" variable (:type ("Fcons" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [77838 77911]))                  
                :type "int")
                nil [77825 77913])
            ("cons" function
               (:prototype-flag t
                :function-pointer t
                :arguments 
                  ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [78203 78215])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [78216 78228]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [78182 78229])
            ("eassume" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("count" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [78397 78403]))                  
                :type "int")
                nil [78384 78404])
            ("val" variable
               (:default-value "cons (arg, Qnil)"
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [78407 78442])
            ("tail" variable
               (:default-value "val"
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [78445 78468])
            ("ap" variable (:type ("va_list" type (:type "class") nil nil)) nil [78472 78483])
            ("va_start" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("ap" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [78496 78499])
                    ("" variable (:type ("arg" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [78500 78504]))                  
                :type "int")
                nil [78486 78505])
            ("va_end" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("ap" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [78679 78682]))                  
                :type "int")
                nil [78671 78683])
            ("val" variable (:type "int") nil [78694 78698])
            ("val" variable
               (:typemodifiers ("register")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [78959 78984])
            ("val" variable
               (:default-value "Qnil"
                :type "int")
                nil [78987 78998])
            ("val" variable (:type "int") nil [79094 79098])
            ("val" variable
               (:default-value "Qnil"
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [79297 79320])
            ("CHECK_NATNUM" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("length" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [79337 79344]))                  
                :type "int")
                nil [79323 79345])
            ("val" variable (:type "int") nil [79487 79491])
            ("XUNTAG" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("v" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [79992 79994])
                    ("" variable (:type ("contents" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [79995 80006])
                    ("" variable (:type ("Lisp_Int0" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [80008 80018]))                  
                :type "int")
                nil [79984 80019])
            ("contents" variable
               (:dereference 1
                :default-value "make_lisp_ptr (p, Lisp_Int0)"
                :type "int")
                nil [80105 80148])
            ("VECTOR_BLOCK_SIZE" variable (:constant-flag t) nil [80372 80389])
            ("vroundup_ct" variable (:constant-flag t) nil [80915 80926])
            ("vroundup" variable (:constant-flag t) nil [81034 81042])
            ("VECTOR_BLOCK_BYTES" variable (:constant-flag t) nil [81166 81184])
            ("VBLOCK_BYTES_MIN" variable (:constant-flag t) nil [81303 81319])
            ("VBLOCK_BYTES_MAX" variable (:constant-flag t) nil [81435 81451])
            ("VECTOR_MAX_FREE_LIST_INDEX" variable (:constant-flag t) nil [81647 81673])
            ("vv" variable
               (:pointer 1
                :default-value "v"
                :type "void")
                nil [81894 81907])
            ("cv" variable
               (:pointer 1
                :default-value "vv"
                :type "char")
                nil [81910 81924])
            ("p" variable
               (:pointer 1
                :default-value "cv + nbytes"
                :type "void")
                nil [81927 81949])
            ("p" variable (:type "int") nil [81959 81961])
            ("eassume" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("nbytes" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [82120 82127]))                  
                :type "int")
                nil [82091 82128])
            ("roundup_size" variable (:type "int") nil [82168 82181])
            ("next" variable
               (:pointer 1
                :type ("large_vector" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [82715 82741])
            ("data" variable
               (:dereference 1
                :type "char")
                nil [83096 83126])
            ("next" variable
               (:pointer 1
                :type ("vector_block" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [83129 83155])
            ("vector_blocks" variable
               (:pointer 1
                :typemodifiers ("static")
                :type ("vector_block" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [83192 83234])
            ("large_vectors" variable
               (:pointer 1
                :typemodifiers ("static")
                :type ("large_vector" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [83487 83529])
            ("zero_vector" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [83596 83620])
            ("total_vectors" variable
               (:typemodifiers ("static")
                :type ("EMACS_INT" type (:type "class") nil nil))
                nil [83654 83685])
            ("total_vector_slots" variable
               (:typemodifiers ("static")
                :type ("EMACS_INT" type (:type "class") nil nil))
                nil [83754 83815])
            ("total_free_vector_slots" variable
               (:typemodifiers ("static")
                :type ("EMACS_INT" type (:type "class") nil nil))
                nil [83754 83815])
            ("eassume" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("header_size" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [83959 83972])
                    ("" variable (:type ("nbytes" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [83974 83981]))                  
                :type "int")
                nil [83950 83982])
            ("nwords" variable
               (:default-value "(nbytes - header_size) / word_size"
                :type ("ptrdiff_t" type (:type "class") nil nil))
                nil [83985 84039])
            ("XSETPVECTYPESIZE" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("v" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [84060 84062])
                    ("" variable (:type ("PVEC_FREE" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [84063 84073])
                    ("" variable (:type ("nwords" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [84077 84084]))                  
                :type "int")
                nil [84042 84085])
            ("eassert" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("nbytes" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [84097 84105])
                    ("" variable (:type ("roundup_size" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [84106 84120]))                  
                :type "int")
                nil [84088 84125])
            ("vindex" variable
               (:default-value "VINDEX (nbytes)"
                :type ("ptrdiff_t" type (:type "class") nil nil))
                nil [84128 84163])
            ("eassert" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("vindex" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [84175 84183]))                  
                :type "int")
                nil [84166 84212])
            ("set_next_vector" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("v" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [84232 84234])
                    ("" variable (:type ("vector_free_lists" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [84235 84260]))                  
                :type "int")
                nil [84215 84262])
            ("vector_free_lists" variable
               (:dereference 1
                :default-value "v"
                :type "int")
                nil [84265 84295])
            ("word_size" variable (:type "int") nil [84334 84344])
            ("block" variable
               (:pointer 1
                :default-value "xmalloc (sizeof *block)"
                :type ("vector_block" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [84442 84495])
            ("mem_insert" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("block" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [84535 84541])
                    ("" variable (:type ("data" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [84542 84547])
                    ("" variable (:type ("block" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [84548 84554])
                    ("" variable (:type ("data" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [84555 84561])
                    ("" variable (:type ("MEM_TYPE_VECTOR_BLOCK" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [84589 84611]))                  
                :type "int")
                nil [84523 84612])
            ("next" variable
               (:default-value "vector_blocks"
                :type "int")
                nil [84630 84651])
            ("vector_blocks" variable
               (:default-value "block"
                :type "int")
                nil [84654 84676])
            ("block" variable (:type "int") nil [84686 84692])
            ("zero_vector" variable
               (:default-value "make_pure_vector (0)"
                :type "int")
                nil [84785 84820])
            ("vector" variable
               (:pointer 1
                :type ("Lisp_Vector" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [84944 84971])
            ("block" variable
               (:pointer 1
                :type ("vector_block" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [84974 85001])
            ("index" variable (:type ("size_t" type (:type "class") nil nil)) nil [85004 85028])
            ("restbytes" variable (:type ("size_t" type (:type "class") nil nil)) nil [85004 85028])
            ("eassert" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable
                       (:reference 1
                        :type ("nbytes" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [85061 85070])
                    ("" variable (:type ("nbytes" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [85071 85079]))                  
                :type "int")
                nil [85032 85099])
            ("eassert" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("nbytes" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [85111 85119])
                    ("" variable (:type ("roundup_size" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [85120 85134]))                  
                :type "int")
                nil [85102 85139])
            ("index" variable
               (:default-value "VINDEX (nbytes)"
                :type "int")
                nil [85239 85263])
            ("block" variable
               (:default-value "allocate_vector_block ()"
                :type "int")
                nil [86329 86362])
            ("vector" variable
               (:default-value "(struct Lisp_Vector *) block->data;"
                :type "int")
                nil [86426 86470])
            ("restbytes" variable
               (:default-value "VECTOR_BLOCK_BYTES - nbytes"
                :type "int")
                nil [86597 86637])
            ("vector" variable (:type "int") nil [86807 86814])
            ("VECTOR_IN_BLOCK" variable (:constant-flag t) nil [86891 86906])
            ("ARRAY_MARK_FLAG" variable (:type "int") nil [87156 87172])
            ("nwords" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) nil [87175 87192])
            ("nwords" variable
               (:default-value "size"
                :type "int")
                nil [87791 87805])
            ("detect_suspicious_free" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("vector" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [88043 88050]))                  
                :type "int")
                nil [88019 88051])
            ("finalize_one_thread" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("vector" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [88652 88659]))                  
                :type "int")
                nil [88607 88660])
            ("finalize_one_mutex" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("vector" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [88768 88775]))                  
                :type "int")
                nil [88726 88776])
            ("finalize_one_condvar" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("vector" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [88890 88897]))                  
                :type "int")
                nil [88844 88898])
            ("block" variable
               (:pointer 1
                :type ("vector_block" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [89027 89080])
            ("bprev" variable
               (:pointer 2
                :default-value "&vector_blocks"
                :type ("vector_block" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [89027 89080])
            ("lv" variable
               (:pointer 1
                :type ("large_vector" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [89083 89134])
            ("lvprev" variable
               (:pointer 2
                :default-value "&large_vectors"
                :type ("large_vector" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [89083 89134])
            ("vector" variable
               (:pointer 1
                :type ("Lisp_Vector" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [89137 89171])
            ("next" variable
               (:pointer 1
                :type ("Lisp_Vector" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [89137 89171])
            ("total_free_vector_slots" variable
               (:default-value "0"
                :type "int")
                nil [89212 89240])
            ("memset" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("vector_free_lists" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [89251 89269]))                  
                :type "int")
                nil [89243 89301])
            ("p" variable
               (:pointer 1
                :type ("Lisp_Vector" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [91546 91568])
            ("p" variable
               (:default-value "XVECTOR (zero_vector)"
                :type "int")
                nil [91613 91639])
            ("p" variable (:type "int") nil [92448 92450])
            ("v" variable
               (:pointer 1
                :type ("Lisp_Vector" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [92554 92576])
            ("nbytes_max" variable
               (:default-value "min (PTRDIFF_MAX, SIZE_MAX)"
                :type ("ptrdiff_t" type (:type "class") nil nil))
                nil [92579 92630])
            ("memory_full" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("SIZE_MAX" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [92729 92738]))                  
                :type "int")
                nil [92716 92739])
            ("v" variable
               (:default-value "allocate_vectorlike (len)"
                :type "int")
                nil [92742 92772])
            ("size" variable
               (:default-value "len"
                :type "int")
                nil [92798 92809])
            ("v" variable (:type "int") nil [92819 92821])
            ("v" variable
               (:pointer 1
                :default-value "allocate_vectorlike (memlen)"
                :type ("Lisp_Vector" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [92988 93041])
            ("eassert" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable
                       (:reference 1
                        :type ("tag" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [93088 93094])
                    ("" variable (:type ("tag" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [93095 93100])
                    ("" variable (:type ("PVEC_FONT" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [93102 93112]))                  
                :type "int")
                nil [93074 93113])
            ("eassert" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable
                       (:reference 1
                        :type ("lisplen" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [93130 93140])
                    ("" variable (:type ("lisplen" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [93141 93150])
                    ("" variable
                       (:reference 1
                        :type ("zerolen" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [93152 93162])
                    ("" variable (:type ("zerolen" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [93163 93172])
                    ("" variable (:type ("memlen" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [93174 93181]))                  
                :type "int")
                nil [93116 93182])
            ("eassert" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("memlen" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [93194 93202])
                    ("" variable (:type ("lisplen" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [93203 93212]))                  
                :type "int")
                nil [93185 93249])
            ("eassert" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("lisplen" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [93261 93270])
                    ("" variable (:type ("PSEUDOVECTOR_SIZE_MASK" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [93272 93295]))                  
                :type "int")
                nil [93252 93296])
            ("memclear" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("v" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [93383 93385])
                    ("" variable (:type ("contents" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [93386 93395])
                    ("word_size" variable
                       (:pointer 1
                        :type ("zerolen" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [93396 93416]))                  
                :type "int")
                nil [93373 93417])
            ("XSETPVECTYPESIZE" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("v" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [93438 93440])
                    ("" variable (:type ("tag" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [93441 93445])
                    ("" variable (:type ("lisplen" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [93446 93454])
                    ("" variable (:type ("memlen" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [93455 93463])
                    ("" variable (:type ("lisplen" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [93464 93472]))                  
                :type "int")
                nil [93420 93473])
            ("v" variable (:type "int") nil [93483 93485])
            ("b" variable
               (:pointer 1
                :default-value "lisp_malloc (sizeof *b, MEM_TYPE_BUFFER)"
                :type ("buffer" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [93532 93592])
            ("BUFFER_PVEC_INIT" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("b" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [93614 93616]))                  
                :type "int")
                nil [93596 93617])
            ("next" variable
               (:default-value "all_buffers"
                :type "int")
                nil [93689 93708])
            ("all_buffers" variable
               (:default-value "b"
                :type "int")
                nil [93711 93727])
            ("b" variable (:type "int") nil [93798 93800])
            ("error" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("pI" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [94053 94075])
                    ("" variable (:type ("count" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [94081 94087])
                    ("" variable (:type ("PSEUDOVECTOR_SIZE_MASK" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [94088 94111]))                  
                :type "int")
                nil [94011 94112])
            ("p" variable
               (:pointer 1
                :default-value "allocate_vectorlike (count)"
                :type ("Lisp_Vector" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [94115 94167])
            ("size" variable
               (:default-value "count"
                :type "int")
                nil [94180 94193])
            ("XSETPVECTYPE" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("p" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [94210 94212])
                    ("" variable (:type ("PVEC_RECORD" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [94213 94225]))                  
                :type "int")
                nil [94196 94226])
            ("p" variable (:type "int") nil [94236 94238])
            ("CHECK_NATNUM" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("slots" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [94579 94585]))                  
                :type "int")
                nil [94565 94586])
            ("size" variable
               (:default-value "XFASTINT (slots) + 1"
                :type ("EMACS_INT" type (:type "class") nil nil))
                nil [94589 94627])
            ("p" variable
               (:pointer 1
                :default-value "allocate_record (size)"
                :type ("Lisp_Vector" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [94630 94677])
            ("contents" variable
               (:dereference 1
                :default-value "type"
                :type "int")
                nil [94683 94702])
            ("contents" variable
               (:dereference 1
                :default-value "init"
                :type "int")
                nil [94749 94768])
            ("make_lisp_ptr" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("p" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [94793 94795])
                    ("" variable (:type ("Lisp_Vectorlike" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [94796 94812]))                  
                :type "int")
                nil [94778 94813])
            ("p" variable
               (:pointer 1
                :default-value "allocate_record (nargs)"
                :type ("Lisp_Vector" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [95159 95207])
            ("memcpy" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("p" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [95218 95220])
                    ("" variable (:type ("contents" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [95221 95230])
                    ("" variable (:type ("args" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [95231 95236])
                    ("" variable
                       (:pointer 1
                        :type ("nargs" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [95237 95251])
                    ("" variable (:type ("args" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [95253 95258]))                  
                :type "int")
                nil [95210 95259])
            ("make_lisp_ptr" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("p" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [95284 95286])
                    ("" variable (:type ("Lisp_Vectorlike" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [95287 95303]))                  
                :type "int")
                nil [95269 95304])
            ("CHECK_NATNUM" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("length" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [95557 95564]))                  
                :type "int")
                nil [95543 95565])
            ("p" variable
               (:pointer 1
                :default-value "allocate_vector (XFASTINT (length))"
                :type ("Lisp_Vector" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [95568 95628])
            ("contents" variable
               (:dereference 1
                :default-value "init"
                :type "int")
                nil [95688 95707])
            ("make_lisp_ptr" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("p" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [95732 95734])
                    ("" variable (:type ("Lisp_Vectorlike" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [95735 95751]))                  
                :type "int")
                nil [95717 95752])
            ("val" variable
               (:default-value "make_uninit_vector (nargs)"
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [96023 96068])
            ("p" variable
               (:pointer 1
                :default-value "XVECTOR (val)"
                :type ("Lisp_Vector" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [96071 96109])
            ("memcpy" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("p" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [96120 96122])
                    ("" variable (:type ("contents" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [96123 96132])
                    ("" variable (:type ("args" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [96133 96138])
                    ("" variable
                       (:pointer 1
                        :type ("nargs" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [96139 96153])
                    ("" variable (:type ("args" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [96155 96160]))                  
                :type "int")
                nil [96112 96161])
            ("val" variable (:type "int") nil [96171 96175])
            ("eassert" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("v" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [96314 96316])
                    ("" variable (:type ("header" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [96317 96324])
                    ("" variable (:type ("size" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [96324 96329]))                  
                :type "int")
                nil [96301 96330])
            ("contents" variable
               (:dereference 1
                :default-value "Fstring_as_unibyte (v->contents[1])"
                :type "int")
                nil [96777 96827])
            ("XSETPVECTYPE" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("v" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [96844 96846])
                    ("" variable (:type ("PVEC_COMPILED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [96847 96861]))                  
                :type "int")
                nil [96830 96862])
            ("val" variable
               (:default-value "make_uninit_vector (nargs)"
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [97990 98035])
            ("p" variable
               (:pointer 1
                :default-value "XVECTOR (val)"
                :type ("Lisp_Vector" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [98038 98076])
            ("memcpy" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("p" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [98571 98573])
                    ("" variable (:type ("contents" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [98574 98583])
                    ("" variable (:type ("args" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [98584 98589])
                    ("" variable
                       (:pointer 1
                        :type ("nargs" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [98590 98604])
                    ("" variable (:type ("args" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [98606 98611]))                  
                :type "int")
                nil [98563 98612])
            ("make_byte_code" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("p" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [98631 98633]))                  
                :type "int")
                nil [98615 98634])
            ("XSETCOMPILED" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("val" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [98651 98655])
                    ("" variable (:type ("p" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [98656 98658]))                  
                :type "int")
                nil [98637 98659])
            ("val" variable (:type "int") nil [98669 98673])
            ("s" variable (:type ("Lisp_Symbol" type
                 (:prototype t
                  :type "struct")
                  nil nil)) nil [98987 99008])
            ("c" variable (:type "unsigned char") nil [99011 99095])
            ("SYMBOL_BLOCK_SIZE" variable (:constant-flag t) nil [99266 99283])
            ("symbols" variable
               (:dereference 1
                :type ("aligned_Lisp_Symbol" type (:type "union") nil nil))
                nil [99447 99500])
            ("next" variable
               (:pointer 1
                :type ("symbol_block" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [99503 99529])
            ("symbol_block" variable
               (:pointer 1
                :typemodifiers ("static")
                :type ("symbol_block" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [99621 99662])
            ("symbol_block_index" variable
               (:typemodifiers ("static")
                :default-value "SYMBOL_BLOCK_SIZE"
                :type "int")
                nil [99663 99713])
            ("symbol_block_pinned" variable
               (:pointer 1
                :typemodifiers ("static")
                :type ("symbol_block" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [100137 100185])
            ("symbol_free_list" variable
               (:pointer 1
                :typemodifiers ("static")
                :type ("Lisp_Symbol" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [100217 100261])
            ("name" variable
               (:default-value "name"
                :type "int")
                nil [100346 100358])
            ("p" variable
               (:pointer 1
                :default-value "XSYMBOL (val)"
                :type ("Lisp_Symbol" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [100419 100457])
            ("set_symbol_name" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("val" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [100477 100481])
                    ("" variable (:type ("name" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [100482 100487]))                  
                :type "int")
                nil [100460 100488])
            ("set_symbol_plist" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("val" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [100509 100513])
                    ("" variable (:type ("Qnil" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [100514 100519]))                  
                :type "int")
                nil [100491 100520])
            ("redirect" variable
               (:default-value "SYMBOL_PLAINVAL"
                :type "int")
                nil [100526 100553])
            ("SET_SYMBOL_VAL" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("p" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [100572 100574])
                    ("" variable (:type ("Qunbound" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [100575 100584]))                  
                :type "int")
                nil [100556 100585])
            ("set_symbol_function" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("val" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [100609 100613])
                    ("" variable (:type ("Qnil" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [100614 100619]))                  
                :type "int")
                nil [100588 100620])
            ("set_symbol_next" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("val" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [100640 100644])
                    ("" variable (:type ("NULL" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [100645 100650]))                  
                :type "int")
                nil [100623 100651])
            ("gcmarkbit" variable
               (:default-value "false"
                :type "int")
                nil [100657 100675])
            ("interned" variable
               (:default-value "SYMBOL_UNINTERNED"
                :type "int")
                nil [100681 100710])
            ("trapped_write" variable
               (:default-value "SYMBOL_UNTRAPPED_WRITE"
                :type "int")
                nil [100716 100755])
            ("declared_special" variable
               (:default-value "false"
                :type "int")
                nil [100761 100786])
            ("pinned" variable
               (:default-value "false"
                :type "int")
                nil [100792 100807])
            ("val" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [101052 101068])
            ("CHECK_STRING" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("name" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [101086 101091]))                  
                :type "int")
                nil [101072 101092])
            ("init_symbol" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("val" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [101661 101665])
                    ("" variable (:type ("name" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [101666 101671]))                  
                :type "int")
                nil [101648 101672])
            ("val" variable (:type "int") nil [101777 101781])
            ("m" variable (:type ("Lisp_Misc" type (:type "union") nil nil)) nil [102100 102118])
            ("c" variable (:type "unsigned char") nil [102121 102202])
            ("MARKER_BLOCK_SIZE" variable (:constant-flag t) nil [102326 102343])
            ("markers" variable
               (:dereference 1
                :type ("aligned_Lisp_Misc" type (:type "union") nil nil))
                nil [102505 102556])
            ("next" variable
               (:pointer 1
                :type ("marker_block" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [102559 102585])
            ("marker_block" variable
               (:pointer 1
                :typemodifiers ("static")
                :type ("marker_block" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [102590 102631])
            ("marker_block_index" variable
               (:typemodifiers ("static")
                :default-value "MARKER_BLOCK_SIZE"
                :type "int")
                nil [102632 102682])
            ("marker_free_list" variable
               (:pointer 1
                :typemodifiers ("static")
                :type ("Lisp_Misc" type (:type "union") nil nil))
                nil [102684 102725])
            ("val" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [102860 102876])
            ("total_free_markers" variable (:type "int") nil [103431 103450])
            ("type" variable
               (:default-value "type"
                :type "int")
                nil [103542 103554])
            ("gcmarkbit" variable
               (:default-value "0"
                :type "int")
                nil [103573 103587])
            ("val" variable (:type "int") nil [103597 103601])
            ("type" variable
               (:default-value "Lisp_Misc_Free"
                :type "int")
                nil [103693 103715])
            ("chain" variable
               (:default-value "marker_free_list"
                :type "int")
                nil [103739 103764])
            ("marker_free_list" variable
               (:default-value "XMISC (misc)"
                :type "int")
                nil [103767 103799])
            ("val" variable
               (:default-value "allocate_misc (Lisp_Misc_Save_Value)"
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [104274 104329])
            ("p" variable
               (:pointer 1
                :default-value "XSAVE_VALUE (val)"
                :type ("Lisp_Save_Value" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [104332 104378])
            ("save_type" variable
               (:default-value "SAVE_TYPE_INT_INT_INT"
                :type "int")
                nil [104384 104418])
            ("integer" variable
               (:default-value "a"
                :type "int")
                nil [104432 104444])
            ("integer" variable
               (:default-value "b"
                :type "int")
                nil [104458 104470])
            ("integer" variable
               (:default-value "c"
                :type "int")
                nil [104484 104496])
            ("val" variable (:type "int") nil [104506 104510])
            ("val" variable
               (:default-value "allocate_misc (Lisp_Misc_Save_Value)"
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [104623 104678])
            ("p" variable
               (:pointer 1
                :default-value "XSAVE_VALUE (val)"
                :type ("Lisp_Save_Value" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [104681 104727])
            ("save_type" variable
               (:default-value "SAVE_TYPE_OBJ_OBJ_OBJ_OBJ"
                :type "int")
                nil [104733 104771])
            ("object" variable
               (:default-value "a"
                :type "int")
                nil [104785 104796])
            ("object" variable
               (:default-value "b"
                :type "int")
                nil [104810 104821])
            ("object" variable
               (:default-value "c"
                :type "int")
                nil [104835 104846])
            ("object" variable
               (:default-value "d"
                :type "int")
                nil [104860 104871])
            ("val" variable (:type "int") nil [104881 104885])
            ("val" variable
               (:default-value "allocate_misc (Lisp_Misc_Save_Value)"
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [104929 104984])
            ("p" variable
               (:pointer 1
                :default-value "XSAVE_VALUE (val)"
                :type ("Lisp_Save_Value" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [104987 105033])
            ("save_type" variable
               (:default-value "SAVE_POINTER"
                :type "int")
                nil [105039 105064])
            ("pointer" variable
               (:default-value "a"
                :type "int")
                nil [105078 105090])
            ("val" variable (:type "int") nil [105100 105104])
            ("val" variable
               (:default-value "allocate_misc (Lisp_Misc_Save_Value)"
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [105165 105220])
            ("p" variable
               (:pointer 1
                :default-value "XSAVE_VALUE (val)"
                :type ("Lisp_Save_Value" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [105223 105269])
            ("save_type" variable
               (:default-value "SAVE_TYPE_PTR_INT"
                :type "int")
                nil [105275 105305])
            ("pointer" variable
               (:default-value "a"
                :type "int")
                nil [105319 105331])
            ("integer" variable
               (:default-value "b"
                :type "int")
                nil [105345 105357])
            ("val" variable (:type "int") nil [105367 105371])
            ("val" variable
               (:default-value "allocate_misc (Lisp_Misc_Save_Value)"
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [105428 105483])
            ("p" variable
               (:pointer 1
                :default-value "XSAVE_VALUE (val)"
                :type ("Lisp_Save_Value" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [105486 105532])
            ("save_type" variable
               (:default-value "SAVE_TYPE_PTR_PTR"
                :type "int")
                nil [105538 105568])
            ("pointer" variable
               (:default-value "a"
                :type "int")
                nil [105582 105594])
            ("pointer" variable
               (:default-value "b"
                :type "int")
                nil [105608 105620])
            ("val" variable (:type "int") nil [105630 105634])
            ("val" variable
               (:default-value "allocate_misc (Lisp_Misc_Save_Value)"
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [105723 105778])
            ("p" variable
               (:pointer 1
                :default-value "XSAVE_VALUE (val)"
                :type ("Lisp_Save_Value" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [105781 105827])
            ("save_type" variable
               (:default-value "SAVE_TYPE_FUNCPTR_PTR_OBJ"
                :type "int")
                nil [105833 105871])
            ("funcpointer" variable
               (:default-value "a"
                :type "int")
                nil [105885 105901])
            ("pointer" variable
               (:default-value "b"
                :type "int")
                nil [105915 105927])
            ("object" variable
               (:default-value "c"
                :type "int")
                nil [105941 105952])
            ("val" variable (:type "int") nil [105962 105966])
            ("val" variable
               (:default-value "allocate_misc (Lisp_Misc_Save_Value)"
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [106122 106177])
            ("p" variable
               (:pointer 1
                :default-value "XSAVE_VALUE (val)"
                :type ("Lisp_Save_Value" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [106180 106226])
            ("save_type" variable
               (:default-value "SAVE_TYPE_MEMORY"
                :type "int")
                nil [106232 106261])
            ("pointer" variable
               (:default-value "a"
                :type "int")
                nil [106275 106287])
            ("integer" variable
               (:default-value "n"
                :type "int")
                nil [106301 106313])
            ("val" variable (:type "int") nil [106323 106327])
            ("xfree" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("XSAVE_POINTER" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [106507 106530]))                  
                :type "int")
                nil [106500 106532])
            ("free_misc" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("save" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [106546 106551]))                  
                :type "int")
                nil [106535 106552])
            ("overlay" variable
               (:typemodifiers ("register")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [106721 106750])
            ("overlay" variable
               (:default-value "allocate_misc (Lisp_Misc_Overlay)"
                :type "int")
                nil [106754 106798])
            ("start" variable (:type "int") nil [106827 106833])
            ("end" variable (:type "int") nil [106860 106864])
            ("set_overlay_plist" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("overlay" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [106886 106894])
                    ("" variable (:type ("plist" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [106895 106901]))                  
                :type "int")
                nil [106867 106902])
            ("next" variable
               (:default-value "NULL"
                :type "int")
                nil [106925 106937])
            ("overlay" variable (:type "int") nil [106947 106955])
            ("val" variable
               (:typemodifiers ("register")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [107118 107143])
            ("p" variable
               (:pointer 1
                :typemodifiers ("register")
                :type ("Lisp_Marker" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [107146 107177])
            ("val" variable
               (:default-value "allocate_misc (Lisp_Misc_Marker)"
                :type "int")
                nil [107181 107220])
            ("p" variable
               (:default-value "XMARKER (val)"
                :type "int")
                nil [107223 107241])
            ("buffer" variable
               (:default-value "0"
                :type "int")
                nil [107247 107258])
            ("bytepos" variable
               (:default-value "0"
                :type "int")
                nil [107264 107276])
            ("charpos" variable
               (:default-value "0"
                :type "int")
                nil [107282 107294])
            ("next" variable
               (:default-value "NULL"
                :type "int")
                nil [107300 107312])
            ("insertion_type" variable
               (:default-value "0"
                :type "int")
                nil [107318 107337])
            ("need_adjustment" variable
               (:default-value "0"
                :type "int")
                nil [107343 107363])
            ("val" variable (:type "int") nil [107373 107377])
            ("obj" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [107591 107607])
            ("m" variable
               (:pointer 1
                :type ("Lisp_Marker" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [107610 107632])
            ("eassert" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("BUFFER_LIVE_P" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [107676 107695]))                  
                :type "int")
                nil [107667 107697])
            ("eassert" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("charpos" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [107757 107766])
                    ("" variable (:type ("bytepos" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [107768 107776]))                  
                :type "int")
                nil [107748 107777])
            ("obj" variable
               (:default-value "allocate_misc (Lisp_Misc_Marker)"
                :type "int")
                nil [107781 107820])
            ("m" variable
               (:default-value "XMARKER (obj)"
                :type "int")
                nil [107823 107841])
            ("buffer" variable
               (:default-value "buf"
                :type "int")
                nil [107847 107860])
            ("charpos" variable
               (:default-value "charpos"
                :type "int")
                nil [107866 107884])
            ("bytepos" variable
               (:default-value "bytepos"
                :type "int")
                nil [107890 107908])
            ("insertion_type" variable
               (:default-value "0"
                :type "int")
                nil [107914 107933])
            ("need_adjustment" variable
               (:default-value "0"
                :type "int")
                nil [107939 107959])
            ("next" variable
               (:default-value "BUF_MARKERS (buf)"
                :type "int")
                nil [107965 107990])
            ("m" variable (:type "int") nil [108013 108015])
            ("obj" variable (:type "int") nil [108025 108029])
            ("unchain_marker" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("XMARKER" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [108160 108176]))                  
                :type "int")
                nil [108144 108178])
            ("free_misc" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("marker" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [108192 108199]))                  
                :type "int")
                nil [108181 108200])
            ("i" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) nil [108545 108557])
            ("Fvector" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("nargs" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [108835 108841])
                    ("" variable (:type ("args" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [108842 108847]))                  
                :type "int")
                nil [108826 108848])
            ("next" variable
               (:default-value "head"
                :type "int")
                nil [109715 109727])
            ("eassert" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("finalizer" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [109899 109909])
                    ("" variable (:type ("prev" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [109910 109916])
                    ("" variable (:type ("NULL" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [109918 109923]))                  
                :type "int")
                nil [109890 109924])
            ("eassert" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("finalizer" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [109936 109946])
                    ("" variable (:type ("next" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [109947 109953])
                    ("" variable (:type ("NULL" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [109955 109960]))                  
                :type "int")
                nil [109927 109961])
            ("next" variable
               (:default-value "element"
                :type "int")
                nil [109975 109990])
            ("prev" variable
               (:default-value "element->prev;"
                :type "int")
                nil [110004 110025])
            ("next" variable
               (:default-value "finalizer"
                :type "int")
                nil [110045 110062])
            ("prev" variable
               (:default-value "finalizer"
                :type "int")
                nil [110074 110091])
            ("finalizer" variable
               (:pointer 1
                :default-value "src->next;"
                :type ("Lisp_Finalizer" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [110949 110994])
            ("add_to_log" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("args" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [111391 111396]))                  
                :type "int")
                nil [111355 111397])
            ("Qnil" variable (:type "int") nil [111407 111412])
            ("count" variable
               (:default-value "SPECPDL_INDEX ()"
                :type ("ptrdiff_t" type (:type "class") nil nil))
                nil [111478 111513])
            ("specbind" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("Qinhibit_quit" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [111527 111541])
                    ("" variable (:type ("Qt" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [111542 111545]))                  
                :type "int")
                nil [111517 111546])
            ("internal_condition_case_1" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("call0" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [111576 111582])
                    ("" variable (:type ("function" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [111583 111592])
                    ("" variable (:type ("Qt" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [111593 111596])
                    ("" variable (:type ("run_finalizer_handler" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [111597 111619]))                  
                :type "int")
                nil [111549 111620])
            ("unbind_to" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("count" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [111634 111640])
                    ("" variable (:type ("Qnil" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [111641 111646]))                  
                :type "int")
                nil [111623 111647])
            ("finalizer" variable
               (:pointer 1
                :type ("Lisp_Finalizer" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [111718 111751])
            ("function" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [111754 111775])
            ("val" variable
               (:default-value "allocate_misc (Lisp_Misc_Finalizer)"
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [112590 112644])
            ("finalizer" variable
               (:pointer 1
                :default-value "XFINALIZER (val)"
                :type ("Lisp_Finalizer" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [112647 112699])
            ("function" variable
               (:default-value "function"
                :type "int")
                nil [112713 112733])
            ("next" variable
               (:default-value "NULL"
                :type "int")
                nil [112765 112777])
            ("finalizer_insert" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("finalizers" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [112799 112810])
                    ("" variable (:type ("finalizer" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [112811 112821]))                  
                :type "int")
                nil [112780 112822])
            ("val" variable (:type "int") nil [112832 112836])
            ("enough_free_memory" variable
               (:default-value "0"
                :type "bool")
                nil [113483 113511])
            ("xsignal" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("Qnil" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [114346 114351])
                    ("" variable (:type ("Vmemory_signal_data" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [114352 114372]))                  
                :type "int")
                nil [114337 114373])
            ("spare_memory" variable
               (:dereference 1
                :default-value "malloc (SPARE_MEMORY)"
                :type "int")
                nil [114814 114854])
            ("spare_memory" variable
               (:dereference 1
                :default-value "lisp_align_malloc (sizeof (struct cons_block),
						  MEM_TYPE_SPARE)"
                :type "int")
                nil [114887 114976])
            ("spare_memory" variable
               (:dereference 1
                :default-value "lisp_align_malloc (sizeof (struct cons_block),
					 MEM_TYPE_SPARE)"
                :type "int")
                nil [115009 115096])
            ("spare_memory" variable
               (:dereference 1
                :default-value "lisp_align_malloc (sizeof (struct cons_block),
					 MEM_TYPE_SPARE)"
                :type "int")
                nil [115129 115216])
            ("spare_memory" variable
               (:dereference 1
                :default-value "lisp_align_malloc (sizeof (struct cons_block),
					 MEM_TYPE_SPARE)"
                :type "int")
                nil [115249 115336])
            ("spare_memory" variable
               (:dereference 1
                :default-value "lisp_malloc (sizeof (struct string_block),
				   MEM_TYPE_SPARE)"
                :type "int")
                nil [115369 115453])
            ("spare_memory" variable
               (:dereference 1
                :default-value "lisp_malloc (sizeof (struct string_block),
				   MEM_TYPE_SPARE)"
                :type "int")
                nil [115486 115570])
            ("Vmemory_full" variable
               (:default-value "Qnil"
                :type "int")
                nil [115636 115656])
            ("right" variable
               (:default-value "MEM_NIL"
                :type "int")
                nil [116579 116595])
            ("parent" variable
               (:default-value "NULL"
                :type "int")
                nil [116604 116618])
            ("color" variable
               (:default-value "MEM_BLACK"
                :type "int")
                nil [116627 116645])
            ("end" variable
               (:default-value "NULL"
                :type "int")
                nil [116668 116679])
            ("mem_root" variable
               (:default-value "MEM_NIL"
                :type "int")
                nil [116682 116701])
            ("p" variable
               (:pointer 1
                :type ("mem_node" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [116890 116909])
            ("mem_z" variable (:type "int") nil [116982 116990])
            ("start" variable
               (:default-value "start"
                :type "int")
                nil [117071 117085])
            ("end" variable
               (:default-value "(char *) start + 1"
                :type "int")
                nil [117094 117119])
            ("p" variable
               (:default-value "mem_root"
                :type "int")
                nil [117123 117136])
            ("right" variable (:type "int") nil [117223 117229])
            ("p" variable (:type "int") nil [117239 117241])
            ("c" variable
               (:pointer 1
                :type ("mem_node" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [117508 117540])
            ("parent" variable
               (:pointer 1
                :type ("mem_node" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [117508 117540])
            ("x" variable
               (:pointer 1
                :type ("mem_node" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [117508 117540])
            ("min_heap_address" variable
               (:default-value "start"
                :type "int")
                nil [117606 117631])
            ("max_heap_address" variable
               (:default-value "end"
                :type "int")
                nil [117694 117717])
            ("c" variable
               (:default-value "mem_root"
                :type "int")
                nil [117916 117929])
            ("parent" variable
               (:default-value "NULL"
                :type "int")
                nil [117932 117946])
            ("x" variable
               (:default-value "xmalloc (sizeof *x)"
                :type "int")
                nil [118173 118197])
            ("start" variable
               (:default-value "start"
                :type "int")
                nil [118210 118224])
            ("end" variable
               (:default-value "end"
                :type "int")
                nil [118230 118240])
            ("type" variable
               (:default-value "type"
                :type "int")
                nil [118246 118258])
            ("parent" variable
               (:default-value "parent"
                :type "int")
                nil [118264 118280])
            ("right" variable
               (:default-value "MEM_NIL"
                :type "int")
                nil [118296 118312])
            ("color" variable
               (:default-value "MEM_RED"
                :type "int")
                nil [118318 118334])
            ("mem_root" variable
               (:default-value "x"
                :type "int")
                nil [118517 118530])
            ("mem_insert_fixup" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("x" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [118601 118603]))                  
                :type "int")
                nil [118583 118604])
            ("x" variable (:type "int") nil [118615 118617])
            ("color" variable
               (:default-value "MEM_BLACK"
                :type "int")
                nil [120543 120561])
            ("y" variable
               (:pointer 1
                :type ("mem_node" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [120777 120796])
            ("y" variable
               (:default-value "x->right;"
                :type "int")
                nil [120857 120870])
            ("right" variable
               (:default-value "y->left;"
                :type "int")
                nil [120876 120892])
            ("parent" variable
               (:default-value "x"
                :type "int")
                nil [120932 120943])
            ("parent" variable
               (:default-value "x->parent;"
                :type "int")
                nil [121008 121027])
            ("mem_root" variable
               (:default-value "y"
                :type "int")
                nil [121209 121222])
            ("left" variable
               (:default-value "x"
                :type "int")
                nil [121257 121266])
            ("parent" variable
               (:default-value "y"
                :type "int")
                nil [121294 121305])
            ("y" variable
               (:pointer 1
                :default-value "x->left;"
                :type ("mem_node" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [121526 121555])
            ("left" variable
               (:default-value "y->right;"
                :type "int")
                nil [121562 121578])
            ("parent" variable
               (:default-value "x"
                :type "int")
                nil [121620 121631])
            ("parent" variable
               (:default-value "x->parent;"
                :type "int")
                nil [121660 121679])
            ("mem_root" variable
               (:default-value "y"
                :type "int")
                nil [121809 121822])
            ("right" variable
               (:default-value "x"
                :type "int")
                nil [121829 121839])
            ("parent" variable
               (:default-value "y"
                :type "int")
                nil [121867 121878])
            ("x" variable
               (:pointer 1
                :type ("mem_node" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [122006 122029])
            ("y" variable
               (:pointer 1
                :type ("mem_node" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [122006 122029])
            ("y" variable
               (:default-value "z"
                :type "int")
                nil [122123 122129])
            ("x" variable
               (:default-value "y->left;"
                :type "int")
                nil [122247 122259])
            ("x" variable
               (:default-value "y->right;"
                :type "int")
                nil [122271 122284])
            ("parent" variable
               (:default-value "y->parent;"
                :type "int")
                nil [122291 122310])
            ("mem_root" variable
               (:default-value "x"
                :type "int")
                nil [122439 122452])
            ("mem_delete_fixup" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("x" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [122607 122609]))                  
                :type "int")
                nil [122589 122610])
            ("xfree" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("y" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [122662 122664]))                  
                :type "int")
                nil [122655 122665])
            ("color" variable
               (:default-value "MEM_BLACK"
                :type "int")
                nil [124395 124413])
            ("Qnil" variable (:type "int") nil [125346 125351])
            ("NILP" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("live_string_holding" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [125429 125455]))                  
                :type "int")
                nil [125423 125457])
            ("Qnil" variable (:type "int") nil [126285 126290])
            ("NILP" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("live_cons_holding" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [126366 126390]))                  
                :type "int")
                nil [126360 126392])
            ("Qnil" variable (:type "int") nil [127244 127249])
            ("NILP" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("live_symbol_holding" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [127327 127353]))                  
                :type "int")
                nil [127321 127355])
            ("Qnil" variable (:type "int") nil [128888 128893])
            ("NILP" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("live_misc_holding" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [128969 128993]))                  
                :type "int")
                nil [128963 128995])
            ("vp" variable
               (:pointer 1
                :default-value "p"
                :type ("Lisp_Vector" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [129215 129242])
            ("Qnil" variable (:type "int") nil [130398 130403])
            ("NILP" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("live_vector_holding" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [130481 130507]))                  
                :type "int")
                nil [130475 130509])
            ("Qnil" variable (:type "int") nil [131101 131106])
            ("NILP" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("live_buffer_holding" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [131184 131210]))                  
                :type "int")
                nil [131178 131212])
            ("po" variable
               (:pointer 1
                :default-value "XPNTR (obj)"
                :type "void")
                nil [131451 131474])
            ("m" variable
               (:pointer 1
                :default-value "mem_find (po)"
                :type ("mem_node" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [131477 131512])
            ("m" variable
               (:pointer 1
                :type ("mem_node" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [132636 132655])
            ("m" variable
               (:default-value "mem_find (p)"
                :type "int")
                nil [133089 133106])
            ("GC_POINTER_ALIGNMENT" variable (:constant-flag t) nil [134135 134155])
            ("pp" variable
               (:pointer 1
                :type "char")
                nil [134360 134369])
            ("eassert" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("alignof" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [134590 134610]))                  
                :type "int")
                nil [134559 134617])
            ("setjmp_tested_p" variable
               (:typemodifiers ("static")
                :type "bool")
                nil [135498 135526])
            ("longjmps_done" variable
               (:typemodifiers ("static")
                :type "int")
                nil [135527 135552])
            ("SETJMP_WILL_LIKELY_WORK" variable (:constant-flag t) nil [135564 135587])
            ("SETJMP_WILL_NOT_WORK" variable (:constant-flag t) nil [136082 136102])
            ("setjmp_tested_p" variable
               (:default-value "true"
                :type "int")
                nil [137036 137059])
            ("buf" variable
               (:dereference 1
                :type "char")
                nil [137062 137075])
            ("x" variable
               (:typemodifiers ("register")
                :type "int")
                nil [137078 137093])
            ("jbuf" variable (:type ("sys_jmp_buf" type (:type "class") nil nil)) nil [137096 137113])
            ("sprintf" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("buf" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [137174 137178]))                  
                :type "int")
                nil [137165 137184])
            ("x" variable
               (:default-value "strlen (buf)"
                :type "int")
                nil [137187 137204])
            ("sys_setjmp" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("jbuf" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [137237 137242]))                  
                :type "int")
                nil [137225 137243])
            ("longjmps_done" variable (:type "int") nil [137834 137848])
            ("x" variable
               (:default-value "2"
                :type "int")
                nil [137851 137857])
            ("sys_longjmp" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("jbuf" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [137901 137906]))                  
                :type "int")
                nil [137888 137910])
            ("o" variable (:type ("max_align_t" type (:type "class") nil nil)) nil [138240 138254])
            ("j" variable (:type ("sys_jmp_buf" type (:type "class") nil nil)) nil [138292 138306])
            ("c" variable (:type "char") nil [138309 138316])
            ("stacktop_sentry" variable (:type "int") nil [138326 138342])
            ("__builtin_unwind_init" variable (:constant-flag t) nil [139163 139184])
            ("NEAR_STACK_TOP" variable (:constant-flag t) nil [139497 139511])
            ("SET_STACK_TOP_ADDRESS" variable (:constant-flag t) nil [139977 139998])
            ("mark_memory" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("bottom" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [142054 142061])
                    ("" variable (:type ("end" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [142062 142066]))                  
                :type "int")
                nil [142041 142067])
            ("end" variable
               (:pointer 1
                :type "void")
                nil [142746 142756])
            ("self" variable
               (:pointer 1
                :default-value "current_thread"
                :type ("thread_state" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [142759 142802])
            ("sentry" variable (:type ("stacktop_sentry" type (:type "class") nil nil)) nil [142805 142833])
            ("test_setjmp" function
               (:prototype-flag t
                :type "int")
                nil [142805 142833])
            ("sys_setjmp" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("sentry" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("j" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type "int")
                nil [142805 142833])
            ("stack_top" variable
               (:default-value "end"
                :type "int")
                nil [142843 142859])
            ("func" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("arg" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [142868 142872]))                  
                :type "int")
                nil [142862 142873])
            ("eassert" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("current_thread" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [142885 142901])
                    ("" variable (:type ("self" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [142903 142908]))                  
                :type "int")
                nil [142876 142909])
            ("lispsym_ptr" variable
               (:pointer 1
                :default-value "(char *) lispsym"
                :type "char")
                nil [142966 143003])
            ("sym_ptr" variable
               (:pointer 1
                :default-value "(char *) sym"
                :type "char")
                nil [143006 143035])
            ("lispsym_offset" variable
               (:default-value "sym_ptr - lispsym_ptr"
                :type ("ptrdiff_t" type (:type "class") nil nil))
                nil [143038 143087])
            ("lispsym" variable (:type "int") nil [143144 143152])
            ("fd" variable
               (:dereference 1
                :type "int")
                nil [143375 143385])
            ("p" variable
               (:pointer 1
                :default-value "XPNTR (obj)"
                :type "void")
                nil [144317 144339])
            ("m" variable
               (:pointer 1
                :default-value "mem_find (p)"
                :type ("mem_node" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [144558 144592])
            ("result" variable
               (:pointer 1
                :type "void")
                nil [145801 145814])
            ("pure_bytes_used" variable
               (:default-value "pure_bytes_used_lisp + pure_bytes_used_non_lisp"
                :type "int")
                nil [146328 146394])
            ("result" variable (:type "int") nil [146443 146450])
            ("purebeg" variable
               (:default-value "xmalloc (10000)"
                :type "int")
                nil [146579 146605])
            ("pure_size" variable
               (:default-value "10000"
                :type "int")
                nil [146608 146626])
            ("size" variable (:type "int") nil [146682 146687])
            ("pure_bytes_used" variable
               (:default-value "0"
                :type "int")
                nil [146690 146710])
            ("pure_bytes_used_non_lisp" variable
               (:default-value "0"
                :type "int")
                nil [146736 146765])
            ("again" variable (:type ("goto" type (:type "class") nil nil)) nil [146768 146779])
            ("message" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("pure_bytes_used" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [147023 147040])
                    ("" variable (:type ("pure_bytes_used_before_overflow" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [147041 147073]))                  
                :type "int")
                nil [146928 147074])
            ("i" variable (:type "int") nil [147346 147352])
            ("skip" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) nil [147355 147428])
            ("bm_skip" variable
               (:dereference 1
                :type ("ptrdiff_t" type (:type "class") nil nil))
                nil [147355 147428])
            ("last_char_skip" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) nil [147355 147428])
            ("infinity" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) nil [147355 147428])
            ("start" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) nil [147355 147428])
            ("start_max" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) nil [147355 147428])
            ("p" variable
               (:pointer 1
                :constant-flag t
                :type "unsigned char")
                nil [147431 147454])
            ("non_lisp_beg" variable
               (:pointer 1
                :type "char")
                nil [147457 147476])
            ("NULL" variable (:type "int") nil [147531 147536])
            ("skip" variable
               (:default-value "nbytes + 1"
                :type "int")
                nil [147579 147597])
            ("bm_skip" variable
               (:dereference 1
                :default-value "skip"
                :type "int")
                nil [147630 147648])
            ("p" variable
               (:default-value "(const unsigned char *) data"
                :type "int")
                nil [147652 147685])
            ("bm_skip" variable
               (:dereference 1
                :default-value "skip"
                :type "int")
                nil [147711 147732])
            ("last_char_skip" variable
               (:default-value "bm_skip['\\0']"
                :type "int")
                nil [147736 147767])
            ("pure_bytes_used_non_lisp" variable (:type "int") nil [147808 147833])
            ("start_max" variable
               (:default-value "pure_bytes_used_non_lisp - (nbytes + 1)"
                :type "int")
                nil [147836 147888])
            ("infinity" variable
               (:default-value "pure_bytes_used_non_lisp + 1"
                :type "int")
                nil [147991 148031])
            ("bm_skip" variable
               (:dereference 1
                :default-value "infinity"
                :type "int")
                nil [148034 148059])
            ("p" variable
               (:default-value "(const unsigned char *) non_lisp_beg + nbytes"
                :type "int")
                nil [148063 148113])
            ("start" variable
               (:default-value "0"
                :type "int")
                nil [148116 148126])
            ("NULL" variable (:type "int") nil [148715 148720])
            ("string" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [149208 149227])
            ("s" variable
               (:pointer 1
                :default-value "pure_alloc (sizeof *s, Lisp_String)"
                :type ("Lisp_String" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [149230 149290])
            ("data" variable
               (:default-value "(unsigned char *) find_string_data_in_pure (data, nbytes)"
                :type "int")
                nil [149296 149361])
            ("size" variable
               (:default-value "nchars"
                :type "int")
                nil [149515 149529])
            ("size_byte" variable
               (:default-value "multibyte ? nbytes : -1"
                :type "int")
                nil [149535 149571])
            ("intervals" variable
               (:default-value "NULL"
                :type "int")
                nil [149577 149594])
            ("XSETSTRING" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [149609 149616])
                    ("" variable (:type ("s" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [149617 149619]))                  
                :type "int")
                nil [149597 149620])
            ("string" variable (:type "int") nil [149630 149637])
            ("string" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [149819 149838])
            ("s" variable
               (:pointer 1
                :default-value "pure_alloc (sizeof *s, Lisp_String)"
                :type ("Lisp_String" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [149841 149901])
            ("size" variable
               (:default-value "nchars"
                :type "int")
                nil [149907 149921])
            ("size_byte" variable
               (:default-value "-1"
                :type "int")
                nil [149927 149942])
            ("data" variable
               (:default-value "(unsigned char *) data"
                :type "int")
                nil [149948 149978])
            ("intervals" variable
               (:default-value "NULL"
                :type "int")
                nil [149984 150001])
            ("XSETSTRING" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [150016 150023])
                    ("" variable (:type ("s" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [150024 150026]))                  
                :type "int")
                nil [150004 150027])
            ("string" variable (:type "int") nil [150037 150044])
            ("p" variable
               (:pointer 1
                :default-value "pure_alloc (sizeof *p, Lisp_Cons)"
                :type ("Lisp_Cons" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [150279 150335])
            ("XSETCONS" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("p" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [150353 150355]))                  
                :type "int")
                nil [150338 150356])
            ("XSETCAR" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("purecopy" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [150373 150387]))                  
                :type "int")
                nil [150359 150389])
            ("XSETCDR" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("purecopy" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [150406 150420]))                  
                :type "int")
                nil [150392 150422])
            ("p" variable
               (:pointer 1
                :default-value "pure_alloc (sizeof *p, Lisp_Float)"
                :type ("Lisp_Float" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [150586 150644])
            ("XSETFLOAT" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("p" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [150663 150665]))                  
                :type "int")
                nil [150647 150666])
            ("XFLOAT_INIT" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("num" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [150687 150691]))                  
                :type "int")
                nil [150669 150692])
            ("word_size" variable
               (:pointer 1
                :type ("len" type (:type "class") nil nil))
                nil [150899 150915])
            ("p" variable
               (:pointer 1
                :default-value "pure_alloc (size, Lisp_Vectorlike)"
                :type ("Lisp_Vector" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [150918 150977])
            ("XSETVECTOR" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("p" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [150997 150999]))                  
                :type "int")
                nil [150980 151000])
            ("size" variable
               (:default-value "len"
                :type "int")
                nil [151025 151036])
            ("eassert" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("NILP" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [151272 151290]))                  
                :type "int")
                nil [151263 151292])
            ("eassert" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("table" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [151304 151310])
                    ("" variable (:type ("pure" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [151311 151316]))                  
                :type "int")
                nil [151295 151317])
            ("pure" variable
               (:pointer 1
                :default-value "pure_alloc (sizeof *pure, Lisp_Vectorlike)"
                :type ("Lisp_Hash_Table" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [151321 151395])
            ("pure_test" variable
               (:default-value "table->test;"
                :type ("hash_table_test" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [151398 151445])
            ("name" variable
               (:default-value "purecopy (table->test.name)"
                :type "int")
                nil [151498 151533])
            ("user_hash_function" variable
               (:default-value "purecopy (table->test.user_hash_function)"
                :type "int")
                nil [151546 151609])
            ("user_cmp_function" variable
               (:default-value "purecopy (table->test.user_cmp_function)"
                :type "int")
                nil [151622 151683])
            ("header" variable
               (:default-value "table->header;"
                :type "int")
                nil [151693 151716])
            ("weak" variable
               (:default-value "purecopy (Qnil)"
                :type "int")
                nil [151725 151748])
            ("hash" variable
               (:default-value "purecopy (table->hash)"
                :type "int")
                nil [151757 151787])
            ("next" variable
               (:default-value "purecopy (table->next)"
                :type "int")
                nil [151796 151826])
            ("index" variable
               (:default-value "purecopy (table->index)"
                :type "int")
                nil [151835 151867])
            ("count" variable
               (:default-value "table->count;"
                :type "int")
                nil [151876 151897])
            ("next_free" variable
               (:default-value "table->next_free;"
                :type "int")
                nil [151906 151935])
            ("pure" variable
               (:default-value "table->pure;"
                :type "int")
                nil [151944 151963])
            ("rehash_threshold" variable
               (:default-value "table->rehash_threshold;"
                :type "int")
                nil [151972 152015])
            ("rehash_size" variable
               (:default-value "table->rehash_size;"
                :type "int")
                nil [152024 152057])
            ("key_and_value" variable
               (:default-value "purecopy (table->key_and_value)"
                :type "int")
                nil [152066 152114])
            ("test" variable
               (:default-value "pure_test"
                :type "int")
                nil [152123 152140])
            ("pure" variable (:type "int") nil [152151 152156])
            ("obj" variable (:type "int") nil [152461 152465])
            ("obj" variable (:type "int") nil [152569 152573])
            ("purecopy" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("obj" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [152602 152606]))                  
                :type "int")
                nil [152592 152607])
            ("object" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [152699 152718])
            ("next" variable
               (:pointer 1
                :type ("pinned_object" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [152721 152748])
            ("pinned_objects" variable
               (:pointer 1
                :type "int")
                nil [152751 152767])
            ("obj" variable (:type "int") nil [152939 152943])
            ("message_with_string" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("obj" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [153105 153109])
                    ("" variable (:type ("true" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [153110 153115]))                  
                :type "int")
                nil [153022 153116])
            ("obj" variable
               (:default-value "pure_cons (XCAR (obj), XCDR (obj))"
                :type "int")
                nil [153306 153347])
            ("obj" variable
               (:default-value "make_pure_float (XFLOAT_DATA (obj))"
                :type "int")
                nil [153377 153419])
            ("obj" variable
               (:default-value "make_pure_string (SSDATA (obj), SCHARS (obj),
			    SBYTES (obj),
			    STRING_MULTIBYTE (obj))"
                :type "int")
                nil [153450 153554])
            ("Fputhash" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("obj" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [155398 155402])
                    ("" variable (:type ("obj" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [155403 155407])
                    ("" variable (:type ("Vpurify_flag" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [155408 155421]))                  
                :type "int")
                nil [155388 155422])
            ("obj" variable (:type "int") nil [155433 155437])
            ("fatal" function
               (:prototype-flag t
                :type "int")
                nil [155780 155848])
            ("staticvec" variable
               (:dereference 1
                :default-value "varaddress"
                :type "int")
                nil [155851 155887])
            ("count" variable
               (:default-value "SPECPDL_INDEX ()"
                :type ("ptrdiff_t" type (:type "class") nil nil))
                nil [156161 156196])
            ("specbind" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("Qgc_cons_threshold" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [156210 156229])
                    ("" variable (:type ("make_number" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [156230 156264]))                  
                :type "int")
                nil [156200 156266])
            ("count" variable (:type "int") nil [156276 156282])
            ("make_number" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("min" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [156448 156482]))                  
                :type "int")
                nil [156435 156484])
            ("tot" variable
               (:default-value "0"
                :type ("size_t" type (:type "class") nil nil))
                nil [156588 156603])
            ("total_string_bytes" variable (:type "int") nil [156770 156789])
            ("word_size" variable
               (:pointer 1
                :type ("total_vector_slots" type (:type "class") nil nil))
                nil [156799 156830])
            ("tot" variable (:type "int") nil [157000 157004])
            ("compact_font_caches" variable (:constant-flag t) nil [159745 159764])
            ("tail" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [159981 160013])
            ("prev" variable
               (:pointer 1
                :default-value "&list"
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [159981 160013])
            ("list" variable (:type "int") nil [160262 160267])
            ("mark_object" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("pobj" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [160406 160411])
                    ("" variable (:type ("object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [160412 160419]))                  
                :type "int")
                nil [160393 160420])
            ("sblk" variable
               (:pointer 1
                :type ("symbol_block" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [160467 160493])
            ("lim" variable
               (:default-value "(symbol_block_pinned == symbol_block
	     ? symbol_block_index : SYMBOL_BLOCK_SIZE)"
                :type "int")
                nil [160496 160591])
            ("nextb" variable
               (:pointer 1
                :type ("buffer" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [161397 161418])
            ("stack_top_variable" variable (:type "char") nil [161421 161445])
            ("i" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) nil [161448 161460])
            ("message_p" variable (:type "bool") nil [161463 161478])
            ("count" variable
               (:default-value "SPECPDL_INDEX ()"
                :type ("ptrdiff_t" type (:type "class") nil nil))
                nil [161481 161516])
            ("start" variable (:type ("timespec" type
                 (:prototype t
                  :type "struct")
                  nil nil)) nil [161519 161541])
            ("retval" variable
               (:default-value "Qnil"
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [161544 161570])
            ("tot_before" variable
               (:default-value "0"
                :type ("size_t" type (:type "class") nil nil))
                nil [161573 161595])
            ("Qnil" variable (:type "int") nil [161762 161767])
            ("record_in_backtrace" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("QAutomatic_GC" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [161867 161881]))                  
                :type "int")
                nil [161846 161888])
            ("check_cons_list" function
               (:prototype-flag t
                :type "int")
                nil [161892 161911])
            ("compact_buffer" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("nextb" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [162074 162080]))                  
                :type "int")
                nil [162058 162081])
            ("tot_before" variable
               (:default-value "total_bytes_of_live_objects ()"
                :type "int")
                nil [162118 162162])
            ("start" variable
               (:default-value "current_timespec ()"
                :type "int")
                nil [162166 162194])
            ("consing_since_gc" variable
               (:default-value "0"
                :type "int")
                nil [162291 162312])
            ("message_p" variable
               (:default-value "false"
                :type "int")
                nil [162656 162674])
            ("message1_nolog" function
               (:prototype-flag t
                :type "int")
                nil [163397 163438])
            ("block_input" function
               (:prototype-flag t
                :type "int")
                nil [163442 163457])
            ("shrink_regexp_cache" function
               (:prototype-flag t
                :type "int")
                nil [163461 163484])
            ("gc_in_progress" variable
               (:default-value "1"
                :type "int")
                nil [163488 163507])
            ("mark_buffer" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("buffer_defaults" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [163604 163620]))                  
                :type "int")
                nil [163590 163621])
            ("mark_buffer" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("buffer_local_symbols" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [163638 163659]))                  
                :type "int")
                nil [163624 163660])
            ("mark_object" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("builtin_lisp_symbol" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [163723 163746]))                  
                :type "int")
                nil [163710 163748])
            ("mark_object" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("staticvec" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [163802 163814]))                  
                :type "int")
                nil [163788 163816])
            ("mark_pinned_objects" function
               (:prototype-flag t
                :type "int")
                nil [163820 163843])
            ("mark_pinned_symbols" function
               (:prototype-flag t
                :type "int")
                nil [163846 163869])
            ("mark_terminals" function
               (:prototype-flag t
                :type "int")
                nil [163872 163890])
            ("mark_kboards" function
               (:prototype-flag t
                :type "int")
                nil [163893 163909])
            ("mark_threads" function
               (:prototype-flag t
                :type "int")
                nil [163912 163928])
            ("FOR_EACH_BUFFER" function
               (:arguments 
                  ( ("" variable (:type ("nextb" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [164316 164322]))                  
                :type "int")
                nil [164299 164622])
            ("queue_doomed_finalizers" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("doomed_finalizers" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [165024 165042])
                    ("" variable (:type ("finalizers" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [165044 165055]))                  
                :type "int")
                nil [164998 165056])
            ("mark_finalizer_list" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("doomed_finalizers" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [165081 165099]))                  
                :type "int")
                nil [165059 165100])
            ("gc_sweep" function
               (:prototype-flag t
                :type "int")
                nil [165104 165116])
            ("check_cons_list" function
               (:prototype-flag t
                :type "int")
                nil [165262 165281])
            ("gc_in_progress" variable
               (:default-value "0"
                :type "int")
                nil [165285 165304])
            ("unblock_input" function
               (:prototype-flag t
                :type "int")
                nil [165308 165325])
            ("consing_since_gc" variable
               (:default-value "0"
                :type "int")
                nil [165329 165350])
            ("gc_cons_threshold" variable
               (:default-value "GC_DEFAULT_THRESHOLD / 10"
                :type "int")
                nil [165408 165454])
            ("gc_relative_threshold" variable
               (:default-value "0"
                :type "int")
                nil [165458 165484])
            ("unbind_to" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("count" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [166039 166045])
                    ("" variable (:type ("Qnil" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [166046 166051]))                  
                :type "int")
                nil [166028 166052])
            ("total" variable
               (:dereference 1
                :default-value "{
    list4 (Qconses, make_number (sizeof (struct Lisp_Cons)),
	   bounded_number (total_conses),
	   bounded_number (total_free_conses)),
    list4 (Qsymbols, make_number (sizeof (struct Lisp_Symbol)),
	   bounded_number (total_symbols),
	   bounded_number (total_free_symbols)),
    list4 (Qmiscs, make_number (sizeof (union Lisp_Misc)),
	   bounded_number (total_markers),
	   bounded_number (total_free_markers)),
    list4 (Qstrings, make_number (sizeof (struct Lisp_String)),
	   bounded_number (total_strings),
	   bounded_number (total_free_strings)),
    list3 (Qstring_bytes, make_number (1),
	   bounded_number (total_string_bytes)),
    list3 (Qvectors,
	   make_number (header_size + sizeof (Lisp_Object)),
	   bounded_number (total_vectors)),
    list4 (Qvector_slots, make_number (word_size),
	   bounded_number (total_vector_slots),
	   bounded_number (total_free_vector_slots)),
    list4 (Qfloats, make_number (sizeof (struct Lisp_Float)),
	   bounded_number (total_floats),
	   bounded_number (total_free_floats)),
    list4 (Qintervals, make_number (sizeof (struct interval)),
	   bounded_number (total_intervals),
	   bounded_number (total_free_intervals)),
    list3 (Qbuffers, make_number (sizeof (struct buffer)),
	   bounded_number (total_buffers)),

#ifdef DOUG_LEA_MALLOC
    list4 (Qheap, make_number (1024),
	   bounded_number ((mallinfo ().uordblks + 1023) >> 10),
	   bounded_number ((mallinfo ().fordblks + 1023) >> 10)),
#endif
  }"
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [166056 167543])
            ("retval" variable
               (:default-value "CALLMANY (Flist, total)"
                :type "int")
                nil [167546 167579])
            ("run_finalizers" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("doomed_finalizers" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [167665 167683]))                  
                :type "int")
                nil [167648 167684])
            ("retval" variable (:type "int") nil [168379 168386])
            ("end" variable
               (:pointer 1
                :type "void")
                nil [169368 169378])
            ("sentry" variable (:type ("stacktop_sentry" type (:type "class") nil nil)) nil [169381 169409])
            ("test_setjmp" function
               (:prototype-flag t
                :type "int")
                nil [169381 169409])
            ("sys_setjmp" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("sentry" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil)
                    ("" variable (:type ("j" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) nil))                  
                :type "int")
                nil [169381 169409])
            ("garbage_collect_1" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("end" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [169439 169443]))                  
                :type "int")
                nil [169420 169444])
            ("row" variable
               (:pointer 1
                :default-value "matrix->rows;"
                :type ("glyph_row" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [169641 169678])
            ("end" variable
               (:pointer 1
                :default-value "row + matrix->nrows;"
                :type ("glyph_row" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [169681 169725])
            ("LAST_MARKED_SIZE" variable (:constant-flag t) nil [170292 170308])
            ("EXTERNALLY_VISIBLE" variable (:type "int") nil [170355 170374])
            ("last_marked_index" variable
               (:typemodifiers ("static")
                :type "int")
                nil [170375 170404])
            ("EXTERNALLY_VISIBLE" variable (:type ("mark_object_loop_halt" type (:type "class") nil nil)) nil [170626 170667])
            ("size" variable
               (:default-value "ptr->header.size;"
                :type ("ptrdiff_t" type (:type "class") nil nil))
                nil [170727 170761])
            ("i" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) nil [170764 170776])
            ("eassert" function
               (:prototype-flag t
                :type "int")
                nil [170780 170813])
            ("PSEUDOVECTOR_SIZE_MASK" variable (:type "int") nil [170901 170924])
            ("mark_object" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("ptr" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [171270 171274])
                    ("" variable (:type ("contents" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [171275 171286]))                  
                :type "int")
                nil [171257 171288])
            ("size" variable
               (:default-value "ptr->header.size & PSEUDOVECTOR_SIZE_MASK"
                :type "int")
                nil [171521 171574])
            ("i" variable (:type "int") nil [171647 171722])
            ("idx" variable
               (:default-value "(pvectype == PVEC_SUB_CHAR_TABLE ? SUB_CHAR_TABLE_OFFSET : 0)"
                :type "int")
                nil [171647 171722])
            ("eassert" function
               (:prototype-flag t
                :type "int")
                nil [171726 171759])
            ("i" variable (:type "int") nil [172244 172300])
            ("size" variable
               (:default-value "ptr->header.size & PSEUDOVECTOR_SIZE_MASK"
                :type "int")
                nil [172244 172300])
            ("mark_object" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("ptr" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [172404 172408])
                    ("" variable (:type ("contents" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [172409 172420]))                  
                :type "int")
                nil [172391 172422])
            ("Qnil" variable (:type "int") nil [172496 172501])
            ("mark_vectorlike" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("buffer" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [173092 173099]))                  
                :type "int")
                nil [173052 173100])
            ("mark_overlay" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("buffer" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [173422 173429])
                    ("" variable (:type ("overlays_before" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [173430 173446]))                  
                :type "int")
                nil [173408 173447])
            ("mark_overlay" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("buffer" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [173464 173471])
                    ("" variable (:type ("overlays_after" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [173472 173487]))                  
                :type "int")
                nil [173450 173488])
            ("mark_buffer" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("buffer" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [173638 173645])
                    ("" variable (:type ("base_buffer" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [173646 173658]))                  
                :type "int")
                nil [173625 173659])
            ("blv" variable
               (:pointer 1
                :default-value "SYMBOL_BLV (ptr)"
                :type ("Lisp_Buffer_Local_Value" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [174291 174346])
            ("where" variable
               (:default-value "blv->where;"
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [174349 174380])
            ("swap_in_global_binding" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("ptr" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [174751 174755]))                  
                :type "int")
                nil [174727 174756])
            ("mark_object" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("blv" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [174772 174776])
                    ("" variable (:type ("where" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [174777 174783]))                  
                :type "int")
                nil [174759 174784])
            ("mark_object" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("blv" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [174800 174804])
                    ("" variable (:type ("valcell" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [174805 174813]))                  
                :type "int")
                nil [174787 174814])
            ("mark_object" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("blv" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [174830 174834])
                    ("" variable (:type ("defcell" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [174835 174843]))                  
                :type "int")
                nil [174817 174844])
            ("tail" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [175754 175786])
            ("prev" variable
               (:pointer 1
                :default-value "&list"
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [175754 175786])
            ("mark_object" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("tail" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [176173 176178]))                  
                :type "int")
                nil [176160 176179])
            ("list" variable (:type "int") nil [176189 176194])
            ("obj" variable
               (:typemodifiers ("register")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [176634 176659])
            ("po" variable
               (:pointer 1
                :type "void")
                nil [176662 176671])
            ("cdr_count" variable
               (:default-value "0"
                :type ("ptrdiff_t" type (:type "class") nil nil))
                nil [176731 176755])
            ("obj" variable
               (:default-value "arg"
                :type "int")
                nil [176759 176769])
            ("po" variable
               (:default-value "XPNTR (obj)"
                :type "int")
                nil [176780 176797])
            ("last_marked" variable
               (:dereference 1
                :default-value "obj"
                :type "int")
                nil [176832 176871])
            ("last_marked_index" variable
               (:default-value "0"
                :type "int")
                nil [176921 176943])
            ("CHECK_LIVE" variable (:constant-flag t) nil [178094 178104])
            ("CHECK_ALLOCATED_AND_LIVE" variable (:constant-flag t) nil [178133 178157])
            ("CHECK_ALLOCATED_AND_LIVE_SYMBOL" variable (:constant-flag t) nil [178185 178216])
            ("t" variable
               (:pointer 1
                :type ("terminal" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [184908 184927])
            ("survives_p" variable (:type "bool") nil [185530 185546])
            ("PURE_P" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("XPNTR" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [186228 186239]))                  
                :type "int")
                nil [186220 186241])
            ("cblk" variable
               (:pointer 1
                :type ("cons_block" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [186325 186349])
            ("cprev" variable
               (:pointer 2
                :default-value "&cons_block"
                :type ("cons_block" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [186352 186392])
            ("lim" variable
               (:default-value "cons_block_index"
                :type "int")
                nil [186395 186422])
            ("num_free" variable
               (:default-value "0"
                :type ("EMACS_INT" type (:type "class") nil nil))
                nil [186425 186462])
            ("num_used" variable
               (:default-value "0"
                :type ("EMACS_INT" type (:type "class") nil nil))
                nil [186425 186462])
            ("cons_free_list" variable
               (:default-value "0"
                :type "int")
                nil [186466 186485])
            ("total_conses" variable
               (:default-value "num_used"
                :type "int")
                nil [188495 188519])
            ("total_free_conses" variable
               (:default-value "num_free"
                :type "int")
                nil [188522 188551])
            ("fblk" variable
               (:pointer 1
                :typemodifiers ("register")
                :type ("float_block" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [188631 188665])
            ("fprev" variable
               (:pointer 2
                :default-value "&float_block"
                :type ("float_block" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [188668 188710])
            ("lim" variable
               (:typemodifiers ("register")
                :default-value "float_block_index"
                :type "int")
                nil [188713 188750])
            ("num_free" variable
               (:default-value "0"
                :type ("EMACS_INT" type (:type "class") nil nil))
                nil [188753 188790])
            ("num_used" variable
               (:default-value "0"
                :type ("EMACS_INT" type (:type "class") nil nil))
                nil [188753 188790])
            ("float_free_list" variable
               (:default-value "0"
                :type "int")
                nil [188794 188814])
            ("total_floats" variable
               (:default-value "num_used"
                :type "int")
                nil [189808 189832])
            ("total_free_floats" variable
               (:default-value "num_free"
                :type "int")
                nil [189835 189864])
            ("iblk" variable
               (:pointer 1
                :typemodifiers ("register")
                :type ("interval_block" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [189947 189984])
            ("iprev" variable
               (:pointer 2
                :default-value "&interval_block"
                :type ("interval_block" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [189987 190035])
            ("lim" variable
               (:typemodifiers ("register")
                :default-value "interval_block_index"
                :type "int")
                nil [190038 190078])
            ("num_free" variable
               (:default-value "0"
                :type ("EMACS_INT" type (:type "class") nil nil))
                nil [190081 190118])
            ("num_used" variable
               (:default-value "0"
                :type ("EMACS_INT" type (:type "class") nil nil))
                nil [190081 190118])
            ("interval_free_list" variable
               (:default-value "0"
                :type "int")
                nil [190122 190145])
            ("total_intervals" variable
               (:default-value "num_used"
                :type "int")
                nil [191233 191260])
            ("total_free_intervals" variable
               (:default-value "num_free"
                :type "int")
                nil [191263 191295])
            ("sblk" variable
               (:pointer 1
                :type ("symbol_block" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [191376 191402])
            ("sprev" variable
               (:pointer 2
                :default-value "&symbol_block"
                :type ("symbol_block" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [191405 191449])
            ("lim" variable
               (:default-value "symbol_block_index"
                :type "int")
                nil [191452 191481])
            ("num_free" variable
               (:default-value "0"
                :type ("EMACS_INT" type (:type "class") nil nil))
                nil [191484 191539])
            ("num_used" variable
               (:default-value "ARRAYELTS (lispsym)"
                :type ("EMACS_INT" type (:type "class") nil nil))
                nil [191484 191539])
            ("symbol_free_list" variable
               (:default-value "NULL"
                :type "int")
                nil [191543 191567])
            ("gcmarkbit" variable
               (:default-value "0"
                :type "int")
                nil [191634 191648])
            ("total_symbols" variable
               (:default-value "num_used"
                :type "int")
                nil [192988 193013])
            ("total_free_symbols" variable
               (:default-value "num_free"
                :type "int")
                nil [193016 193046])
            ("mblk" variable
               (:pointer 1
                :typemodifiers ("register")
                :type ("marker_block" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [193126 193161])
            ("mprev" variable
               (:pointer 2
                :default-value "&marker_block"
                :type ("marker_block" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [193164 193208])
            ("lim" variable
               (:typemodifiers ("register")
                :default-value "marker_block_index"
                :type "int")
                nil [193211 193249])
            ("num_free" variable
               (:default-value "0"
                :type ("EMACS_INT" type (:type "class") nil nil))
                nil [193252 193289])
            ("num_used" variable
               (:default-value "0"
                :type ("EMACS_INT" type (:type "class") nil nil))
                nil [193252 193289])
            ("marker_free_list" variable
               (:default-value "0"
                :type "int")
                nil [193410 193431])
            ("total_markers" variable
               (:default-value "num_used"
                :type "int")
                nil [195265 195290])
            ("total_free_markers" variable
               (:default-value "num_free"
                :type "int")
                nil [195293 195323])
            ("buffer" variable
               (:pointer 1
                :typemodifiers ("register")
                :type ("buffer" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [195404 195459])
            ("bprev" variable
               (:pointer 2
                :typemodifiers ("register")
                :default-value "&all_buffers"
                :type ("buffer" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [195404 195459])
            ("total_buffers" variable
               (:default-value "0"
                :type "int")
                nil [195463 195481])
            ("sweep_weak_hash_tables" function
               (:prototype-flag t
                :type "int")
                nil [196100 196126])
            ("sweep_strings" function
               (:prototype-flag t
                :type "int")
                nil [196130 196147])
            ("sweep_conses" function
               (:prototype-flag t
                :type "int")
                nil [196190 196206])
            ("sweep_floats" function
               (:prototype-flag t
                :type "int")
                nil [196209 196225])
            ("sweep_intervals" function
               (:prototype-flag t
                :type "int")
                nil [196228 196247])
            ("sweep_symbols" function
               (:prototype-flag t
                :type "int")
                nil [196250 196267])
            ("sweep_misc" function
               (:prototype-flag t
                :type "int")
                nil [196270 196284])
            ("sweep_buffers" function
               (:prototype-flag t
                :type "int")
                nil [196287 196304])
            ("sweep_vectors" function
               (:prototype-flag t
                :type "int")
                nil [196307 196324])
            ("Qnil" variable (:type "int") nil [197818 197823])
            ("end" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [198201 198217])
            ("XSETINT" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("end" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [198359 198363]))                  
                :type "int")
                nil [198350 198367])
            ("end" variable (:type "int") nil [198445 198449])
            ("listn" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("CONSTYPE_HEAP" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [199251 199265])
                    ("" variable (:type ("bounded_number" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [199271 199305])
                    ("" variable (:type ("bounded_number" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [199309 199339])
                    ("" variable (:type ("bounded_number" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [199343 199379])
                    ("" variable (:type ("bounded_number" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [199383 199414])
                    ("" variable (:type ("bounded_number" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [199418 199454])
                    ("" variable (:type ("bounded_number" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [199458 199494])
                    ("" variable (:type ("bounded_number" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [199498 199531])
                    ("" variable (:type ("bounded_number" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [199535 199566]))                  
                :type "int")
                nil [199244 199568])
            ("sym" variable
               (:pointer 1
                :default-value "XSYMBOL (symbol)"
                :type ("Lisp_Symbol" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [199642 199685])
            ("val" variable
               (:default-value "find_symbol_value (symbol)"
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [199688 199733])
            ("sblk" variable
               (:pointer 1
                :type ("symbol_block" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [200220 200246])
            ("gc_count" variable
               (:default-value "inhibit_garbage_collection ()"
                :type ("ptrdiff_t" type (:type "class") nil nil))
                nil [200250 200301])
            ("found" variable
               (:default-value "Qnil"
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [200305 200330])
            ("unbind_to" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("gc_count" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [201107 201116])
                    ("" variable (:type ("Qnil" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [201117 201122]))                  
                :type "int")
                nil [201096 201123])
            ("found" variable (:type "int") nil [201134 201140])
            ("begin_a" variable
               (:pointer 1
                :default-value "begin"
                :type "char")
                nil [201254 201276])
            ("end_a" variable
               (:pointer 1
                :default-value "end"
                :type "char")
                nil [201279 201297])
            ("i" variable (:type "int") nil [201300 201306])
            ("NULL" variable (:type "int") nil [201536 201541])
            ("rec" variable
               (:pointer 1
                :type ("suspicious_free_record" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [201594 201629])
            ("rec" variable
               (:default-value "&suspicious_free_history[suspicious_free_history_index++]"
                :type "int")
                nil [201633 201697])
            ("memset" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("rec" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [201844 201848]))                  
                :type "int")
                nil [201836 201867])
            ("suspicious_object" variable
               (:default-value "ptr"
                :type "int")
                nil [201875 201899])
            ("backtrace" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("rec" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [201914 201918])
                    ("" variable (:type ("backtrace" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [201919 201931])
                    ("" variable (:type ("ARRAYELTS" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [201933 201959]))                  
                :type "int")
                nil [201902 201961])
            ("i" variable (:type "int") nil [202016 202022])
            ("eassert" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("ptr" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [202035 202040])
                    ("" variable (:type ("NULL" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [202042 202047]))                  
                :type "int")
                nil [202026 202048])
            ("obj" variable (:type "int") nil [202936 202940])
            ("verify_alloca" variable (:constant-flag t) nil [203771 203784])
            ("Vpurify_flag" variable
               (:default-value "Qt"
                :type "int")
                nil [203984 204002])
            ("purebeg" variable
               (:default-value "PUREBEG"
                :type "int")
                nil [204006 204024])
            ("pure_size" variable
               (:default-value "PURESIZE"
                :type "int")
                nil [204027 204048])
            ("init_finalizer_list" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("finalizers" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [204094 204105]))                  
                :type "int")
                nil [204072 204106])
            ("init_finalizer_list" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("doomed_finalizers" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [204131 204149]))                  
                :type "int")
                nil [204109 204150])
            ("mem_init" function
               (:prototype-flag t
                :type "int")
                nil [204154 204166])
            ("Vdead" variable
               (:default-value "make_pure_string (\"DEAD\", 4, 4, 0)"
                :type "int")
                nil [204169 204212])
            ("init_strings" function
               (:prototype-flag t
                :type "int")
                nil [204455 204471])
            ("init_vectors" function
               (:prototype-flag t
                :type "int")
                nil [204474 204490])
            ("refill_memory_reserve" function
               (:prototype-flag t
                :type "int")
                nil [204494 204519])
            ("gc_cons_threshold" variable
               (:default-value "GC_DEFAULT_THRESHOLD"
                :type "int")
                nil [204522 204563])
            ("Vgc_elapsed" variable
               (:default-value "make_float (0.0)"
                :type "int")
                nil [204594 204625])
            ("gcs_done" variable
               (:default-value "0"
                :type "int")
                nil [204628 204641])
            ("DEFVAR_INT" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("gc_cons_threshold" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [204774 204792])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [204800 204804]))                  
                :type "int")
                nil [204741 205238])
            ("DEFVAR_LISP" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("Vgc_cons_percentage" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [205277 205297])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [205306 205310]))                  
                :type "int")
                nil [205242 205558])
            ("Vgc_cons_percentage" variable
               (:default-value "make_float (0.1)"
                :type "int")
                nil [205561 205600])
            ("DEFVAR_INT" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("pure_bytes_used" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [205635 205651])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [205659 205663]))                  
                :type "int")
                nil [205604 205729])
            ("DEFVAR_INT" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("cons_cells_consed" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [205766 205784])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [205792 205796]))                  
                :type "int")
                nil [205733 205856])
            ("DEFVAR_INT" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("floats_consed" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [205889 205903])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [205911 205915]))                  
                :type "int")
                nil [205860 205971])
            ("DEFVAR_INT" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("vector_cells_consed" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [206010 206030])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [206038 206042]))                  
                :type "int")
                nil [205975 206104])
            ("DEFVAR_INT" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("symbols_consed" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [206138 206153])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [206161 206165]))                  
                :type "int")
                nil [206108 206222])
            ("ARRAYELTS" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("lispsym" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [206254 206262]))                  
                :type "int")
                nil [206243 206263])
            ("DEFVAR_INT" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("string_chars_consed" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [206302 206322])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [206330 206334]))                  
                :type "int")
                nil [206267 206401])
            ("DEFVAR_INT" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("misc_objects_consed" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [206440 206460])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [206468 206472]))                  
                :type "int")
                nil [206405 206622])
            ("DEFVAR_INT" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("intervals_consed" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [206658 206675])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [206683 206687]))                  
                :type "int")
                nil [206626 206746])
            ("DEFVAR_INT" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("strings_consed" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [206780 206795])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [206803 206807]))                  
                :type "int")
                nil [206750 206864])
            ("DEFVAR_LISP" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("Vpurify_flag" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [206896 206909])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [206918 206922]))                  
                :type "int")
                nil [206868 207199])
            ("DEFVAR_BOOL" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("garbage_collection_messages" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [207247 207275])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [207284 207288]))                  
                :type "int")
                nil [207203 207368])
            ("garbage_collection_messages" variable
               (:default-value "0"
                :type "int")
                nil [207371 207403])
            ("DEFVAR_LISP" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("Vpost_gc_hook" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [207436 207450])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [207459 207463]))                  
                :type "int")
                nil [207407 207520])
            ("Vpost_gc_hook" variable
               (:default-value "Qnil"
                :type "int")
                nil [207523 207544])
            ("DEFSYM" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("Qpost_gc_hook" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [207555 207569]))                  
                :type "int")
                nil [207547 207586])
            ("DEFVAR_LISP" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("Vmemory_signal_data" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [207625 207645])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [207654 207658]))                  
                :type "int")
                nil [207590 207720])
            ("Vmemory_signal_data" variable
               (:default-value "listn (CONSTYPE_PURE, 2, Qerror,
	     build_pure_c_string (\"Memory exhausted--use M-x save-some-buffers then exit and restart Emacs\"))"
                :type "int")
                nil [207855 208017])
            ("DEFVAR_LISP" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("Vmemory_full" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [208049 208062])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [208071 208075]))                  
                :type "int")
                nil [208021 208138])
            ("Vmemory_full" variable
               (:default-value "Qnil"
                :type "int")
                nil [208141 208161])
            ("DEFSYM" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("Qconses" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [208173 208181]))                  
                :type "int")
                nil [208165 208192])
            ("DEFSYM" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("Qsymbols" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [208203 208212]))                  
                :type "int")
                nil [208195 208224])
            ("DEFSYM" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("Qmiscs" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [208235 208242]))                  
                :type "int")
                nil [208227 208252])
            ("DEFSYM" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("Qstrings" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [208263 208272]))                  
                :type "int")
                nil [208255 208284])
            ("DEFSYM" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("Qvectors" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [208295 208304]))                  
                :type "int")
                nil [208287 208316])
            ("DEFSYM" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("Qfloats" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [208327 208335]))                  
                :type "int")
                nil [208319 208346])
            ("DEFSYM" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("Qintervals" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [208357 208368]))                  
                :type "int")
                nil [208349 208382])
            ("DEFSYM" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("Qbuffers" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [208393 208402]))                  
                :type "int")
                nil [208385 208414])
            ("DEFSYM" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("Qstring_bytes" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [208425 208439]))                  
                :type "int")
                nil [208417 208456])
            ("DEFSYM" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("Qvector_slots" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [208467 208481]))                  
                :type "int")
                nil [208459 208498])
            ("DEFSYM" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("Qheap" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [208509 208515]))                  
                :type "int")
                nil [208501 208524])
            ("DEFSYM" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("QAutomatic_GC" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [208535 208549]))                  
                :type "int")
                nil [208527 208566])
            ("DEFSYM" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("Qgc_cons_threshold" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [208578 208597]))                  
                :type "int")
                nil [208570 208619])
            ("DEFSYM" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("Qchar_table_extra_slots" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [208630 208654]))                  
                :type "int")
                nil [208622 208681])
            ("DEFVAR_LISP" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("Vgc_elapsed" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [208712 208724])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [208733 208737]))                  
                :type "int")
                nil [208685 208845])
            ("DEFVAR_INT" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("gcs_done" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [208872 208881])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [208896 208900]))                  
                :type "int")
                nil [208848 208957])
            ("defsubr" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("Scons" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [208971 208977]))                  
                :type "int")
                nil [208961 208978])
            ("defsubr" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("Slist" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [208991 208997]))                  
                :type "int")
                nil [208981 208998])
            ("defsubr" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("Svector" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [209011 209019]))                  
                :type "int")
                nil [209001 209020])
            ("defsubr" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("Srecord" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [209033 209041]))                  
                :type "int")
                nil [209023 209042])
            ("defsubr" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("Sbool_vector" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [209055 209068]))                  
                :type "int")
                nil [209045 209069])
            ("defsubr" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("Smake_byte_code" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [209082 209098]))                  
                :type "int")
                nil [209072 209099])
            ("defsubr" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("Smake_list" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [209112 209123]))                  
                :type "int")
                nil [209102 209124])
            ("defsubr" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("Smake_vector" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [209137 209150]))                  
                :type "int")
                nil [209127 209151])
            ("defsubr" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("Smake_record" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [209164 209177]))                  
                :type "int")
                nil [209154 209178])
            ("defsubr" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("Smake_string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [209191 209204]))                  
                :type "int")
                nil [209181 209205])
            ("defsubr" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("Smake_bool_vector" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [209218 209236]))                  
                :type "int")
                nil [209208 209237])
            ("defsubr" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("Smake_symbol" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [209250 209263]))                  
                :type "int")
                nil [209240 209264])
            ("defsubr" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("Smake_marker" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [209277 209290]))                  
                :type "int")
                nil [209267 209291])
            ("defsubr" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("Smake_finalizer" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [209304 209320]))                  
                :type "int")
                nil [209294 209321])
            ("defsubr" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("Spurecopy" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [209334 209344]))                  
                :type "int")
                nil [209324 209345])
            ("defsubr" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("Sgarbage_collect" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [209358 209375]))                  
                :type "int")
                nil [209348 209376])
            ("defsubr" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("Smemory_limit" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [209389 209403]))                  
                :type "int")
                nil [209379 209404])
            ("defsubr" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("Smemory_info" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [209417 209430]))                  
                :type "int")
                nil [209407 209431])
            ("defsubr" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("Smemory_use_counts" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [209444 209463]))                  
                :type "int")
                nil [209434 209464])
            ("defsubr" function
               (:prototype-flag t
                :arguments 
                  ( ("" variable (:type ("Ssuspicious_object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [209477 209496]))                  
                :type "int")
                nil [209467 209497])
            ("CHARTAB_SIZE_BITS" variable (:type ("CHARTAB_SIZE_BITS" type (:type "enum") nil nil)) nil [209799 209840])
            ("char_table_specials" variable (:type ("char_table_specials" type (:type "enum") nil nil)) nil [209843 209888])
            ("char_bits" variable (:type ("char_bits" type (:type "enum") nil nil)) nil [209891 209916])
            ("CHECK_LISP_OBJECT_TYPE" variable (:type ("CHECK_LISP_OBJECT_TYPE" type (:type "enum") nil nil)) nil [209919 209970])
            ("DEFAULT_HASH_SIZE" variable (:type ("DEFAULT_HASH_SIZE" type (:type "enum") nil nil)) nil [209973 210014])
            ("Lisp_Bits" variable (:type ("Lisp_Bits" type (:type "enum") nil nil)) nil [210017 210042])
            ("Lisp_Compiled" variable (:type ("Lisp_Compiled" type (:type "enum") nil nil)) nil [210045 210078])
            ("maxargs" variable (:type ("maxargs" type (:type "enum") nil nil)) nil [210081 210102])
            ("MAX_ALLOCA" variable (:type ("MAX_ALLOCA" type (:type "enum") nil nil)) nil [210105 210132])
            ("More_Lisp_Bits" variable (:type ("More_Lisp_Bits" type (:type "enum") nil nil)) nil [210135 210170])
            ("pvec_type" variable (:type ("pvec_type" type (:type "enum") nil nil)) nil [210173 210198]))          
      :file "alloc.c"
      :pointmax 210278
      :fsize 210279
      :lastmodtime '(22986 14551 0 0)
      :unmatched-syntax '((punctuation 210254 . 210255) (close-paren 210253 . 210254) (number 210252 . 210253) (open-paren 210251 . 210252) (punctuation 210249 . 210250) (symbol 210226 . 210248) (symbol 210207 . 210225) (CONST 210201 . 210206) (close-paren 210199 . 210200) (open-paren 209795 . 209796) (UNION 209789 . 209794) (close-paren 209498 . 209499) (punctuation 209476 . 209477) (punctuation 209443 . 209444) (punctuation 209416 . 209417) (punctuation 209388 . 209389) (punctuation 209357 . 209358) (punctuation 209333 . 209334) (punctuation 209303 . 209304) (punctuation 209276 . 209277) (punctuation 209249 . 209250) (punctuation 209217 . 209218) (punctuation 209190 . 209191) (punctuation 209163 . 209164) (punctuation 209136 . 209137) (punctuation 209111 . 209112) (punctuation 209081 . 209082) (punctuation 209054 . 209055) (punctuation 209032 . 209033) (punctuation 209010 . 209011) (punctuation 208990 . 208991) (punctuation 208970 . 208971) (punctuation 208899 . 208900) (string 208860 . 208870) (punctuation 208736 . 208737) (string 208698 . 208710) (string 208655 . 208679) (string 208598 . 208617) (string 208550 . 208564) (string 208516 . 208522) (string 208482 . 208496) (string 208440 . 208454) (string 208403 . 208412) (string 208369 . 208380) (string 208336 . 208344) (string 208305 . 208314) (string 208273 . 208282) (string 208243 . 208250) (string 208213 . 208222) (string 208182 . 208190) (punctuation 208074 . 208075) (string 208034 . 208047) (punctuation 207657 . 207658) (string 207603 . 207623) (string 207570 . 207584) (punctuation 207462 . 207463) (string 207420 . 207434) (punctuation 207287 . 207288) (string 207216 . 207245) (punctuation 206921 . 206922) (string 206881 . 206894) (punctuation 206806 . 206807) (string 206762 . 206778) (punctuation 206686 . 206687) (string 206638 . 206656) (punctuation 206471 . 206472) (string 206417 . 206438) (punctuation 206333 . 206334) (string 206279 . 206300) (punctuation 206241 . 206242) (punctuation 206240 . 206241) (symbol 206225 . 206239) (punctuation 206164 . 206165) (string 206120 . 206136) (punctuation 206041 . 206042) (string 205987 . 206008) (punctuation 205914 . 205915) (string 205872 . 205887) (punctuation 205795 . 205796) (string 205745 . 205764) (punctuation 205662 . 205663) (string 205616 . 205633) (punctuation 205309 . 205310) (string 205255 . 205275) (punctuation 204803 . 204804) (string 204753 . 204772) (open-paren 204737 . 204738) (close-paren 204735 . 204736) (VOID 204731 . 204735) (open-paren 204730 . 204731) (symbol 204716 . 204729) (VOID 204711 . 204715) (close-paren 204708 . 204709) (open-paren 204590 . 204591) (close-paren 204588 . 204589) (VOID 204584 . 204588) (open-paren 204583 . 204584) (symbol 204572 . 204582) (VOID 204567 . 204571) (close-paren 204564 . 204565) (punctuation 204130 . 204131) (punctuation 204093 . 204094) (punctuation 204068 . 204069) (semantic-list 204066 . 204068) (semantic-list "((void) 0)" 204052 . 204065) (spp-arg-list nil 204052 . 204065) (open-paren 203907 . 203908) (close-paren 203905 . 203906) (VOID 203901 . 203905) (open-paren 203900 . 203901) (symbol 203884 . 203899) (VOID 203879 . 203883) (close-paren 202941 . 202942) (RETURN 202929 . 202935) (semantic-list 202744 . 202919) (semantic-list 202720 . 202739) (IF 202717 . 202719) (open-paren 202631 . 202632) (close-paren 202629 . 202630) (symbol 202626 . 202629) (symbol 202614 . 202625) (open-paren 202613 . 202614) (close-paren 202608 . 202609) (punctuation 202364 . 202365) (symbol 202361 . 202364) (punctuation 202352 . 202353) (number 202351 . 202352) (punctuation 202349 . 202350) (number 202348 . 202349) (punctuation 202346 . 202347) (number 202345 . 202346) (punctuation 202343 . 202344) (symbol 202325 . 202343) (punctuation 202323 . 202324) (symbol 202305 . 202323) (punctuation 202303 . 202304) (string 202284 . 202303) (open-paren 202283 . 202284) (symbol 202277 . 202282) (close-paren 202233 . 202234) (semantic-list 202149 . 202232) (semantic-list 202112 . 202142) (IF 202109 . 202111) (semantic-list 202056 . 202104) (FOR 202052 . 202055) (punctuation 202040 . 202041) (punctuation 202039 . 202040) (open-paren 202012 . 202013) (close-paren 202010 . 202011) (symbol 202007 . 202010) (punctuation 202006 . 202007) (VOID 202001 . 202005) (open-paren 202000 . 202001) (symbol 201977 . 201999) (VOID 201972 . 201976) (STATIC 201965 . 201971) (close-paren 201962 . 201963) (semantic-list 201943 . 201959) (semantic-list 201928 . 201931) (punctuation 201918 . 201919) (punctuation 201917 . 201918) (punctuation 201913 . 201914) (punctuation 201874 . 201875) (punctuation 201873 . 201874) (symbol 201870 . 201873) (semantic-list 201859 . 201865) (SIZEOF 201852 . 201858) (number 201849 . 201850) (semantic-list 201784 . 201832) (semantic-list 201703 . 201779) (IF 201700 . 201702) (open-paren 201590 . 201591) (close-paren 201588 . 201589) (symbol 201585 . 201588) (punctuation 201584 . 201585) (VOID 201579 . 201583) (open-paren 201578 . 201579) (symbol 201557 . 201577) (VOID 201552 . 201556) (STATIC 201545 . 201551) (close-paren 201542 . 201543) (RETURN 201529 . 201535) (semantic-list 201367 . 201525) (semantic-list 201314 . 201362) (FOR 201310 . 201313) (open-paren 201250 . 201251) (close-paren 201248 . 201249) (symbol 201245 . 201248) (punctuation 201244 . 201245) (VOID 201239 . 201243) (punctuation 201237 . 201238) (symbol 201232 . 201237) (punctuation 201231 . 201232) (VOID 201226 . 201230) (open-paren 201225 . 201226) (symbol 201193 . 201224) (punctuation 201191 . 201192) (VOID 201186 . 201190) (STATIC 201179 . 201185) (close-paren 201141 . 201142) (RETURN 201127 . 201133) (punctuation 201091 . 201092) (symbol 201088 . 201091) (semantic-list 200359 . 201084) (semantic-list 200338 . 200353) (IF 200335 . 200337) (open-paren 200215 . 200216) (close-paren 200213 . 200214) (symbol 200205 . 200213) (symbol 200195 . 200204) (punctuation 200193 . 200194) (symbol 200190 . 200193) (symbol 200178 . 200189) (open-paren 200177 . 200178) (symbol 200163 . 200176) (symbol 200151 . 200162) (close-paren 200012 . 200013) (punctuation 200010 . 200011) (semantic-list 199743 . 200010) (RETURN 199736 . 199742) (open-paren 199638 . 199639) (close-paren 199636 . 199637) (symbol 199633 . 199636) (symbol 199621 . 199632) (punctuation 199619 . 199620) (symbol 199613 . 199619) (symbol 199601 . 199612) (open-paren 199600 . 199601) (symbol 199584 . 199599) (BOOL 199579 . 199583) (STATIC 199572 . 199578) (close-paren 199569 . 199570) (semantic-list 199550 . 199566) (semantic-list 199513 . 199531) (semantic-list 199473 . 199494) (semantic-list 199433 . 199454) (semantic-list 199398 . 199414) (semantic-list 199358 . 199379) (semantic-list 199324 . 199339) (semantic-list 199286 . 199305) (number 199266 . 199267) (RETURN 199237 . 199243) (open-paren 199233 . 199234) (close-paren 199231 . 199232) (VOID 199227 . 199231) (open-paren 199226 . 199227) (close-paren 199222 . 199223) (punctuation 198540 . 198541) (symbol 198537 . 198540) (punctuation 198528 . 198529) (number 198527 . 198528) (punctuation 198525 . 198526) (number 198524 . 198525) (punctuation 198522 . 198523) (number 198521 . 198522) (punctuation 198519 . 198520) (symbol 198501 . 198519) (punctuation 198499 . 198500) (symbol 198481 . 198499) (punctuation 198479 . 198480) (string 198460 . 198479) (open-paren 198459 . 198460) (symbol 198453 . 198458) (close-paren 198450 . 198451) (RETURN 198438 . 198444) (number 198364 . 198365) (open-paren 198197 . 198198) (close-paren 198195 . 198196) (VOID 198191 . 198195) (open-paren 198190 . 198191) (close-paren 198186 . 198187) (punctuation 197981 . 197982) (symbol 197978 . 197981) (punctuation 197969 . 197970) (number 197968 . 197969) (punctuation 197966 . 197967) (number 197965 . 197966) (punctuation 197963 . 197964) (number 197962 . 197963) (punctuation 197960 . 197961) (symbol 197947 . 197960) (punctuation 197945 . 197946) (symbol 197932 . 197945) (punctuation 197930 . 197931) (string 197916 . 197930) (open-paren 197915 . 197916) (symbol 197909 . 197914) (close-paren 197882 . 197883) (RETURN 197811 . 197817) (open-paren 196681 . 196682) (close-paren 196679 . 196680) (VOID 196675 . 196679) (open-paren 196674 . 196675) (close-paren 196670 . 196671) (punctuation 196437 . 196438) (symbol 196434 . 196437) (punctuation 196425 . 196426) (number 196424 . 196425) (punctuation 196422 . 196423) (number 196421 . 196422) (punctuation 196419 . 196420) (number 196418 . 196419) (punctuation 196416 . 196417) (symbol 196404 . 196416) (punctuation 196402 . 196403) (symbol 196390 . 196402) (punctuation 196388 . 196389) (string 196375 . 196388) (open-paren 196374 . 196375) (symbol 196368 . 196373) (close-paren 196365 . 196366) (punctuation 196363 . 196364) (semantic-list #("((void) 0)" 0 1 (macros (("all" symbol "noninteractive" 196348 . 196362)))) 196327 . 196363) (punctuation 196186 . 196187) (semantic-list #("((void) 0)" 0 1 (macros (("all" symbol "noninteractive" 196171 . 196185)))) 196150 . 196186) (open-paren 195989 . 195990) (close-paren 195987 . 195988) (VOID 195983 . 195987) (open-paren 195982 . 195983) (symbol 195973 . 195981) (VOID 195968 . 195972) (STATIC 195961 . 195967) (close-paren 195897 . 195898) (semantic-list 195661 . 195896) (ELSE 195650 . 195654) (semantic-list 195577 . 195645) (semantic-list 195543 . 195570) (IF 195540 . 195542) (semantic-list 195488 . 195535) (FOR 195484 . 195487) (open-paren 195400 . 195401) (close-paren 195398 . 195399) (VOID 195394 . 195398) (open-paren 195393 . 195394) (symbol 195379 . 195392) (VOID 195374 . 195378) (STATIC 195367 . 195373) (symbol 195327 . 195336) (close-paren 195324 . 195325) (semantic-list 193486 . 195261) (semantic-list 193439 . 193481) (FOR 193435 . 193438) (open-paren 193122 . 193123) (close-paren 193120 . 193121) (VOID 193116 . 193120) (open-paren 193115 . 193116) (symbol 193104 . 193114) (VOID 193099 . 193103) (STATIC 193092 . 193098) (symbol 193050 . 193059) (close-paren 193047 . 193048) (semantic-list 191703 . 192985) (semantic-list 191656 . 191698) (FOR 191652 . 191655) (punctuation 191633 . 191634) (symbol 191632 . 191633) (punctuation 191631 . 191632) (semantic-list 191628 . 191631) (symbol 191621 . 191628) (semantic-list 191575 . 191616) (FOR 191571 . 191574) (open-paren 191372 . 191373) (close-paren 191370 . 191371) (VOID 191366 . 191370) (open-paren 191365 . 191366) (symbol 191351 . 191364) (VOID 191346 . 191350) (STATIC 191339 . 191345) (symbol 191299 . 191308) (close-paren 191296 . 191297) (semantic-list 190202 . 191230) (semantic-list 190153 . 190197) (FOR 190149 . 190152) (open-paren 189943 . 189944) (close-paren 189941 . 189942) (VOID 189937 . 189941) (open-paren 189936 . 189937) (symbol 189920 . 189935) (VOID 189915 . 189919) (STATIC 189908 . 189914) (symbol 189868 . 189877) (close-paren 189865 . 189866) (semantic-list 188868 . 189805) (semantic-list 188822 . 188863) (FOR 188818 . 188821) (open-paren 188627 . 188628) (close-paren 188625 . 188626) (VOID 188621 . 188625) (open-paren 188620 . 188621) (symbol 188607 . 188619) (VOID 188602 . 188606) (STATIC 188595 . 188601) (symbol 188555 . 188564) (close-paren 188552 . 188553) (semantic-list 186538 . 188492) (semantic-list 186493 . 186533) (FOR 186489 . 186492) (open-paren 186321 . 186322) (close-paren 186319 . 186320) (VOID 186315 . 186319) (open-paren 186314 . 186315) (symbol 186301 . 186313) (VOID 186296 . 186300) (STATIC 186289 . 186295) (symbol 186249 . 186258) (close-paren 186242 . 186243) (semantic-list 186234 . 186239) (punctuation 186218 . 186219) (punctuation 186217 . 186218) (symbol 186206 . 186216) (RETURN 186199 . 186205) (semantic-list 185575 . 186195) (semantic-list 185557 . 185570) (SWITCH 185550 . 185556) (open-paren 185526 . 185527) (close-paren 185524 . 185525) (symbol 185521 . 185524) (symbol 185509 . 185520) (open-paren 185508 . 185509) (symbol 185494 . 185507) (BOOL 185489 . 185493) (close-paren 185351 . 185352) (semantic-list 184983 . 185350) (semantic-list 184934 . 184978) (FOR 184930 . 184933) (open-paren 184904 . 184905) (close-paren 184902 . 184903) (VOID 184898 . 184902) (open-paren 184897 . 184898) (symbol 184882 . 184896) (VOID 184877 . 184881) (STATIC 184870 . 184876) (close-paren 184781 . 184782) (semantic-list 178300 . 184706) (semantic-list 178282 . 178295) (SWITCH 178275 . 178281) (semantic-list 176877 . 176916) (IF 176874 . 176876) (punctuation 176827 . 176828) (RETURN 176821 . 176827) (semantic-list 176803 . 176816) (IF 176800 . 176802) (punctuation 176775 . 176776) (symbol 176771 . 176775) (open-paren 176630 . 176631) (close-paren 176628 . 176629) (symbol 176625 . 176628) (symbol 176613 . 176624) (open-paren 176612 . 176613) (symbol 176600 . 176611) (VOID 176595 . 176599) (close-paren 176195 . 176196) (RETURN 176182 . 176188) (semantic-list 175886 . 176157) (semantic-list 175794 . 175881) (FOR 175790 . 175793) (open-paren 175750 . 175751) (close-paren 175748 . 175749) (symbol 175744 . 175748) (symbol 175732 . 175743) (open-paren 175731 . 175732) (symbol 175703 . 175730) (symbol 175691 . 175702) (STATIC 175684 . 175690) (close-paren 175538 . 175539) (semantic-list 175329 . 175537) (ELSE 175320 . 175324) (semantic-list 175155 . 175317) (semantic-list 175114 . 175150) (IF 175111 . 175113) (open-paren 174961 . 174962) (close-paren 174959 . 174960) (symbol 174956 . 174959) (punctuation 174955 . 174956) (symbol 174939 . 174954) (STRUCT 174932 . 174938) (open-paren 174931 . 174932) (symbol 174915 . 174930) (VOID 174910 . 174914) (STATIC 174903 . 174909) (symbol 174848 . 174857) (close-paren 174845 . 174846) (punctuation 174834 . 174835) (punctuation 174833 . 174834) (punctuation 174804 . 174805) (punctuation 174803 . 174804) (punctuation 174776 . 174777) (punctuation 174775 . 174776) (semantic-list 174607 . 174722) (IF 174604 . 174606) (open-paren 174287 . 174288) (close-paren 174285 . 174286) (symbol 174282 . 174285) (punctuation 174281 . 174282) (symbol 174269 . 174280) (STRUCT 174262 . 174268) (open-paren 174261 . 174262) (symbol 174239 . 174260) (VOID 174234 . 174238) (STATIC 174227 . 174233) (symbol 174172 . 174181) (close-paren 174169 . 174170) (semantic-list 173829 . 174168) (semantic-list 173821 . 173824) (IF 173818 . 173820) (open-paren 173814 . 173815) (close-paren 173812 . 173813) (symbol 173811 . 173812) (punctuation 173810 . 173811) (symbol 173799 . 173809) (STRUCT 173792 . 173798) (open-paren 173791 . 173792) (symbol 173775 . 173790) (VOID 173770 . 173774) (STATIC 173763 . 173769) (symbol 173708 . 173717) (close-paren 173660 . 173661) (punctuation 173645 . 173646) (punctuation 173644 . 173645) (semantic-list 173557 . 173620) (IF 173554 . 173556) (punctuation 173471 . 173472) (punctuation 173470 . 173471) (punctuation 173429 . 173430) (punctuation 173428 . 173429) (punctuation 173206 . 173207) (semantic-list #("(0)" 0 1 (macros (("i" symbol "buffer_intervals" 173180 . 173196)))) 173160 . 173206) (WHILE "while" 173160 . 173206) (semantic-list #("{								\\
    if (i && !i->gcmarkbit)					\\
      traverse_intervals_noorder (i, mark_interval, NULL);	\\
  }" 0 1 (macros (("i" symbol "buffer_intervals" 173180 . 173196)))) 173160 . 173206) (DO "do" 173160 . 173206) (semantic-list 173069 . 173091) (open-paren 172990 . 172991) (close-paren 172988 . 172989) (symbol 172982 . 172988) (punctuation 172981 . 172982) (symbol 172974 . 172980) (STRUCT 172967 . 172973) (open-paren 172966 . 172967) (symbol 172954 . 172965) (VOID 172949 . 172953) (STATIC 172942 . 172948) (close-paren 172881 . 172882) (semantic-list 172665 . 172880) (semantic-list 172617 . 172660) (FOR 172613 . 172616) (open-paren 172609 . 172610) (close-paren 172607 . 172608) (symbol 172604 . 172607) (punctuation 172603 . 172604) (symbol 172590 . 172602) (STRUCT 172583 . 172589) (open-paren 172582 . 172583) (symbol 172569 . 172581) (VOID 172564 . 172568) (STATIC 172557 . 172563) (close-paren 172502 . 172503) (punctuation 172494 . 172495) (semantic-list 172473 . 172493) (symbol 172465 . 172473) (punctuation 172464 . 172465) (punctuation 172463 . 172464) (symbol 172460 . 172463) (punctuation 172458 . 172459) (symbol 172439 . 172457) (punctuation 172437 . 172438) (symbol 172432 . 172436) (RETURN 172425 . 172431) (semantic-list 172417 . 172420) (punctuation 172408 . 172409) (punctuation 172407 . 172408) (semantic-list 172359 . 172384) (IF 172356 . 172358) (semantic-list 172329 . 172351) (FOR 172325 . 172328) (punctuation 172321 . 172322) (semantic-list #("((V)->header.size |= ARRAY_MARK_FLAG)" 0 1 (macros (("V" symbol "ptr" 172317 . 172320)))) 172304 . 172321) (open-paren 172240 . 172241) (close-paren 172238 . 172239) (symbol 172235 . 172238) (punctuation 172234 . 172235) (symbol 172222 . 172233) (STRUCT 172215 . 172221) (open-paren 172214 . 172215) (symbol 172200 . 172213) (symbol 172188 . 172199) (STATIC 172181 . 172187) (symbol 172126 . 172135) (close-paren 172123 . 172124) (semantic-list 171816 . 172122) (semantic-list 171787 . 171811) (FOR 171783 . 171786) (punctuation 171779 . 171780) (semantic-list #("((V)->header.size |= ARRAY_MARK_FLAG)" 0 1 (macros (("V" symbol "ptr" 171775 . 171778)))) 171762 . 171779) (semantic-list #("(((V)->header.size & ARRAY_MARK_FLAG) != 0)" 0 1 (macros (("V" symbol "ptr" 171753 . 171756)))) 171736 . 171757) (punctuation 171735 . 171736) (open-paren 171517 . 171518) (close-paren 171515 . 171516) (symbol 171507 . 171515) (symbol 171497 . 171506) (ENUM 171492 . 171496) (punctuation 171490 . 171491) (symbol 171487 . 171490) (punctuation 171486 . 171487) (symbol 171474 . 171485) (STRUCT 171467 . 171473) (open-paren 171466 . 171467) (symbol 171450 . 171465) (VOID 171445 . 171449) (STATIC 171438 . 171444) (close-paren 171289 . 171290) (semantic-list 171283 . 171286) (punctuation 171274 . 171275) (punctuation 171273 . 171274) (semantic-list 171192 . 171214) (FOR 171188 . 171191) (punctuation 170899 . 170900) (punctuation 170898 . 170899) (symbol 170893 . 170897) (semantic-list 170862 . 170888) (IF 170859 . 170861) (punctuation 170833 . 170834) (semantic-list #("((V)->header.size |= ARRAY_MARK_FLAG)" 0 1 (macros (("V" symbol "ptr" 170829 . 170832)))) 170816 . 170833) (semantic-list #("(((V)->header.size & ARRAY_MARK_FLAG) != 0)" 0 1 (macros (("V" symbol "ptr" 170807 . 170810)))) 170790 . 170811) (punctuation 170789 . 170790) (open-paren 170723 . 170724) (close-paren 170721 . 170722) (symbol 170718 . 170721) (punctuation 170717 . 170718) (symbol 170705 . 170716) (STRUCT 170698 . 170704) (open-paren 170697 . 170698) (symbol 170681 . 170696) (VOID 170676 . 170680) (STATIC 170669 . 170675) (symbol 170616 . 170625) (close-paren 170353 . 170354) (number "500" 170337 . 170353) (open-paren 170336 . 170337) (symbol 170325 . 170336) (symbol 170313 . 170324) (close-paren 170132 . 170133) (semantic-list 169784 . 170131) (semantic-list 169761 . 169777) (IF 169758 . 169760) (semantic-list 169733 . 169753) (FOR 169729 . 169732) (open-paren 169637 . 169638) (close-paren 169635 . 169636) (symbol 169629 . 169635) (punctuation 169628 . 169629) (symbol 169615 . 169627) (STRUCT 169608 . 169614) (open-paren 169607 . 169608) (symbol 169589 . 169606) (VOID 169584 . 169588) (STATIC 169577 . 169583) (close-paren 169445 . 169446) (RETURN 169413 . 169419) (punctuation 169409 . 169410) (semantic-list #("(addr)" 0 1 (macros (("addr" symbol "sentry" 2 . 8)))) 169381 . 169409) (punctuation "=" 169381 . 169409) (semantic-list #("(p)" 0 1 (macros (("p" symbol "end" 169405 . 169408)))) 169381 . 169409) (punctuation "*" 169381 . 169409) (punctuation ";" 169381 . 169409) (semantic-list #("()" 0 1 (macros (("p" symbol "end" 169405 . 169408)))) 169381 . 169409) (semantic-list "((void) 0)" 169381 . 169409) (spp-arg-list nil 169381 . 169409) (open-paren 169364 . 169365) (close-paren 169362 . 169363) (VOID 169358 . 169362) (open-paren 169357 . 169358) (close-paren 169353 . 169354) (symbol 169345 . 169353) (punctuation 169343 . 169344) (symbol 169333 . 169343) (punctuation 168472 . 168473) (symbol 168469 . 168472) (punctuation 168460 . 168461) (string 168458 . 168460) (punctuation 168456 . 168457) (number 168455 . 168456) (punctuation 168453 . 168454) (number 168452 . 168453) (punctuation 168450 . 168451) (symbol 168434 . 168450) (punctuation 168432 . 168433) (symbol 168416 . 168432) (punctuation 168414 . 168415) (string 168397 . 168414) (open-paren 168396 . 168397) (symbol 168390 . 168395) (close-paren 168387 . 168388) (RETURN 168372 . 168378) (semantic-list 168185 . 168368) (semantic-list 168155 . 168180) (IF 168152 . 168154) (punctuation 168114 . 168115) (punctuation 168113 . 168114) (punctuation 168112 . 168113) (symbol 168104 . 168112) (semantic-list 167922 . 168100) (semantic-list 167895 . 167917) (IF 167892 . 167894) (semantic-list 167719 . 167856) (semantic-list 167691 . 167714) (IF 167688 . 167690) (punctuation 167664 . 167665) (semantic-list 165896 . 166024) (semantic-list 165839 . 165891) (IF 165836 . 165838) (semantic-list 165525 . 165832) (semantic-list 165490 . 165520) (IF 165487 . 165489) (semantic-list 165356 . 165403) (IF 165353 . 165355) (punctuation 165257 . 165258) (semantic-list #("((V)->header.size &= ~ARRAY_MARK_FLAG)" 0 1 (macros (("V" symbol "buffer_local_symbols" 165236 . 165256)))) 165220 . 165257) (punctuation 165216 . 165217) (semantic-list #("((V)->header.size &= ~ARRAY_MARK_FLAG)" 0 1 (macros (("V" symbol "buffer_defaults" 165200 . 165215)))) 165184 . 165216) (punctuation 165080 . 165081) (punctuation 165043 . 165044) (punctuation 165023 . 165024) (punctuation 164294 . 164295) (semantic-list 164292 . 164294) (semantic-list "(0)" 164272 . 164291) (semantic-list "(void)" 164272 . 164291) (spp-arg-list nil 164272 . 164291) (semantic-list 163811 . 163814) (punctuation 163801 . 163802) (semantic-list 163756 . 163783) (FOR 163752 . 163755) (semantic-list 163743 . 163746) (semantic-list 163668 . 163705) (FOR 163664 . 163667) (punctuation 163637 . 163638) (punctuation 163603 . 163604) (string 163413 . 163436) (semantic-list 163363 . 163392) (IF 163360 . 163362) (semantic-list 162796 . 163324) (semantic-list 162770 . 162791) (IF 162767 . 162769) (ELSE 162647 . 162651) (semantic-list 162547 . 162644) (semantic-list 162521 . 162542) (IF 162518 . 162520) (semantic-list 162088 . 162113) (IF 162085 . 162087) (semantic-list 162046 . 162053) (symbol 162030 . 162045) (number 161885 . 161886) (number 161882 . 161883) (RETURN 161755 . 161761) (semantic-list 161717 . 161750) (IF 161714 . 161716) (open-paren 161393 . 161394) (close-paren 161391 . 161392) (symbol 161388 . 161391) (punctuation 161387 . 161388) (VOID 161382 . 161386) (open-paren 161381 . 161382) (symbol 161363 . 161380) (symbol 161351 . 161362) (STATIC 161344 . 161350) (close-paren 160865 . 160866) (semantic-list 160657 . 160864) (semantic-list 160599 . 160652) (FOR 160595 . 160598) (open-paren 160463 . 160464) (close-paren 160461 . 160462) (VOID 160457 . 160461) (open-paren 160456 . 160457) (symbol 160436 . 160455) (VOID 160431 . 160435) (STATIC 160424 . 160430) (close-paren 160421 . 160422) (punctuation 160411 . 160412) (punctuation 160410 . 160411) (semantic-list 160318 . 160388) (FOR 160314 . 160317) (open-paren 160310 . 160311) (close-paren 160308 . 160309) (VOID 160304 . 160308) (open-paren 160303 . 160304) (symbol 160283 . 160302) (VOID 160278 . 160282) (STATIC 160271 . 160277) (close-paren 160268 . 160269) (RETURN 160255 . 160261) (semantic-list 160073 . 160252) (semantic-list 160021 . 160068) (FOR 160017 . 160020) (open-paren 159977 . 159978) (close-paren 159975 . 159976) (symbol 159971 . 159975) (symbol 159959 . 159970) (open-paren 159958 . 159959) (symbol 159940 . 159957) (symbol 159928 . 159939) (STATIC 159921 . 159927) (close-paren 157005 . 157006) (RETURN 156993 . 156999) (punctuation 156989 . 156990) (semantic-list 156969 . 156989) (SIZEOF 156962 . 156968) (punctuation 156960 . 156961) (symbol 156946 . 156959) (punctuation 156944 . 156945) (punctuation 156943 . 156944) (symbol 156939 . 156942) (punctuation 156935 . 156936) (semantic-list 156918 . 156935) (SIZEOF 156911 . 156917) (punctuation 156909 . 156910) (symbol 156893 . 156908) (punctuation 156891 . 156892) (punctuation 156890 . 156891) (symbol 156886 . 156889) (punctuation 156882 . 156883) (semantic-list 156863 . 156882) (SIZEOF 156856 . 156862) (punctuation 156854 . 156855) (symbol 156840 . 156852) (punctuation 156838 . 156839) (punctuation 156837 . 156838) (symbol 156833 . 156836) (punctuation 156797 . 156798) (punctuation 156796 . 156797) (symbol 156792 . 156795) (punctuation 156768 . 156769) (punctuation 156767 . 156768) (symbol 156763 . 156766) (punctuation 156759 . 156760) (semantic-list 156742 . 156759) (SIZEOF 156735 . 156741) (punctuation 156733 . 156734) (symbol 156719 . 156732) (punctuation 156717 . 156718) (punctuation 156716 . 156717) (symbol 156712 . 156715) (punctuation 156708 . 156709) (semantic-list 156688 . 156708) (SIZEOF 156681 . 156687) (punctuation 156679 . 156680) (symbol 156665 . 156678) (punctuation 156663 . 156664) (punctuation 156662 . 156663) (symbol 156658 . 156661) (punctuation 156654 . 156655) (semantic-list 156636 . 156654) (SIZEOF 156629 . 156635) (punctuation 156627 . 156628) (symbol 156613 . 156625) (punctuation 156611 . 156612) (punctuation 156610 . 156611) (symbol 156606 . 156609) (open-paren 156584 . 156585) (close-paren 156582 . 156583) (VOID 156578 . 156582) (open-paren 156577 . 156578) (symbol 156549 . 156576) (symbol 156542 . 156548) (STATIC 156535 . 156541) (close-paren 156485 . 156486) (semantic-list 156452 . 156482) (RETURN 156428 . 156434) (open-paren 156424 . 156425) (close-paren 156422 . 156423) (symbol 156416 . 156422) (symbol 156406 . 156415) (open-paren 156405 . 156406) (symbol 156390 . 156404) (symbol 156378 . 156389) (STATIC 156371 . 156377) (close-paren 156283 . 156284) (RETURN 156269 . 156275) (semantic-list 156242 . 156264) (open-paren 156157 . 156158) (close-paren 156155 . 156156) (VOID 156151 . 156155) (open-paren 156150 . 156151) (symbol 156123 . 156149) (symbol 156113 . 156122) (close-paren 155888 . 155889) (string 155787 . 155846) (semantic-list 155752 . 155775) (IF 155749 . 155751) (open-paren 155745 . 155746) (close-paren 155743 . 155744) (symbol 155733 . 155743) (punctuation 155732 . 155733) (symbol 155720 . 155731) (open-paren 155719 . 155720) (symbol 155709 . 155718) (VOID 155704 . 155708) (close-paren 155438 . 155439) (RETURN 155426 . 155432) (semantic-list 155333 . 155362) (IF 155330 . 155332) (semantic-list 155203 . 155326) (ELSE 155194 . 155198) (semantic-list 154852 . 155191) (semantic-list 154832 . 154847) (IF 154829 . 154831) (ELSE 154824 . 154828) (semantic-list 154371 . 154821) (semantic-list 154315 . 154366) (IF 154312 . 154314) (ELSE 154307 . 154311) (semantic-list 153590 . 154304) (semantic-list 153565 . 153585) (IF 153562 . 153564) (ELSE 153557 . 153561) (semantic-list 153430 . 153445) (IF 153427 . 153429) (ELSE 153422 . 153426) (semantic-list 153358 . 153372) (IF 153355 . 153357) (ELSE 153350 . 153354) (semantic-list 153288 . 153301) (IF 153285 . 153287) (semantic-list 153178 . 153281) (semantic-list 153123 . 153152) (IF 153120 . 153122) (string 153043 . 153099) (semantic-list 152974 . 153017) (IF 152971 . 152973) (RETURN 152932 . 152938) (semantic-list 152822 . 152927) (IF 152819 . 152821) (open-paren 152815 . 152816) (close-paren 152813 . 152814) (symbol 152810 . 152813) (symbol 152798 . 152809) (open-paren 152797 . 152798) (symbol 152788 . 152796) (symbol 152776 . 152787) (STATIC 152769 . 152775) (close-paren 152749 . 152750) (open-paren 152695 . 152696) (symbol 152681 . 152694) (STRUCT 152674 . 152680) (STATIC 152667 . 152673) (close-paren 152608 . 152609) (RETURN 152585 . 152591) (ELSE 152576 . 152580) (RETURN 152562 . 152568) (semantic-list 152476 . 152526) (IF 152473 . 152475) (ELSE 152468 . 152472) (RETURN 152454 . 152460) (semantic-list 152428 . 152449) (IF 152425 . 152427) (open-paren 152421 . 152422) (close-paren 152419 . 152420) (symbol 152416 . 152419) (symbol 152404 . 152415) (REGISTER 152395 . 152403) (open-paren 152394 . 152395) (close-paren 152390 . 152391) (punctuation 152220 . 152221) (symbol 152217 . 152220) (punctuation 152208 . 152209) (number 152207 . 152208) (punctuation 152205 . 152206) (number 152204 . 152205) (punctuation 152202 . 152203) (number 152201 . 152202) (punctuation 152199 . 152200) (symbol 152190 . 152199) (punctuation 152188 . 152189) (symbol 152179 . 152188) (punctuation 152177 . 152178) (string 152167 . 152177) (open-paren 152166 . 152167) (symbol 152160 . 152165) (close-paren 152157 . 152158) (RETURN 152144 . 152150) (punctuation 152122 . 152123) (punctuation 152121 . 152122) (symbol 152117 . 152121) (punctuation 152065 . 152066) (punctuation 152064 . 152065) (symbol 152060 . 152064) (punctuation 152023 . 152024) (punctuation 152022 . 152023) (symbol 152018 . 152022) (punctuation 151971 . 151972) (punctuation 151970 . 151971) (symbol 151966 . 151970) (punctuation 151943 . 151944) (punctuation 151942 . 151943) (symbol 151938 . 151942) (punctuation 151905 . 151906) (punctuation 151904 . 151905) (symbol 151900 . 151904) (punctuation 151875 . 151876) (punctuation 151874 . 151875) (symbol 151870 . 151874) (punctuation 151834 . 151835) (punctuation 151833 . 151834) (symbol 151829 . 151833) (punctuation 151795 . 151796) (punctuation 151794 . 151795) (symbol 151790 . 151794) (punctuation 151756 . 151757) (punctuation 151755 . 151756) (symbol 151751 . 151755) (punctuation 151724 . 151725) (punctuation 151723 . 151724) (symbol 151719 . 151723) (punctuation 151692 . 151693) (punctuation 151691 . 151692) (symbol 151687 . 151691) (punctuation 151621 . 151622) (symbol 151612 . 151621) (punctuation 151545 . 151546) (symbol 151536 . 151545) (punctuation 151497 . 151498) (symbol 151488 . 151497) (punctuation 151310 . 151311) (punctuation 151309 . 151310) (semantic-list 151277 . 151290) (open-paren 151259 . 151260) (close-paren 151257 . 151258) (symbol 151252 . 151257) (punctuation 151251 . 151252) (symbol 151235 . 151250) (STRUCT 151228 . 151234) (open-paren 151227 . 151228) (symbol 151207 . 151226) (punctuation 151205 . 151206) (symbol 151189 . 151204) (STRUCT 151182 . 151188) (STATIC 151175 . 151181) (close-paren 151051 . 151052) (punctuation 151049 . 151050) (NEW 151046 . 151049) (RETURN 151039 . 151045) (punctuation 151024 . 151025) (symbol 151018 . 151024) (punctuation 151017 . 151018) (punctuation 151016 . 151017) (semantic-list 151011 . 151016) (symbol 151003 . 151010) (NEW 151012 . 151015) (NEW 150992 . 150995) (punctuation 150897 . 150898) (symbol 150885 . 150896) (punctuation 150883 . 150884) (symbol 150878 . 150882) (symbol 150871 . 150877) (punctuation 150867 . 150868) (NEW 150864 . 150867) (symbol 150852 . 150863) (open-paren 150848 . 150849) (close-paren 150846 . 150847) (symbol 150843 . 150846) (symbol 150833 . 150842) (open-paren 150832 . 150833) (symbol 150815 . 150831) (symbol 150803 . 150814) (STATIC 150796 . 150802) (close-paren 150707 . 150708) (punctuation 150705 . 150706) (NEW 150702 . 150705) (RETURN 150695 . 150701) (NEW 150682 . 150685) (NEW 150658 . 150661) (punctuation 150582 . 150583) (NEW 150579 . 150582) (symbol 150567 . 150578) (open-paren 150563 . 150564) (close-paren 150561 . 150562) (symbol 150558 . 150561) (DOUBLE 150551 . 150557) (open-paren 150550 . 150551) (symbol 150534 . 150549) (symbol 150522 . 150533) (STATIC 150515 . 150521) (close-paren 150437 . 150438) (punctuation 150435 . 150436) (NEW 150432 . 150435) (RETURN 150425 . 150431) (semantic-list 150415 . 150420) (NEW 150401 . 150404) (semantic-list 150382 . 150387) (NEW 150368 . 150371) (NEW 150348 . 150351) (punctuation 150275 . 150276) (NEW 150272 . 150275) (symbol 150260 . 150271) (open-paren 150256 . 150257) (close-paren 150254 . 150255) (symbol 150251 . 150254) (symbol 150239 . 150250) (punctuation 150237 . 150238) (symbol 150234 . 150237) (symbol 150222 . 150233) (open-paren 150221 . 150222) (symbol 150211 . 150220) (symbol 150199 . 150210) (punctuation 150093 . 150094) (close-paren 150092 . 150093) (symbol 150089 . 150092) (symbol 150077 . 150088) (open-paren 150076 . 150077) (symbol 150067 . 150075) (symbol 150055 . 150066) (STATIC 150048 . 150054) (close-paren 150045 . 150046) (RETURN 150030 . 150036) (punctuation 149983 . 149984) (punctuation 149982 . 149983) (symbol 149981 . 149982) (punctuation 149947 . 149948) (punctuation 149946 . 149947) (symbol 149945 . 149946) (punctuation 149926 . 149927) (punctuation 149925 . 149926) (symbol 149924 . 149925) (punctuation 149906 . 149907) (punctuation 149905 . 149906) (symbol 149904 . 149905) (open-paren 149815 . 149816) (close-paren 149813 . 149814) (symbol 149807 . 149813) (symbol 149797 . 149806) (punctuation 149795 . 149796) (symbol 149791 . 149795) (punctuation 149790 . 149791) (CHAR 149785 . 149789) (CONST 149779 . 149784) (open-paren 149778 . 149779) (symbol 149759 . 149777) (symbol 149747 . 149758) (close-paren 149638 . 149639) (RETURN 149623 . 149629) (punctuation 149576 . 149577) (punctuation 149575 . 149576) (symbol 149574 . 149575) (punctuation 149534 . 149535) (punctuation 149533 . 149534) (symbol 149532 . 149533) (punctuation 149514 . 149515) (punctuation 149513 . 149514) (symbol 149512 . 149513) (semantic-list 149389 . 149509) (semantic-list 149367 . 149384) (IF 149364 . 149366) (punctuation 149295 . 149296) (punctuation 149294 . 149295) (symbol 149293 . 149294) (open-paren 149204 . 149205) (close-paren 149202 . 149203) (symbol 149193 . 149202) (BOOL 149188 . 149192) (punctuation 149186 . 149187) (symbol 149180 . 149186) (symbol 149170 . 149179) (punctuation 149168 . 149169) (symbol 149162 . 149168) (symbol 149152 . 149161) (punctuation 149146 . 149147) (symbol 149142 . 149146) (punctuation 149141 . 149142) (CHAR 149136 . 149140) (CONST 149130 . 149135) (open-paren 149129 . 149130) (symbol 149112 . 149128) (symbol 149100 . 149111) (close-paren 148721 . 148722) (RETURN 148708 . 148714) (punctuation 148703 . 148704) (semantic-list 148683 . 148703) (WHILE 148677 . 148682) (semantic-list 148136 . 148674) (DO 148129 . 148131) (punctuation 147806 . 147807) (symbol 147796 . 147805) (punctuation 147794 . 147795) (symbol 147786 . 147793) (punctuation 147784 . 147785) (symbol 147771 . 147783) (semantic-list 147694 . 147706) (WHILE 147688 . 147693) (semantic-list 147604 . 147625) (FOR 147600 . 147603) (RETURN 147524 . 147530) (semantic-list 147483 . 147519) (IF 147480 . 147482) (open-paren 147342 . 147343) (close-paren 147340 . 147341) (symbol 147334 . 147340) (symbol 147324 . 147333) (punctuation 147322 . 147323) (symbol 147318 . 147322) (punctuation 147317 . 147318) (CHAR 147312 . 147316) (CONST 147306 . 147311) (open-paren 147305 . 147306) (symbol 147280 . 147304) (punctuation 147278 . 147279) (CHAR 147273 . 147277) (STATIC 147266 . 147272) (close-paren 147075 . 147076) (punctuation 147039 . 147040) (semantic-list 146937 . 147015) (semantic-list 146890 . 146923) (IF 146887 . 146889) (open-paren 146883 . 146884) (close-paren 146881 . 146882) (VOID 146877 . 146881) (open-paren 146876 . 146877) (symbol 146860 . 146875) (VOID 146855 . 146859) (close-paren 146780 . 146781) (punctuation 146734 . 146735) (symbol 146713 . 146733) (punctuation 146680 . 146681) (symbol 146664 . 146679) (punctuation 146662 . 146663) (punctuation 146661 . 146662) (symbol 146629 . 146660) (RETURN 146436 . 146442) (semantic-list 146401 . 146431) (IF 146398 . 146400) (semantic-list 146131 . 146325) (ELSE 146122 . 146126) (semantic-list 145845 . 146119) (semantic-list 145829 . 145840) (IF 145826 . 145828) (punctuation 145822 . 145823) (symbol 145817 . 145822) (open-paren 145797 . 145798) (close-paren 145795 . 145796) (symbol 145791 . 145795) (INT 145787 . 145790) (punctuation 145785 . 145786) (symbol 145781 . 145785) (symbol 145774 . 145780) (open-paren 145773 . 145774) (symbol 145762 . 145772) (punctuation 145760 . 145761) (VOID 145755 . 145759) (STATIC 145748 . 145754) (close-paren 145363 . 145364) (punctuation 145361 . 145362) (number 145360 . 145361) (RETURN 145353 . 145359) (semantic-list 144778 . 145349) (semantic-list 144764 . 144773) (SWITCH 144757 . 144763) (semantic-list 144618 . 144753) (semantic-list 144599 . 144613) (IF 144596 . 144598) (punctuation 144553 . 144554) (number 144552 . 144553) (RETURN 144545 . 144551) (semantic-list 144487 . 144540) (IF 144484 . 144486) (punctuation 144479 . 144480) (number 144478 . 144479) (punctuation 144476 . 144477) (punctuation 144475 . 144476) (semantic-list 144471 . 144474) (symbol 144464 . 144471) (SIZEOF 144457 . 144463) (punctuation 144455 . 144456) (semantic-list 144423 . 144454) (RETURN 144416 . 144422) (semantic-list 144378 . 144411) (IF 144375 . 144377) (punctuation 144370 . 144371) (number 144369 . 144370) (RETURN 144362 . 144368) (semantic-list 144345 . 144357) (IF 144342 . 144344) (punctuation 144312 . 144313) (number 144311 . 144312) (RETURN 144304 . 144310) (semantic-list 144283 . 144299) (IF 144280 . 144282) (open-paren 144276 . 144277) (close-paren 144274 . 144275) (symbol 144271 . 144274) (symbol 144259 . 144270) (open-paren 144258 . 144259) (symbol 144238 . 144257) (INT 144234 . 144237) (close-paren 143816 . 143817) (punctuation 143807 . 143808) (number 143806 . 143807) (punctuation 143805 . 143806) (RETURN 143798 . 143804) (semantic-list 143660 . 143794) (semantic-list 143633 . 143655) (IF 143630 . 143632) (punctuation 143370 . 143371) (number 143369 . 143370) (punctuation 143367 . 143368) (number 143365 . 143366) (punctuation 143364 . 143365) (punctuation 143362 . 143363) (symbol 143360 . 143361) (RETURN 143353 . 143359) (semantic-list 143329 . 143348) (IF 143326 . 143328) (open-paren 143260 . 143261) (close-paren 143258 . 143259) (symbol 143257 . 143258) (punctuation 143256 . 143257) (VOID 143251 . 143255) (open-paren 143250 . 143251) (symbol 143234 . 143249) (INT 143230 . 143233) (STATIC 143223 . 143229) (close-paren 143153 . 143154) (SIZEOF 143137 . 143143) (punctuation 143135 . 143136) (symbol 143120 . 143134) (punctuation 143118 . 143119) (punctuation 143117 . 143118) (symbol 143102 . 143116) (punctuation 143100 . 143101) (punctuation 143099 . 143100) (number 143097 . 143098) (RETURN 143090 . 143096) (open-paren 142962 . 142963) (close-paren 142960 . 142961) (symbol 142957 . 142960) (punctuation 142956 . 142957) (symbol 142944 . 142955) (STRUCT 142937 . 142943) (open-paren 142936 . 142937) (symbol 142925 . 142935) (BOOL 142920 . 142924) (STATIC 142913 . 142919) (close-paren 142910 . 142911) (punctuation 142901 . 142902) (punctuation 142900 . 142901) (punctuation 142842 . 142843) (punctuation 142841 . 142842) (symbol 142837 . 142841) (punctuation 142833 . 142834) (semantic-list #("(addr)" 0 1 (macros (("addr" symbol "sentry" 2 . 8)))) 142805 . 142833) (punctuation "=" 142805 . 142833) (semantic-list #("(p)" 0 1 (macros (("p" symbol "end" 142829 . 142832)))) 142805 . 142833) (punctuation "*" 142805 . 142833) (punctuation ";" 142805 . 142833) (semantic-list #("()" 0 1 (macros (("p" symbol "end" 142829 . 142832)))) 142805 . 142833) (semantic-list "((void) 0)" 142805 . 142833) (spp-arg-list nil 142805 . 142833) (open-paren 142742 . 142743) (close-paren 142740 . 142741) (symbol 142737 . 142740) (punctuation 142736 . 142737) (VOID 142731 . 142735) (punctuation 142729 . 142730) (semantic-list 142718 . 142729) (semantic-list 142710 . 142717) (VOID 142705 . 142709) (open-paren 142704 . 142705) (symbol 142682 . 142703) (VOID 142677 . 142681) (symbol 142667 . 142676) (close-paren 142225 . 142226) (open-paren 141865 . 141866) (close-paren 141863 . 141864) (symbol 141860 . 141863) (punctuation 141859 . 141860) (CHAR 141854 . 141858) (punctuation 141852 . 141853) (symbol 141846 . 141852) (punctuation 141845 . 141846) (CHAR 141840 . 141844) (open-paren 141839 . 141840) (symbol 141828 . 141838) (VOID 141823 . 141827) (close-paren 138324 . 138325) (open-paren 138103 . 138104) (UNION 138097 . 138102) (TYPEDEF 138089 . 138096) (close-paren 137911 . 137912) (number 137907 . 137908) (semantic-list 137863 . 137883) (IF 137860 . 137862) (punctuation 137833 . 137834) (punctuation 137832 . 137833) (semantic-list 137274 . 137828) (semantic-list 137249 . 137269) (IF 137246 . 137248) (punctuation 137220 . 137221) (number 137219 . 137220) (punctuation 137217 . 137218) (symbol 137215 . 137216) (punctuation 137213 . 137214) (number 137211 . 137212) (punctuation 137209 . 137210) (symbol 137207 . 137208) (string 137179 . 137182) (punctuation 137032 . 137033) (RETURN 137026 . 137032) (semantic-list 137004 . 137021) (IF 137001 . 137003) (open-paren 136997 . 136998) (close-paren 136995 . 136996) (VOID 136991 . 136995) (open-paren 136990 . 136991) (symbol 136978 . 136989) (VOID 136973 . 136977) (STATIC 136966 . 136972) (close-paren 135392 . 135393) (semantic-list 135295 . 135391) (semantic-list 135231 . 135290) (FOR 135227 . 135230) (number 134614 . 134615) (punctuation 134612 . 134613) (punctuation 134611 . 134612) (semantic-list "(void *)" 134590 . 134610) (punctuation 134588 . 134589) (semantic-list 134568 . 134587) (semantic-list 134487 . 134555) (semantic-list 134469 . 134482) (IF 134466 . 134468) (open-paren 134356 . 134357) (close-paren 134354 . 134355) (symbol 134351 . 134354) (punctuation 134350 . 134351) (VOID 134345 . 134349) (punctuation 134343 . 134344) (symbol 134338 . 134343) (punctuation 134337 . 134338) (VOID 134332 . 134336) (open-paren 134331 . 134332) (symbol 134319 . 134330) (symbol 134289 . 134318) (VOID 134284 . 134288) (STATIC 134277 . 134283) (close-paren 133939 . 133940) (semantic-list 133131 . 133938) (semantic-list 133112 . 133126) (IF 133109 . 133111) (semantic-list 132886 . 133085) (ELSE 132877 . 132881) (semantic-list 132816 . 132874) (semantic-list 132753 . 132811) (IF 132750 . 132752) (open-paren 132632 . 132633) (close-paren 132630 . 132631) (symbol 132629 . 132630) (punctuation 132628 . 132629) (VOID 132623 . 132627) (open-paren 132622 . 132623) (symbol 132603 . 132621) (VOID 132598 . 132602) (STATIC 132591 . 132597) (punctuation 132498 . 132499) (close-paren 132497 . 132498) (symbol 132491 . 132496) (punctuation 132489 . 132490) (symbol 132476 . 132488) (open-paren 132474 . 132475) (ENUM 132469 . 132473) (close-paren 132445 . 132446) (punctuation 132443 . 132444) (number 132442 . 132443) (punctuation 132440 . 132441) (punctuation 132439 . 132440) (symbol 132427 . 132438) (punctuation 132425 . 132426) (symbol 132423 . 132424) (semantic-list 132411 . 132422) (RETURN 132404 . 132410) (open-paren 132400 . 132401) (close-paren 132398 . 132399) (symbol 132397 . 132398) (punctuation 132396 . 132397) (VOID 132391 . 132395) (open-paren 132390 . 132391) (symbol 132371 . 132389) (BOOL 132366 . 132370) (STATIC 132359 . 132365) (close-paren 132179 . 132180) (semantic-list 131538 . 132178) (semantic-list 131519 . 131533) (IF 131516 . 131518) (punctuation 131446 . 131447) (RETURN 131440 . 131446) (semantic-list 131419 . 131435) (IF 131416 . 131418) (open-paren 131317 . 131318) (close-paren 131315 . 131316) (symbol 131312 . 131315) (symbol 131300 . 131311) (open-paren 131299 . 131300) (symbol 131281 . 131298) (VOID 131276 . 131280) (STATIC 131269 . 131275) (close-paren 131213 . 131214) (semantic-list 131204 . 131210) (punctuation 131177 . 131178) (RETURN 131170 . 131176) (open-paren 131166 . 131167) (close-paren 131164 . 131165) (symbol 131163 . 131164) (punctuation 131162 . 131163) (VOID 131157 . 131161) (punctuation 131155 . 131156) (symbol 131154 . 131155) (punctuation 131153 . 131154) (symbol 131144 . 131152) (STRUCT 131137 . 131143) (open-paren 131136 . 131137) (symbol 131122 . 131135) (BOOL 131117 . 131121) (STATIC 131110 . 131116) (close-paren 131107 . 131108) (RETURN 131094 . 131100) (semantic-list 130838 . 131091) (semantic-list 130805 . 130833) (IF 130802 . 130804) (open-paren 130713 . 130714) (close-paren 130711 . 130712) (symbol 130710 . 130711) (punctuation 130709 . 130710) (VOID 130704 . 130708) (punctuation 130702 . 130703) (symbol 130701 . 130702) (punctuation 130700 . 130701) (symbol 130691 . 130699) (STRUCT 130684 . 130690) (open-paren 130683 . 130684) (symbol 130663 . 130682) (symbol 130651 . 130662) (STATIC 130644 . 130650) (close-paren 130510 . 130511) (semantic-list 130501 . 130507) (punctuation 130474 . 130475) (RETURN 130467 . 130473) (open-paren 130463 . 130464) (close-paren 130461 . 130462) (symbol 130460 . 130461) (punctuation 130459 . 130460) (VOID 130454 . 130458) (punctuation 130452 . 130453) (symbol 130451 . 130452) (punctuation 130450 . 130451) (symbol 130441 . 130449) (STRUCT 130434 . 130440) (open-paren 130433 . 130434) (symbol 130419 . 130432) (BOOL 130414 . 130418) (STATIC 130407 . 130413) (close-paren 130404 . 130405) (RETURN 130391 . 130397) (semantic-list 130095 . 130388) (semantic-list 130058 . 130090) (IF 130055 . 130057) (ELSE 130050 . 130054) (semantic-list 129288 . 130047) (semantic-list 129249 . 129283) (IF 129246 . 129248) (open-paren 129211 . 129212) (close-paren 129209 . 129210) (symbol 129208 . 129209) (punctuation 129207 . 129208) (VOID 129202 . 129206) (punctuation 129200 . 129201) (symbol 129199 . 129200) (punctuation 129198 . 129199) (symbol 129189 . 129197) (STRUCT 129182 . 129188) (open-paren 129181 . 129182) (symbol 129161 . 129180) (symbol 129149 . 129160) (STATIC 129142 . 129148) (close-paren 128996 . 128997) (semantic-list 128987 . 128993) (punctuation 128962 . 128963) (RETURN 128955 . 128961) (open-paren 128951 . 128952) (close-paren 128949 . 128950) (symbol 128948 . 128949) (punctuation 128947 . 128948) (VOID 128942 . 128946) (punctuation 128940 . 128941) (symbol 128939 . 128940) (punctuation 128938 . 128939) (symbol 128929 . 128937) (STRUCT 128922 . 128928) (open-paren 128921 . 128922) (symbol 128909 . 128920) (BOOL 128904 . 128908) (STATIC 128897 . 128903) (close-paren 128894 . 128895) (RETURN 128881 . 128887) (semantic-list 128303 . 128878) (semantic-list 128272 . 128298) (IF 128269 . 128271) (open-paren 128265 . 128266) (close-paren 128263 . 128264) (symbol 128262 . 128263) (punctuation 128261 . 128262) (VOID 128256 . 128260) (punctuation 128254 . 128255) (symbol 128253 . 128254) (punctuation 128252 . 128253) (symbol 128243 . 128251) (STRUCT 128236 . 128242) (open-paren 128235 . 128236) (symbol 128217 . 128234) (symbol 128205 . 128216) (STATIC 128198 . 128204) (close-paren 128050 . 128051) (punctuation 128048 . 128049) (number 128047 . 128048) (RETURN 128040 . 128046) (ELSE 128031 . 128035) (semantic-list 127569 . 128028) (semantic-list 127537 . 127564) (IF 127534 . 127536) (open-paren 127530 . 127531) (close-paren 127528 . 127529) (symbol 127527 . 127528) (punctuation 127526 . 127527) (VOID 127521 . 127525) (punctuation 127519 . 127520) (symbol 127518 . 127519) (punctuation 127517 . 127518) (symbol 127508 . 127516) (STRUCT 127501 . 127507) (open-paren 127500 . 127501) (symbol 127487 . 127499) (BOOL 127482 . 127486) (STATIC 127475 . 127481) (close-paren 127356 . 127357) (semantic-list 127347 . 127353) (punctuation 127320 . 127321) (RETURN 127313 . 127319) (open-paren 127309 . 127310) (close-paren 127307 . 127308) (symbol 127306 . 127307) (punctuation 127305 . 127306) (VOID 127300 . 127304) (punctuation 127298 . 127299) (symbol 127297 . 127298) (punctuation 127296 . 127297) (symbol 127287 . 127295) (STRUCT 127280 . 127286) (open-paren 127279 . 127280) (symbol 127265 . 127278) (BOOL 127260 . 127264) (STATIC 127253 . 127259) (close-paren 127250 . 127251) (RETURN 127237 . 127243) (semantic-list 126665 . 127234) (semantic-list 126632 . 126660) (IF 126629 . 126631) (open-paren 126625 . 126626) (close-paren 126623 . 126624) (symbol 126622 . 126623) (punctuation 126621 . 126622) (VOID 126616 . 126620) (punctuation 126614 . 126615) (symbol 126613 . 126614) (punctuation 126612 . 126613) (symbol 126603 . 126611) (STRUCT 126596 . 126602) (open-paren 126595 . 126596) (symbol 126575 . 126594) (symbol 126563 . 126574) (STATIC 126556 . 126562) (close-paren 126393 . 126394) (semantic-list 126384 . 126390) (punctuation 126359 . 126360) (RETURN 126352 . 126358) (open-paren 126348 . 126349) (close-paren 126346 . 126347) (symbol 126345 . 126346) (punctuation 126344 . 126345) (VOID 126339 . 126343) (punctuation 126337 . 126338) (symbol 126336 . 126337) (punctuation 126335 . 126336) (symbol 126326 . 126334) (STRUCT 126319 . 126325) (open-paren 126318 . 126319) (symbol 126306 . 126317) (BOOL 126301 . 126305) (STATIC 126294 . 126300) (close-paren 126291 . 126292) (RETURN 126278 . 126284) (semantic-list 125723 . 126275) (semantic-list 125692 . 125718) (IF 125689 . 125691) (open-paren 125685 . 125686) (close-paren 125683 . 125684) (symbol 125682 . 125683) (punctuation 125681 . 125682) (VOID 125676 . 125680) (punctuation 125674 . 125675) (symbol 125673 . 125674) (punctuation 125672 . 125673) (symbol 125663 . 125671) (STRUCT 125656 . 125662) (open-paren 125655 . 125656) (symbol 125637 . 125654) (symbol 125625 . 125636) (STATIC 125618 . 125624) (close-paren 125458 . 125459) (semantic-list 125449 . 125455) (punctuation 125422 . 125423) (RETURN 125415 . 125421) (open-paren 125411 . 125412) (close-paren 125409 . 125410) (symbol 125408 . 125409) (punctuation 125407 . 125408) (VOID 125402 . 125406) (punctuation 125400 . 125401) (symbol 125399 . 125400) (punctuation 125398 . 125399) (symbol 125389 . 125397) (STRUCT 125382 . 125388) (open-paren 125381 . 125382) (symbol 125367 . 125380) (BOOL 125362 . 125366) (STATIC 125355 . 125361) (close-paren 125352 . 125353) (RETURN 125339 . 125345) (semantic-list 124907 . 125336) (semantic-list 124874 . 124902) (IF 124871 . 124873) (open-paren 124867 . 124868) (close-paren 124865 . 124866) (symbol 124864 . 124865) (punctuation 124863 . 124864) (VOID 124858 . 124862) (punctuation 124856 . 124857) (symbol 124855 . 124856) (punctuation 124854 . 124855) (symbol 124845 . 124853) (STRUCT 124838 . 124844) (open-paren 124837 . 124838) (symbol 124817 . 124836) (symbol 124805 . 124816) (STATIC 124798 . 124804) (close-paren 124414 . 124415) (punctuation 124394 . 124395) (punctuation 124393 . 124394) (symbol 124392 . 124393) (semantic-list 122862 . 124388) (semantic-list 122817 . 122857) (WHILE 122811 . 122816) (open-paren 122807 . 122808) (close-paren 122805 . 122806) (symbol 122804 . 122805) (punctuation 122803 . 122804) (symbol 122794 . 122802) (STRUCT 122787 . 122793) (open-paren 122786 . 122787) (symbol 122769 . 122785) (VOID 122764 . 122768) (STATIC 122757 . 122763) (close-paren 122673 . 122674) (semantic-list 122561 . 122584) (IF 122558 . 122560) (semantic-list 122472 . 122554) (semantic-list 122459 . 122467) (IF 122456 . 122458) (ELSE 122430 . 122434) (semantic-list 122332 . 122427) (semantic-list 122316 . 122327) (IF 122313 . 122315) (punctuation 122290 . 122291) (punctuation 122289 . 122290) (symbol 122288 . 122289) (ELSE 122262 . 122266) (semantic-list 122222 . 122242) (IF 122219 . 122221) (semantic-list 122141 . 122215) (ELSE 122132 . 122136) (semantic-list 122075 . 122118) (IF 122072 . 122074) (punctuation 122067 . 122068) (RETURN 122061 . 122067) (semantic-list 122036 . 122056) (IF 122033 . 122035) (open-paren 122002 . 122003) (close-paren 122000 . 122001) (symbol 121999 . 122000) (punctuation 121998 . 121999) (symbol 121989 . 121997) (STRUCT 121982 . 121988) (open-paren 121981 . 121982) (symbol 121970 . 121980) (VOID 121965 . 121969) (STATIC 121958 . 121964) (close-paren 121879 . 121880) (punctuation 121866 . 121867) (punctuation 121865 . 121866) (symbol 121864 . 121865) (semantic-list 121845 . 121859) (IF 121842 . 121844) (punctuation 121828 . 121829) (punctuation 121827 . 121828) (symbol 121826 . 121827) (ELSE 121800 . 121804) (semantic-list 121701 . 121797) (semantic-list 121685 . 121696) (IF 121682 . 121684) (punctuation 121659 . 121660) (punctuation 121658 . 121659) (symbol 121657 . 121658) (semantic-list 121638 . 121652) (IF 121635 . 121637) (punctuation 121619 . 121620) (punctuation 121618 . 121619) (symbol 121613 . 121618) (punctuation 121612 . 121613) (punctuation 121611 . 121612) (symbol 121610 . 121611) (semantic-list 121584 . 121605) (IF 121581 . 121583) (punctuation 121561 . 121562) (punctuation 121560 . 121561) (symbol 121559 . 121560) (open-paren 121522 . 121523) (close-paren 121520 . 121521) (symbol 121519 . 121520) (punctuation 121518 . 121519) (symbol 121509 . 121517) (STRUCT 121502 . 121508) (open-paren 121501 . 121502) (symbol 121484 . 121500) (VOID 121479 . 121483) (STATIC 121472 . 121478) (close-paren 121306 . 121307) (punctuation 121293 . 121294) (punctuation 121292 . 121293) (symbol 121291 . 121292) (semantic-list 121272 . 121286) (IF 121269 . 121271) (punctuation 121256 . 121257) (punctuation 121255 . 121256) (symbol 121254 . 121255) (ELSE 121200 . 121204) (semantic-list 121102 . 121197) (semantic-list 121086 . 121097) (IF 121083 . 121085) (punctuation 121007 . 121008) (punctuation 121006 . 121007) (symbol 121005 . 121006) (semantic-list 120986 . 121000) (IF 120983 . 120985) (punctuation 120931 . 120932) (punctuation 120930 . 120931) (symbol 120926 . 120930) (punctuation 120925 . 120926) (punctuation 120924 . 120925) (symbol 120923 . 120924) (semantic-list 120898 . 120918) (IF 120895 . 120897) (punctuation 120875 . 120876) (punctuation 120874 . 120875) (symbol 120873 . 120874) (open-paren 120773 . 120774) (close-paren 120771 . 120772) (symbol 120770 . 120771) (punctuation 120769 . 120770) (symbol 120760 . 120768) (STRUCT 120753 . 120759) (open-paren 120752 . 120753) (symbol 120736 . 120751) (VOID 120731 . 120735) (STATIC 120724 . 120730) (close-paren 120562 . 120563) (punctuation 120542 . 120543) (punctuation 120541 . 120542) (symbol 120533 . 120541) (semantic-list 118874 . 120404) (semantic-list 118823 . 118869) (WHILE 118817 . 118822) (open-paren 118813 . 118814) (close-paren 118811 . 118812) (symbol 118810 . 118811) (punctuation 118809 . 118810) (symbol 118800 . 118808) (STRUCT 118793 . 118799) (open-paren 118792 . 118793) (symbol 118775 . 118791) (VOID 118770 . 118774) (STATIC 118763 . 118769) (close-paren 118618 . 118619) (RETURN 118608 . 118614) (ELSE 118508 . 118512) (semantic-list 118415 . 118505) (semantic-list 118402 . 118410) (IF 118399 . 118401) (punctuation 118317 . 118318) (punctuation 118316 . 118317) (symbol 118315 . 118316) (punctuation 118295 . 118296) (punctuation 118294 . 118295) (symbol 118293 . 118294) (punctuation 118291 . 118292) (symbol 118286 . 118290) (punctuation 118285 . 118286) (punctuation 118284 . 118285) (symbol 118283 . 118284) (punctuation 118263 . 118264) (punctuation 118262 . 118263) (symbol 118261 . 118262) (punctuation 118245 . 118246) (punctuation 118244 . 118245) (symbol 118243 . 118244) (punctuation 118229 . 118230) (punctuation 118228 . 118229) (symbol 118227 . 118228) (punctuation 118209 . 118210) (punctuation 118208 . 118209) (symbol 118207 . 118208) (semantic-list 117975 . 118049) (semantic-list 117956 . 117970) (WHILE 117950 . 117955) (semantic-list 117637 . 117689) (IF 117634 . 117636) (semantic-list 117547 . 117601) (IF 117544 . 117546) (open-paren 117504 . 117505) (close-paren 117502 . 117503) (symbol 117498 . 117502) (symbol 117489 . 117497) (ENUM 117484 . 117488) (punctuation 117482 . 117483) (symbol 117479 . 117482) (punctuation 117478 . 117479) (VOID 117473 . 117477) (punctuation 117471 . 117472) (symbol 117466 . 117471) (punctuation 117465 . 117466) (VOID 117460 . 117464) (open-paren 117459 . 117460) (symbol 117448 . 117458) (punctuation 117446 . 117447) (symbol 117437 . 117445) (STRUCT 117430 . 117436) (STATIC 117423 . 117429) (close-paren 117242 . 117243) (RETURN 117232 . 117238) (punctuation 117222 . 117223) (punctuation 117221 . 117222) (symbol 117220 . 117221) (punctuation 117218 . 117219) (symbol 117213 . 117217) (punctuation 117212 . 117213) (punctuation 117211 . 117212) (symbol 117210 . 117211) (punctuation 117208 . 117209) (symbol 117202 . 117207) (punctuation 117201 . 117202) (punctuation 117200 . 117201) (symbol 117199 . 117200) (punctuation 117197 . 117198) (symbol 117191 . 117196) (punctuation 117189 . 117190) (symbol 117187 . 117188) (semantic-list 117145 . 117182) (WHILE 117139 . 117144) (punctuation 117093 . 117094) (symbol 117088 . 117093) (punctuation 117070 . 117071) (symbol 117065 . 117070) (RETURN 116975 . 116981) (semantic-list 116916 . 116970) (IF 116913 . 116915) (open-paren 116886 . 116887) (close-paren 116884 . 116885) (symbol 116879 . 116884) (punctuation 116878 . 116879) (VOID 116873 . 116877) (open-paren 116872 . 116873) (symbol 116863 . 116871) (punctuation 116861 . 116862) (symbol 116852 . 116860) (STRUCT 116845 . 116851) (STATIC 116838 . 116844) (close-paren 116702 . 116703) (punctuation 116667 . 116668) (symbol 116662 . 116667) (punctuation 116660 . 116661) (symbol 116654 . 116659) (punctuation 116653 . 116654) (symbol 116648 . 116653) (punctuation 116626 . 116627) (symbol 116621 . 116626) (punctuation 116603 . 116604) (symbol 116598 . 116603) (punctuation 116578 . 116579) (symbol 116573 . 116578) (punctuation 116571 . 116572) (symbol 116566 . 116570) (punctuation 116565 . 116566) (symbol 116560 . 116565) (open-paren 116556 . 116557) (close-paren 116554 . 116555) (VOID 116550 . 116554) (open-paren 116549 . 116550) (symbol 116540 . 116548) (VOID 116535 . 116539) (STATIC 116528 . 116534) (close-paren 115664 . 115665) (semantic-list 115576 . 115631) (IF 115573 . 115575) (semantic-list 115459 . 115481) (IF 115456 . 115458) (semantic-list 115342 . 115364) (IF 115339 . 115341) (semantic-list 115222 . 115244) (IF 115219 . 115221) (semantic-list 115102 . 115124) (IF 115099 . 115101) (semantic-list 114982 . 115004) (IF 114979 . 114981) (semantic-list 114860 . 114882) (IF 114857 . 114859) (semantic-list 114787 . 114809) (IF 114784 . 114786) (open-paren 114727 . 114728) (close-paren 114725 . 114726) (VOID 114721 . 114725) (open-paren 114720 . 114721) (symbol 114698 . 114719) (VOID 114693 . 114697) (close-paren 114374 . 114375) (semantic-list 113748 . 114202) (semantic-list 113721 . 113743) (IF 113718 . 113720) (semantic-list 113545 . 113714) (semantic-list 113517 . 113540) (IF 113514 . 113516) (open-paren 113406 . 113407) (close-paren 113404 . 113405) (symbol 113398 . 113404) (symbol 113391 . 113397) (open-paren 113390 . 113391) (symbol 113378 . 113389) (VOID 113373 . 113377) (close-paren 112837 . 112838) (RETURN 112825 . 112831) (punctuation 112798 . 112799) (punctuation 112764 . 112765) (punctuation 112763 . 112764) (symbol 112754 . 112763) (punctuation 112752 . 112753) (symbol 112747 . 112751) (punctuation 112746 . 112747) (punctuation 112745 . 112746) (symbol 112736 . 112745) (punctuation 112712 . 112713) (punctuation 112711 . 112712) (symbol 112702 . 112711) (open-paren 112586 . 112587) (close-paren 112584 . 112585) (symbol 112576 . 112584) (symbol 112564 . 112575) (open-paren 112563 . 112564) (close-paren 112559 . 112560) (punctuation 112186 . 112187) (symbol 112183 . 112186) (punctuation 112174 . 112175) (number 112173 . 112174) (punctuation 112171 . 112172) (number 112170 . 112171) (punctuation 112168 . 112169) (number 112167 . 112168) (punctuation 112165 . 112166) (symbol 112150 . 112165) (punctuation 112148 . 112149) (symbol 112133 . 112148) (punctuation 112131 . 112132) (string 112115 . 112131) (open-paren 112114 . 112115) (symbol 112108 . 112113) (close-paren 112105 . 112106) (semantic-list 111822 . 112104) (semantic-list 111785 . 111817) (WHILE 111779 . 111784) (open-paren 111714 . 111715) (close-paren 111712 . 111713) (symbol 111702 . 111712) (punctuation 111701 . 111702) (symbol 111686 . 111700) (STRUCT 111679 . 111685) (open-paren 111678 . 111679) (symbol 111663 . 111677) (VOID 111658 . 111662) (STATIC 111651 . 111657) (close-paren 111648 . 111649) (open-paren 111474 . 111475) (close-paren 111472 . 111473) (symbol 111464 . 111472) (symbol 111452 . 111463) (open-paren 111451 . 111452) (symbol 111428 . 111450) (VOID 111423 . 111427) (STATIC 111416 . 111422) (close-paren 111413 . 111414) (RETURN 111400 . 111406) (string 111367 . 111389) (open-paren 111351 . 111352) (close-paren 111349 . 111350) (symbol 111345 . 111349) (symbol 111333 . 111344) (open-paren 111332 . 111333) (symbol 111310 . 111331) (symbol 111298 . 111309) (STATIC 111291 . 111297) (close-paren 111288 . 111289) (semantic-list 111026 . 111287) (semantic-list 111003 . 111021) (WHILE 110997 . 111002) (open-paren 110945 . 110946) (close-paren 110943 . 110944) (symbol 110940 . 110943) (punctuation 110939 . 110940) (symbol 110924 . 110938) (STRUCT 110917 . 110923) (punctuation 110890 . 110891) (symbol 110886 . 110890) (punctuation 110885 . 110886) (symbol 110870 . 110884) (STRUCT 110863 . 110869) (open-paren 110862 . 110863) (symbol 110838 . 110861) (VOID 110833 . 110837) (STATIC 110826 . 110832) (close-paren 110664 . 110665) (semantic-list 110575 . 110663) (semantic-list 110461 . 110570) (FOR 110457 . 110460) (open-paren 110453 . 110454) (close-paren 110451 . 110452) (symbol 110447 . 110451) (punctuation 110446 . 110447) (symbol 110431 . 110445) (STRUCT 110424 . 110430) (open-paren 110423 . 110424) (symbol 110403 . 110422) (VOID 110398 . 110402) (STATIC 110391 . 110397) (close-paren 110388 . 110389) (semantic-list 110197 . 110387) (semantic-list 110167 . 110192) (IF 110164 . 110166) (open-paren 110160 . 110161) (close-paren 110158 . 110159) (symbol 110149 . 110158) (punctuation 110148 . 110149) (symbol 110133 . 110147) (STRUCT 110126 . 110132) (open-paren 110125 . 110126) (symbol 110107 . 110124) (VOID 110102 . 110106) (STATIC 110095 . 110101) (close-paren 110092 . 110093) (punctuation 110073 . 110074) (punctuation 110072 . 110073) (symbol 110065 . 110072) (punctuation 110044 . 110045) (punctuation 110043 . 110044) (symbol 110039 . 110043) (punctuation 110038 . 110039) (punctuation 110037 . 110038) (symbol 110028 . 110037) (punctuation 110003 . 110004) (punctuation 110002 . 110003) (symbol 109993 . 110002) (punctuation 109974 . 109975) (punctuation 109973 . 109974) (symbol 109964 . 109973) (punctuation 109953 . 109954) (punctuation 109952 . 109953) (punctuation 109946 . 109947) (punctuation 109945 . 109946) (punctuation 109916 . 109917) (punctuation 109915 . 109916) (punctuation 109909 . 109910) (punctuation 109908 . 109909) (open-paren 109886 . 109887) (close-paren 109884 . 109885) (symbol 109875 . 109884) (punctuation 109874 . 109875) (symbol 109859 . 109873) (STRUCT 109852 . 109858) (punctuation 109832 . 109833) (symbol 109825 . 109832) (punctuation 109824 . 109825) (symbol 109809 . 109823) (STRUCT 109802 . 109808) (open-paren 109801 . 109802) (symbol 109784 . 109800) (VOID 109779 . 109783) (STATIC 109772 . 109778) (close-paren 109728 . 109729) (punctuation 109714 . 109715) (punctuation 109713 . 109714) (symbol 109709 . 109713) (punctuation 109707 . 109708) (symbol 109702 . 109706) (punctuation 109701 . 109702) (punctuation 109700 . 109701) (symbol 109696 . 109700) (open-paren 109692 . 109693) (close-paren 109690 . 109691) (symbol 109686 . 109690) (punctuation 109685 . 109686) (symbol 109670 . 109684) (STRUCT 109663 . 109669) (open-paren 109662 . 109663) (symbol 109642 . 109661) (VOID 109637 . 109641) (STATIC 109630 . 109636) (close-paren 109307 . 109308) (semantic-list 108964 . 109306) (RETURN 108819 . 108825) (semantic-list 108746 . 108812) (IF 108743 . 108745) (semantic-list 108565 . 108588) (FOR 108561 . 108564) (open-paren 108541 . 108542) (close-paren 108539 . 108540) (symbol 108535 . 108539) (punctuation 108534 . 108535) (symbol 108522 . 108533) (punctuation 108520 . 108521) (symbol 108515 . 108520) (symbol 108505 . 108514) (open-paren 108504 . 108505) (symbol 108487 . 108503) (symbol 108475 . 108486) (close-paren 108201 . 108202) (semantic-list 108168 . 108176) (open-paren 108140 . 108141) (close-paren 108138 . 108139) (symbol 108132 . 108138) (symbol 108120 . 108131) (open-paren 108119 . 108120) (symbol 108107 . 108118) (VOID 108102 . 108106) (close-paren 108030 . 108031) (RETURN 108018 . 108024) (punctuation 108011 . 108012) (semantic-list 108005 . 108010) (symbol 107993 . 108004) (punctuation 107964 . 107965) (punctuation 107963 . 107964) (symbol 107962 . 107963) (punctuation 107938 . 107939) (punctuation 107937 . 107938) (symbol 107936 . 107937) (punctuation 107913 . 107914) (punctuation 107912 . 107913) (symbol 107911 . 107912) (punctuation 107889 . 107890) (punctuation 107888 . 107889) (symbol 107887 . 107888) (punctuation 107865 . 107866) (punctuation 107864 . 107865) (symbol 107863 . 107864) (punctuation 107846 . 107847) (punctuation 107845 . 107846) (symbol 107844 . 107845) (punctuation 107766 . 107767) (punctuation 107765 . 107766) (semantic-list 107690 . 107695) (open-paren 107587 . 107588) (close-paren 107585 . 107586) (symbol 107578 . 107585) (symbol 107568 . 107577) (punctuation 107566 . 107567) (symbol 107559 . 107566) (symbol 107549 . 107558) (punctuation 107547 . 107548) (symbol 107544 . 107547) (punctuation 107543 . 107544) (symbol 107536 . 107542) (STRUCT 107529 . 107535) (open-paren 107528 . 107529) (symbol 107515 . 107527) (symbol 107503 . 107514) (close-paren 107378 . 107379) (RETURN 107366 . 107372) (punctuation 107342 . 107343) (punctuation 107341 . 107342) (symbol 107340 . 107341) (punctuation 107317 . 107318) (punctuation 107316 . 107317) (symbol 107315 . 107316) (punctuation 107299 . 107300) (punctuation 107298 . 107299) (symbol 107297 . 107298) (punctuation 107281 . 107282) (punctuation 107280 . 107281) (symbol 107279 . 107280) (punctuation 107263 . 107264) (punctuation 107262 . 107263) (symbol 107261 . 107262) (punctuation 107246 . 107247) (punctuation 107245 . 107246) (symbol 107244 . 107245) (open-paren 107114 . 107115) (close-paren 107112 . 107113) (VOID 107108 . 107112) (open-paren 107107 . 107108) (close-paren 107103 . 107104) (punctuation 107028 . 107029) (symbol 107025 . 107028) (punctuation 107016 . 107017) (number 107015 . 107016) (punctuation 107013 . 107014) (number 107012 . 107013) (punctuation 107010 . 107011) (number 107009 . 107010) (punctuation 107007 . 107008) (symbol 106995 . 107007) (punctuation 106993 . 106994) (symbol 106981 . 106993) (punctuation 106979 . 106980) (string 106966 . 106979) (open-paren 106965 . 106966) (symbol 106959 . 106964) (close-paren 106956 . 106957) (RETURN 106940 . 106946) (punctuation 106924 . 106925) (punctuation 106923 . 106924) (semantic-list 106914 . 106923) (symbol 106905 . 106913) (punctuation 106858 . 106859) (semantic-list 106848 . 106857) (symbol 106836 . 106847) (punctuation 106825 . 106826) (semantic-list 106815 . 106824) (symbol 106801 . 106814) (open-paren 106717 . 106718) (close-paren 106715 . 106716) (symbol 106710 . 106715) (symbol 106698 . 106709) (punctuation 106696 . 106697) (symbol 106693 . 106696) (symbol 106681 . 106692) (punctuation 106679 . 106680) (symbol 106674 . 106679) (symbol 106662 . 106673) (open-paren 106661 . 106662) (symbol 106647 . 106660) (symbol 106635 . 106646) (close-paren 106553 . 106554) (semantic-list 106521 . 106530) (open-paren 106496 . 106497) (close-paren 106494 . 106495) (symbol 106490 . 106494) (symbol 106478 . 106489) (open-paren 106477 . 106478) (symbol 106461 . 106476) (VOID 106456 . 106460) (close-paren 106328 . 106329) (RETURN 106316 . 106322) (punctuation 106300 . 106301) (semantic-list 106297 . 106300) (symbol 106293 . 106297) (punctuation 106292 . 106293) (punctuation 106291 . 106292) (symbol 106290 . 106291) (punctuation 106274 . 106275) (semantic-list 106271 . 106274) (symbol 106267 . 106271) (punctuation 106266 . 106267) (punctuation 106265 . 106266) (symbol 106264 . 106265) (punctuation 106231 . 106232) (punctuation 106230 . 106231) (symbol 106229 . 106230) (open-paren 106118 . 106119) (close-paren 106116 . 106117) (symbol 106115 . 106116) (symbol 106105 . 106114) (punctuation 106103 . 106104) (symbol 106102 . 106103) (punctuation 106101 . 106102) (symbol 106089 . 106100) (open-paren 106088 . 106089) (symbol 106071 . 106087) (symbol 106059 . 106070) (close-paren 105967 . 105968) (RETURN 105955 . 105961) (punctuation 105940 . 105941) (semantic-list 105937 . 105940) (symbol 105933 . 105937) (punctuation 105932 . 105933) (punctuation 105931 . 105932) (symbol 105930 . 105931) (punctuation 105914 . 105915) (semantic-list 105911 . 105914) (symbol 105907 . 105911) (punctuation 105906 . 105907) (punctuation 105905 . 105906) (symbol 105904 . 105905) (punctuation 105884 . 105885) (semantic-list 105881 . 105884) (symbol 105877 . 105881) (punctuation 105876 . 105877) (punctuation 105875 . 105876) (symbol 105874 . 105875) (punctuation 105832 . 105833) (punctuation 105831 . 105832) (symbol 105830 . 105831) (open-paren 105719 . 105720) (close-paren 105717 . 105718) (symbol 105716 . 105717) (symbol 105704 . 105715) (punctuation 105702 . 105703) (symbol 105701 . 105702) (punctuation 105700 . 105701) (VOID 105695 . 105699) (punctuation 105693 . 105694) (semantic-list 105687 . 105693) (semantic-list 105682 . 105686) (VOID 105677 . 105681) (open-paren 105676 . 105677) (symbol 105650 . 105675) (symbol 105638 . 105649) (close-paren 105635 . 105636) (RETURN 105623 . 105629) (punctuation 105607 . 105608) (semantic-list 105604 . 105607) (symbol 105600 . 105604) (punctuation 105599 . 105600) (punctuation 105598 . 105599) (symbol 105597 . 105598) (punctuation 105581 . 105582) (semantic-list 105578 . 105581) (symbol 105574 . 105578) (punctuation 105573 . 105574) (punctuation 105572 . 105573) (symbol 105571 . 105572) (punctuation 105537 . 105538) (punctuation 105536 . 105537) (symbol 105535 . 105536) (open-paren 105424 . 105425) (close-paren 105422 . 105423) (symbol 105421 . 105422) (punctuation 105420 . 105421) (VOID 105415 . 105419) (punctuation 105413 . 105414) (symbol 105412 . 105413) (punctuation 105411 . 105412) (VOID 105406 . 105410) (open-paren 105405 . 105406) (symbol 105387 . 105404) (symbol 105375 . 105386) (close-paren 105372 . 105373) (RETURN 105360 . 105366) (punctuation 105344 . 105345) (semantic-list 105341 . 105344) (symbol 105337 . 105341) (punctuation 105336 . 105337) (punctuation 105335 . 105336) (symbol 105334 . 105335) (punctuation 105318 . 105319) (semantic-list 105315 . 105318) (symbol 105311 . 105315) (punctuation 105310 . 105311) (punctuation 105309 . 105310) (symbol 105308 . 105309) (punctuation 105274 . 105275) (punctuation 105273 . 105274) (symbol 105272 . 105273) (open-paren 105161 . 105162) (close-paren 105159 . 105160) (symbol 105158 . 105159) (symbol 105148 . 105157) (punctuation 105146 . 105147) (symbol 105145 . 105146) (punctuation 105144 . 105145) (VOID 105139 . 105143) (open-paren 105138 . 105139) (symbol 105120 . 105137) (symbol 105108 . 105119) (close-paren 105105 . 105106) (RETURN 105093 . 105099) (punctuation 105077 . 105078) (semantic-list 105074 . 105077) (symbol 105070 . 105074) (punctuation 105069 . 105070) (punctuation 105068 . 105069) (symbol 105067 . 105068) (punctuation 105038 . 105039) (punctuation 105037 . 105038) (symbol 105036 . 105037) (open-paren 104925 . 104926) (close-paren 104923 . 104924) (symbol 104922 . 104923) (punctuation 104921 . 104922) (VOID 104916 . 104920) (open-paren 104915 . 104916) (symbol 104901 . 104914) (symbol 104889 . 104900) (close-paren 104886 . 104887) (RETURN 104874 . 104880) (punctuation 104859 . 104860) (semantic-list 104856 . 104859) (symbol 104852 . 104856) (punctuation 104851 . 104852) (punctuation 104850 . 104851) (symbol 104849 . 104850) (punctuation 104834 . 104835) (semantic-list 104831 . 104834) (symbol 104827 . 104831) (punctuation 104826 . 104827) (punctuation 104825 . 104826) (symbol 104824 . 104825) (punctuation 104809 . 104810) (semantic-list 104806 . 104809) (symbol 104802 . 104806) (punctuation 104801 . 104802) (punctuation 104800 . 104801) (symbol 104799 . 104800) (punctuation 104784 . 104785) (semantic-list 104781 . 104784) (symbol 104777 . 104781) (punctuation 104776 . 104777) (punctuation 104775 . 104776) (symbol 104774 . 104775) (punctuation 104732 . 104733) (punctuation 104731 . 104732) (symbol 104730 . 104731) (open-paren 104619 . 104620) (close-paren 104617 . 104618) (symbol 104616 . 104617) (symbol 104604 . 104615) (punctuation 104596 . 104597) (symbol 104595 . 104596) (symbol 104583 . 104594) (punctuation 104581 . 104582) (symbol 104580 . 104581) (symbol 104568 . 104579) (punctuation 104566 . 104567) (symbol 104565 . 104566) (symbol 104553 . 104564) (open-paren 104552 . 104553) (symbol 104526 . 104551) (symbol 104514 . 104525) (close-paren 104511 . 104512) (RETURN 104499 . 104505) (punctuation 104483 . 104484) (semantic-list 104480 . 104483) (symbol 104476 . 104480) (punctuation 104475 . 104476) (punctuation 104474 . 104475) (symbol 104473 . 104474) (punctuation 104457 . 104458) (semantic-list 104454 . 104457) (symbol 104450 . 104454) (punctuation 104449 . 104450) (punctuation 104448 . 104449) (symbol 104447 . 104448) (punctuation 104431 . 104432) (semantic-list 104428 . 104431) (symbol 104424 . 104428) (punctuation 104423 . 104424) (punctuation 104422 . 104423) (symbol 104421 . 104422) (punctuation 104383 . 104384) (punctuation 104382 . 104383) (symbol 104381 . 104382) (open-paren 104270 . 104271) (close-paren 104268 . 104269) (symbol 104267 . 104268) (symbol 104257 . 104266) (punctuation 104255 . 104256) (symbol 104254 . 104255) (symbol 104244 . 104253) (punctuation 104242 . 104243) (symbol 104241 . 104242) (symbol 104231 . 104240) (open-paren 104230 . 104231) (symbol 104208 . 104229) (symbol 104196 . 104207) (punctuation 104103 . 104104) (close-paren 104102 . 104103) (number 104101 . 104102) (punctuation 104099 . 104100) (punctuation 104098 . 104099) (semantic-list 104012 . 104096) (open-paren 104011 . 104012) (symbol 104004 . 104010) (punctuation 104002 . 104003) (close-paren 104001 . 104002) (number 104000 . 104001) (punctuation 103998 . 103999) (punctuation 103997 . 103998) (symbol 103985 . 103996) (open-paren 103984 . 103985) (symbol 103977 . 103983) (close-paren 103872 . 103873) (punctuation 103870 . 103871) (punctuation 103869 . 103870) (punctuation 103868 . 103869) (symbol 103850 . 103868) (punctuation 103846 . 103847) (semantic-list 103829 . 103846) (SIZEOF 103822 . 103828) (punctuation 103820 . 103821) (punctuation 103819 . 103820) (symbol 103802 . 103818) (punctuation 103738 . 103739) (symbol 103732 . 103738) (punctuation 103731 . 103732) (punctuation 103730 . 103731) (semantic-list 103724 . 103730) (symbol 103718 . 103723) (punctuation 103692 . 103693) (punctuation 103691 . 103692) (semantic-list 103685 . 103691) (symbol 103676 . 103684) (open-paren 103672 . 103673) (close-paren 103670 . 103671) (symbol 103666 . 103670) (symbol 103654 . 103665) (open-paren 103653 . 103654) (symbol 103643 . 103652) (VOID 103638 . 103642) (close-paren 103602 . 103603) (RETURN 103590 . 103596) (punctuation 103572 . 103573) (punctuation 103571 . 103572) (semantic-list 103566 . 103571) (symbol 103557 . 103565) (punctuation 103541 . 103542) (punctuation 103540 . 103541) (semantic-list 103535 . 103540) (symbol 103526 . 103534) (punctuation 103522 . 103523) (punctuation 103521 . 103522) (punctuation 103520 . 103521) (symbol 103501 . 103520) (punctuation 103497 . 103498) (semantic-list 103480 . 103497) (SIZEOF 103473 . 103479) (punctuation 103471 . 103472) (punctuation 103470 . 103471) (symbol 103453 . 103469) (punctuation 103430 . 103431) (punctuation 103429 . 103430) (punctuation 103424 . 103425) (semantic-list "((void) 0)" 103404 . 103424) (semantic-list 103045 . 103400) (ELSE 103036 . 103040) (semantic-list 102929 . 103033) (semantic-list 102906 . 102924) (IF 102903 . 102905) (punctuation 102898 . 102899) (semantic-list "((void) 0)" 102880 . 102898) (open-paren 102856 . 102857) (close-paren 102854 . 102855) (symbol 102850 . 102854) (symbol 102835 . 102849) (ENUM 102830 . 102834) (open-paren 102829 . 102830) (symbol 102815 . 102828) (symbol 102803 . 102814) (STATIC 102796 . 102802) (punctuation 102587 . 102588) (close-paren 102586 . 102587) (open-paren 102446 . 102447) (symbol 102433 . 102445) (STRUCT 102426 . 102432) (punctuation 102204 . 102205) (close-paren 102203 . 102204) (open-paren 102096 . 102097) (symbol 102078 . 102095) (UNION 102072 . 102077) (close-paren 101782 . 101783) (RETURN 101770 . 101776) (punctuation 101766 . 101767) (punctuation 101765 . 101766) (punctuation 101764 . 101765) (symbol 101746 . 101764) (punctuation 101742 . 101743) (punctuation 101741 . 101742) (punctuation 101740 . 101741) (symbol 101726 . 101740) (punctuation 101722 . 101723) (semantic-list 101702 . 101722) (SIZEOF 101695 . 101701) (punctuation 101693 . 101694) (punctuation 101692 . 101693) (symbol 101675 . 101691) (punctuation 101643 . 101644) (semantic-list "((void) 0)" 101623 . 101643) (semantic-list 101255 . 101619) (ELSE 101246 . 101250) (semantic-list 101145 . 101243) (semantic-list 101122 . 101140) (IF 101119 . 101121) (punctuation 101114 . 101115) (semantic-list "((void) 0)" 101096 . 101114) (open-paren 101048 . 101049) (close-paren 101046 . 101047) (symbol 101042 . 101046) (symbol 101030 . 101041) (open-paren 101029 . 101030) (close-paren 101025 . 101026) (punctuation 100880 . 100881) (symbol 100877 . 100880) (punctuation 100868 . 100869) (number 100867 . 100868) (punctuation 100865 . 100866) (number 100864 . 100865) (punctuation 100862 . 100863) (number 100861 . 100862) (punctuation 100859 . 100860) (symbol 100847 . 100859) (punctuation 100845 . 100846) (symbol 100833 . 100845) (punctuation 100831 . 100832) (string 100818 . 100831) (open-paren 100817 . 100818) (symbol 100811 . 100816) (close-paren 100808 . 100809) (punctuation 100791 . 100792) (punctuation 100790 . 100791) (symbol 100789 . 100790) (punctuation 100760 . 100761) (punctuation 100759 . 100760) (symbol 100758 . 100759) (punctuation 100715 . 100716) (punctuation 100714 . 100715) (symbol 100713 . 100714) (punctuation 100680 . 100681) (punctuation 100679 . 100680) (symbol 100678 . 100679) (punctuation 100656 . 100657) (punctuation 100655 . 100656) (symbol 100654 . 100655) (punctuation 100525 . 100526) (punctuation 100524 . 100525) (symbol 100523 . 100524) (open-paren 100415 . 100416) (close-paren 100413 . 100414) (symbol 100409 . 100413) (symbol 100397 . 100408) (punctuation 100395 . 100396) (symbol 100392 . 100395) (symbol 100380 . 100391) (open-paren 100379 . 100380) (symbol 100367 . 100378) (VOID 100362 . 100366) (close-paren 100359 . 100360) (punctuation 100345 . 100346) (punctuation 100344 . 100345) (semantic-list 100339 . 100344) (symbol 100331 . 100338) (open-paren 100327 . 100328) (close-paren 100325 . 100326) (symbol 100321 . 100325) (symbol 100309 . 100320) (punctuation 100307 . 100308) (symbol 100304 . 100307) (symbol 100292 . 100303) (open-paren 100291 . 100292) (symbol 100275 . 100290) (VOID 100270 . 100274) (STATIC 100263 . 100269) (punctuation 99531 . 99532) (close-paren 99530 . 99531) (open-paren 99388 . 99389) (symbol 99375 . 99387) (STRUCT 99368 . 99374) (punctuation 99097 . 99098) (close-paren 99096 . 99097) (open-paren 98983 . 98984) (symbol 98963 . 98982) (UNION 98957 . 98962) (close-paren 98674 . 98675) (RETURN 98662 . 98668) (punctuation 98605 . 98606) (SIZEOF 98598 . 98604) (punctuation 98573 . 98574) (punctuation 98572 . 98573) (open-paren 97986 . 97987) (close-paren 97984 . 97985) (symbol 97980 . 97984) (punctuation 97979 . 97980) (symbol 97967 . 97978) (punctuation 97965 . 97966) (symbol 97960 . 97965) (symbol 97950 . 97959) (open-paren 97949 . 97950) (close-paren 97945 . 97946) (punctuation 96947 . 96948) (symbol 96944 . 96947) (punctuation 96935 . 96936) (number 96934 . 96935) (punctuation 96932 . 96933) (symbol 96928 . 96932) (punctuation 96926 . 96927) (number 96925 . 96926) (punctuation 96923 . 96924) (symbol 96908 . 96923) (punctuation 96906 . 96907) (symbol 96891 . 96906) (punctuation 96889 . 96890) (string 96873 . 96889) (open-paren 96872 . 96873) (symbol 96866 . 96871) (close-paren 96863 . 96864) (punctuation 96776 . 96777) (punctuation 96775 . 96776) (symbol 96774 . 96775) (semantic-list 96337 . 96428) (IF 96334 . 96336) (punctuation 96323 . 96324) (punctuation 96316 . 96317) (punctuation 96315 . 96316) (punctuation 96312 . 96313) (number 96310 . 96311) (open-paren 96223 . 96224) (close-paren 96221 . 96222) (symbol 96220 . 96221) (punctuation 96219 . 96220) (symbol 96207 . 96218) (STRUCT 96200 . 96206) (open-paren 96199 . 96200) (symbol 96184 . 96198) (VOID 96179 . 96183) (close-paren 96176 . 96177) (RETURN 96164 . 96170) (punctuation 96154 . 96155) (SIZEOF 96147 . 96153) (punctuation 96122 . 96123) (punctuation 96121 . 96122) (open-paren 96019 . 96020) (close-paren 96017 . 96018) (symbol 96013 . 96017) (punctuation 96012 . 96013) (symbol 96000 . 96011) (punctuation 95998 . 95999) (symbol 95993 . 95998) (symbol 95983 . 95992) (open-paren 95982 . 95983) (close-paren 95978 . 95979) (punctuation 95813 . 95814) (symbol 95810 . 95813) (punctuation 95801 . 95802) (number 95800 . 95801) (punctuation 95798 . 95799) (symbol 95794 . 95798) (punctuation 95792 . 95793) (number 95791 . 95792) (punctuation 95789 . 95790) (symbol 95782 . 95789) (punctuation 95780 . 95781) (symbol 95773 . 95780) (punctuation 95771 . 95772) (string 95763 . 95771) (open-paren 95762 . 95763) (symbol 95756 . 95761) (close-paren 95753 . 95754) (RETURN 95710 . 95716) (punctuation 95687 . 95688) (punctuation 95686 . 95687) (symbol 95685 . 95686) (semantic-list 95635 . 95680) (FOR 95631 . 95634) (open-paren 95539 . 95540) (close-paren 95537 . 95538) (symbol 95533 . 95537) (symbol 95521 . 95532) (punctuation 95519 . 95520) (symbol 95513 . 95519) (symbol 95501 . 95512) (open-paren 95500 . 95501) (close-paren 95496 . 95497) (punctuation 95378 . 95379) (symbol 95375 . 95378) (punctuation 95366 . 95367) (number 95365 . 95366) (punctuation 95363 . 95364) (number 95362 . 95363) (punctuation 95360 . 95361) (number 95359 . 95360) (punctuation 95357 . 95358) (symbol 95345 . 95357) (punctuation 95343 . 95344) (symbol 95331 . 95343) (punctuation 95329 . 95330) (string 95316 . 95329) (open-paren 95315 . 95316) (symbol 95309 . 95314) (close-paren 95305 . 95306) (RETURN 95262 . 95268) (punctuation 95252 . 95253) (SIZEOF 95245 . 95251) (punctuation 95220 . 95221) (punctuation 95219 . 95220) (open-paren 95155 . 95156) (close-paren 95153 . 95154) (symbol 95149 . 95153) (punctuation 95148 . 95149) (symbol 95136 . 95147) (punctuation 95134 . 95135) (symbol 95129 . 95134) (symbol 95119 . 95128) (open-paren 95118 . 95119) (close-paren 95114 . 95115) (punctuation 94875 . 94876) (symbol 94872 . 94875) (punctuation 94863 . 94864) (number 94862 . 94863) (punctuation 94860 . 94861) (symbol 94856 . 94860) (punctuation 94854 . 94855) (number 94853 . 94854) (punctuation 94851 . 94852) (symbol 94844 . 94851) (punctuation 94842 . 94843) (symbol 94835 . 94842) (punctuation 94833 . 94834) (string 94825 . 94833) (open-paren 94824 . 94825) (symbol 94818 . 94823) (close-paren 94814 . 94815) (RETURN 94771 . 94777) (punctuation 94748 . 94749) (punctuation 94747 . 94748) (symbol 94746 . 94747) (semantic-list 94709 . 94741) (FOR 94705 . 94708) (punctuation 94682 . 94683) (punctuation 94681 . 94682) (symbol 94680 . 94681) (open-paren 94561 . 94562) (close-paren 94559 . 94560) (symbol 94555 . 94559) (symbol 94543 . 94554) (punctuation 94541 . 94542) (symbol 94536 . 94541) (symbol 94524 . 94535) (punctuation 94522 . 94523) (symbol 94518 . 94522) (symbol 94506 . 94517) (open-paren 94505 . 94506) (close-paren 94501 . 94502) (punctuation 94312 . 94313) (symbol 94309 . 94312) (punctuation 94300 . 94301) (number 94299 . 94300) (punctuation 94297 . 94298) (number 94296 . 94297) (punctuation 94294 . 94295) (number 94293 . 94294) (punctuation 94291 . 94292) (symbol 94279 . 94291) (punctuation 94277 . 94278) (symbol 94265 . 94277) (punctuation 94263 . 94264) (string 94250 . 94263) (open-paren 94249 . 94250) (symbol 94243 . 94248) (close-paren 94239 . 94240) (RETURN 94229 . 94235) (punctuation 94179 . 94180) (symbol 94173 . 94179) (punctuation 94172 . 94173) (punctuation 94171 . 94172) (symbol 94170 . 94171) (string 94055 . 94075) (string 94018 . 94053) (semantic-list 93974 . 94006) (IF 93971 . 93973) (open-paren 93967 . 93968) (close-paren 93965 . 93966) (symbol 93960 . 93965) (symbol 93950 . 93959) (open-paren 93949 . 93950) (symbol 93933 . 93948) (punctuation 93931 . 93932) (symbol 93919 . 93930) (STRUCT 93912 . 93918) (STATIC 93905 . 93911) (close-paren 93801 . 93802) (RETURN 93791 . 93797) (punctuation 93688 . 93689) (punctuation 93687 . 93688) (symbol 93686 . 93687) (open-paren 93528 . 93529) (close-paren 93526 . 93527) (VOID 93522 . 93526) (open-paren 93521 . 93522) (symbol 93505 . 93520) (punctuation 93503 . 93504) (symbol 93496 . 93502) (STRUCT 93489 . 93495) (close-paren 93486 . 93487) (RETURN 93476 . 93482) (punctuation 93462 . 93463) (punctuation 93385 . 93386) (punctuation 93384 . 93385) (punctuation 93270 . 93271) (punctuation 93269 . 93270) (number 93246 . 93247) (punctuation 93244 . 93245) (semantic-list 93214 . 93243) (punctuation 93212 . 93213) (punctuation 93211 . 93212) (punctuation 93201 . 93202) (punctuation 93172 . 93173) (punctuation 93171 . 93172) (punctuation 93161 . 93162) (punctuation 93150 . 93151) (punctuation 93149 . 93150) (punctuation 93139 . 93140) (punctuation 93128 . 93129) (punctuation 93127 . 93128) (number 93125 . 93126) (punctuation 93100 . 93101) (punctuation 93099 . 93100) (punctuation 93093 . 93094) (punctuation 93086 . 93087) (punctuation 93085 . 93086) (number 93083 . 93084) (open-paren 92984 . 92985) (close-paren 92982 . 92983) (symbol 92979 . 92982) (symbol 92969 . 92978) (ENUM 92964 . 92968) (punctuation 92962 . 92963) (symbol 92955 . 92962) (INT 92951 . 92954) (punctuation 92940 . 92941) (symbol 92933 . 92940) (INT 92929 . 92932) (punctuation 92927 . 92928) (symbol 92921 . 92927) (INT 92917 . 92920) (open-paren 92916 . 92917) (symbol 92894 . 92915) (punctuation 92892 . 92893) (symbol 92880 . 92891) (STRUCT 92873 . 92879) (close-paren 92822 . 92823) (RETURN 92812 . 92818) (punctuation 92797 . 92798) (symbol 92791 . 92797) (punctuation 92790 . 92791) (punctuation 92789 . 92790) (symbol 92788 . 92789) (semantic-list 92778 . 92783) (IF 92775 . 92777) (semantic-list 92637 . 92711) (IF 92634 . 92636) (open-paren 92550 . 92551) (close-paren 92548 . 92549) (symbol 92545 . 92548) (symbol 92535 . 92544) (open-paren 92534 . 92535) (symbol 92518 . 92533) (punctuation 92516 . 92517) (symbol 92504 . 92515) (STRUCT 92497 . 92503) (close-paren 92451 . 92452) (RETURN 92441 . 92447) (punctuation 92436 . 92437) (semantic-list "((void) 0)" 92416 . 92436) (semantic-list 91651 . 92412) (ELSE 91642 . 91646) (semantic-list 91598 . 91608) (IF 91595 . 91597) (punctuation 91590 . 91591) (semantic-list "((void) 0)" 91572 . 91590) (open-paren 91542 . 91543) (close-paren 91540 . 91541) (symbol 91537 . 91540) (symbol 91527 . 91536) (open-paren 91526 . 91527) (symbol 91506 . 91525) (punctuation 91504 . 91505) (symbol 91492 . 91503) (STRUCT 91485 . 91491) (STATIC 91478 . 91484) (close-paren 91370 . 91371) (semantic-list 90946 . 91369) (semantic-list 90903 . 90941) (FOR 90899 . 90902) (semantic-list 89401 . 90864) (semantic-list 89350 . 89396) (FOR 89346 . 89349) (semantic-list 89280 . 89299) (SIZEOF 89273 . 89279) (number 89270 . 89271) (punctuation 89210 . 89211) (symbol 89191 . 89209) (punctuation 89189 . 89190) (symbol 89175 . 89188) (open-paren 89023 . 89024) (close-paren 89021 . 89022) (VOID 89017 . 89021) (open-paren 89016 . 89017) (symbol 89002 . 89015) (VOID 88997 . 89001) (STATIC 88990 . 88996) (symbol 88950 . 88959) (close-paren 88899 . 88900) (semantic-list 88866 . 88889) (semantic-list 88787 . 88839) (IF 88784 . 88786) (ELSE 88779 . 88783) (semantic-list 88746 . 88767) (semantic-list 88671 . 88721) (IF 88668 . 88670) (ELSE 88663 . 88667) (semantic-list 88628 . 88651) (semantic-list 88551 . 88602) (IF 88548 . 88550) (semantic-list 88191 . 88544) (semantic-list 88057 . 88186) (IF 88054 . 88056) (open-paren 88015 . 88016) (close-paren 88013 . 88014) (symbol 88007 . 88013) (punctuation 88006 . 88007) (symbol 87994 . 88005) (STRUCT 87987 . 87993) (open-paren 87986 . 87987) (symbol 87971 . 87985) (VOID 87966 . 87970) (STATIC 87959 . 87965) (close-paren 87860 . 87861) (punctuation 87858 . 87859) (semantic-list #("(eassume ((x) >= 0), vroundup_ct (x))" 0 1 (macros (("x" symbol "header_size" 87825 . 87836)))) 87815 . 87858) (RETURN 87808 . 87814) (ELSE 87782 . 87786) (semantic-list 87230 . 87779) (semantic-list 87199 . 87225) (IF 87196 . 87198) (punctuation 87155 . 87156) (punctuation 87153 . 87154) (symbol 87148 . 87152) (punctuation 87147 . 87148) (symbol 87141 . 87147) (punctuation 87140 . 87141) (punctuation 87139 . 87140) (symbol 87138 . 87139) (punctuation 87136 . 87137) (symbol 87131 . 87135) (symbol 87121 . 87130) (open-paren 87117 . 87118) (close-paren 87115 . 87116) (symbol 87114 . 87115) (punctuation 87113 . 87114) (symbol 87101 . 87112) (STRUCT 87094 . 87100) (open-paren 87093 . 87094) (symbol 87079 . 87092) (symbol 87069 . 87078) (STATIC 87062 . 87068) (close-paren 86815 . 86816) (RETURN 86800 . 86806) (semantic-list 86679 . 86797) (semantic-list 86643 . 86674) (IF 86640 . 86642) (semantic-list 85805 . 86282) (semantic-list 85772 . 85798) (IF 85769 . 85771) (semantic-list 85668 . 85764) (FOR 85664 . 85667) (semantic-list 85300 . 85477) (semantic-list 85269 . 85295) (IF 85266 . 85268) (number 85136 . 85137) (punctuation 85134 . 85135) (punctuation 85133 . 85134) (punctuation 85118 . 85119) (semantic-list #("(eassume ((x) >= 0), vroundup_ct (x))" 0 1 (macros (("x" semantic-list "(VECTOR_BLOCK_BYTES / 2)" 1 . 25)))) 85081 . 85097) (punctuation 85079 . 85080) (punctuation 85078 . 85079) (punctuation 85069 . 85070) (punctuation 85059 . 85060) (punctuation 85058 . 85059) (semantic-list #("(POWER_OF_2 (y)					\\
		       ? ((y) - 1 + (x)) & ~ ((y) - 1)			\\
		       : ((y) - 1 + (x)) - ((y) - 1 + (x)) % (y))" 0 1 (macros (("y" symbol "roundup_size" 4 . 16) ("x" symbol "header_size" 1 . 2)))) 85041 . 85057) (open-paren 84940 . 84941) (close-paren 84938 . 84939) (symbol 84932 . 84938) (symbol 84925 . 84931) (open-paren 84924 . 84925) (symbol 84897 . 84923) (punctuation 84895 . 84896) (symbol 84883 . 84894) (STRUCT 84876 . 84882) (STATIC 84869 . 84875) (close-paren 84821 . 84822) (open-paren 84781 . 84782) (close-paren 84779 . 84780) (VOID 84775 . 84779) (open-paren 84774 . 84775) (symbol 84761 . 84773) (VOID 84756 . 84760) (STATIC 84749 . 84755) (close-paren 84693 . 84694) (RETURN 84679 . 84685) (punctuation 84629 . 84630) (punctuation 84628 . 84629) (symbol 84623 . 84628) (semantic-list "(VECTOR_BLOCK_SIZE - vroundup_ct (sizeof (void *)))" 84562 . 84580) (punctuation 84560 . 84561) (punctuation 84554 . 84555) (punctuation 84553 . 84554) (punctuation 84541 . 84542) (punctuation 84540 . 84541) (open-paren 84438 . 84439) (close-paren 84436 . 84437) (VOID 84432 . 84436) (open-paren 84431 . 84432) (symbol 84409 . 84430) (punctuation 84407 . 84408) (symbol 84394 . 84406) (STRUCT 84387 . 84393) (STATIC 84380 . 84386) (close-paren 84345 . 84346) (punctuation 84332 . 84333) (symbol 84325 . 84331) (punctuation 84323 . 84324) (punctuation 84322 . 84323) (symbol 84298 . 84321) (semantic-list 84252 . 84260) (semantic-list "((VECTOR_BLOCK_BYTES - VBLOCK_BYTES_MIN) / roundup_size + 1)" 84184 . 84210) (punctuation 84182 . 84183) (number 84122 . 84123) (punctuation 84120 . 84121) (punctuation 84119 . 84120) (punctuation 84104 . 84105) (number 84074 . 84075) (punctuation 83972 . 83973) (punctuation 83971 . 83972) (open-paren 83946 . 83947) (close-paren 83944 . 83945) (symbol 83938 . 83944) (symbol 83928 . 83937) (punctuation 83926 . 83927) (symbol 83925 . 83926) (punctuation 83924 . 83925) (symbol 83912 . 83923) (STRUCT 83905 . 83911) (open-paren 83904 . 83905) (symbol 83885 . 83903) (VOID 83880 . 83884) (STATIC 83873 . 83879) (punctuation 83439 . 83440) (close-paren 83438 . 83439) (semantic-list "((VECTOR_BLOCK_BYTES - VBLOCK_BYTES_MIN) / roundup_size + 1)" 83412 . 83438) (open-paren 83411 . 83412) (symbol 83394 . 83411) (punctuation 83393 . 83394) (symbol 83381 . 83392) (STRUCT 83374 . 83380) (STATIC 83367 . 83373) (punctuation 83157 . 83158) (close-paren 83156 . 83157) (open-paren 83092 . 83093) (symbol 83079 . 83091) (STRUCT 83072 . 83078) (close-paren 82978 . 82979) (punctuation 82976 . 82977) (semantic-list 82942 . 82976) (semantic-list 82919 . 82941) (RETURN 82912 . 82918) (open-paren 82908 . 82909) (close-paren 82906 . 82907) (symbol 82905 . 82906) (punctuation 82904 . 82905) (symbol 82891 . 82903) (STRUCT 82884 . 82890) (open-paren 82883 . 82884) (symbol 82866 . 82882) (punctuation 82864 . 82865) (symbol 82852 . 82863) (STRUCT 82845 . 82851) (STATIC 82838 . 82844) (punctuation 82835 . 82836) (close-paren 82834 . 82835) (semantic-list #("(POWER_OF_2 (y)					\\
		       ? ((y) - 1 + (x)) & ~ ((y) - 1)			\\
		       : ((y) - 1 + (x)) - ((y) - 1 + (x)) % (y))" 0 1 (macros (("y" semantic-list "(struct large_vector)" 82793 . 82814) ("x" SIZEOF "sizeof" 82786 . 82792)))) 82777 . 82833) (punctuation 82775 . 82776) (symbol 82755 . 82774) (open-paren 82751 . 82752) (ENUM 82746 . 82750) (punctuation 82743 . 82744) (close-paren 82742 . 82743) (open-paren 82711 . 82712) (symbol 82698 . 82710) (STRUCT 82691 . 82697) (close-paren 82182 . 82183) (punctuation 82166 . 82167) (semantic-list 82138 . 82165) (RETURN 82131 . 82137) (punctuation 82118 . 82119) (punctuation 82117 . 82118) (semantic-list #("(POWER_OF_2 (y)					\\
		       ? ((y) - 1 + (x)) & ~ ((y) - 1)			\\
		       : ((y) - 1 + (x)) - ((y) - 1 + (x)) % (y))" 0 1 (macros (("y" symbol "roundup_size" 4 . 16) ("x" symbol "header_size" 1 . 2)))) 82100 . 82116) (open-paren 82087 . 82088) (close-paren 82085 . 82086) (symbol 82079 . 82085) (symbol 82069 . 82078) (open-paren 82068 . 82069) (symbol 82061 . 82067) (symbol 82051 . 82060) (STATIC 82044 . 82050) (close-paren 81962 . 81963) (RETURN 81952 . 81958) (open-paren 81890 . 81891) (close-paren 81888 . 81889) (symbol 81882 . 81888) (symbol 81872 . 81881) (punctuation 81870 . 81871) (symbol 81869 . 81870) (punctuation 81868 . 81869) (symbol 81856 . 81867) (STRUCT 81849 . 81855) (open-paren 81848 . 81849) (symbol 81840 . 81847) (punctuation 81838 . 81839) (symbol 81826 . 81837) (STRUCT 81819 . 81825) (STATIC 81812 . 81818) (punctuation 80829 . 80830) (close-paren 80828 . 80829) (semantic-list 80799 . 80828) (punctuation 80797 . 80798) (punctuation 80796 . 80797) (number "4096" 80778 . 80795) (open-paren 80777 . 80778) (symbol 80770 . 80776) (punctuation 80768 . 80769) (close-paren 80767 . 80768) (number 80766 . 80767) (punctuation 80764 . 80765) (punctuation 80763 . 80764) (symbol 80750 . 80762) (punctuation 80748 . 80749) (number "4096" 80730 . 80747) (open-paren 80729 . 80730) (symbol 80722 . 80728) (punctuation 80676 . 80677) (close-paren 80675 . 80676) (semantic-list #("((a) % (b) == 0 ? (a) : (b) % (a) == 0 ? (b) : (a) * (b))" 0 1 (macros (("b" symbol "word_size" 80662 . 80671) ("a" symbol "vector_alignment" 80644 . 80660)))) 80627 . 80672) (punctuation 80625 . 80626) (symbol 80612 . 80624) (punctuation 80549 . 80550) (semantic-list #("((a) % (b) == 0 ? (a) : (b) % (a) == 0 ? (b) : (a) * (b))" 0 1 (macros (("b" semantic-list "(struct Lisp_Vector)" 80509 . 80529) ("a" symbol "FLEXALIGNOF" 80497 . 80508)))) 80480 . 80549) (punctuation 80478 . 80479) (symbol 80461 . 80477) (open-paren 80403 . 80404) (ENUM 80396 . 80400) (close-paren 80149 . 80150) (punctuation 80104 . 80105) (punctuation 80103 . 80104) (symbol 80102 . 80103) (open-paren 80098 . 80099) (close-paren 80096 . 80097) (symbol 80095 . 80096) (punctuation 80094 . 80095) (symbol 80082 . 80093) (STRUCT 80075 . 80081) (punctuation 80073 . 80074) (symbol 80072 . 80073) (punctuation 80071 . 80072) (symbol 80059 . 80070) (STRUCT 80052 . 80058) (open-paren 80051 . 80052) (symbol 80035 . 80050) (VOID 80030 . 80034) (STATIC 80023 . 80029) (close-paren 80020 . 80021) (semantic-list 80003 . 80006) (punctuation 79994 . 79995) (punctuation 79993 . 79994) (RETURN 79977 . 79983) (open-paren 79973 . 79974) (close-paren 79971 . 79972) (symbol 79970 . 79971) (punctuation 79969 . 79970) (symbol 79957 . 79968) (STRUCT 79950 . 79956) (open-paren 79949 . 79950) (symbol 79937 . 79948) (punctuation 79935 . 79936) (symbol 79923 . 79934) (STRUCT 79916 . 79922) (STATIC 79909 . 79915) (close-paren 79492 . 79493) (RETURN 79480 . 79486) (semantic-list 79412 . 79476) (semantic-list 79353 . 79407) (FOR 79349 . 79352) (open-paren 79293 . 79294) (close-paren 79291 . 79292) (symbol 79287 . 79291) (symbol 79275 . 79286) (punctuation 79273 . 79274) (symbol 79267 . 79273) (symbol 79255 . 79266) (open-paren 79254 . 79255) (close-paren 79250 . 79251) (punctuation 79166 . 79167) (symbol 79163 . 79166) (punctuation 79154 . 79155) (number 79153 . 79154) (punctuation 79151 . 79152) (number 79150 . 79151) (punctuation 79148 . 79149) (number 79147 . 79148) (punctuation 79145 . 79146) (symbol 79135 . 79145) (punctuation 79133 . 79134) (symbol 79123 . 79133) (punctuation 79121 . 79122) (string 79110 . 79121) (open-paren 79109 . 79110) (symbol 79103 . 79108) (close-paren 79099 . 79100) (RETURN 79087 . 79093) (semantic-list 79024 . 79084) (semantic-list 79008 . 79019) (WHILE 79002 . 79007) (open-paren 78955 . 78956) (close-paren 78953 . 78954) (symbol 78949 . 78953) (punctuation 78948 . 78949) (symbol 78936 . 78947) (punctuation 78934 . 78935) (symbol 78929 . 78934) (symbol 78919 . 78928) (open-paren 78918 . 78919) (close-paren 78914 . 78915) (punctuation 78753 . 78754) (symbol 78750 . 78753) (punctuation 78741 . 78742) (number 78740 . 78741) (punctuation 78738 . 78739) (symbol 78734 . 78738) (punctuation 78732 . 78733) (number 78731 . 78732) (punctuation 78729 . 78730) (symbol 78724 . 78729) (punctuation 78722 . 78723) (symbol 78717 . 78722) (punctuation 78715 . 78716) (string 78709 . 78715) (open-paren 78708 . 78709) (symbol 78702 . 78707) (close-paren 78699 . 78700) (RETURN 78687 . 78693) (semantic-list 78550 . 78668) (semantic-list 78512 . 78545) (FOR 78508 . 78511) (punctuation 78395 . 78396) (number 78393 . 78394) (semantic-list 78250 . 78380) (semantic-list 78239 . 78245) (SWITCH 78232 . 78238) (open-paren 78178 . 78179) (close-paren 78176 . 78177) (punctuation 78175 . 78176) (punctuation 78174 . 78175) (punctuation 78173 . 78174) (punctuation 78171 . 78172) (symbol 78168 . 78171) (symbol 78156 . 78167) (punctuation 78154 . 78155) (symbol 78149 . 78154) (symbol 78139 . 78148) (punctuation 78137 . 78138) (symbol 78133 . 78137) (symbol 78124 . 78132) (ENUM 78119 . 78123) (open-paren 78118 . 78119) (symbol 78112 . 78117) (symbol 78100 . 78111) (close-paren 77914 . 77915) (semantic-list 77844 . 77911) (RETURN 77818 . 77824) (open-paren 77814 . 77815) (close-paren 77812 . 77813) (symbol 77808 . 77812) (symbol 77796 . 77807) (punctuation 77794 . 77795) (symbol 77790 . 77794) (symbol 77778 . 77789) (punctuation 77776 . 77777) (symbol 77772 . 77776) (symbol 77760 . 77771) (punctuation 77758 . 77759) (symbol 77754 . 77758) (symbol 77742 . 77753) (punctuation 77740 . 77741) (symbol 77736 . 77740) (symbol 77724 . 77735) (open-paren 77723 . 77724) (symbol 77717 . 77722) (symbol 77705 . 77716) (close-paren 77701 . 77702) (semantic-list 77658 . 77698) (RETURN 77632 . 77638) (open-paren 77628 . 77629) (close-paren 77626 . 77627) (symbol 77622 . 77626) (symbol 77610 . 77621) (punctuation 77608 . 77609) (symbol 77604 . 77608) (symbol 77592 . 77603) (punctuation 77590 . 77591) (symbol 77586 . 77590) (symbol 77574 . 77585) (punctuation 77572 . 77573) (symbol 77568 . 77572) (symbol 77556 . 77567) (open-paren 77555 . 77556) (symbol 77549 . 77554) (symbol 77537 . 77548) (close-paren 77533 . 77534) (semantic-list 77504 . 77530) (RETURN 77478 . 77484) (open-paren 77474 . 77475) (close-paren 77472 . 77473) (symbol 77468 . 77472) (symbol 77456 . 77467) (punctuation 77454 . 77455) (symbol 77450 . 77454) (symbol 77438 . 77449) (punctuation 77436 . 77437) (symbol 77432 . 77436) (symbol 77420 . 77431) (open-paren 77419 . 77420) (symbol 77413 . 77418) (symbol 77401 . 77412) (close-paren 77397 . 77398) (semantic-list 77382 . 77394) (RETURN 77356 . 77362) (open-paren 77352 . 77353) (close-paren 77350 . 77351) (symbol 77346 . 77350) (symbol 77334 . 77345) (punctuation 77332 . 77333) (symbol 77328 . 77332) (symbol 77316 . 77327) (open-paren 77315 . 77316) (symbol 77309 . 77314) (symbol 77297 . 77308) (close-paren 77294 . 77295) (RETURN 77267 . 77273) (open-paren 77263 . 77264) (close-paren 77261 . 77262) (symbol 77257 . 77261) (symbol 77245 . 77256) (open-paren 77244 . 77245) (symbol 77238 . 77243) (symbol 77226 . 77237) (close-paren 76947 . 76948) (RETURN 76935 . 76941) (punctuation 76931 . 76932) (punctuation 76930 . 76931) (punctuation 76929 . 76930) (symbol 76912 . 76929) (punctuation 76908 . 76909) (punctuation 76907 . 76908) (punctuation 76906 . 76907) (symbol 76889 . 76906) (punctuation 76885 . 76886) (semantic-list 76867 . 76885) (SIZEOF 76860 . 76866) (punctuation 76858 . 76859) (punctuation 76857 . 76858) (symbol 76840 . 76856) (semantic-list #("(((block)->gcmarkbits[(n) / BITS_PER_BITS_WORD]	\\
    >> ((n) % BITS_PER_BITS_WORD))			\\
   & 1)" 0 1 (macros (("n" semantic-list #("(((uintptr_t) (fptr) & (BLOCK_ALIGN - 1)) / sizeof (struct Lisp_Cons))" 0 1 (macros (("fptr" semantic-list "(fptr)" 32 . 38)))) 20 . 39) ("block" semantic-list #("((struct cons_block *) ((uintptr_t) (fptr) & ~(BLOCK_ALIGN - 1)))" 0 1 (macros (("fptr" symbol "XCONS" 13 . 17)))) 1 . 18)))) 76808 . 76835) (punctuation 76807 . 76808) (punctuation 76749 . 76750) (semantic-list "((void) 0)" 76729 . 76749) (semantic-list 76327 . 76725) (ELSE 76318 . 76322) (semantic-list 76106 . 76315) (semantic-list 76085 . 76101) (IF 76082 . 76084) (punctuation 76077 . 76078) (semantic-list "((void) 0)" 76059 . 76077) (open-paren 76026 . 76027) (close-paren 76024 . 76025) (symbol 76021 . 76024) (symbol 76009 . 76020) (punctuation 76007 . 76008) (symbol 76004 . 76007) (symbol 75992 . 76003) (open-paren 75991 . 75992) (close-paren 75987 . 75988) (punctuation 75910 . 75911) (symbol 75907 . 75910) (punctuation 75898 . 75899) (number 75897 . 75898) (punctuation 75895 . 75896) (number 75894 . 75895) (punctuation 75892 . 75893) (number 75891 . 75892) (punctuation 75889 . 75890) (symbol 75884 . 75889) (punctuation 75882 . 75883) (symbol 75877 . 75882) (punctuation 75875 . 75876) (string 75869 . 75875) (open-paren 75868 . 75869) (symbol 75862 . 75867) (close-paren 75859 . 75860) (punctuation 75857 . 75858) (punctuation 75856 . 75857) (punctuation 75855 . 75856) (symbol 75838 . 75855) (SIZEOF 75823 . 75829) (punctuation 75821 . 75822) (punctuation 75820 . 75821) (symbol 75803 . 75819) (punctuation 75763 . 75764) (punctuation 75762 . 75763) (symbol 75759 . 75762) (punctuation 75732 . 75733) (symbol 75731 . 75732) (punctuation 75730 . 75731) (punctuation 75729 . 75730) (symbol 75726 . 75729) (open-paren 75722 . 75723) (close-paren 75720 . 75721) (symbol 75717 . 75720) (punctuation 75716 . 75717) (symbol 75706 . 75715) (STRUCT 75699 . 75705) (open-paren 75698 . 75699) (symbol 75688 . 75697) (VOID 75683 . 75687) (punctuation 75099 . 75100) (close-paren 75098 . 75099) (open-paren 74888 . 74889) (symbol 74877 . 74887) (STRUCT 74870 . 74876) (close-paren 73981 . 73982) (RETURN 73969 . 73975) (punctuation 73965 . 73966) (punctuation 73964 . 73965) (punctuation 73963 . 73964) (symbol 73946 . 73963) (punctuation 73942 . 73943) (punctuation 73941 . 73942) (punctuation 73940 . 73941) (symbol 73927 . 73940) (punctuation 73923 . 73924) (semantic-list 73904 . 73923) (SIZEOF 73897 . 73903) (punctuation 73895 . 73896) (punctuation 73894 . 73895) (symbol 73877 . 73893) (semantic-list #("(((block)->gcmarkbits[(n) / BITS_PER_BITS_WORD]	\\
    >> ((n) % BITS_PER_BITS_WORD))			\\
   & 1)" 0 1 (macros (("n" semantic-list #("((((uintptr_t) (fptr)) & (BLOCK_ALIGN - 1)) / sizeof (struct Lisp_Float))" 0 1 (macros (("fptr" semantic-list "(fptr)" 34 . 40)))) 21 . 41) ("block" semantic-list #("((struct float_block *) (((uintptr_t) (fptr)) & ~(BLOCK_ALIGN - 1)))" 0 1 (macros (("fptr" symbol "XFLOAT" 14 . 18)))) 1 . 19)))) 73843 . 73872) (punctuation 73842 . 73843) (punctuation 73794 . 73795) (semantic-list "((void) 0)" 73774 . 73794) (semantic-list 73360 . 73770) (ELSE 73351 . 73355) (semantic-list 73128 . 73348) (semantic-list 73106 . 73123) (IF 73103 . 73105) (punctuation 73098 . 73099) (semantic-list "((void) 0)" 73080 . 73098) (open-paren 73047 . 73048) (close-paren 73045 . 73046) (symbol 73034 . 73045) (DOUBLE 73027 . 73033) (open-paren 73026 . 73027) (symbol 73015 . 73025) (symbol 73003 . 73014) (punctuation 72415 . 72416) (close-paren 72414 . 72415) (open-paren 72199 . 72200) (symbol 72187 . 72198) (STRUCT 72180 . 72186) (close-paren 70865 . 70866) (RETURN 70831 . 70837) (open-paren 70719 . 70720) (close-paren 70717 . 70718) (punctuation 70716 . 70717) (punctuation 70715 . 70716) (punctuation 70714 . 70715) (punctuation 70712 . 70713) (symbol 70706 . 70712) (punctuation 70705 . 70706) (CHAR 70700 . 70704) (CONST 70694 . 70699) (punctuation 70692 . 70693) (symbol 70689 . 70692) (punctuation 70688 . 70689) (CHAR 70683 . 70687) (open-paren 70682 . 70683) (symbol 70660 . 70681) (symbol 70648 . 70659) (close-paren 70526 . 70527) (RETURN 70511 . 70517) (punctuation 70499 . 70500) (punctuation 70498 . 70499) (symbol 70478 . 70497) (punctuation 70387 . 70388) (punctuation 70386 . 70387) (symbol 70385 . 70386) (RETURN 70325 . 70331) (semantic-list 70311 . 70320) (IF 70308 . 70310) (semantic-list 70273 . 70285) (IF 70270 . 70272) (open-paren 70218 . 70219) (close-paren 70216 . 70217) (symbol 70210 . 70216) (symbol 70200 . 70209) (punctuation 70198 . 70199) (symbol 70192 . 70198) (symbol 70182 . 70191) (open-paren 70181 . 70182) (symbol 70152 . 70180) (symbol 70140 . 70151) (close-paren 70034 . 70035) (RETURN 70022 . 70028) (RETURN 69908 . 69914) (semantic-list 69894 . 69903) (IF 69891 . 69893) (open-paren 69867 . 69868) (close-paren 69865 . 69866) (symbol 69859 . 69865) (symbol 69849 . 69858) (open-paren 69848 . 69849) (symbol 69829 . 69847) (symbol 69817 . 69828) (close-paren 69716 . 69717) (RETURN 69704 . 69710) (semantic-list 69659 . 69671) (IF 69656 . 69658) (semantic-list 69628 . 69633) (semantic-list 69414 . 69556) (semantic-list 69397 . 69409) (IF 69394 . 69396) (open-paren 69370 . 69371) (close-paren 69368 . 69369) (symbol 69359 . 69368) (BOOL 69354 . 69358) (punctuation 69352 . 69353) (symbol 69346 . 69352) (symbol 69336 . 69345) (punctuation 69334 . 69335) (symbol 69328 . 69334) (symbol 69318 . 69327) (punctuation 69307 . 69308) (symbol 69299 . 69307) (punctuation 69298 . 69299) (CHAR 69293 . 69297) (CONST 69287 . 69292) (open-paren 69286 . 69287) (symbol 69264 . 69285) (symbol 69252 . 69263) (close-paren 69013 . 69014) (RETURN 69001 . 69007) (semantic-list 68938 . 68968) (IF 68935 . 68937) (semantic-list 68907 . 68912) (open-paren 68806 . 68807) (close-paren 68804 . 68805) (symbol 68798 . 68804) (symbol 68788 . 68797) (punctuation 68786 . 68787) (symbol 68780 . 68786) (symbol 68770 . 68779) (punctuation 68765 . 68766) (symbol 68757 . 68765) (punctuation 68756 . 68757) (CHAR 68751 . 68755) (CONST 68745 . 68750) (open-paren 68744 . 68745) (symbol 68721 . 68743) (symbol 68709 . 68720) (close-paren 68574 . 68575) (RETURN 68562 . 68568) (semantic-list 68534 . 68539) (open-paren 68433 . 68434) (close-paren 68431 . 68432) (symbol 68425 . 68431) (symbol 68415 . 68424) (punctuation 68413 . 68414) (symbol 68407 . 68413) (symbol 68397 . 68406) (punctuation 68386 . 68387) (symbol 68378 . 68386) (punctuation 68377 . 68378) (CHAR 68372 . 68376) (CONST 68366 . 68371) (open-paren 68365 . 68366) (symbol 68343 . 68364) (symbol 68331 . 68342) (close-paren 68233 . 68234) (RETURN 68221 . 68227) (semantic-list 68193 . 68198) (open-paren 68110 . 68111) (close-paren 68108 . 68109) (symbol 68102 . 68108) (symbol 68092 . 68101) (punctuation 68090 . 68091) (symbol 68082 . 68090) (punctuation 68081 . 68082) (CHAR 68076 . 68080) (CONST 68070 . 68075) (open-paren 68069 . 68070) (symbol 68049 . 68068) (symbol 68037 . 68048) (close-paren 67973 . 67974) (RETURN 67961 . 67967) (ELSE 67894 . 67898) (semantic-list 67661 . 67709) (IF 67658 . 67660) (punctuation 67636 . 67637) (punctuation 67627 . 67628) (semantic-list 67580 . 67603) (open-paren 67485 . 67486) (close-paren 67483 . 67484) (symbol 67477 . 67483) (symbol 67467 . 67476) (punctuation 67465 . 67466) (symbol 67457 . 67465) (punctuation 67456 . 67457) (CHAR 67451 . 67455) (CONST 67445 . 67450) (open-paren 67444 . 67445) (symbol 67432 . 67443) (symbol 67420 . 67431) (close-paren 67233 . 67234) (RETURN 67218 . 67224) (semantic-list 67203 . 67212) (punctuation 67197 . 67198) (semantic-list 67141 . 67164) (FOR 67137 . 67140) (open-paren 67051 . 67052) (close-paren 67049 . 67050) (symbol 67045 . 67049) (punctuation 67044 . 67045) (symbol 67032 . 67043) (punctuation 67030 . 67031) (symbol 67025 . 67030) (symbol 67015 . 67024) (open-paren 67014 . 67015) (close-paren 67010 . 67011) (punctuation 66845 . 66846) (symbol 66842 . 66845) (punctuation 66833 . 66834) (number 66832 . 66833) (punctuation 66830 . 66831) (symbol 66826 . 66830) (punctuation 66824 . 66825) (number 66823 . 66824) (punctuation 66821 . 66822) (symbol 66809 . 66821) (punctuation 66807 . 66808) (symbol 66795 . 66807) (punctuation 66793 . 66794) (string 66780 . 66793) (open-paren 66779 . 66780) (symbol 66773 . 66778) (close-paren 66770 . 66771) (RETURN 66733 . 66739) (open-paren 66631 . 66632) (close-paren 66629 . 66630) (symbol 66625 . 66629) (symbol 66613 . 66624) (punctuation 66611 . 66612) (symbol 66605 . 66611) (symbol 66593 . 66604) (open-paren 66592 . 66593) (close-paren 66588 . 66589) (punctuation 66437 . 66438) (symbol 66434 . 66437) (punctuation 66425 . 66426) (number 66424 . 66425) (punctuation 66422 . 66423) (number 66421 . 66422) (punctuation 66419 . 66420) (number 66418 . 66419) (punctuation 66416 . 66417) (symbol 66399 . 66416) (punctuation 66397 . 66398) (symbol 66380 . 66397) (punctuation 66378 . 66379) (string 66360 . 66378) (open-paren 66359 . 66360) (symbol 66353 . 66358) (close-paren 66350 . 66351) (RETURN 66338 . 66344) (punctuation 66313 . 66314) (punctuation 66312 . 66313) (symbol 66311 . 66312) (semantic-list 66299 . 66306) (IF 66296 . 66298) (punctuation 66243 . 66244) (punctuation 66242 . 66243) (symbol 66241 . 66242) (number 66235 . 66236) (number 66232 . 66233) (semantic-list 66207 . 66212) (punctuation 65935 . 65936) (semantic-list 65924 . 65935) (SIZEOF 65917 . 65923) (punctuation 65915 . 65916) (symbol 65909 . 65914) (punctuation 65907 . 65908) (symbol 65896 . 65906) (symbol 65886 . 65895) (open-paren 65816 . 65817) (close-paren 65814 . 65815) (symbol 65809 . 65814) (symbol 65799 . 65808) (open-paren 65798 . 65799) (symbol 65774 . 65797) (symbol 65762 . 65773) (close-paren 65684 . 65685) (RETURN 65674 . 65680) (semantic-list 65312 . 65671) (semantic-list 65296 . 65307) (IF 65293 . 65295) (open-paren 65247 . 65248) (close-paren 65245 . 65246) (symbol 65241 . 65245) (symbol 65229 . 65240) (punctuation 65227 . 65228) (symbol 65226 . 65227) (symbol 65214 . 65225) (open-paren 65213 . 65214) (symbol 65196 . 65212) (symbol 65184 . 65195) (close-paren 65094 . 65095) (RETURN 65082 . 65088) (semantic-list 64346 . 65078) (ELSE 64337 . 64341) (semantic-list 64168 . 64334) (semantic-list 64145 . 64163) (IF 64142 . 64144) (open-paren 64005 . 64006) (close-paren 64003 . 64004) (symbol 63999 . 64003) (symbol 63987 . 63998) (punctuation 63985 . 63986) (symbol 63979 . 63985) (symbol 63967 . 63978) (open-paren 63966 . 63967) (close-paren 63962 . 63963) (punctuation 63799 . 63800) (symbol 63796 . 63799) (punctuation 63787 . 63788) (number 63786 . 63787) (punctuation 63784 . 63785) (number 63783 . 63784) (punctuation 63781 . 63782) (number 63780 . 63781) (punctuation 63778 . 63779) (symbol 63766 . 63778) (punctuation 63764 . 63765) (symbol 63752 . 63764) (punctuation 63750 . 63751) (string 63737 . 63750) (open-paren 63736 . 63737) (symbol 63730 . 63735) (close-paren 63727 . 63728) (string 63694 . 63724) (open-paren 63683 . 63684) (close-paren 63681 . 63682) (VOID 63677 . 63681) (open-paren 63676 . 63677) (symbol 63660 . 63675) (VOID 63655 . 63659) (close-paren 63652 . 63653) (semantic-list 61240 . 63627) (semantic-list 61231 . 61235) (IF 61228 . 61230) (open-paren 61077 . 61078) (close-paren 61075 . 61076) (VOID 61071 . 61075) (open-paren 61070 . 61071) (symbol 61048 . 61069) (VOID 61043 . 61047) (STATIC 61036 . 61042) (close-paren 60918 . 60919) (semantic-list 60739 . 60885) (semantic-list 60702 . 60734) (FOR 60698 . 60701) (open-paren 60629 . 60630) (close-paren 60627 . 60628) (VOID 60623 . 60627) (open-paren 60622 . 60623) (symbol 60603 . 60621) (VOID 60598 . 60602) (STATIC 60591 . 60597) (close-paren 60554 . 60555) (punctuation 60552 . 60553) (semantic-list 60550 . 60552) (spp-arg-list nil 60527 . 60549) (punctuation 60437 . 60438) (semantic-list 60435 . 60437) (spp-arg-list nil 60412 . 60434) (semantic-list 58615 . 60408) (semantic-list 58578 . 58610) (FOR 58574 . 58577) (punctuation 58451 . 58452) (symbol 58437 . 58450) (open-paren 58329 . 58330) (close-paren 58327 . 58328) (VOID 58323 . 58327) (open-paren 58322 . 58323) (symbol 58308 . 58321) (VOID 58303 . 58307) (STATIC 58296 . 58302) (symbol 58256 . 58265) (close-paren 58217 . 58218) (punctuation 58207 . 58208) (punctuation 58206 . 58207) (symbol 58189 . 58205) (semantic-list 58103 . 58185) (semantic-list 58088 . 58098) (IF 58085 . 58087) (punctuation 57718 . 57719) (punctuation 57717 . 57718) (symbol 57716 . 57717) (punctuation 57693 . 57694) (punctuation 57692 . 57693) (symbol 57691 . 57692) (punctuation 57673 . 57674) (punctuation 57672 . 57673) (symbol 57671 . 57672) (punctuation ">" 57582 . 57599) (punctuation "-" 57582 . 57599) (semantic-list #("((struct sdata *) (S))" 0 1 (macros (("S" symbol "data" 57594 . 57598)))) 57582 . 57599) (punctuation 57580 . 57581) (symbol 57575 . 57579) (punctuation 57574 . 57575) (punctuation 57573 . 57574) (symbol 57572 . 57573) (punctuation 57567 . 57568) (semantic-list "((void) 0)" 57547 . 57567) (punctuation 57477 . 57478) (punctuation 57476 . 57477) (symbol 57475 . 57476) (punctuation 57460 . 57461) (punctuation 57459 . 57460) (symbol 57455 . 57459) (semantic-list 57391 . 57451) (ELSE 57382 . 57386) (semantic-list 57082 . 57379) (semantic-list 56928 . 57077) (IF 56925 . 56927) (ELSE 56920 . 56924) (semantic-list 56463 . 56917) (semantic-list 56429 . 56458) (IF 56426 . 56428) (punctuation 56421 . 56422) (semantic-list "((void) 0)" 56403 . 56421) (ELSE 56374 . 56378) (semantic-list 56289 . 56371) (semantic-list 56275 . 56284) (IF 56272 . 56274) (semantic-list 56096 . 56123) (IF 56093 . 56095) (open-paren 56010 . 56011) (close-paren 56008 . 56009) (symbol 56002 . 56008) (symbol 55992 . 56001) (punctuation 55990 . 55991) (symbol 55984 . 55990) (symbol 55974 . 55983) (punctuation 55964 . 55965) (symbol 55963 . 55964) (punctuation 55962 . 55963) (symbol 55950 . 55961) (STRUCT 55943 . 55949) (open-paren 55942 . 55943) (symbol 55921 . 55941) (VOID 55916 . 55920) (close-paren 55586 . 55587) (RETURN 55576 . 55582) (SIZEOF 55315 . 55321) (punctuation 55313 . 55314) (punctuation 55312 . 55313) (symbol 55295 . 55311) (punctuation 55276 . 55277) (punctuation 55275 . 55276) (punctuation 55257 . 55258) (punctuation 55256 . 55257) (punctuation 55233 . 55234) (punctuation 55232 . 55233) (punctuation 55227 . 55228) (semantic-list "((void) 0)" 55207 . 55227) (punctuation 55083 . 55084) (semantic-list 55081 . 55083) (spp-arg-list nil 55058 . 55080) (semantic-list 54613 . 55054) (semantic-list 54582 . 54608) (IF 54579 . 54581) (punctuation 54451 . 54452) (semantic-list "((void) 0)" 54433 . 54451) (open-paren 54403 . 54404) (close-paren 54401 . 54402) (VOID 54397 . 54401) (open-paren 54396 . 54397) (symbol 54380 . 54395) (punctuation 54378 . 54379) (symbol 54366 . 54377) (STRUCT 54359 . 54365) (STATIC 54352 . 54358) (close-paren 52086 . 52087) (open-paren 51968 . 51969) (close-paren 51966 . 51967) (VOID 51962 . 51966) (open-paren 51961 . 51962) (symbol 51948 . 51960) (VOID 51943 . 51947) (STATIC 51936 . 51942) (punctuation 51865 . 51866) (close-paren 51864 . 51865) (semantic-list 51713 . 51864) (punctuation 51704 . 51705) (symbol 51686 . 51704) (open-paren 51685 . 51686) (symbol 51681 . 51684) (punctuation 51677 . 51678) (symbol 51660 . 51676) (CONST 51654 . 51659) (symbol 51644 . 51653) (STATIC 51637 . 51643) (punctuation 48558 . 48559) (close-paren 48557 . 48558) (open-paren 48422 . 48423) (symbol 48409 . 48421) (STRUCT 48402 . 48408) (punctuation 48103 . 48104) (close-paren 48102 . 48103) (open-paren 47836 . 47837) (symbol 47829 . 47835) (STRUCT 47822 . 47828) (punctuation 47586 . 47587) (close-paren 47585 . 47586) (semantic-list 47564 . 47584) (symbol 47555 . 47563) (punctuation 47553 . 47554) (symbol 47535 . 47552) (open-paren 47533 . 47534) (ENUM 47528 . 47532) (close-paren 47388 . 47389) (open-paren 46732 . 46733) (UNION 46726 . 46731) (TYPEDEF 46718 . 46725) (punctuation 46581 . 46582) (close-paren 46580 . 46581) (open-paren 46067 . 46068) (symbol 46061 . 46066) (STRUCT 46054 . 46060) (close-paren 44016 . 44017) (punctuation 44007 . 44008) (punctuation 44006 . 44007) (punctuation 43974 . 43975) (punctuation 43973 . 43974) (symbol 43972 . 43973) (punctuation 43957 . 43958) (punctuation 43956 . 43957) (punctuation 43954 . 43955) (open-paren 43792 . 43793) (close-paren 43790 . 43791) (symbol 43785 . 43790) (punctuation 43784 . 43785) (VOID 43779 . 43783) (punctuation 43777 . 43778) (symbol 43776 . 43777) (symbol 43767 . 43775) (open-paren 43766 . 43767) (symbol 43752 . 43765) (VOID 43747 . 43751) (STATIC 43740 . 43746) (close-paren 43695 . 43696) (RETURN 43683 . 43689) (punctuation 43665 . 43666) (punctuation 43664 . 43665) (symbol 43661 . 43664) (punctuation 43633 . 43634) (punctuation 43632 . 43633) (punctuation 43631 . 43632) (symbol 43611 . 43631) (punctuation 43607 . 43608) (punctuation 43606 . 43607) (punctuation 43605 . 43606) (symbol 43589 . 43605) (punctuation 43585 . 43586) (semantic-list 43568 . 43585) (SIZEOF 43561 . 43567) (punctuation 43559 . 43560) (punctuation 43558 . 43559) (symbol 43541 . 43557) (punctuation 43536 . 43537) (semantic-list "((void) 0)" 43516 . 43536) (semantic-list 43159 . 43512) (ELSE 43150 . 43154) (semantic-list 43043 . 43147) (semantic-list 43018 . 43038) (IF 43015 . 43017) (punctuation 43010 . 43011) (semantic-list "((void) 0)" 42992 . 43010) (open-paren 42971 . 42972) (close-paren 42969 . 42970) (VOID 42965 . 42969) (open-paren 42964 . 42965) (symbol 42950 . 42963) (symbol 42941 . 42949) (punctuation 42476 . 42477) (close-paren 42475 . 42476) (open-paren 42335 . 42336) (symbol 42320 . 42334) (STRUCT 42313 . 42319) (close-paren 41830 . 41831) (semantic-list 41669 . 41829) (semantic-list 41658 . 41664) (WHILE 41652 . 41657) (open-paren 41648 . 41649) (close-paren 41646 . 41647) (symbol 41642 . 41646) (symbol 41635 . 41641) (punctuation 41633 . 41634) (symbol 41632 . 41633) (punctuation 41631 . 41632) (VOID 41626 . 41630) (open-paren 41625 . 41626) (symbol 41616 . 41624) (punctuation 41614 . 41615) (VOID 41609 . 41613) (STATIC 41602 . 41608) (close-paren 41599 . 41600) (semantic-list 41420 . 41598) (semantic-list 41409 . 41415) (WHILE 41403 . 41408) (RETURN 41351 . 41357) (semantic-list 41295 . 41346) (IF 41292 . 41294) (open-paren 41266 . 41267) (close-paren 41264 . 41265) (symbol 41260 . 41264) (symbol 41253 . 41259) (open-paren 41252 . 41253) (symbol 41244 . 41251) (punctuation 41242 . 41243) (VOID 41237 . 41241) (STATIC 41230 . 41236) (close-paren 40293 . 40294) (punctuation 40291 . 40292) (semantic-list 40204 . 40291) (RETURN 40197 . 40203) (open-paren 40193 . 40194) (close-paren 40191 . 40192) (symbol 40187 . 40191) (symbol 40180 . 40186) (punctuation 40178 . 40179) (symbol 40177 . 40178) (punctuation 40176 . 40177) (VOID 40171 . 40175) (open-paren 40170 . 40171) (symbol 40161 . 40169) (BOOL 40156 . 40160) (STATIC 40149 . 40155) (close-paren 39303 . 39304) (punctuation 39301 . 39302) (semantic-list "((void) 0)" 39281 . 39301) (semantic-list 38638 . 39278) (semantic-list 38623 . 38633) (IF 38620 . 38622) (semantic-list 38592 . 38610) (punctuation 38590 . 38591) (semantic-list #("((a_base)->blocks[0].abase)" 0 1 (macros (("a_base" symbol "abase" 38583 . 38588)))) 38569 . 38589) (number 38563 . 38564) (punctuation 38561 . 38562) (number "16" 38548 . 38560) (punctuation 38546 . 38547) (number 38544 . 38545) (punctuation 38542 . 38543) (punctuation 38541 . 38542) (punctuation 38534 . 38535) (punctuation 38526 . 38527) (punctuation 38525 . 38526) (number 38523 . 38524) (punctuation 38379 . 38380) (symbol 38378 . 38379) (punctuation 38377 . 38378) (punctuation 38376 . 38377) (symbol 38370 . 38376) (semantic-list 38324 . 38331) (punctuation 38275 . 38276) (semantic-list "((void) 0)" 38257 . 38275) (open-paren 38170 . 38171) (close-paren 38168 . 38169) (symbol 38163 . 38168) (punctuation 38162 . 38163) (VOID 38157 . 38161) (open-paren 38156 . 38157) (symbol 38140 . 38155) (VOID 38135 . 38139) (STATIC 38128 . 38134) (close-paren 38125 . 38126) (RETURN 38113 . 38119) (semantic-list "(1 << 10)" 38097 . 38108) (punctuation 38095 . 38096) (semantic-list 38077 . 38094) (punctuation 38075 . 38076) (punctuation 38074 . 38075) (number 38072 . 38073) (punctuation 38058 . 38059) (semantic-list #("(0)" 0 1 (macros (("size" symbol "nbytes" 38051 . 38057)))) 38037 . 38058) (WHILE "while" 38037 . 38058) (semantic-list #("{						\\
    if (profiler_memory_running)		\\
      malloc_probe (size);			\\
  }" 0 1 (macros (("size" symbol "nbytes" 38051 . 38057)))) 38037 . 38058) (DO "do" 38037 . 38058) (punctuation 38032 . 38033) (semantic-list "((void) 0)" 38012 . 38032) (punctuation 37985 . 37986) (semantic-list 37972 . 37980) (semantic-list 37923 . 37950) (IF 37920 . 37922) (punctuation 37828 . 37829) (semantic-list 37791 . 37828) (semantic-list 37772 . 37790) (punctuation 37770 . 37771) (semantic-list #("((a_base)->blocks[0].abase)" 0 1 (macros (("a_base" symbol "abase" 37759 . 37764)))) 37745 . 37765) (semantic-list 35832 . 37703) (semantic-list 35813 . 35827) (IF 35810 . 35812) (punctuation 35745 . 35746) (semantic-list "((void) 0)" 35727 . 35745) (semantic-list "(BLOCK_ALIGN - sizeof (struct ablocks *) - BLOCK_PADDING)" 35710 . 35721) (punctuation 35708 . 35709) (punctuation 35707 . 35708) (open-paren 35641 . 35642) (close-paren 35639 . 35640) (symbol 35635 . 35639) (symbol 35626 . 35634) (ENUM 35621 . 35625) (punctuation 35619 . 35620) (symbol 35613 . 35619) (symbol 35606 . 35612) (open-paren 35605 . 35606) (symbol 35587 . 35604) (punctuation 35585 . 35586) (VOID 35580 . 35584) (STATIC 35573 . 35579) (punctuation 34745 . 34746) (close-paren 34744 . 34745) (open-paren 34704 . 34705) (symbol 34696 . 34703) (STRUCT 34689 . 34695) (punctuation 34640 . 34641) (close-paren 34639 . 34640) (open-paren 33777 . 33778) (symbol 33770 . 33776) (STRUCT 33763 . 33769) (close-paren 32142 . 32143) (semantic-list 32017 . 32142) (punctuation 32015 . 32016) (punctuation 32014 . 32015) (semantic-list #("(((n) & ((n) - 1)) == 0)" 0 1 (macros (("n" semantic-list "(1 << 10)" 31661 . 31672)))) 31649 . 31673) (punctuation 30164 . 30165) (VOID 30159 . 30163) (punctuation 25487 . 25488) (punctuation 25486 . 25487) (semantic-list 23980 . 23983) (semantic-list 23948 . 23956) (symbol 23940 . 23947) (punctuation 23939 . 23940) (VOID 23934 . 23938) (STATIC 23927 . 23933) (symbol 14820 . 14836) (STATIC 14813 . 14819) (symbol 14703 . 14719) (STATIC 14696 . 14702) (semantic-list 9797 . 9821) (symbol 9783 . 9796) (symbol 9771 . 9782) (EXTERN 9764 . 9770) (punctuation 9058 . 9059) (VOID 9053 . 9057) (STATIC 9046 . 9052) (semantic-list 8248 . 8252) (symbol 8225 . 8248) (symbol 8202 . 8224) (STRUCT 8195 . 8201))
      :lexical-table 
        '(("GC_DEFAULT_THRESHOLD" . ((semantic-list "(100000 * word_size)" 5595 . 5615)))
          ("COMMON_MULTIPLE" (spp-arg-list ("a" "b") 17599 . 17605) . ((semantic-list "((a) % (b) == 0 ? (a) : (b) % (a) == 0 ? (b) : (a) * (b))" 17610 . 17667)))
          ("XMALLOC_OVERRUN_CHECK_OVERHEAD" . ((number "0" 17738 . 17739)))
          ("BLOCK_PADDING" . ((number "0" 33570 . 33571)))
          ("NEXT_FREE_LISP_STRING" (spp-arg-list ("S") 49433 . 49436) . ((semantic-list "(*(struct Lisp_String **) (S))" 49437 . 49467)))
          ("UNSETMARKBIT" (spp-arg-list ("block" "n") 71854 . 71863) . ((semantic-list "((block)->gcmarkbits[(n) / BITS_PER_BITS_WORD]	\\
   &= ~((bits_word) 1 << ((n) % BITS_PER_BITS_WORD)))" 71871 . 71973)))
          ("CONS_BLOCK" (spp-arg-list ("fptr") 74691 . 74697) . ((semantic-list "((struct cons_block *) ((uintptr_t) (fptr) & ~(BLOCK_ALIGN - 1)))" 74702 . 74767)))
          ("MARK_INTERVAL_TREE" (spp-arg-list ("i") 44089 . 44092) . 
              ((DO "do" 44101 . 44103) (semantic-list "{								\\
    if (i && !i->gcmarkbit)					\\
      traverse_intervals_noorder (i, mark_interval, NULL);	\\
  }" 44104 . 44213) (WHILE "while" 44214 . 44219) (semantic-list "(0)" 44220 . 44223)))
          ("SBLOCK_SIZE" . ((number "8188" 45716 . 45720)))
          ("SDATA_NBYTES" (spp-arg-list ("S") 47418 . 47421) . 
              ((semantic-list "(S)" 47422 . 47425) (punctuation "-" 47425 . 47426) (punctuation ">" 47426 . 47427) (symbol "n" 47427 . 47428) (punctuation "." 47428 . 47429) (symbol "nbytes" 47429 . 47435)))
          ("SETMARKBIT" (spp-arg-list ("block" "n") 71716 . 71725) . ((semantic-list "((block)->gcmarkbits[(n) / BITS_PER_BITS_WORD]	\\
   |= (bits_word) 1 << ((n) % BITS_PER_BITS_WORD))" 71733 . 71832)))
          ("vroundup" (spp-arg-list ("x") 81042 . 81045) . ((semantic-list "(eassume ((x) >= 0), vroundup_ct (x))" 81046 . 81083)))
          ("VBLOCK_BYTES_MAX" . ((symbol "vroundup" 81460 . 81468) (semantic-list "((VECTOR_BLOCK_BYTES / 2) - word_size)" 81469 . 81507)))
          ("CHECK_ALLOCATED_AND_LIVE_SYMBOL" (spp-arg-list nil 178216 . 178218) . ((semantic-list "((void) 0)" 178219 . 178229)))
          ("STRING_MARKED_P" (spp-arg-list ("S") 5270 . 5273) . ((semantic-list "(((S)->size & ARRAY_MARK_FLAG) != 0)" 5274 . 5310)))
          ("POWER_OF_2" (spp-arg-list ("n") 13342 . 13345) . ((semantic-list "(((n) & ((n) - 1)) == 0)" 13346 . 13370)))
          ("GETMARKBIT" (spp-arg-list ("block" "n") 71583 . 71592) . ((semantic-list "(((block)->gcmarkbits[(n) / BITS_PER_BITS_WORD]	\\
    >> ((n) % BITS_PER_BITS_WORD))			\\
   & 1)" 71600 . 71696)))
          ("FLOAT_MARKED_P" (spp-arg-list ("fptr") 72440 . 72446) . ((symbol "GETMARKBIT" 72451 . 72461) (semantic-list "(FLOAT_BLOCK (fptr), FLOAT_INDEX ((fptr)))" 72462 . 72504)))
          ("FLOAT_UNMARK" (spp-arg-list ("fptr") 72610 . 72616) . ((symbol "UNSETMARKBIT" 72621 . 72633) (semantic-list "(FLOAT_BLOCK (fptr), FLOAT_INDEX ((fptr)))" 72634 . 72676)))
          ("VBLOCK_BYTES_MIN" . ((symbol "vroundup_ct" 81320 . 81331) (semantic-list "(header_size + sizeof (Lisp_Object))" 81332 . 81368)))
          ("__builtin_unwind_init" (spp-arg-list nil 139184 . 139186) . ((semantic-list "((void) 0)" 139187 . 139197)))
          ("MARK_STRING" (spp-arg-list ("S") 5154 . 5157) . ((semantic-list "((S)->size |= ARRAY_MARK_FLAG)" 5159 . 5189)))
          ("VECTOR_MARK" (spp-arg-list ("V") 5331 . 5334) . ((semantic-list "((V)->header.size |= ARRAY_MARK_FLAG)" 5336 . 5373)))
          ("PUREBEG" . ((semantic-list "(char *)" 7080 . 7088) (symbol "pure" 7089 . 7093)))
          ("SUSPICIOUS_OBJECT_CHECKING" . ((number "1" 7999 . 8000)))
          ("BLOCK_BYTES" . ((semantic-list "(BLOCK_ALIGN - sizeof (struct ablocks *) - BLOCK_PADDING)" 33596 . 33653)))
          ("ABLOCK_ABASE" (spp-arg-list ("block") 34898 . 34905) . ((semantic-list "(((uintptr_t) (block)->abase) <= (1 + 2 * ABLOCKS_SIZE)	\\
   ? (struct ablocks *) (block)					\\
   : (block)->abase)" 34910 . 35026)))
          ("ABLOCKS_BUSY" (spp-arg-list ("a_base") 35077 . 35085) . ((semantic-list "((a_base)->blocks[0].abase)" 35086 . 35113)))
          ("CONS_MARKED_P" (spp-arg-list ("fptr") 75123 . 75129) . ((symbol "GETMARKBIT" 75134 . 75144) (semantic-list "(CONS_BLOCK (fptr), CONS_INDEX ((fptr)))" 75145 . 75185)))
          ("MARKER_BLOCK_SIZE" . ((semantic-list "((1020 - sizeof (struct marker_block *)) / sizeof (union aligned_Lisp_Misc))" 102348 . 102424)))
          ("SETJMP_WILL_NOT_WORK" . ((string "\"\\
\\n\\
Emacs garbage collector has been changed to use conservative stack\\n\\
marking.  Emacs has determined that the default method it uses to do the\\n\\
marking will not work on your system.  We will need a system-dependent\\n\\
solution for your system.\\n\\
\\n\\
Please take a look at the function mark_stack in alloc.c, and\\n\\
try to find a way to make it work on your system.\\n\\
\\n\\
Note that you may get false negatives, depending on the compiler.\\n\\
In particular, you need to use -O with GCC for this test.\\n\\
\\n\\
Please mail the result to <emacs-devel@gnu.org>.\\n\\
\"" 136103 . 136672)))
          ("VECTOR_MARKED_P" (spp-arg-list ("V") 5461 . 5464) . ((semantic-list "(((V)->header.size & ARRAY_MARK_FLAG) != 0)" 5465 . 5508)))
          ("ABLOCKS_SIZE" . ((number "16" 33724 . 33726)))
          ("SETJMP_WILL_LIKELY_WORK" . ((string "\"\\
\\n\\
Emacs garbage collector has been changed to use conservative stack\\n\\
marking.  Emacs has determined that the method it uses to do the\\n\\
marking will likely work on your system, but this isn't sure.\\n\\
\\n\\
If you are a system-programmer, or can get the help of a local wizard\\n\\
who is, please take a look at the function mark_stack in alloc.c, and\\n\\
verify that the methods used are appropriate for your system.\\n\\
\\n\\
Please mail the result to <emacs-devel@gnu.org>.\\n\\
\"" 135588 . 136070)))
          ("MEM_NIL" . ((punctuation "&" 12540 . 12541) (symbol "mem_z" 12541 . 12546)))
          ("ROUNDUP" (spp-arg-list ("x" "y") 13617 . 13623) . ((semantic-list "(POWER_OF_2 (y)					\\
		       ? ((y) - 1 + (x)) & ~ ((y) - 1)			\\
		       : ((y) - 1 + (x)) - ((y) - 1 + (x)) % (y))" 13624 . 13742)))
          ("SDATA_DATA" (spp-arg-list ("S") 47454 . 47457) . 
              ((semantic-list "((struct sdata *) (S))" 47458 . 47480) (punctuation "-" 47480 . 47481) (punctuation ">" 47481 . 47482) (symbol "data" 47482 . 47486)))
          ("CONS_UNMARK" (spp-arg-list ("fptr") 75287 . 75293) . ((symbol "UNSETMARKBIT" 75298 . 75310) (semantic-list "(CONS_BLOCK (fptr), CONS_INDEX ((fptr)))" 75311 . 75351)))
          ("VECTOR_BLOCK_BYTES" . ((semantic-list "(VECTOR_BLOCK_SIZE - vroundup_ct (sizeof (void *)))" 81185 . 81236)))
          ("VECTOR_MAX_FREE_LIST_INDEX" . ((semantic-list "((VECTOR_BLOCK_BYTES - VBLOCK_BYTES_MIN) / roundup_size + 1)" 81681 . 81741)))
          ("SPARE_MEMORY" . ((semantic-list "(1 << 14)" 6640 . 6649)))
          ("macro_XPNTR_OR_SYMBOL_OFFSET" (spp-arg-list ("a") 14123 . 14126) . ((semantic-list "((void *) (intptr_t) (USE_LSB_TAG ? XLI (a) - XTYPE (a) : XLI (a) & VALMASK))" 14131 . 14208)))
          ("MALLOC_UNBLOCK_INPUT" . ((semantic-list "((void) 0)" 23781 . 23791)))
          ("BLOCK_ALIGN" . ((semantic-list "(1 << 10)" 31631 . 31640)))
          ("USE_ALIGNED_ALLOC" . ((number "1" 32172 . 32173)))
          ("check_string_bytes" (spp-arg-list ("all") 53791 . 53796) . ((semantic-list "((void) 0)" 53797 . 53807)))
          ("check_string_free_list" (spp-arg-list nil 54307 . 54309))
          ("FLOAT_INDEX" (spp-arg-list ("fptr") 72094 . 72100) . ((semantic-list "((((uintptr_t) (fptr)) & (BLOCK_ALIGN - 1)) / sizeof (struct Lisp_Float))" 72105 . 72178)))
          ("SYMBOL_BLOCK_SIZE" . ((semantic-list "((1020 - sizeof (struct symbol_block *)) / sizeof (union aligned_Lisp_Symbol))" 99288 . 99366)))
          ("GC_STRING_EXTRA" . ((semantic-list "(GC_STRING_OVERRUN_COOKIE_SIZE)" 51297 . 51328)))
          ("FLOAT_BLOCK_SIZE" . ((semantic-list "(((BLOCK_BYTES - sizeof (struct float_block *)		\\
     /* The compiler might add padding at the end.  */		\\
     - (sizeof (struct Lisp_Float) - sizeof (bits_word))) * CHAR_BIT) \\
   / (sizeof (struct Lisp_Float) * CHAR_BIT + 1))" 71334 . 71563)))
          ("CONS_INDEX" (spp-arg-list ("fptr") 74787 . 74793) . ((semantic-list "(((uintptr_t) (fptr) & (BLOCK_ALIGN - 1)) / sizeof (struct Lisp_Cons))" 74798 . 74868)))
          ("CONS_MARK" (spp-arg-list ("fptr") 75204 . 75210) . ((symbol "SETMARKBIT" 75215 . 75225) (semantic-list "(CONS_BLOCK (fptr), CONS_INDEX ((fptr)))" 75226 . 75266)))
          ("LAST_MARKED_SIZE" . ((number "500" 170309 . 170312)))
          ("VECTOR_UNMARK" (spp-arg-list ("V") 5395 . 5398) . ((semantic-list "((V)->header.size &= ~ARRAY_MARK_FLAG)" 5399 . 5437)))
          ("MALLOC_BLOCK_INPUT" . ((semantic-list "((void) 0)" 23740 . 23750)))
          ("ABLOCKS_BYTES" . ((semantic-list "(sizeof (struct ablocks) - BLOCK_PADDING)" 34835 . 34876)))
          ("STRING_BLOCK_SIZE" . ((semantic-list "((1020 - sizeof (struct string_block *)) / sizeof (struct Lisp_String))" 48240 . 48311)))
          ("vroundup_ct" (spp-arg-list ("x") 80926 . 80929) . ((symbol "ROUNDUP" 80930 . 80937) (semantic-list "(x, roundup_size)" 80938 . 80955)))
          ("VECTOR_IN_BLOCK" (spp-arg-list ("vector" "block") 86906 . 86921) . ((semantic-list "((char *) (vector) <= (block)->data		\\
   + VECTOR_BLOCK_BYTES - VBLOCK_BYTES_MIN)" 86927 . 87009)))
          ("GC_POINTER_ALIGNMENT" . ((symbol "alignof" 134156 . 134163) (semantic-list "(void *)" 134164 . 134172)))
          ("MAX_SAVE_STACK" . ((number "16000" 8777 . 8782)))
          ("MALLOC_IS_GC_ALIGNED" . ((semantic-list "(GCALIGNMENT == 8 && __alignof__ (max_align_t) % GCALIGNMENT == 0)" 39944 . 40010)))
          ("INTERVAL_BLOCK_SIZE" . ((semantic-list "((1020 - sizeof (struct interval_block *)) / sizeof (struct interval))" 42152 . 42222)))
          ("VECTOR_BLOCK_SIZE" . ((number "4096" 80390 . 80394)))
          ("SET_STACK_TOP_ADDRESS" (spp-arg-list ("p") 139998 . 140001) . 
              ((symbol "stacktop_sentry" 140008 . 140023) (symbol "sentry" 140024 . 140030) (punctuation ";" 140030 . 140031) (symbol "__builtin_unwind_init" 140039 . 140060) (semantic-list "()" 140061 . 140063) (punctuation ";" 140063 . 140064) (symbol "test_setjmp" 140072 . 140083) (semantic-list "()" 140084 . 140086) (punctuation ";" 140086 . 140087) (symbol "sys_setjmp" 140096 . 140106) (semantic-list "(sentry.j)" 140107 . 140117) (punctuation ";" 140117 . 140118) (punctuation "*" 140126 . 140127) (semantic-list "(p)" 140127 . 140130) (punctuation "=" 140131 . 140132) (symbol "NEAR_STACK_TOP" 140133 . 140147) (semantic-list "(&sentry + (stack_bottom < &sentry.c))" 140148 . 140186)))
          ("compact_font_caches" (spp-arg-list nil 159764 . 159766) . ((semantic-list "(void)" 159767 . 159773) (semantic-list "(0)" 159773 . 159776)))
          ("verify_alloca" (spp-arg-list nil 203784 . 203786) . ((semantic-list "((void) 0)" 203787 . 203797)))
          ("UNMARK_STRING" (spp-arg-list ("S") 5211 . 5214) . ((semantic-list "((S)->size &= ~ARRAY_MARK_FLAG)" 5215 . 5246)))
          ("DEADP" (spp-arg-list ("x") 10705 . 10708) . ((symbol "EQ" 10709 . 10711) (semantic-list "(x, Vdead)" 10712 . 10722)))
          ("SDATA_SIZE" (spp-arg-list ("NBYTES") 50865 . 50873) . ((semantic-list "((SDATA_DATA_OFFSET				      \\
       + (SDATA_DATA_OFFSET % FLEXALIGNOF (struct sdata) == 0 \\
	  ? NBYTES					      \\
	  : max (NBYTES, FLEXALIGNOF (struct sdata) - 1))     \\
       + 1						      \\
       + FLEXALIGNOF (struct sdata) - 1)		      \\
      & ~(FLEXALIGNOF (struct sdata) - 1))" 50890 . 51182)))
          ("macro_XPNTR" (spp-arg-list ("a") 14274 . 14277) . ((semantic-list "((void *) ((intptr_t) XPNTR_OR_SYMBOL_OFFSET (a) \\
	     + (SYMBOLP (a) ? (char *) lispsym : NULL)))" 14282 . 14382)))
          ("MALLOC_PROBE" (spp-arg-list ("size") 23820 . 23826) . 
              ((DO "do" 23833 . 23835) (semantic-list "{						\\
    if (profiler_memory_running)		\\
      malloc_probe (size);			\\
  }" 23836 . 23915) (WHILE "while" 23916 . 23921) (semantic-list "(0)" 23922 . 23925)))
          ("ABLOCKS_BASE" (spp-arg-list ("abase") 35222 . 35229) . ((semantic-list "(abase)" 35230 . 35237)))
          ("LARGE_STRING_BYTES" . ((number "1024" 45884 . 45888)))
          ("SDATA_OF_STRING" (spp-arg-list ("S") 49762 . 49765) . ((semantic-list "((sdata *) ((S)->data - SDATA_DATA_OFFSET))" 49766 . 49809)))
          ("GC_STRING_OVERRUN_COOKIE_SIZE" . ((number "0" 50220 . 50221)))
          ("FLOAT_BLOCK" (spp-arg-list ("fptr") 71994 . 72000) . ((semantic-list "((struct float_block *) (((uintptr_t) (fptr)) & ~(BLOCK_ALIGN - 1)))" 72005 . 72073)))
          ("FLOAT_MARK" (spp-arg-list ("fptr") 72524 . 72530) . ((symbol "SETMARKBIT" 72535 . 72545) (semantic-list "(FLOAT_BLOCK (fptr), FLOAT_INDEX ((fptr)))" 72546 . 72588)))
          ("CONS_BLOCK_SIZE" . ((semantic-list "(((BLOCK_BYTES - sizeof (struct cons_block *)			\\
     /* The compiler might add padding at the end.  */		\\
     - (sizeof (struct Lisp_Cons) - sizeof (bits_word))) * CHAR_BIT)	\\
   / (sizeof (struct Lisp_Cons) * CHAR_BIT + 1))" 74444 . 74671)))
          ("NEAR_STACK_TOP" (spp-arg-list ("addr") 139511 . 139517) . ((semantic-list "(addr)" 139518 . 139524)))
          )
)
    (semanticdb-table "semanticdb-table"
      :major-mode c-mode
      :tags 
        '( ("config.h" include (:system-flag t) nil [797 816])
            ("sys/types.h" include (:system-flag t) nil [817 839])
            ("stdio.h" include (:system-flag t) nil [840 858])
            ("unistd.h" include (:system-flag t) nil [920 939])
            ("lisp.h" include nil nil [1000 1017])
            ("systime.h" include nil nil [1177 1197])
            ("errno.h" include (:system-flag t) nil [1265 1283])
            ("float.h" include (:system-flag t) nil [1284 1302])
            ("limits.h" include (:system-flag t) nil [1303 1322])
            ("c-ctype.h" include (:system-flag t) nil [1324 1344])
            ("intprops.h" include (:system-flag t) nil [1345 1366])
            ("stdlib.h" include (:system-flag t) nil [1367 1386])
            ("strftime.h" include (:system-flag t) nil [1387 1408])
            ("verify.h" include (:system-flag t) nil [1409 1428])
            ("composite.h" include nil nil [1430 1452])
            ("intervals.h" include nil nil [1453 1475])
            ("character.h" include nil nil [1476 1498])
            ("buffer.h" include nil nil [1499 1518])
            ("coding.h" include nil nil [1519 1538])
            ("window.h" include nil nil [1539 1558])
            ("blockinput.h" include nil nil [1559 1582])
            ("TM_YEAR_BASE" variable (:constant-flag t) nil [1592 1604])
            ("lisp_time_struct" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [1731 1743])
                    ("" variable
                       (:pointer 1
                        :type "int")
                        (reparse-symbol arg-sub-list) [1744 1750]))                  
                :type ("lisp_time" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [1689 1751])
            ("format_time_string" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [1791 1804])
                    ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [1805 1815])
                    ("" variable (:type ("timespec" type
                         (:prototype t
                          :type "struct")
                          nil nil)) (reparse-symbol arg-sub-list) [1816 1832])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [1844 1856])
                    ("" variable
                       (:pointer 1
                        :type ("tm" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [1857 1869]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [1752 1870])
            ("tm_gmtoff" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("tm" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [1898 1910]))                  
                :type "long int")
                nil [1871 1911])
            ("tm_diff" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("tm" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [1932 1944])
                    ("" variable
                       (:pointer 1
                        :type ("tm" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [1945 1957]))                  
                :type "int")
                nil [1912 1958])
            ("update_buffer_properties" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [1997 2007])
                    ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2008 2018]))                  
                :type "void")
                nil [1959 2019])
            ("styled_format" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2054 2064])
                    ("" variable
                       (:pointer 1
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [2065 2079])
                    ("" variable (:type "bool") (reparse-symbol arg-sub-list) [2080 2085]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [2020 2086])
            ("HAVE_TM_GMTOFF" variable (:constant-flag t) nil [2120 2134])
            ("" type
               (:members 
                  ( ("tzeqlen" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [2156 2165]))                  
                :type "enum")
                nil [2149 2185])
            ("local_tz" variable
               (:typemodifiers ("static")
                :type ("timezone_t" type (:type "class") nil nil))
                nil [2264 2291])
            ("utc_tz" variable
               (:typemodifiers ("static")
                :default-value "0"
                :type ("timezone_t" type (:type "class") nil nil))
                nil [2292 2327])
            ("cached_system_name" variable
               (:typemodifiers ("static")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [2460 2498])
            ("init_and_cache_system_name" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [2540 2545]))                  
                :type "void")
                nil [2500 2609])
            ("emacs_localtime_rz" function
               (:pointer 1
                :typemodifiers ("static")
                :arguments 
                  ( ("tz" variable (:type ("timezone_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2650 2664])
                    ("t" variable
                       (:pointer 1
                        :constant-flag t
                        :type ("time_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [2665 2681])
                    ("tm" variable
                       (:pointer 1
                        :type ("tm" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [2682 2696]))                  
                :type ("tm" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [2611 2804])
            ("emacs_mktime_z" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("tz" variable (:type ("timezone_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2836 2850])
                    ("tm" variable
                       (:pointer 1
                        :type ("tm" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [2851 2865]))                  
                :type ("time_t" type (:type "class") nil nil))
                nil [2806 2997])
            ("xtzalloc" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("name" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [3077 3094]))                  
                :type ("timezone_t" type (:type "class") nil nil))
                nil [3049 3184])
            ("xtzfree" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("tz" variable (:type ("timezone_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3315 3329]))                  
                :type "void")
                nil [3294 3372])
            ("tzlookup" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("zone" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3680 3697])
                    ("settz" variable (:type "bool") (reparse-symbol arg-sub-list) [3698 3709]))                  
                :type ("timezone_t" type (:type "class") nil nil))
                nil [3652 5770])
            ("init_editfns" function
               (:arguments 
                  ( ("dumping" variable (:type "bool") (reparse-symbol arg-sub-list) [5791 5804]))                  
                :type "void")
                nil [5772 8753])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fchar_to_string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [8781 8797])
                    ("" variable (:type ("Schar_to_string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [8798 8814])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [8831 8835]))                  
                :type "int")
                nil [8756 8954])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fbyte_to_string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [9189 9205])
                    ("" variable (:type ("Sbyte_to_string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [9206 9222])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [9239 9243]))                  
                :type "int")
                nil [9164 9331])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fstring_to_char" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [9548 9564])
                    ("" variable (:type ("Sstring_to_char" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [9565 9581])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [9598 9602]))                  
                :type "int")
                nil [9523 9680])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fpoint" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [9973 9980])
                    ("" variable (:type ("Spoint" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [9981 9988])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [10005 10009]))                  
                :type "int")
                nil [9957 10109])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fpoint_marker" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [10199 10213])
                    ("" variable (:type ("Spoint_marker" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [10214 10228])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [10245 10249]))                  
                :type "int")
                nil [10176 10309])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fgoto_char" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [10388 10399])
                    ("" variable (:type ("Sgoto_char" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [10400 10411])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [10441 10445]))                  
                :type "int")
                nil [10368 10626])
            ("region_limit" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("beginningp" variable (:type "bool") (reparse-symbol arg-sub-list) [11046 11062]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [11013 11548])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fregion_beginning" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [11577 11595])
                    ("" variable (:type ("Sregion_beginning" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [11596 11614])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [11631 11635]))                  
                :type "int")
                nil [11550 11717])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fregion_end" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [11771 11783])
                    ("" variable (:type ("Sregion_end" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [11784 11796])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [11813 11817]))                  
                :type "int")
                nil [11750 11898])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fmark_marker" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [11953 11966])
                    ("" variable (:type ("Smark_marker" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [11967 11980])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [11997 12001]))                  
                :type "int")
                nil [11931 12198])
            ("overlays_around" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("pos" variable (:type ("EMACS_INT" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [12435 12449])
                    ("vec" variable
                       (:pointer 1
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [12450 12467])
                    ("len" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [12468 12482]))                  
                :type ("ptrdiff_t" type (:type "class") nil nil))
                nil [12401 13468])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fget_pos_property" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [13497 13515])
                    ("" variable (:type ("Sget_pos_property" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [13516 13534])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [13551 13555]))                  
                :type "int")
                nil [13470 14073])
            ("find_field" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("pos" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [17431 17447])
                    ("merge_at_boundary" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [17448 17478])
                    ("beg_limit" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [17484 17506])
                    ("beg" variable
                       (:pointer 1
                        :type ("ptrdiff_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [17512 17527])
                    ("end_limit" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [17528 17550])
                    ("end" variable
                       (:pointer 1
                        :type ("ptrdiff_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [17551 17566]))                  
                :type "void")
                nil [17407 21256])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fdelete_field" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [21283 21297])
                    ("" variable (:type ("Sdelete_field" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [21298 21312])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [21329 21333]))                  
                :type "int")
                nil [21260 21506])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Ffield_string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [21666 21680])
                    ("" variable (:type ("Sfield_string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [21681 21695])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [21712 21716]))                  
                :type "int")
                nil [21643 21917])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Ffield_string_no_properties" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [22075 22103])
                    ("" variable (:type ("Sfield_string_no_properties" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [22104 22132])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [22149 22153]))                  
                :type "int")
                nil [22038 22362])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Ffield_beginning" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [22509 22526])
                    ("" variable (:type ("Sfield_beginning" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [22527 22544])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [22561 22565]))                  
                :type "int")
                nil [22483 23063])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Ffield_end" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [23194 23205])
                    ("" variable (:type ("Sfield_end" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [23206 23217])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [23234 23238]))                  
                :type "int")
                nil [23174 23712])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fconstrain_to_field" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [23852 23872])
                    ("" variable (:type ("Sconstrain_to_field" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [23873 23893])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [23910 23914]))                  
                :type "int")
                nil [23823 25514])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fline_beginning_position" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [28774 28799])
                    ("" variable (:type ("Sline_beginning_position" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [28800 28825])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [28842 28846]))                  
                :type "int")
                nil [28733 29598])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fline_end_position" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [29983 30002])
                    ("" variable (:type ("Sline_end_position" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [30003 30022])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [30039 30043]))                  
                :type "int")
                nil [29955 30771])
            ("save_excursion_save" function
               (:arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [31441 31446]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [31408 31708])
            ("save_excursion_restore" function
               (:arguments 
                  ( ("info" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [31814 31831]))                  
                :type "void")
                nil [31785 32742])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fsave_excursion" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [32769 32785])
                    ("" variable (:type ("Ssave_excursion" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [32786 32802])
                    ("" variable (:type ("UNEVALLED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [32806 32816])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [32827 32831]))                  
                :type "int")
                nil [32744 33384])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fsave_current_buffer" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [33618 33639])
                    ("" variable (:type ("Ssave_current_buffer" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [33640 33661])
                    ("" variable (:type ("UNEVALLED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [33665 33675])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [33686 33690]))                  
                :type "int")
                nil [33588 33867])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fbuffer_size" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [34013 34026])
                    ("" variable (:type ("Sbuffer_size" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [34027 34040])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [34057 34061]))                  
                :type "int")
                nil [33991 34511])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fpoint_min" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [34727 34738])
                    ("" variable (:type ("Spoint_min" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [34739 34750])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [34767 34771]))                  
                :type "int")
                nil [34707 34922])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fpoint_min_marker" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [35018 35036])
                    ("" variable (:type ("Spoint_min_marker" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [35037 35055])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [35072 35076]))                  
                :type "int")
                nil [34991 35244])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fpoint_max" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [35327 35338])
                    ("" variable (:type ("Spoint_max" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [35339 35350])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [35367 35371]))                  
                :type "int")
                nil [35307 35565])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fpoint_max_marker" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [35659 35677])
                    ("" variable (:type ("Spoint_max_marker" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [35678 35696])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [35713 35717]))                  
                :type "int")
                nil [35632 35916])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fgap_position" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [35998 36012])
                    ("" variable (:type ("Sgap_position" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [36013 36027])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [36044 36048]))                  
                :type "int")
                nil [35975 36141])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fgap_size" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [36228 36238])
                    ("" variable (:type ("Sgap_size" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [36239 36249])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [36266 36270]))                  
                :type "int")
                nil [36209 36357])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fposition_bytes" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [36455 36471])
                    ("" variable (:type ("Sposition_bytes" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [36472 36488])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [36505 36509]))                  
                :type "int")
                nil [36430 36647])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fbyte_to_position" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [36845 36863])
                    ("" variable (:type ("Sbyte_to_position" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [36864 36882])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [36899 36903]))                  
                :type "int")
                nil [36818 37038])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Ffollowing_char" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [37553 37569])
                    ("" variable (:type ("Sfollowing_char" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [37570 37586])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [37603 37607]))                  
                :type "int")
                nil [37528 37732])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fprevious_char" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [37894 37909])
                    ("" variable (:type ("Sprevious_char" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [37910 37925])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [37942 37946]))                  
                :type "int")
                nil [37869 38077])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fbobp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [38414 38420])
                    ("" variable (:type ("Sbobp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [38421 38427])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [38444 38448]))                  
                :type "int")
                nil [38399 38592])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Feobp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [38661 38667])
                    ("" variable (:type ("Seobp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [38668 38674])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [38691 38695]))                  
                :type "int")
                nil [38646 38827])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fbolp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [38894 38900])
                    ("" variable (:type ("Sbolp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [38901 38907])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [38924 38928]))                  
                :type "int")
                nil [38879 38994])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Feolp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [39099 39105])
                    ("" variable (:type ("Seolp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [39106 39112])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [39129 39133]))                  
                :type "int")
                nil [39084 39256])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fchar_after" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [39361 39373])
                    ("" variable (:type ("Schar_after" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [39374 39386])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [39403 39407]))                  
                :type "int")
                nil [39340 39582])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fchar_before" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [40089 40102])
                    ("" variable (:type ("Schar_before" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [40103 40116])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [40133 40137]))                  
                :type "int")
                nil [40067 40319])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fuser_login_name" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [41067 41084])
                    ("" variable (:type ("Suser_login_name" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [41085 41102])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [41119 41123]))                  
                :type "int")
                nil [41041 41504])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fuser_real_login_name" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [41993 42015])
                    ("" variable (:type ("Suser_real_login_name" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [42016 42038])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [42062 42066]))                  
                :type "int")
                nil [41962 42255])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fuser_uid" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [42534 42544])
                    ("" variable (:type ("Suser_uid" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [42545 42555])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [42572 42576]))                  
                :type "int")
                nil [42515 42684])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fuser_real_uid" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [42779 42794])
                    ("" variable (:type ("Suser_real_uid" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [42795 42810])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [42827 42831]))                  
                :type "int")
                nil [42755 42934])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fgroup_gid" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [43022 43033])
                    ("" variable (:type ("Sgroup_gid" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [43034 43045])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [43062 43066]))                  
                :type "int")
                nil [43002 43174])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fgroup_real_gid" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [43270 43286])
                    ("" variable (:type ("Sgroup_real_gid" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [43287 43303])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [43320 43324]))                  
                :type "int")
                nil [43245 43427])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fuser_full_name" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [43520 43536])
                    ("" variable (:type ("Suser_full_name" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [43537 43553])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [43570 43574]))                  
                :type "int")
                nil [43495 43979])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fsystem_name" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [45204 45217])
                    ("" variable (:type ("Ssystem_name" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [45218 45231])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [45248 45252]))                  
                :type "int")
                nil [45182 45338])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Femacs_pid" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [45467 45478])
                    ("" variable (:type ("Semacs_pid" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [45479 45490])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [45507 45511]))                  
                :type "int")
                nil [45447 45573])
            ("TIME_T_MIN" variable (:constant-flag t) nil [45672 45682])
            ("TIME_T_MAX" variable (:constant-flag t) nil [45740 45750])
            ("time_overflow" function
               (:arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [45860 45865]))                  
                :type "void")
                nil [45840 45918])
            ("invalid_time" function
               (:arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [45956 45961]))                  
                :type "void")
                nil [45937 46005])
            ("check_time_validity" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("validity" variable (:type "int") (reparse-symbol arg-sub-list) [46116 46129]))                  
                :type "void")
                nil [46083 46238])
            ("hi_time" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("t" variable (:type ("time_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [46346 46355]))                  
                :type ("EMACS_INT" type (:type "class") nil nil))
                nil [46320 46457])
            ("lo_time" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("t" variable (:type ("time_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [46524 46533]))                  
                :type "int")
                nil [46504 46577])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fcurrent_time" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [46602 46616])
                    ("" variable (:type ("Scurrent_time" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [46617 46631])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [46648 46652]))                  
                :type "int")
                nil [46579 46965])
            ("time_add" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("ta" variable (:type ("lisp_time" type
                         (:prototype t
                          :type "struct")
                          nil nil)) (reparse-symbol arg-sub-list) [47052 47072])
                    ("tb" variable (:type ("lisp_time" type
                         (:prototype t
                          :type "struct")
                          nil nil)) (reparse-symbol arg-sub-list) [47073 47093]))                  
                :type ("lisp_time" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [47018 47461])
            ("time_subtract" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("ta" variable (:type ("lisp_time" type
                         (:prototype t
                          :type "struct")
                          nil nil)) (reparse-symbol arg-sub-list) [47502 47522])
                    ("tb" variable (:type ("lisp_time" type
                         (:prototype t
                          :type "struct")
                          nil nil)) (reparse-symbol arg-sub-list) [47523 47543]))                  
                :type ("lisp_time" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [47463 47849])
            ("time_arith" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("a" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [47882 47896])
                    ("b" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [47897 47911])
                    ("" variable (:type ("lisp_time" type (:type "struct") nil nil)) (reparse-symbol arg-sub-list) [47917 47976]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [47851 48545])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Ftime_add" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [48566 48576])
                    ("" variable (:type ("Stime_add" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [48577 48587])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [48604 48608]))                  
                :type "int")
                nil [48547 48835])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Ftime_subtract" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [48903 48918])
                    ("" variable (:type ("Stime_subtract" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [48919 48934])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [48951 48955]))                  
                :type "int")
                nil [48879 49259])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Ftime_less_p" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [49330 49343])
                    ("" variable (:type ("Stime_less_p" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [49344 49357])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [49374 49378]))                  
                :type "int")
                nil [49308 49610])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fget_internal_run_time" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [49917 49940])
                    ("" variable (:type ("Sget_internal_run_time" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [49941 49964])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [49988 49992]))                  
                :type "int")
                nil [49885 50255])
            ("make_lisp_time" function
               (:arguments 
                  ( ("t" variable (:type ("timespec" type
                         (:prototype t
                          :type "struct")
                          nil nil)) (reparse-symbol arg-sub-list) [51226 51244]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [51198 51366])
            ("disassemble_lisp_time" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("specified_time" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [51654 51681])
                    ("phigh" variable
                       (:pointer 1
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [51682 51701])
                    ("plow" variable
                       (:pointer 1
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [51711 51729])
                    ("pusec" variable
                       (:pointer 1
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [51730 51749])
                    ("ppsec" variable
                       (:pointer 1
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [51759 51778]))                  
                :type "int")
                nil [51620 52752])
            ("decode_float_time" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("t" variable (:type "double") (reparse-symbol arg-sub-list) [52914 52923])
                    ("result" variable
                       (:pointer 1
                        :type ("lisp_time" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [52924 52949]))                  
                :type "bool")
                nil [52883 53734])
            ("decode_time_components" function
               (:arguments 
                  ( ("high" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [54238 54255])
                    ("low" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [54256 54272])
                    ("usec" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [54273 54290])
                    ("psec" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [54294 54311])
                    ("result" variable
                       (:pointer 1
                        :type ("lisp_time" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [54315 54340])
                    ("dresult" variable
                       (:pointer 1
                        :type "double")
                        (reparse-symbol arg-sub-list) [54341 54357]))                  
                :type "int")
                nil [54210 55820])
            ("lisp_to_timespec" function
               (:arguments 
                  ( ("t" variable (:type ("lisp_time" type
                         (:prototype t
                          :type "struct")
                          nil nil)) (reparse-symbol arg-sub-list) [55856 55875]))                  
                :type ("timespec" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [55822 56148])
            ("lisp_time_struct" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("specified_time" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [56414 56441])
                    ("plen" variable
                       (:pointer 1
                        :type "int")
                        (reparse-symbol arg-sub-list) [56442 56452]))                  
                :type ("lisp_time" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [56372 56750])
            ("lisp_time_argument" function
               (:arguments 
                  ( ("specified_time" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [56884 56911]))                  
                :type ("timespec" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [56848 57100])
            ("lisp_seconds_argument" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("specified_time" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [57249 57276]))                  
                :type ("time_t" type (:type "class") nil nil))
                nil [57212 57771])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Ffloat_time" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [57794 57806])
                    ("" variable (:type ("Sfloat_time" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [57807 57819])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [57836 57840]))                  
                :type "int")
                nil [57773 58478])
            ("emacs_nmemftime" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("s" variable
                       (:pointer 1
                        :type "char")
                        (reparse-symbol arg-sub-list) [59336 59344])
                    ("maxsize" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [59345 59360])
                    ("format" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [59361 59380])
                    ("format_len" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [59384 59402])
                    ("tp" variable
                       (:pointer 1
                        :constant-flag t
                        :type ("tm" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [59403 59423])
                    ("tz" variable (:type ("timezone_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [59424 59438])
                    ("ns" variable (:type "int") (reparse-symbol arg-sub-list) [59439 59446]))                  
                :type ("size_t" type (:type "class") nil nil))
                nil [59305 60243])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fformat_time_string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [60274 60294])
                    ("" variable (:type ("Sformat_time_string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [60295 60315])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [60332 60336]))                  
                :type "int")
                nil [60245 63210])
            ("format_time_string" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("format" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [63552 63571])
                    ("formatlen" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [63572 63592])
                    ("t" variable (:type ("timespec" type
                         (:prototype t
                          :type "struct")
                          nil nil)) (reparse-symbol arg-sub-list) [63599 63617])
                    ("zone" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [63618 63635])
                    ("tmp" variable
                       (:pointer 1
                        :type ("tm" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [63636 63651]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [63513 64869])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fdecode_time" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [64893 64906])
                    ("" variable (:type ("Sdecode_time" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [64907 64920])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [64937 64941]))                  
                :type "int")
                nil [64871 66354])
            ("check_tm_member" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("obj" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [67440 67456])
                    ("offset" variable (:type "int") (reparse-symbol arg-sub-list) [67457 67468]))                  
                :type "int")
                nil [67412 67622])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fencode_time" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [67646 67659])
                    ("" variable (:type ("Sencode_time" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [67660 67673])
                    ("" variable (:type ("MANY" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [67677 67682])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [67693 67697]))                  
                :type "int")
                nil [67624 68892])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fcurrent_time_string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [69520 69541])
                    ("" variable (:type ("Scurrent_time_string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [69542 69563])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [69587 69591]))                  
                :type "int")
                nil [69490 70681])
            ("tm_diff" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("a" variable
                       (:pointer 1
                        :type ("tm" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [71833 71846])
                    ("b" variable
                       (:pointer 1
                        :type ("tm" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [71847 71860]))                  
                :type "int")
                nil [71813 72657])
            ("tm_gmtoff" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("a" variable
                       (:pointer 1
                        :type ("tm" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [72751 72764]))                  
                :type "long int")
                nil [72724 72835])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fcurrent_time_zone" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [72865 72884])
                    ("" variable (:type ("Scurrent_time_zone" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [72885 72904])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [72921 72925]))                  
                :type "int")
                nil [72837 74105])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fset_time_zone_rule" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [75381 75401])
                    ("" variable (:type ("Sset_time_zone_rule" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [75402 75422])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [75439 75443]))                  
                :type "int")
                nil [75352 76334])
            ("tzvalbuf" variable
               (:pointer 1
                :typemodifiers ("static")
                :type "char")
                nil [76562 76584])
            ("emacs_getenv_TZ" function
               (:pointer 1
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [76647 76652]))                  
                :type "char")
                nil [76623 76710])
            ("emacs_setenv_TZ" function
               (:arguments 
                  ( ("tzstring" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [77106 77127]))                  
                :type "int")
                nil [77085 78980])
            ("general_insert_function" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("insert_func" function
                       (:function-pointer t
                        :arguments 
                          ( ("" variable
                               (:pointer 1
                                :constant-flag t
                                :type "char")
                                (reparse-symbol arg-sub-list) [79301 79314])
                            ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [79315 79325]))                          
                        :type "void")
                        nil nil)
                    ("insert_from_string_func" function
                       (:function-pointer t
                        :arguments 
                          ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [79373 79385])
                            ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [79386 79396])
                            ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [79397 79407])
                            ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [79418 79428])
                            ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [79429 79439])
                            ("" variable (:type "bool") (reparse-symbol arg-sub-list) [79440 79445]))                          
                        :type "void")
                        nil nil)
                    ("inherit" variable (:type "bool") (reparse-symbol arg-sub-list) [79451 79464])
                    ("nargs" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [79465 79481])
                    ("args" variable
                       (:pointer 1
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [79482 79500]))                  
                :type "void")
                nil [79234 80161])
            ("insert1" function
               (:arguments 
                  ( ("arg" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [80177 80193]))                  
                :type "void")
                nil [80163 80218])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Finsert" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [80238 80246])
                    ("" variable (:type ("Sinsert" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [80247 80255])
                    ("" variable (:type ("MANY" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [80259 80264])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [80275 80279]))                  
                :type "int")
                nil [80221 81043])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Finsert_and_inherit" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [81165 81185])
                    ("" variable (:type ("Sinsert_and_inherit" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [81186 81206])
                    ("" variable (:type ("MANY" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [81213 81218])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [81229 81233]))                  
                :type "int")
                nil [81136 81766])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Finsert_before_markers" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [81909 81932])
                    ("" variable (:type ("Sinsert_before_markers" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [81933 81956])
                    ("" variable (:type ("MANY" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [81960 81965])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [81976 81980]))                  
                :type "int")
                nil [81877 82618])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Finsert_and_inherit_before_markers" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [82797 82832])
                    ("" variable (:type ("Sinsert_and_inherit_before_markers" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [82835 82870])
                    ("" variable (:type ("MANY" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [82874 82879])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [82890 82894]))                  
                :type "int")
                nil [82753 83351])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Finsert_char" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [83521 83534])
                    ("" variable (:type ("Sinsert_char" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [83535 83548])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [83719 83723]))                  
                :type "int")
                nil [83499 84856])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Finsert_byte" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [85819 85832])
                    ("" variable (:type ("Sinsert_byte" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [85833 85846])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [85863 85867]))                  
                :type "int")
                nil [85797 86376])
            ("make_buffer_string" function
               (:arguments 
                  ( ("start" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [87469 87485])
                    ("end" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [87486 87500])
                    ("props" variable (:type "bool") (reparse-symbol arg-sub-list) [87501 87512]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [87437 87683])
            ("make_buffer_string_both" function
               (:arguments 
                  ( ("start" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [88428 88444])
                    ("start_byte" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [88445 88466])
                    ("end" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [88471 88485])
                    ("end_byte" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [88486 88505])
                    ("props" variable (:type "bool") (reparse-symbol arg-sub-list) [88506 88517]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [88391 89762])
            ("update_buffer_properties" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("start" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [89916 89932])
                    ("end" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [89933 89947]))                  
                :type "void")
                nil [89878 90569])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fbuffer_substring" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [90598 90616])
                    ("" variable (:type ("Sbuffer_substring" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [90617 90635])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [90652 90656]))                  
                :type "int")
                nil [90571 91091])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fbuffer_substring_no_properties" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [91278 91310])
                    ("" variable (:type ("Sbuffer_substring_no_properties" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [91318 91350])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [91367 91371]))                  
                :type "int")
                nil [91237 91578])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fbuffer_string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [91748 91763])
                    ("" variable (:type ("Sbuffer_string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [91764 91779])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [91796 91800]))                  
                :type "int")
                nil [91724 91958])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Finsert_buffer_substring" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [92066 92091])
                    ("" variable (:type ("Sinsert_buffer_substring" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [92092 92117])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [92141 92145]))                  
                :type "int")
                nil [92032 92810])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fcompare_buffer_substrings" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [93661 93688])
                    ("" variable (:type ("Scompare_buffer_substrings" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [93689 93716])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [93740 93744]))                  
                :type "int")
                nil [93625 94526])
            ("XVECREF_YVECREF_EQUAL" variable (:constant-flag t) nil [97822 97843])
            ("OFFSET" variable (:constant-flag t) nil [97918 97924])
            ("EXTRA_CONTEXT_FIELDS" variable (:constant-flag t) nil [97944 97964])
            ("deletions" variable
               (:pointer 1
                :type "unsigned char")
                nil [98257 98282])
            ("insertions" variable
               (:pointer 1
                :type "unsigned char")
                nil [98307 98333])
            ("NOTE_DELETE" variable (:constant-flag t) nil [98343 98354])
            ("NOTE_INSERT" variable (:constant-flag t) nil [98409 98420])
            ("context" type
               (:prototype t
                :type "struct")
                nil [98469 98484])
            ("set_bit" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type "unsigned char")
                        (reparse-symbol arg-sub-list) [98506 98522])
                    ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [98523 98530]))                  
                :type "void")
                nil [98485 98531])
            ("bit_is_set" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :constant-flag t
                        :type "unsigned char")
                        (reparse-symbol arg-sub-list) [98556 98578])
                    ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [98579 98586]))                  
                :type "bool")
                nil [98532 98587])
            ("buffer_chars_equal" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("context" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [98620 98637])
                    ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [98638 98645])
                    ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [98646 98653]))                  
                :type "bool")
                nil [98588 98654])
            ("minmax.h" include nil nil [98656 98675])
            ("diffseq.h" include nil nil [98676 98696])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Freplace_buffer_contents" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [98732 98757])
                    ("" variable (:type ("Sreplace_buffer_contents" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [98765 98790])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [98824 98828]))                  
                :type "int")
                nil [98698 99170])
            ("set_bit" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("a" variable
                       (:pointer 1
                        :type "unsigned char")
                        (reparse-symbol arg-sub-list) [102896 102913])
                    ("i" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [102914 102926]))                  
                :type "void")
                nil [102875 103090])
            ("bit_is_set" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("a" variable
                       (:pointer 1
                        :constant-flag t
                        :type "unsigned char")
                        (reparse-symbol arg-sub-list) [103116 103139])
                    ("i" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [103140 103152]))                  
                :type "bool")
                nil [103092 103322])
            ("buffer_chars_equal" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("ctx" variable
                       (:pointer 1
                        :type ("context" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [103565 103585])
                    ("pos_a" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [103606 103622])
                    ("pos_b" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [103623 103639]))                  
                :type "bool")
                nil [103533 104068])
            ("subst_char_in_region_unwind" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("arg" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [104113 104129]))                  
                :type "void")
                nil [104072 104173])
            ("subst_char_in_region_unwind_1" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("arg" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [104218 104234]))                  
                :type "void")
                nil [104175 104277])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fsubst_char_in_region" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [104310 104332])
                    ("" variable (:type ("Ssubst_char_in_region" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [104340 104362])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [104379 104383]))                  
                :type "int")
                nil [104279 104737])
            ("check_translation" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [109864 109874])
                    ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [109875 109885])
                    ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [109886 109896])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [109907 109919]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [109826 109920])
            ("check_translation" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("pos" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [110214 110228])
                    ("pos_byte" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [110229 110248])
                    ("end" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [110249 110263])
                    ("val" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [110269 110285]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [110176 111357])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Ftranslate_region_internal" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [111396 111423])
                    ("" variable (:type ("Stranslate_region_internal" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [111431 111458])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [111475 111479]))                  
                :type "int")
                nil [111360 111783])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fdelete_region" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [115338 115353])
                    ("" variable (:type ("Sdelete_region" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [115354 115369])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [115388 115392]))                  
                :type "int")
                nil [115314 115611])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fdelete_and_extract_region" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [115742 115769])
                    ("" variable (:type ("Sdelete_and_extract_region" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [115777 115804])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [115821 115825]))                  
                :type "int")
                nil [115706 115925])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fwiden" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [116104 116111])
                    ("" variable (:type ("Swiden" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [116112 116119])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [116137 116141]))                  
                :type "int")
                nil [116088 116269])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fnarrow_to_region" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [116579 116597])
                    ("" variable (:type ("Snarrow_to_region" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [116598 116616])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [116635 116639]))                  
                :type "int")
                nil [116552 117108])
            ("save_restriction_save" function
               (:arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [117885 117890]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [117850 118570])
            ("save_restriction_restore" function
               (:arguments 
                  ( ("data" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [118603 118620]))                  
                :type "void")
                nil [118572 120889])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fsave_restriction" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [120918 120936])
                    ("" variable (:type ("Ssave_restriction" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [120937 120955])
                    ("" variable (:type ("UNEVALLED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [120959 120969])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [120980 120984]))                  
                :type "int")
                nil [120891 121770])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fmessage" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [121996 122005])
                    ("" variable (:type ("Smessage" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [122006 122015])
                    ("" variable (:type ("MANY" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [122019 122024])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [122035 122039]))                  
                :type "int")
                nil [121978 122888])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fmessage_box" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [123163 123176])
                    ("" variable (:type ("Smessage_box" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [123177 123190])
                    ("" variable (:type ("MANY" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [123194 123199])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [123210 123214]))                  
                :type "int")
                nil [123141 123671])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fmessage_or_box" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [124022 124038])
                    ("" variable (:type ("Smessage_or_box" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [124039 124055])
                    ("" variable (:type ("MANY" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [124059 124064])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [124075 124079]))                  
                :type "int")
                nil [123997 124616])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fcurrent_message" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [124809 124826])
                    ("" variable (:type ("Scurrent_message" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [124827 124844])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [124861 124865]))                  
                :type "int")
                nil [124783 124954])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fpropertize" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [125011 125023])
                    ("" variable (:type ("Spropertize" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [125024 125036])
                    ("" variable (:type ("MANY" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [125040 125045])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [125056 125060]))                  
                :type "int")
                nil [124990 125343])
            ("str2num" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("str" variable
                       (:pointer 1
                        :type "char")
                        (reparse-symbol arg-sub-list) [126202 126212])
                    ("str_end" variable
                       (:pointer 2
                        :type "char")
                        (reparse-symbol arg-sub-list) [126213 126228]))                  
                :type ("ptrdiff_t" type (:type "class") nil nil))
                nil [126176 126415])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fformat" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [126434 126442])
                    ("" variable (:type ("Sformat" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [126443 126451])
                    ("" variable (:type ("MANY" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [126455 126460])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [126471 126475]))                  
                :type "int")
                nil [126417 129738])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fformat_message" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [129814 129830])
                    ("" variable (:type ("Sformat_message" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [129831 129847])
                    ("" variable (:type ("MANY" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [129851 129856])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [129867 129871]))                  
                :type "int")
                nil [129789 130364])
            ("styled_format" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("nargs" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [130523 130539])
                    ("args" variable
                       (:pointer 1
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [130540 130558])
                    ("message" variable (:type "bool") (reparse-symbol arg-sub-list) [130559 130572]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [130489 152584])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fchar_equal" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [152608 152620])
                    ("" variable (:type ("Schar_equal" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [152621 152633])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [152650 152654]))                  
                :type "int")
                nil [152587 152889])
            ("transpose_markers" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("start1" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [154590 154607])
                    ("end1" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [154608 154623])
                    ("start2" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [154629 154646])
                    ("end2" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [154647 154662])
                    ("start1_byte" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [154668 154690])
                    ("end1_byte" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [154691 154711])
                    ("start2_byte" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [154717 154739])
                    ("end2_byte" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [154740 154760]))                  
                :type "void")
                nil [154559 156929])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Ftranspose_regions" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [156959 156978])
                    ("" variable (:type ("Stranspose_regions" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [156979 156998])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [157015 157019]))                  
                :type "int")
                nil [156931 157472])
            ("syms_of_editfns" function
               (:arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [168583 168588]))                  
                :type "void")
                nil [168561 173397]))          
      :file "editfns.c"
      :pointmax 173398
      :fsize 173411
      :lastmodtime '(22986 14551 0 0)
      :unmatched-syntax '((semantic-list 157473 . 168557) (punctuation 157018 . 157019) (number 157005 . 157006) (number 157002 . 157003) (number 156999 . 157000) (string 156938 . 156957) (semantic-list 152890 . 153873) (punctuation 152653 . 152654) (number 152640 . 152641) (number 152637 . 152638) (number 152634 . 152635) (string 152594 . 152606) (semantic-list 130365 . 130412) (punctuation 129870 . 129871) (number 129857 . 129858) (number 129848 . 129849) (string 129796 . 129812) (semantic-list 129739 . 129787) (punctuation 126474 . 126475) (number 126461 . 126462) (number 126452 . 126453) (string 126424 . 126432) (semantic-list 125344 . 125854) (punctuation 125059 . 125060) (number 125046 . 125047) (number 125037 . 125038) (string 124997 . 125009) (semantic-list 124955 . 124987) (punctuation 124864 . 124865) (number 124851 . 124852) (number 124848 . 124849) (number 124845 . 124846) (string 124790 . 124807) (semantic-list 124617 . 124781) (punctuation 124078 . 124079) (number 124065 . 124066) (number 124056 . 124057) (string 124004 . 124020) (semantic-list 123672 . 123995) (punctuation 123213 . 123214) (number 123200 . 123201) (number 123191 . 123192) (string 123148 . 123161) (semantic-list 122889 . 123139) (punctuation 122038 . 122039) (number 122025 . 122026) (number 122016 . 122017) (string 121985 . 121994) (semantic-list 121771 . 121975) (punctuation 120983 . 120984) (number 120970 . 120971) (number 120956 . 120957) (string 120898 . 120916) (semantic-list 117109 . 117848) (punctuation 116638 . 116639) (string 116623 . 116626) (number 116620 . 116621) (number 116617 . 116618) (string 116559 . 116577) (semantic-list 116270 . 116550) (punctuation 116140 . 116141) (string 116126 . 116128) (number 116123 . 116124) (number 116120 . 116121) (string 116095 . 116102) (semantic-list 115926 . 116085) (punctuation 115824 . 115825) (number 115811 . 115812) (number 115808 . 115809) (number 115805 . 115806) (string 115713 . 115740) (semantic-list 115612 . 115704) (punctuation 115391 . 115392) (string 115376 . 115379) (number 115373 . 115374) (number 115370 . 115371) (string 115321 . 115336) (semantic-list 111784 . 115312) (punctuation 111478 . 111479) (number 111465 . 111466) (number 111462 . 111463) (number 111459 . 111460) (string 111367 . 111394) (semantic-list 104738 . 109823) (punctuation 104382 . 104383) (number 104369 . 104370) (number 104366 . 104367) (number 104363 . 104364) (string 104286 . 104308) (semantic-list 99171 . 102873) (punctuation 98827 . 98828) (string 98797 . 98815) (number 98794 . 98795) (number 98791 . 98792) (string 98705 . 98730) (semantic-list 94527 . 97683) (punctuation 93743 . 93744) (number 93730 . 93731) (number 93727 . 93728) (number 93724 . 93725) (string 93632 . 93659) (semantic-list 92811 . 93623) (punctuation 92144 . 92145) (number 92131 . 92132) (number 92128 . 92129) (number 92125 . 92126) (string 92039 . 92064) (semantic-list 91959 . 92030) (punctuation 91799 . 91800) (number 91786 . 91787) (number 91783 . 91784) (number 91780 . 91781) (string 91731 . 91746) (semantic-list 91579 . 91722) (punctuation 91370 . 91371) (number 91357 . 91358) (number 91354 . 91355) (number 91351 . 91352) (string 91244 . 91276) (semantic-list 91092 . 91235) (punctuation 90655 . 90656) (number 90642 . 90643) (number 90639 . 90640) (number 90636 . 90637) (string 90578 . 90596) (semantic-list 86377 . 86709) (punctuation 85866 . 85867) (number 85853 . 85854) (number 85850 . 85851) (number 85847 . 85848) (string 85804 . 85817) (semantic-list 84857 . 85795) (punctuation 83722 . 83723) (string 83562 . 83710) (number 83552 . 83553) (number 83549 . 83550) (string 83506 . 83519) (semantic-list 83352 . 83496) (punctuation 82893 . 82894) (number 82880 . 82881) (number 82871 . 82872) (string 82760 . 82795) (semantic-list 82619 . 82751) (punctuation 81979 . 81980) (number 81966 . 81967) (number 81957 . 81958) (string 81884 . 81907) (semantic-list 81767 . 81875) (punctuation 81232 . 81233) (number 81219 . 81220) (number 81210 . 81211) (string 81143 . 81163) (semantic-list 81044 . 81134) (punctuation 80278 . 80279) (number 80265 . 80266) (number 80256 . 80257) (string 80228 . 80236) (semantic-list 76335 . 76396) (punctuation 75442 . 75443) (number 75429 . 75430) (number 75426 . 75427) (number 75423 . 75424) (string 75359 . 75379) (semantic-list 74106 . 75350) (punctuation 72924 . 72925) (number 72911 . 72912) (number 72908 . 72909) (number 72905 . 72906) (string 72844 . 72863) (semantic-list 70682 . 71719) (punctuation 69590 . 69591) (number 69577 . 69578) (number 69574 . 69575) (number 69571 . 69572) (string 69497 . 69518) (semantic-list 68893 . 69488) (punctuation 67696 . 67697) (number 67683 . 67684) (number 67674 . 67675) (string 67631 . 67644) (semantic-list 66355 . 67295) (punctuation 64940 . 64941) (number 64927 . 64928) (number 64924 . 64925) (number 64921 . 64922) (string 64878 . 64891) (semantic-list 63211 . 63511) (punctuation 60335 . 60336) (number 60322 . 60323) (number 60319 . 60320) (number 60316 . 60317) (string 60252 . 60272) (semantic-list 58479 . 58713) (punctuation 57839 . 57840) (number 57826 . 57827) (number 57823 . 57824) (number 57820 . 57821) (string 57780 . 57792) (semantic-list 50256 . 50948) (punctuation 49991 . 49992) (number 49978 . 49979) (number 49975 . 49976) (number 49972 . 49973) (string 49892 . 49915) (semantic-list 49611 . 49882) (punctuation 49377 . 49378) (number 49364 . 49365) (number 49361 . 49362) (number 49358 . 49359) (string 49315 . 49328) (semantic-list 49260 . 49306) (punctuation 48954 . 48955) (number 48941 . 48942) (number 48938 . 48939) (number 48935 . 48936) (string 48886 . 48901) (semantic-list 48836 . 48877) (punctuation 48607 . 48608) (number 48594 . 48595) (number 48591 . 48592) (number 48588 . 48589) (string 48554 . 48564) (semantic-list 47940 . 47976) (close-paren 47938 . 47939) (symbol 47936 . 47938) (punctuation 47935 . 47936) (open-paren 47934 . 47935) (semantic-list 46966 . 47016) (punctuation 46651 . 46652) (number 46638 . 46639) (number 46635 . 46636) (number 46632 . 46633) (string 46586 . 46600) (symbol 45927 . 45936) (STATIC 45920 . 45926) (semantic-list 45574 . 45639) (punctuation 45510 . 45511) (number 45497 . 45498) (number 45494 . 45495) (number 45491 . 45492) (string 45454 . 45465) (semantic-list 45339 . 45445) (punctuation 45251 . 45252) (number 45238 . 45239) (number 45235 . 45236) (number 45232 . 45233) (string 45189 . 45202) (semantic-list 43980 . 45180) (punctuation 43573 . 43574) (number 43560 . 43561) (number 43557 . 43558) (number 43554 . 43555) (string 43502 . 43518) (semantic-list 43428 . 43493) (punctuation 43323 . 43324) (number 43310 . 43311) (number 43307 . 43308) (number 43304 . 43305) (string 43252 . 43268) (semantic-list 43175 . 43243) (punctuation 43065 . 43066) (number 43052 . 43053) (number 43049 . 43050) (number 43046 . 43047) (string 43009 . 43020) (semantic-list 42935 . 43000) (punctuation 42830 . 42831) (number 42817 . 42818) (number 42814 . 42815) (number 42811 . 42812) (string 42762 . 42777) (semantic-list 42685 . 42753) (punctuation 42575 . 42576) (number 42562 . 42563) (number 42559 . 42560) (number 42556 . 42557) (string 42522 . 42532) (semantic-list 42256 . 42513) (punctuation 42065 . 42066) (number 42052 . 42053) (number 42049 . 42050) (number 42046 . 42047) (string 41969 . 41991) (semantic-list 41505 . 41960) (punctuation 41122 . 41123) (number 41109 . 41110) (number 41106 . 41107) (number 41103 . 41104) (string 41048 . 41065) (semantic-list 40320 . 41038) (punctuation 40136 . 40137) (number 40123 . 40124) (number 40120 . 40121) (number 40117 . 40118) (string 40074 . 40087) (semantic-list 39583 . 40065) (punctuation 39406 . 39407) (number 39393 . 39394) (number 39390 . 39391) (number 39387 . 39388) (string 39347 . 39359) (semantic-list 39257 . 39338) (punctuation 39132 . 39133) (number 39119 . 39120) (number 39116 . 39117) (number 39113 . 39114) (string 39091 . 39097) (semantic-list 38995 . 39082) (punctuation 38927 . 38928) (number 38914 . 38915) (number 38911 . 38912) (number 38908 . 38909) (string 38886 . 38892) (semantic-list 38828 . 38877) (punctuation 38694 . 38695) (number 38681 . 38682) (number 38678 . 38679) (number 38675 . 38676) (string 38653 . 38659) (semantic-list 38593 . 38644) (punctuation 38447 . 38448) (number 38434 . 38435) (number 38431 . 38432) (number 38428 . 38429) (string 38406 . 38412) (semantic-list 38078 . 38397) (punctuation 37945 . 37946) (number 37932 . 37933) (number 37929 . 37930) (number 37926 . 37927) (string 37876 . 37892) (semantic-list 37733 . 37867) (punctuation 37606 . 37607) (number 37593 . 37594) (number 37590 . 37591) (number 37587 . 37588) (string 37535 . 37551) (semantic-list 37039 . 37525) (punctuation 36902 . 36903) (number 36889 . 36890) (number 36886 . 36887) (number 36883 . 36884) (string 36825 . 36843) (semantic-list 36648 . 36816) (punctuation 36508 . 36509) (number 36495 . 36496) (number 36492 . 36493) (number 36489 . 36490) (string 36437 . 36453) (semantic-list 36358 . 36428) (punctuation 36269 . 36270) (number 36256 . 36257) (number 36253 . 36254) (number 36250 . 36251) (string 36216 . 36226) (semantic-list 36142 . 36207) (punctuation 36047 . 36048) (number 36034 . 36035) (number 36031 . 36032) (number 36028 . 36029) (string 35982 . 35996) (semantic-list 35917 . 35973) (punctuation 35716 . 35717) (number 35703 . 35704) (number 35700 . 35701) (number 35697 . 35698) (string 35639 . 35657) (semantic-list 35566 . 35630) (punctuation 35370 . 35371) (number 35357 . 35358) (number 35354 . 35355) (number 35351 . 35352) (string 35314 . 35325) (semantic-list 35245 . 35305) (punctuation 35075 . 35076) (number 35062 . 35063) (number 35059 . 35060) (number 35056 . 35057) (string 34998 . 35016) (semantic-list 34923 . 34989) (punctuation 34770 . 34771) (number 34757 . 34758) (number 34754 . 34755) (number 34751 . 34752) (string 34714 . 34725) (semantic-list 34512 . 34705) (punctuation 34060 . 34061) (number 34047 . 34048) (number 34044 . 34045) (number 34041 . 34042) (string 33998 . 34011) (semantic-list 33868 . 33988) (punctuation 33689 . 33690) (number 33676 . 33677) (number 33662 . 33663) (string 33595 . 33616) (semantic-list 33385 . 33586) (punctuation 32830 . 32831) (number 32817 . 32818) (number 32803 . 32804) (string 32751 . 32767) (semantic-list 30772 . 31242) (punctuation 30042 . 30043) (number 30029 . 30030) (number 30026 . 30027) (number 30023 . 30024) (string 29962 . 29981) (semantic-list 29599 . 29953) (punctuation 28845 . 28846) (number 28832 . 28833) (number 28829 . 28830) (number 28826 . 28827) (string 28740 . 28765) (semantic-list 25515 . 28729) (punctuation 23913 . 23914) (number 23900 . 23901) (number 23897 . 23898) (number 23894 . 23895) (string 23830 . 23850) (semantic-list 23713 . 23821) (punctuation 23237 . 23238) (number 23224 . 23225) (number 23221 . 23222) (number 23218 . 23219) (string 23181 . 23192) (semantic-list 23064 . 23172) (punctuation 22564 . 22565) (number 22551 . 22552) (number 22548 . 22549) (number 22545 . 22546) (string 22490 . 22507) (semantic-list 22363 . 22481) (punctuation 22152 . 22153) (number 22139 . 22140) (number 22136 . 22137) (number 22133 . 22134) (string 22045 . 22073) (semantic-list 21918 . 22036) (punctuation 21715 . 21716) (number 21702 . 21703) (number 21699 . 21700) (number 21696 . 21697) (string 21650 . 21664) (semantic-list 21507 . 21641) (punctuation 21332 . 21333) (number 21319 . 21320) (number 21316 . 21317) (number 21313 . 21314) (string 21267 . 21281) (semantic-list 14074 . 16384) (punctuation 13554 . 13555) (number 13541 . 13542) (number 13538 . 13539) (number 13535 . 13536) (string 13477 . 13495) (semantic-list 12199 . 12240) (punctuation 12000 . 12001) (number 11987 . 11988) (number 11984 . 11985) (number 11981 . 11982) (string 11938 . 11951) (semantic-list 11899 . 11929) (punctuation 11816 . 11817) (number 11803 . 11804) (number 11800 . 11801) (number 11797 . 11798) (string 11757 . 11769) (semantic-list 11718 . 11748) (punctuation 11634 . 11635) (number 11621 . 11622) (number 11618 . 11619) (number 11615 . 11616) (string 11557 . 11575) (semantic-list 10627 . 10867) (punctuation 10444 . 10445) (string 10418 . 10432) (number 10415 . 10416) (number 10412 . 10413) (string 10375 . 10386) (semantic-list 10310 . 10366) (punctuation 10248 . 10249) (number 10235 . 10236) (number 10232 . 10233) (number 10229 . 10230) (string 10183 . 10197) (semantic-list 10110 . 10174) (punctuation 10008 . 10009) (number 9995 . 9996) (number 9992 . 9993) (number 9989 . 9990) (string 9964 . 9971) (semantic-list 9681 . 9955) (punctuation 9601 . 9602) (number 9588 . 9589) (number 9585 . 9586) (number 9582 . 9583) (string 9530 . 9546) (semantic-list 9332 . 9521) (punctuation 9242 . 9243) (number 9229 . 9230) (number 9226 . 9227) (number 9223 . 9224) (string 9171 . 9187) (semantic-list 8955 . 9162) (punctuation 8834 . 8835) (number 8821 . 8822) (number 8818 . 8819) (number 8815 . 8816) (string 8763 . 8779) (number 2181 . 2182) (punctuation 2179 . 2180) (string 2173 . 2178) (SIZEOF 2166 . 2172) (punctuation 2164 . 2165))
      :lexical-table 
        '(("TM_YEAR_BASE" . ((number "1900" 1605 . 1609)))
          ("OFFSET" . ((symbol "ptrdiff_t" 97925 . 97934)))
          ("HAVE_TM_GMTOFF" . ((symbol "false" 2135 . 2140)))
          ("EXTRA_CONTEXT_FIELDS" . 
              ((STRUCT "struct" 98038 . 98044) (symbol "buffer" 98045 . 98051) (punctuation "*" 98052 . 98053) (symbol "buffer_a" 98053 . 98061) (punctuation ";" 98061 . 98062) (STRUCT "struct" 98088 . 98094) (symbol "buffer" 98095 . 98101) (punctuation "*" 98102 . 98103) (symbol "buffer_b" 98103 . 98111) (punctuation ";" 98111 . 98112)))
          ("COMBINING_BOTH" . ((semantic-list "(COMBINING_BEFORE | COMBINING_AFTER)" 105290 . 105326)))
          ("NOTE_INSERT" (spp-arg-list ("ctx" "yoff") 98420 . 98431) . ((symbol "set_bit" 98432 . 98439) (semantic-list "((ctx)->insertions, (yoff))" 98440 . 98467)))
          ("TIME_T_MAX" . ((symbol "TYPE_MAXIMUM" 45751 . 45763) (semantic-list "(time_t)" 45764 . 45772)))
          ("COMBINING_AFTER" . ((number "2" 105265 . 105266)))
          ("TIME_T_MIN" . ((symbol "TYPE_MINIMUM" 45683 . 45695) (semantic-list "(time_t)" 45696 . 45704)))
          ("XVECREF_YVECREF_EQUAL" (spp-arg-list ("ctx" "xoff" "yoff") 97843 . 97860) . ((symbol "buffer_chars_equal" 97866 . 97884) (semantic-list "((ctx), (xoff), (yoff))" 97885 . 97908)))
          ("NOTE_DELETE" (spp-arg-list ("ctx" "xoff") 98354 . 98365) . ((symbol "set_bit" 98366 . 98373) (semantic-list "((ctx)->deletions, (xoff))" 98374 . 98400)))
          ("COMBINING_BEFORE" . ((number "1" 105238 . 105239)))
          ("COMBINING_NO" . ((number "0" 105211 . 105212)))
          )
)
    (semanticdb-table "semanticdb-table"
      :file "coding.h"
      :fsize 24380
      :lastmodtime '(22986 14551 0 0))
    (semanticdb-table "semanticdb-table"
      :major-mode c-mode
      :tags 
        '( ("config.h" include (:system-flag t) nil [771 790])
            ("sys/types.h" include (:system-flag t) nil [792 814])
            ("sys/stat.h" include (:system-flag t) nil [815 836])
            ("sys/param.h" include (:system-flag t) nil [837 859])
            ("errno.h" include (:system-flag t) nil [860 878])
            ("stdio.h" include (:system-flag t) nil [879 897])
            ("stdlib.h" include (:system-flag t) nil [898 917])
            ("unistd.h" include (:system-flag t) nil [918 937])
            ("verify.h" include (:system-flag t) nil [939 958])
            ("lisp.h" include nil nil [960 977])
            ("intervals.h" include nil nil [978 1000])
            ("process.h" include nil nil [1001 1021])
            ("systime.h" include nil nil [1022 1042])
            ("window.h" include nil nil [1043 1062])
            ("commands.h" include nil nil [1063 1084])
            ("character.h" include nil nil [1085 1107])
            ("buffer.h" include nil nil [1108 1127])
            ("region-cache.h" include nil nil [1128 1153])
            ("indent.h" include nil nil [1154 1173])
            ("blockinput.h" include nil nil [1174 1197])
            ("keymap.h" include nil nil [1198 1217])
            ("frame.h" include nil nil [1218 1236])
            ("xwidget.h" include nil nil [1237 1257])
            ("all_buffers" variable
               (:pointer 1
                :type ("buffer" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [1442 1469])
            ("buffer_defaults" variable (:type "int") nil [1921 1937])
            ("buffer_local_flags" variable (:type ("buffer" type
                 (:prototype t
                  :type "struct")
                  nil nil)) nil [2618 2651])
            ("buffer_local_symbols" variable (:type "int") nil [2834 2855])
            ("PER_BUFFER_SYMBOL" variable (:constant-flag t) nil [2963 2980])
            ("OVERLAY_COUNT_MAX" variable (:constant-flag t) nil [3112 3129])
            ("buffer_permanent_local_flags" variable
               (:dereference 1
                :typemodifiers ("static")
                :type "char")
                nil [3320 3382])
            ("last_per_buffer_idx" variable (:type "int") nil [3429 3453])
            ("call_overlay_mod_hooks" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("list" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3491 3508])
                    ("overlay" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3509 3529])
                    ("after" variable (:type "bool") (reparse-symbol arg-sub-list) [3566 3577])
                    ("arg1" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3578 3595])
                    ("arg2" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3632 3649])
                    ("arg3" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3650 3667]))                  
                :type "void")
                nil [3455 3668])
            ("swap_out_buffer_local_variables" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("b" variable
                       (:pointer 1
                        :type ("buffer" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [3714 3731]))                  
                :type "void")
                nil [3669 3732])
            ("reset_buffer_local_variables" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("buffer" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [3775 3791])
                    ("" variable (:type "bool") (reparse-symbol arg-sub-list) [3792 3797]))                  
                :type "void")
                nil [3733 3798])
            ("Vbuffer_alist" variable (:type ("Lisp_Object" type (:type "class") nil nil)) nil [3984 4010])
            ("QSFundamental" variable
               (:typemodifiers ("static")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [4012 4045])
            ("alloc_buffer_text" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("buffer" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [4109 4125])
                    ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [4126 4136]))                  
                :type "void")
                nil [4078 4137])
            ("free_buffer_text" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("b" variable
                       (:pointer 1
                        :type ("buffer" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [4168 4185]))                  
                :type "void")
                nil [4138 4186])
            ("copy_overlays" function
               (:prototype-flag t
                :pointer 1
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("buffer" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [4231 4247])
                    ("" variable
                       (:pointer 1
                        :type ("Lisp_Overlay" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [4248 4270]))                  
                :type ("Lisp_Overlay" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [4187 4271])
            ("modify_overlay" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("buffer" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [4300 4316])
                    ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [4317 4327])
                    ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [4328 4338]))                  
                :type "void")
                nil [4272 4339])
            ("buffer_lisp_local_variables" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("buffer" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [4388 4404])
                    ("" variable (:type "bool") (reparse-symbol arg-sub-list) [4405 4410]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [4340 4411])
            ("CHECK_OVERLAY" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("x" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [4440 4454]))                  
                :type "void")
                nil [4413 4501])
            ("bset_abbrev_mode" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("b" variable
                       (:pointer 1
                        :type ("buffer" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [4670 4687])
                    ("val" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [4688 4704]))                  
                :type "void")
                nil [4640 4733])
            ("bset_abbrev_table" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("b" variable
                       (:pointer 1
                        :type ("buffer" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [4765 4782])
                    ("val" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [4783 4799]))                  
                :type "void")
                nil [4734 4829])
            ("bset_auto_fill_function" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("b" variable
                       (:pointer 1
                        :type ("buffer" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [4867 4884])
                    ("val" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [4885 4901]))                  
                :type "void")
                nil [4830 4937])
            ("bset_auto_save_file_format" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("b" variable
                       (:pointer 1
                        :type ("buffer" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [4978 4995])
                    ("val" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [4996 5012]))                  
                :type "void")
                nil [4938 5051])
            ("bset_auto_save_file_name" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("b" variable
                       (:pointer 1
                        :type ("buffer" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [5090 5107])
                    ("val" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [5108 5124]))                  
                :type "void")
                nil [5052 5161])
            ("bset_backed_up" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("b" variable
                       (:pointer 1
                        :type ("buffer" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [5190 5207])
                    ("val" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [5208 5224]))                  
                :type "void")
                nil [5162 5251])
            ("bset_begv_marker" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("b" variable
                       (:pointer 1
                        :type ("buffer" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [5282 5299])
                    ("val" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [5300 5316]))                  
                :type "void")
                nil [5252 5345])
            ("bset_bidi_display_reordering" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("b" variable
                       (:pointer 1
                        :type ("buffer" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [5388 5405])
                    ("val" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [5406 5422]))                  
                :type "void")
                nil [5346 5463])
            ("bset_bidi_paragraph_start_re" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("b" variable
                       (:pointer 1
                        :type ("buffer" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [5506 5523])
                    ("val" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [5524 5540]))                  
                :type "void")
                nil [5464 5581])
            ("bset_bidi_paragraph_separate_re" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("b" variable
                       (:pointer 1
                        :type ("buffer" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [5627 5644])
                    ("val" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [5645 5661]))                  
                :type "void")
                nil [5582 5705])
            ("bset_buffer_file_coding_system" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("b" variable
                       (:pointer 1
                        :type ("buffer" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [5750 5767])
                    ("val" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [5768 5784]))                  
                :type "void")
                nil [5706 5827])
            ("bset_case_fold_search" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("b" variable
                       (:pointer 1
                        :type ("buffer" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [5863 5880])
                    ("val" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [5881 5897]))                  
                :type "void")
                nil [5828 5931])
            ("bset_ctl_arrow" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("b" variable
                       (:pointer 1
                        :type ("buffer" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [5960 5977])
                    ("val" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [5978 5994]))                  
                :type "void")
                nil [5932 6021])
            ("bset_cursor_in_non_selected_windows" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("b" variable
                       (:pointer 1
                        :type ("buffer" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [6071 6088])
                    ("val" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [6089 6105]))                  
                :type "void")
                nil [6022 6153])
            ("bset_cursor_type" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("b" variable
                       (:pointer 1
                        :type ("buffer" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [6184 6201])
                    ("val" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [6202 6218]))                  
                :type "void")
                nil [6154 6247])
            ("bset_display_table" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("b" variable
                       (:pointer 1
                        :type ("buffer" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [6280 6297])
                    ("val" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [6298 6314]))                  
                :type "void")
                nil [6248 6345])
            ("bset_extra_line_spacing" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("b" variable
                       (:pointer 1
                        :type ("buffer" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [6383 6400])
                    ("val" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [6401 6417]))                  
                :type "void")
                nil [6346 6453])
            ("bset_file_format" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("b" variable
                       (:pointer 1
                        :type ("buffer" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [6484 6501])
                    ("val" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [6502 6518]))                  
                :type "void")
                nil [6454 6547])
            ("bset_file_truename" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("b" variable
                       (:pointer 1
                        :type ("buffer" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [6580 6597])
                    ("val" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [6598 6614]))                  
                :type "void")
                nil [6548 6645])
            ("bset_fringe_cursor_alist" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("b" variable
                       (:pointer 1
                        :type ("buffer" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [6684 6701])
                    ("val" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [6702 6718]))                  
                :type "void")
                nil [6646 6755])
            ("bset_fringe_indicator_alist" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("b" variable
                       (:pointer 1
                        :type ("buffer" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [6797 6814])
                    ("val" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [6815 6831]))                  
                :type "void")
                nil [6756 6871])
            ("bset_fringes_outside_margins" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("b" variable
                       (:pointer 1
                        :type ("buffer" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [6914 6931])
                    ("val" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [6932 6948]))                  
                :type "void")
                nil [6872 6989])
            ("bset_header_line_format" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("b" variable
                       (:pointer 1
                        :type ("buffer" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [7027 7044])
                    ("val" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [7045 7061]))                  
                :type "void")
                nil [6990 7097])
            ("bset_indicate_buffer_boundaries" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("b" variable
                       (:pointer 1
                        :type ("buffer" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [7143 7160])
                    ("val" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [7161 7177]))                  
                :type "void")
                nil [7098 7221])
            ("bset_indicate_empty_lines" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("b" variable
                       (:pointer 1
                        :type ("buffer" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [7261 7278])
                    ("val" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [7279 7295]))                  
                :type "void")
                nil [7222 7333])
            ("bset_invisibility_spec" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("b" variable
                       (:pointer 1
                        :type ("buffer" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [7370 7387])
                    ("val" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [7388 7404]))                  
                :type "void")
                nil [7334 7439])
            ("bset_left_fringe_width" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("b" variable
                       (:pointer 1
                        :type ("buffer" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [7476 7493])
                    ("val" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [7494 7510]))                  
                :type "void")
                nil [7440 7545])
            ("bset_major_mode" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("b" variable
                       (:pointer 1
                        :type ("buffer" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [7575 7592])
                    ("val" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [7593 7609]))                  
                :type "void")
                nil [7546 7637])
            ("bset_mark" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("b" variable
                       (:pointer 1
                        :type ("buffer" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [7661 7678])
                    ("val" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [7679 7695]))                  
                :type "void")
                nil [7638 7717])
            ("bset_minor_modes" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("b" variable
                       (:pointer 1
                        :type ("buffer" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [7748 7765])
                    ("val" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [7766 7782]))                  
                :type "void")
                nil [7718 7811])
            ("bset_mode_line_format" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("b" variable
                       (:pointer 1
                        :type ("buffer" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [7847 7864])
                    ("val" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [7865 7881]))                  
                :type "void")
                nil [7812 7915])
            ("bset_mode_name" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("b" variable
                       (:pointer 1
                        :type ("buffer" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [7944 7961])
                    ("val" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [7962 7978]))                  
                :type "void")
                nil [7916 8005])
            ("bset_name" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("b" variable
                       (:pointer 1
                        :type ("buffer" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [8029 8046])
                    ("val" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [8047 8063]))                  
                :type "void")
                nil [8006 8085])
            ("bset_overwrite_mode" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("b" variable
                       (:pointer 1
                        :type ("buffer" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [8119 8136])
                    ("val" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [8137 8153]))                  
                :type "void")
                nil [8086 8185])
            ("bset_pt_marker" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("b" variable
                       (:pointer 1
                        :type ("buffer" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [8214 8231])
                    ("val" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [8232 8248]))                  
                :type "void")
                nil [8186 8275])
            ("bset_right_fringe_width" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("b" variable
                       (:pointer 1
                        :type ("buffer" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [8313 8330])
                    ("val" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [8331 8347]))                  
                :type "void")
                nil [8276 8383])
            ("bset_save_length" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("b" variable
                       (:pointer 1
                        :type ("buffer" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [8414 8431])
                    ("val" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [8432 8448]))                  
                :type "void")
                nil [8384 8477])
            ("bset_scroll_bar_width" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("b" variable
                       (:pointer 1
                        :type ("buffer" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [8513 8530])
                    ("val" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [8531 8547]))                  
                :type "void")
                nil [8478 8581])
            ("bset_scroll_bar_height" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("b" variable
                       (:pointer 1
                        :type ("buffer" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [8618 8635])
                    ("val" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [8636 8652]))                  
                :type "void")
                nil [8582 8687])
            ("bset_scroll_down_aggressively" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("b" variable
                       (:pointer 1
                        :type ("buffer" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [8731 8748])
                    ("val" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [8749 8765]))                  
                :type "void")
                nil [8688 8807])
            ("bset_scroll_up_aggressively" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("b" variable
                       (:pointer 1
                        :type ("buffer" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [8849 8866])
                    ("val" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [8867 8883]))                  
                :type "void")
                nil [8808 8923])
            ("bset_selective_display" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("b" variable
                       (:pointer 1
                        :type ("buffer" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [8960 8977])
                    ("val" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [8978 8994]))                  
                :type "void")
                nil [8924 9029])
            ("bset_selective_display_ellipses" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("b" variable
                       (:pointer 1
                        :type ("buffer" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [9075 9092])
                    ("val" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [9093 9109]))                  
                :type "void")
                nil [9030 9153])
            ("bset_vertical_scroll_bar_type" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("b" variable
                       (:pointer 1
                        :type ("buffer" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [9197 9214])
                    ("val" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [9215 9231]))                  
                :type "void")
                nil [9154 9273])
            ("bset_horizontal_scroll_bar_type" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("b" variable
                       (:pointer 1
                        :type ("buffer" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [9319 9336])
                    ("val" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [9337 9353]))                  
                :type "void")
                nil [9274 9397])
            ("bset_word_wrap" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("b" variable
                       (:pointer 1
                        :type ("buffer" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [9426 9443])
                    ("val" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [9444 9460]))                  
                :type "void")
                nil [9398 9487])
            ("bset_zv_marker" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("b" variable
                       (:pointer 1
                        :type ("buffer" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [9516 9533])
                    ("val" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [9534 9550]))                  
                :type "void")
                nil [9488 9577])
            ("nsberror" function
               (:arguments 
                  ( ("spec" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [9594 9611]))                  
                :type "void")
                nil [9579 9722])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fbuffer_live_p" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [9749 9764])
                    ("" variable (:type ("Sbuffer_live_p" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [9765 9780])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [9797 9801]))                  
                :type "int")
                nil [9725 9961])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fbuffer_list" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [10071 10084])
                    ("" variable (:type ("Sbuffer_list" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [10085 10098])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [10115 10119]))                  
                :type "int")
                nil [10049 10368])
            ("assoc_ignore_text_properties" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("key" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [11266 11282])
                    ("list" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [11283 11300]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [11217 11506])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fget_buffer" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [11529 11541])
                    ("" variable (:type ("Sget_buffer" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [11542 11554])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [11571 11575]))                  
                :type "int")
                nil [11508 11849])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fget_file_buffer" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [12052 12069])
                    ("" variable (:type ("Sget_file_buffer" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [12070 12087])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [12104 12108]))                  
                :type "int")
                nil [12026 12359])
            ("get_truename_buffer" function
               (:arguments 
                  ( ("filename" variable
                       (:typemodifiers ("register")
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [13078 13108]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [13045 13371])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fget_buffer_create" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [13401 13420])
                    ("" variable (:type ("Sget_buffer_create" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [13421 13440])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [13457 13461]))                  
                :type "int")
                nil [13373 13965])
            ("copy_overlays" function
               (:pointer 1
                :typemodifiers ("static")
                :arguments 
                  ( ("b" variable
                       (:pointer 1
                        :type ("buffer" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [16467 16484])
                    ("list" variable
                       (:pointer 1
                        :type ("Lisp_Overlay" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [16485 16511]))                  
                :type ("Lisp_Overlay" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [16423 17248])
            ("set_buffer_overlays_before" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("b" variable
                       (:pointer 1
                        :type ("buffer" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [17331 17348])
                    ("o" variable
                       (:pointer 1
                        :type ("Lisp_Overlay" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [17349 17372]))                  
                :type "void")
                nil [17291 17402])
            ("set_buffer_overlays_after" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("b" variable
                       (:pointer 1
                        :type ("buffer" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [17443 17460])
                    ("o" variable
                       (:pointer 1
                        :type ("Lisp_Overlay" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [17461 17484]))                  
                :type "void")
                nil [17404 17513])
            ("clone_per_buffer_values" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("from" variable
                       (:pointer 1
                        :type ("buffer" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [17810 17830])
                    ("to" variable
                       (:pointer 1
                        :type ("buffer" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [17831 17849]))                  
                :type "void")
                nil [17773 18787])
            ("record_buffer_markers" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("b" variable
                       (:pointer 1
                        :type ("buffer" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [18932 18949]))                  
                :type "void")
                nil [18897 19373])
            ("fetch_buffer_markers" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("b" variable
                       (:pointer 1
                        :type ("buffer" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [19532 19549]))                  
                :type "void")
                nil [19498 20037])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fmake_indirect_buffer" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [20071 20093])
                    ("" variable (:type ("Smake_indirect_buffer" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [20094 20116])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [20211 20215]))                  
                :type "int")
                nil [20040 20697])
            ("drop_overlay" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("b" variable
                       (:pointer 1
                        :type ("buffer" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [24496 24513])
                    ("ov" variable
                       (:pointer 1
                        :type ("Lisp_Overlay" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [24514 24538]))                  
                :type "void")
                nil [24470 24758])
            ("delete_all_overlays" function
               (:arguments 
                  ( ("b" variable
                       (:pointer 1
                        :type ("buffer" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [24848 24865]))                  
                :type "void")
                nil [24822 25382])
            ("reset_buffer" function
               (:arguments 
                  ( ("b" variable
                       (:pointer 1
                        :typemodifiers ("register")
                        :type ("buffer" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [25744 25770]))                  
                :type "void")
                nil [25725 26986])
            ("reset_buffer_local_variables" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("b" variable
                       (:pointer 1
                        :type ("buffer" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [27321 27338])
                    ("permanent_too" variable (:type "bool") (reparse-symbol arg-sub-list) [27339 27358]))                  
                :type "void")
                nil [27279 31182])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fgenerate_new_buffer_name" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [31393 31419])
                    ("" variable (:type ("Sgenerate_new_buffer_name" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [31427 31453])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [31470 31474]))                  
                :type "int")
                nil [31358 32146])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fbuffer_name" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [33061 33074])
                    ("" variable (:type ("Sbuffer_name" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [33075 33088])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [33105 33109]))                  
                :type "int")
                nil [33039 33266])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fbuffer_file_name" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [33345 33363])
                    ("" variable (:type ("Sbuffer_file_name" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [33364 33382])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [33399 33403]))                  
                :type "int")
                nil [33318 33560])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fbuffer_base_buffer" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [33645 33665])
                    ("" variable (:type ("Sbuffer_base_buffer" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [33666 33686])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [33710 33714]))                  
                :type "int")
                nil [33616 33882])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fbuffer_local_value" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [34038 34058])
                    ("" variable (:type ("Sbuffer_local_value" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [34066 34086])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [34103 34107]))                  
                :type "int")
                nil [34009 34328])
            ("buffer_local_value" function
               (:arguments 
                  ( ("variable" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [34620 34641])
                    ("buffer" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [34642 34661]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [34588 36172])
            ("buffer_lisp_local_variables" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("buf" variable
                       (:pointer 1
                        :type ("buffer" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [36468 36487])
                    ("clone" variable (:type "bool") (reparse-symbol arg-sub-list) [36488 36499]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [36420 37328])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fbuffer_local_variables" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [37363 37387])
                    ("" variable (:type ("Sbuffer_local_variables" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [37395 37419])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [37436 37440]))                  
                :type "int")
                nil [37330 37820])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fbuffer_modified_p" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [38456 38475])
                    ("" variable (:type ("Sbuffer_modified_p" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [38476 38495])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [38519 38523]))                  
                :type "int")
                nil [38428 38692])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fforce_mode_line_update" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [38841 38865])
                    ("" variable (:type ("Sforce_mode_line_update" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [38873 38897])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [38914 38918]))                  
                :type "int")
                nil [38808 39179])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fset_buffer_modified_p" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [39568 39591])
                    ("" variable (:type ("Sset_buffer_modified_p" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [39592 39615])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [39639 39643]))                  
                :type "int")
                nil [39536 39784])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Frestore_buffer_modified_p" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [40548 40575])
                    ("" variable (:type ("Srestore_buffer_modified_p" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [40583 40610])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [40627 40631]))                  
                :type "int")
                nil [40512 40846])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fbuffer_modified_tick" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [42389 42411])
                    ("" variable (:type ("Sbuffer_modified_tick" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [42412 42434])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [42458 42462]))                  
                :type "int")
                nil [42358 42765])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fbuffer_chars_modified_tick" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [42868 42896])
                    ("" variable (:type ("Sbuffer_chars_modified_tick" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [42904 42932])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [42949 42953]))                  
                :type "int")
                nil [42831 43475])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Frename_buffer" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [43572 43587])
                    ("" variable (:type ("Srename_buffer" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [43588 43603])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [43775 43779]))                  
                :type "int")
                nil [43548 44235])
            ("candidate_buffer" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("b" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [45710 45724])
                    ("buffer" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [45725 45744]))                  
                :type "bool")
                nil [45680 45862])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fother_buffer" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [45887 45901])
                    ("" variable (:type ("Sother_buffer" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [45902 45916])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [45933 45937]))                  
                :type "int")
                nil [45864 46598])
            ("other_buffer_safely" function
               (:arguments 
                  ( ("buffer" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [48196 48215]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [48163 48531])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fbuffer_enable_undo" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [48563 48583])
                    ("" variable (:type ("Sbuffer_enable_undo" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [48584 48604])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [48629 48633]))                  
                :type "int")
                nil [48534 48792])
            ("compact_buffer" function
               (:arguments 
                  ( ("buffer" variable
                       (:pointer 1
                        :type ("buffer" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [49205 49227]))                  
                :type "void")
                nil [49184 50364])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fkill_buffer" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [50388 50401])
                    ("" variable (:type ("Skill_buffer" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [50402 50415])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [50447 50451]))                  
                :type "int")
                nil [50366 51315])
            ("record_buffer" function
               (:arguments 
                  ( ("buffer" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [59408 59427]))                  
                :type "void")
                nil [59388 60288])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fbury_buffer_internal" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [60667 60689])
                    ("" variable (:type ("Sbury_buffer_internal" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [60690 60712])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [60736 60740]))                  
                :type "int")
                nil [60636 60814])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fset_buffer_major_mode" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [61745 61768])
                    ("" variable (:type ("Sset_buffer_major_mode" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [61769 61792])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [61809 61813]))                  
                :type "int")
                nil [61713 62119])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fcurrent_buffer" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [63146 63162])
                    ("" variable (:type ("Scurrent_buffer" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [63163 63179])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [63196 63200]))                  
                :type "int")
                nil [63121 63261])
            ("set_buffer_internal_1" function
               (:arguments 
                  ( ("b" variable
                       (:pointer 1
                        :typemodifiers ("register")
                        :type ("buffer" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [63483 63509]))                  
                :type "void")
                nil [63455 63705])
            ("set_buffer_internal_2" function
               (:arguments 
                  ( ("b" variable
                       (:pointer 1
                        :typemodifiers ("register")
                        :type ("buffer" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [63908 63934]))                  
                :type "void")
                nil [63880 65577])
            ("set_buffer_temp" function
               (:arguments 
                  ( ("b" variable
                       (:pointer 1
                        :type ("buffer" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [65739 65756]))                  
                :type "void")
                nil [65717 66188])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fset_buffer" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [66211 66223])
                    ("" variable (:type ("Sset_buffer" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [66224 66236])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [66253 66257]))                  
                :type "int")
                nil [66190 66732])
            ("restore_buffer" function
               (:arguments 
                  ( ("buffer_or_name" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [67023 67050]))                  
                :type "void")
                nil [67002 67086])
            ("set_buffer_if_live" function
               (:arguments 
                  ( ("buffer" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [67179 67198]))                  
                :type "void")
                nil [67154 67286])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fbarf_if_buffer_read_only" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [67324 67350])
                    ("" variable (:type ("Sbarf_if_buffer_read_only" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [67358 67384])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [67401 67405]))                  
                :type "int")
                nil [67289 67638])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Ferase_buffer" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [67984 67998])
                    ("" variable (:type ("Serase_buffer" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [67999 68013])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [68032 68036]))                  
                :type "int")
                nil [67961 68217])
            ("validate_region" function
               (:arguments 
                  ( ("b" variable
                       (:pointer 1
                        :typemodifiers ("register")
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [68607 68631])
                    ("e" variable
                       (:pointer 1
                        :typemodifiers ("register")
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [68632 68656]))                  
                :type "void")
                nil [68585 68935])
            ("advance_to_char_boundary" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("byte_pos" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [69070 69089]))                  
                :type ("ptrdiff_t" type (:type "class") nil nil))
                nil [69027 69817])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fbuffer_swap_text" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [69846 69864])
                    ("" variable (:type ("Sbuffer_swap_text" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [69865 69883])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [69907 69911]))                  
                :type "int")
                nil [69819 70105])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fset_buffer_multibyte" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [76113 76135])
                    ("" variable (:type ("Sset_buffer_multibyte" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [76136 76158])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [76182 76186]))                  
                :type "int")
                nil [76082 76718])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fkill_all_local_variables" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [84093 84119])
                    ("" variable (:type ("Skill_all_local_variables" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [84127 84153])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [84170 84174]))                  
                :type "int")
                nil [84058 84861])
            ("swap_out_buffer_local_variables" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("b" variable
                       (:pointer 1
                        :type ("buffer" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [85465 85482]))                  
                :type "void")
                nil [85420 86037])
            ("overlays_at" function
               (:arguments 
                  ( ("pos" variable (:type ("EMACS_INT" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [87105 87119])
                    ("extend" variable (:type "bool") (reparse-symbol arg-sub-list) [87120 87132])
                    ("vec_ptr" variable
                       (:pointer 2
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [87133 87155])
                    ("len_ptr" variable
                       (:pointer 1
                        :type ("ptrdiff_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [87162 87181])
                    ("next_ptr" variable
                       (:pointer 1
                        :type ("ptrdiff_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [87188 87208])
                    ("prev_ptr" variable
                       (:pointer 1
                        :type ("ptrdiff_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [87209 87229])
                    ("change_req" variable (:type "bool") (reparse-symbol arg-sub-list) [87230 87246]))                  
                :type ("ptrdiff_t" type (:type "class") nil nil))
                nil [87082 89602])
            ("overlays_in" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("beg" variable (:type ("EMACS_INT" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [90555 90569])
                    ("end" variable (:type ("EMACS_INT" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [90570 90584])
                    ("extend" variable (:type "bool") (reparse-symbol arg-sub-list) [90585 90597])
                    ("vec_ptr" variable
                       (:pointer 2
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [90604 90626])
                    ("len_ptr" variable
                       (:pointer 1
                        :type ("ptrdiff_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [90627 90646])
                    ("next_ptr" variable
                       (:pointer 1
                        :type ("ptrdiff_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [90653 90673])
                    ("prev_ptr" variable
                       (:pointer 1
                        :type ("ptrdiff_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [90674 90694]))                  
                :type ("ptrdiff_t" type (:type "class") nil nil))
                nil [90525 93241])
            ("mouse_face_overlay_overlaps" function
               (:arguments 
                  ( ("overlay" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [93386 93406]))                  
                :type "bool")
                nil [93352 94003])
            ("disable_line_numbers_overlay_at_eob" function
               (:arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [94203 94208]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [94154 94666])
            ("overlay_touches_p" function
               (:arguments 
                  ( ("pos" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [94761 94775]))                  
                :type "bool")
                nil [94737 95564])
            ("sortvec" type
               (:members 
                  ( ("overlay" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [95586 95606])
                    ("beg" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [95609 95628])
                    ("end" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [95609 95628])
                    ("priority" variable (:type ("EMACS_INT" type (:type "class") nil nil)) (reparse-symbol classsubparts) [95631 95650])
                    ("spriority" variable (:type ("EMACS_INT" type (:type "class") nil nil)) (reparse-symbol classsubparts) [95653 95673]))                  
                :type "struct")
                nil [95567 95704])
            ("compare_overlays" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("v1" variable
                       (:pointer 1
                        :constant-flag t
                        :type "void")
                        (reparse-symbol arg-sub-list) [95735 95750])
                    ("v2" variable
                       (:pointer 1
                        :constant-flag t
                        :type "void")
                        (reparse-symbol arg-sub-list) [95751 95766]))                  
                :type "int")
                nil [95706 96914])
            ("sort_overlays" function
               (:arguments 
                  ( ("overlay_vec" variable
                       (:pointer 1
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [97165 97190])
                    ("noverlays" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [97191 97211])
                    ("w" variable
                       (:pointer 1
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [97212 97229]))                  
                :type ("ptrdiff_t" type (:type "class") nil nil))
                nil [97140 98990])
            ("sortstr" type
               (:members 
                  ( ("string" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [99012 99040])
                    ("string2" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [99012 99040])
                    ("size" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [99043 99058])
                    ("priority" variable (:type ("EMACS_INT" type (:type "class") nil nil)) (reparse-symbol classsubparts) [99061 99080]))                  
                :type "struct")
                nil [98993 99083])
            ("sortstrlist" type
               (:members 
                  ( ("buf" variable
                       (:pointer 1
                        :type ("sortstr" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol classsubparts) [99108 99128])
                    ("size" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [99184 99199])
                    ("used" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [99241 99256])
                    ("bytes" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol classsubparts) [99309 99325]))                  
                :type "struct")
                nil [99085 99371])
            ("overlay_heads" variable
               (:typemodifiers ("static")
                :type ("sortstrlist" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [99620 99675])
            ("overlay_tails" variable
               (:typemodifiers ("static")
                :type ("sortstrlist" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [99620 99675])
            ("overlay_str_buf" variable
               (:pointer 1
                :typemodifiers ("static")
                :type "unsigned char")
                nil [99676 99714])
            ("overlay_str_len" variable
               (:typemodifiers ("static")
                :type ("ptrdiff_t" type (:type "class") nil nil))
                nil [99760 99793])
            ("cmp_for_strings" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("as1" variable
                       (:pointer 1
                        :constant-flag t
                        :type "void")
                        (reparse-symbol arg-sub-list) [99883 99899])
                    ("as2" variable
                       (:pointer 1
                        :constant-flag t
                        :type "void")
                        (reparse-symbol arg-sub-list) [99900 99916]))                  
                :type "int")
                nil [99855 100154])
            ("record_overlay_string" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("ssl" variable
                       (:pointer 1
                        :type ("sortstrlist" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [100191 100215])
                    ("str" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [100216 100232])
                    ("str2" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [100242 100259])
                    ("pri" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [100260 100276])
                    ("size" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [100277 100292]))                  
                :type "void")
                nil [100156 101341])
            ("overlay_strings" function
               (:arguments 
                  ( ("pos" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [102063 102077])
                    ("w" variable
                       (:pointer 1
                        :type ("window" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [102078 102095])
                    ("pstr" variable
                       (:pointer 2
                        :type "unsigned char")
                        (reparse-symbol arg-sub-list) [102096 102117]))                  
                :type ("ptrdiff_t" type (:type "class") nil nil))
                nil [102036 105840])
            ("recenter_overlay_lists" function
               (:arguments 
                  ( ("buf" variable
                       (:pointer 1
                        :type ("buffer" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [105947 105966])
                    ("pos" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [105967 105981]))                  
                :type "void")
                nil [105918 109121])
            ("adjust_overlays_for_insert" function
               (:arguments 
                  ( ("pos" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [109156 109170])
                    ("length" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [109171 109188]))                  
                :type "void")
                nil [109123 109413])
            ("adjust_overlays_for_delete" function
               (:arguments 
                  ( ("pos" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [109448 109462])
                    ("length" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [109463 109480]))                  
                :type "void")
                nil [109415 110185])
            ("fix_start_end_in_overlays" function
               (:arguments 
                  ( ("start" variable
                       (:typemodifiers ("register")
                        :type ("ptrdiff_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [110574 110599])
                    ("end" variable
                       (:typemodifiers ("register")
                        :type ("ptrdiff_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [110600 110623]))                  
                :type "void")
                nil [110542 114203])
            ("fix_overlays_before" function
               (:arguments 
                  ( ("bp" variable
                       (:pointer 1
                        :type ("buffer" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [114857 114875])
                    ("prev" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [114876 114891])
                    ("pos" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [114892 114906]))                  
                :type "void")
                nil [114831 117227])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Foverlayp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [117249 117259])
                    ("" variable (:type ("Soverlayp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [117260 117270])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [117287 117291]))                  
                :type "int")
                nil [117230 117356])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fmake_overlay" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [117427 117441])
                    ("" variable (:type ("Smake_overlay" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [117442 117456])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [117473 117477]))                  
                :type "int")
                nil [117404 118114])
            ("modify_overlay" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("buf" variable
                       (:pointer 1
                        :type ("buffer" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [119890 119909])
                    ("start" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [119910 119926])
                    ("end" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [119927 119941]))                  
                :type "void")
                nil [119862 120143])
            ("unchain_overlay" function
               (:pointer 1
                :typemodifiers ("static")
                :arguments 
                  ( ("list" variable
                       (:pointer 1
                        :type ("Lisp_Overlay" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [120225 120251])
                    ("overlay" variable
                       (:pointer 1
                        :type ("Lisp_Overlay" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [120252 120281]))                  
                :type ("Lisp_Overlay" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [120179 120511])
            ("unchain_both" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("b" variable
                       (:pointer 1
                        :type ("buffer" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [120592 120609])
                    ("overlay" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [120610 120630]))                  
                :type "void")
                nil [120566 120879])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fmove_overlay" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [120904 120918])
                    ("" variable (:type ("Smove_overlay" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [120919 120933])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [120950 120954]))                  
                :type "int")
                nil [120881 121248])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fdelete_overlay" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [124095 124111])
                    ("" variable (:type ("Sdelete_overlay" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [124112 124128])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [124145 124149]))                  
                :type "int")
                nil [124070 124225])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fdelete_all_overlays" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [125077 125098])
                    ("" variable (:type ("Sdelete_all_overlays" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [125099 125120])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [125137 125141]))                  
                :type "int")
                nil [125047 125274])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Foverlay_start" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [125406 125421])
                    ("" variable (:type ("Soverlay_start" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [125422 125437])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [125454 125458]))                  
                :type "int")
                nil [125382 125535])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Foverlay_end" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [125646 125659])
                    ("" variable (:type ("Soverlay_end" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [125660 125673])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [125690 125694]))                  
                :type "int")
                nil [125624 125769])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Foverlay_buffer" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [125881 125897])
                    ("" variable (:type ("Soverlay_buffer" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [125898 125914])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [125931 125935]))                  
                :type "int")
                nil [125856 126045])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Foverlay_properties" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [126159 126179])
                    ("" variable (:type ("Soverlay_properties" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [126180 126200])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [126217 126221]))                  
                :type "int")
                nil [126130 126379])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Foverlays_at" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [126490 126503])
                    ("" variable (:type ("Soverlays_at" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [126504 126517])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [126534 126538]))                  
                :type "int")
                nil [126468 126712])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Foverlays_in" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [127712 127725])
                    ("" variable (:type ("Soverlays_in" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [127726 127739])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [127756 127760]))                  
                :type "int")
                nil [127690 128155])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fnext_overlay_change" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [128766 128787])
                    ("" variable (:type ("Snext_overlay_change" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [128788 128809])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [128833 128837]))                  
                :type "int")
                nil [128736 129019])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fprevious_overlay_change" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [129916 129941])
                    ("" variable (:type ("Sprevious_overlay_change" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [129949 129974])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [129991 129995]))                  
                :type "int")
                nil [129882 130182])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Foverlay_lists" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [130912 130927])
                    ("" variable (:type ("Soverlay_lists" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [130928 130943])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [130960 130964]))                  
                :type "int")
                nil [130888 131359])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Foverlay_recenter" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [131798 131816])
                    ("" variable (:type ("Soverlay_recenter" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [131817 131835])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [131852 131856]))                  
                :type "int")
                nil [131771 132059])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Foverlay_get" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [132262 132275])
                    ("" variable (:type ("Soverlay_get" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [132276 132289])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [132306 132310]))                  
                :type "int")
                nil [132240 132421])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Foverlay_put" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [132544 132557])
                    ("" variable (:type ("Soverlay_put" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [132558 132571])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [132588 132592]))                  
                :type "int")
                nil [132522 132752])
            ("last_overlay_modification_hooks" variable
               (:typemodifiers ("static")
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [134210 134261])
            ("last_overlay_modification_hooks_used" variable
               (:typemodifiers ("static")
                :type ("ptrdiff_t" type (:type "class") nil nil))
                nil [134339 134393])
            ("add_overlay_mod_hooklist" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("functionlist" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [134525 134550])
                    ("overlay" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [134551 134571]))                  
                :type "void")
                nil [134487 135068])
            ("report_overlay_modification" function
               (:arguments 
                  ( ("start" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [135693 135711])
                    ("end" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [135712 135728])
                    ("after" variable (:type "bool") (reparse-symbol arg-sub-list) [135729 135740])
                    ("arg1" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [135749 135766])
                    ("arg2" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [135767 135784])
                    ("arg3" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [135785 135802]))                  
                :type "void")
                nil [135659 140325])
            ("call_overlay_mod_hooks" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("list" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [140363 140380])
                    ("overlay" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [140381 140401])
                    ("after" variable (:type "bool") (reparse-symbol arg-sub-list) [140402 140413])
                    ("arg1" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [140417 140434])
                    ("arg2" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [140435 140452])
                    ("arg3" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [140453 140470]))                  
                :type "void")
                nil [140327 140699])
            ("evaporate_overlays" function
               (:arguments 
                  ( ("pos" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [140820 140834]))                  
                :type "void")
                nil [140795 141839])
            ("alloc_buffer_text" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("b" variable
                       (:pointer 1
                        :type ("buffer" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [150770 150787])
                    ("nbytes" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [150788 150805]))                  
                :type "void")
                nil [150739 151157])
            ("enlarge_buffer_text" function
               (:arguments 
                  ( ("b" variable
                       (:pointer 1
                        :type ("buffer" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [151271 151288])
                    ("delta" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [151289 151305]))                  
                :type "void")
                nil [151245 151777])
            ("free_buffer_text" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("b" variable
                       (:pointer 1
                        :type ("buffer" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [151847 151864]))                  
                :type "void")
                nil [151817 152110])
            ("init_buffer_once" function
               (:arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [152308 152313]))                  
                :type "void")
                nil [152285 163211])
            ("init_buffer" function
               (:arguments 
                  ( ("initialized" variable (:type "int") (reparse-symbol arg-sub-list) [163231 163247]))                  
                :type "void")
                nil [163213 166667])
            ("DEFVAR_PER_BUFFER" variable (:constant-flag t) nil [167119 167136])
            ("defvar_per_buffer" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("bo_fwd" variable
                       (:pointer 1
                        :type ("Lisp_Buffer_Objfwd" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [167341 167375])
                    ("namestring" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [167376 167399])
                    ("address" variable
                       (:pointer 1
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [167405 167426])
                    ("predicate" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [167427 167449]))                  
                :type "void")
                nil [167310 168016])
            ("syms_of_buffer" function
               (:arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [168079 168084]))                  
                :type "void")
                nil [168058 208661])
            ("keys_of_buffer" function
               (:arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [208684 208689]))                  
                :type "void")
                nil [208663 208814]))          
      :file "buffer.c"
      :pointmax 208815
      :fsize 208814
      :lastmodtime '(22986 14551 0 0)
      :unmatched-syntax nil
      :lexical-table 
        '(("swapfield_" (spp-arg-list ("field" "type") 71133 . 71146) . 
              ((DO "do" 71151 . 71153) (semantic-list "{							\\
    type tmp##field = BVAR (other_buffer, field);		\\
    bset_##field (other_buffer, BVAR (current_buffer, field));	\\
    bset_##field (current_buffer, tmp##field);			\\
  }" 71154 . 71336) (WHILE "while" 71337 . 71342) (semantic-list "(0)" 71343 . 71346)))
          ("OVERLAY_COUNT_MAX" . ((semantic-list "((ptrdiff_t) min (MOST_POSITIVE_FIXNUM,				\\
		    min (PTRDIFF_MAX, SIZE_MAX) / word_size))" 3139 . 3231)))
          ("swapfield" (spp-arg-list ("field" "type") 70929 . 70942) . 
              ((DO "do" 70947 . 70949) (semantic-list "{							\\
    type tmp##field = other_buffer->field;		\\
    other_buffer->field = current_buffer->field;	\\
    current_buffer->field = tmp##field;			\\
  }" 70950 . 71104) (WHILE "while" 71105 . 71110) (semantic-list "(0)" 71111 . 71114)))
          ("DEFVAR_PER_BUFFER" (spp-arg-list ("lname" "vname" "predicate" "doc") 167136 . 167166) . 
              ((DO "do" 167172 . 167174) (semantic-list "{								\\
    static struct Lisp_Buffer_Objfwd bo_fwd;			\\
    defvar_per_buffer (&bo_fwd, lname, vname, predicate);	\\
  }" 167175 . 167298) (WHILE "while" 167299 . 167304) (semantic-list "(0)" 167305 . 167308)))
          ("PER_BUFFER_SYMBOL" (spp-arg-list ("OFFSET") 2980 . 2988) . ((semantic-list "(*(Lisp_Object *)((OFFSET) + (char *) &buffer_local_symbols))" 2997 . 3058)))
          )
)
    (semanticdb-table "semanticdb-table"
      :file "region-cache.h"
      :fsize 5279
      :lastmodtime '(22986 14552 0 0))
    (semanticdb-table "semanticdb-table"
      :file "indent.h"
      :fsize 2172
      :lastmodtime '(22986 14551 0 0))
    (semanticdb-table "semanticdb-table"
      :major-mode c-mode
      :tags 
        '( ("config.h" include (:system-flag t) nil [809 828])
            ("math.h" include (:system-flag t) nil [830 847])
            ("stdio.h" include (:system-flag t) nil [848 866])
            ("byteswap.h" include (:system-flag t) nil [868 889])
            ("count-one-bits.h" include (:system-flag t) nil [890 917])
            ("count-trailing-zeros.h" include (:system-flag t) nil [918 951])
            ("intprops.h" include (:system-flag t) nil [952 973])
            ("lisp.h" include nil nil [975 992])
            ("puresize.h" include nil nil [993 1014])
            ("character.h" include nil nil [1015 1037])
            ("buffer.h" include nil nil [1038 1057])
            ("keyboard.h" include nil nil [1058 1079])
            ("process.h" include nil nil [1080 1100])
            ("frame.h" include nil nil [1101 1119])
            ("keymap.h" include nil nil [1120 1139])
            ("swap_in_symval_forwarding" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable
                       (:pointer 1
                        :type ("Lisp_Symbol" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [1180 1201])
                    ("" variable
                       (:pointer 1
                        :type ("Lisp_Buffer_Local_Value" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [1213 1246]))                  
                :type "void")
                nil [1141 1247])
            ("BOOLFWDP" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("a" variable
                       (:pointer 1
                        :type ("Lisp_Fwd" type (:type "union") nil nil))
                        (reparse-symbol arg-sub-list) [1271 1289]))                  
                :type "bool")
                nil [1249 1333])
            ("INTFWDP" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("a" variable
                       (:pointer 1
                        :type ("Lisp_Fwd" type (:type "union") nil nil))
                        (reparse-symbol arg-sub-list) [1355 1373]))                  
                :type "bool")
                nil [1334 1416])
            ("KBOARD_OBJFWDP" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("a" variable
                       (:pointer 1
                        :type ("Lisp_Fwd" type (:type "union") nil nil))
                        (reparse-symbol arg-sub-list) [1445 1463]))                  
                :type "bool")
                nil [1417 1513])
            ("OBJFWDP" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("a" variable
                       (:pointer 1
                        :type ("Lisp_Fwd" type (:type "union") nil nil))
                        (reparse-symbol arg-sub-list) [1535 1553]))                  
                :type "bool")
                nil [1514 1596])
            ("XBOOLFWD" function
               (:pointer 1
                :typemodifiers ("static")
                :arguments 
                  ( ("a" variable
                       (:pointer 1
                        :type ("Lisp_Fwd" type (:type "union") nil nil))
                        (reparse-symbol arg-sub-list) [1637 1655]))                  
                :type ("Lisp_Boolfwd" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [1598 1709])
            ("XKBOARD_OBJFWD" function
               (:pointer 1
                :typemodifiers ("static")
                :arguments 
                  ( ("a" variable
                       (:pointer 1
                        :type ("Lisp_Fwd" type (:type "union") nil nil))
                        (reparse-symbol arg-sub-list) [1761 1779]))                  
                :type ("Lisp_Kboard_Objfwd" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [1710 1845])
            ("XINTFWD" function
               (:pointer 1
                :typemodifiers ("static")
                :arguments 
                  ( ("a" variable
                       (:pointer 1
                        :type ("Lisp_Fwd" type (:type "union") nil nil))
                        (reparse-symbol arg-sub-list) [1883 1901]))                  
                :type ("Lisp_Intfwd" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [1846 1953])
            ("XOBJFWD" function
               (:pointer 1
                :typemodifiers ("static")
                :arguments 
                  ( ("a" variable
                       (:pointer 1
                        :type ("Lisp_Fwd" type (:type "union") nil nil))
                        (reparse-symbol arg-sub-list) [1991 2009]))                  
                :type ("Lisp_Objfwd" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [1954 2061])
            ("CHECK_SUBR" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("x" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2087 2101]))                  
                :type "void")
                nil [2063 2142])
            ("set_blv_found" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("blv" variable
                       (:pointer 1
                        :type ("Lisp_Buffer_Local_Value" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [2171 2207])
                    ("found" variable (:type "int") (reparse-symbol arg-sub-list) [2208 2218]))                  
                :type "void")
                nil [2144 2299])
            ("blv_value" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("blv" variable
                       (:pointer 1
                        :type ("Lisp_Buffer_Local_Value" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [2331 2367]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [2301 2401])
            ("set_blv_value" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("blv" variable
                       (:pointer 1
                        :type ("Lisp_Buffer_Local_Value" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [2430 2466])
                    ("val" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2467 2483]))                  
                :type "void")
                nil [2403 2518])
            ("set_blv_where" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("blv" variable
                       (:pointer 1
                        :type ("Lisp_Buffer_Local_Value" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [2547 2583])
                    ("val" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2584 2600]))                  
                :type "void")
                nil [2520 2624])
            ("set_blv_defcell" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("blv" variable
                       (:pointer 1
                        :type ("Lisp_Buffer_Local_Value" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [2655 2691])
                    ("val" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2692 2708]))                  
                :type "void")
                nil [2626 2734])
            ("set_blv_valcell" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("blv" variable
                       (:pointer 1
                        :type ("Lisp_Buffer_Local_Value" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [2765 2801])
                    ("val" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2802 2818]))                  
                :type "void")
                nil [2736 2844])
            ("wrong_length_argument" function
               (:arguments 
                  ( ("a1" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2891 2906])
                    ("a2" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2907 2922])
                    ("a3" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2923 2938]))                  
                :type "void")
                nil [2863 3234])
            ("wrong_type_argument" function
               (:arguments 
                  ( ("predicate" variable
                       (:typemodifiers ("register")
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [3272 3303])
                    ("value" variable
                       (:typemodifiers ("register")
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [3304 3331]))                  
                :type "void")
                nil [3246 3721])
            ("pure_write_error" function
               (:arguments 
                  ( ("obj" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3746 3762]))                  
                :type "void")
                nil [3723 3845])
            ("args_out_of_range" function
               (:arguments 
                  ( ("a1" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3871 3886])
                    ("a2" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3887 3902]))                  
                :type "void")
                nil [3847 3947])
            ("args_out_of_range_3" function
               (:arguments 
                  ( ("a1" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3975 3990])
                    ("a2" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3991 4006])
                    ("a3" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [4007 4022]))                  
                :type "void")
                nil [3949 4071])
            ("circular_list" function
               (:arguments 
                  ( ("list" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [4093 4110]))                  
                :type "void")
                nil [4073 4149])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Feq" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [4196 4200])
                    ("" variable (:type ("Seq" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [4201 4205])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [4222 4226])
                    ("" variable (:type ("attributes" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [4292 4303]))                  
                :type "int")
                nil [4183 4349])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fnull" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [4423 4429])
                    ("" variable (:type ("Snull" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [4430 4436])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [4453 4457])
                    ("" variable (:type ("attributes" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [4525 4536]))                  
                :type "int")
                nil [4408 4566])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Ftype_of" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [4641 4650])
                    ("" variable (:type ("Stype_of" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [4651 4660])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [4677 4681]))                  
                :type "int")
                nil [4623 4856])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fconsp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [7124 7131])
                    ("" variable (:type ("Sconsp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [7132 7139])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [7156 7160])
                    ("" variable (:type ("attributes" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [7210 7221]))                  
                :type "int")
                nil [7108 7251])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fatom" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [7324 7330])
                    ("" variable (:type ("Satom" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [7331 7337])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [7354 7358])
                    ("" variable (:type ("attributes" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [7432 7443]))                  
                :type "int")
                nil [7309 7473])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Flistp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [7547 7554])
                    ("" variable (:type ("Slistp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [7555 7562])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [7579 7583])
                    ("" variable (:type ("attributes" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [7680 7691]))                  
                :type "int")
                nil [7531 7721])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fnlistp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [7813 7821])
                    ("" variable (:type ("Snlistp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [7822 7830])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [7847 7851])
                    ("" variable (:type ("attributes" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [7920 7931]))                  
                :type "int")
                nil [7796 7961])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fsymbolp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [8055 8064])
                    ("" variable (:type ("Ssymbolp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [8065 8074])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [8091 8095])
                    ("" variable (:type ("attributes" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [8142 8153]))                  
                :type "int")
                nil [8037 8183])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fkeywordp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [8340 8350])
                    ("" variable (:type ("Skeywordp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [8351 8361])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [8378 8382]))                  
                :type "int")
                nil [8321 8547])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fvectorp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [8727 8736])
                    ("" variable (:type ("Svectorp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [8737 8746])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [8763 8767]))                  
                :type "int")
                nil [8709 8830])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Frecordp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [8908 8917])
                    ("" variable (:type ("Srecordp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [8918 8927])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [8944 8948]))                  
                :type "int")
                nil [8890 9011])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fstringp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [9089 9098])
                    ("" variable (:type ("Sstringp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [9099 9108])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [9125 9129])
                    ("" variable (:type ("attributes" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [9176 9187]))                  
                :type "int")
                nil [9071 9217])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fmultibyte_string_p" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [9306 9326])
                    ("" variable (:type ("Smultibyte_string_p" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [9327 9347])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [9371 9375]))                  
                :type "int")
                nil [9277 9514])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fchar_table_p" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [9626 9640])
                    ("" variable (:type ("Schar_table_p" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [9641 9655])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [9672 9676]))                  
                :type "int")
                nil [9603 9743])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fvector_or_char_table_p" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [9841 9865])
                    ("" variable (:type ("Svector_or_char_table_p" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [9873 9897])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [9914 9918]))                  
                :type "int")
                nil [9808 9995])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fbool_vector_p" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [10104 10119])
                    ("" variable (:type ("Sbool_vector_p" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [10120 10135])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [10152 10156]))                  
                :type "int")
                nil [10080 10224])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Farrayp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [10307 10315])
                    ("" variable (:type ("Sarrayp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [10316 10324])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [10341 10345]))                  
                :type "int")
                nil [10290 10427])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fsequencep" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [10506 10517])
                    ("" variable (:type ("Ssequencep" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [10518 10529])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [10546 10550]))                  
                :type "int")
                nil [10486 10640])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fbufferp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [10752 10761])
                    ("" variable (:type ("Sbufferp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [10762 10771])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [10788 10792]))                  
                :type "int")
                nil [10734 10863])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fmarkerp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [10941 10950])
                    ("" variable (:type ("Smarkerp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [10951 10960])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [10977 10981]))                  
                :type "int")
                nil [10923 11061])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fsubrp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [11369 11376])
                    ("" variable (:type ("Ssubrp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [11377 11384])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [11401 11405]))                  
                :type "int")
                nil [11353 11479])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fbyte_code_function_p" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [11568 11590])
                    ("" variable (:type ("Sbyte_code_function_p" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [11591 11613])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [11637 11641]))                  
                :type "int")
                nil [11537 11727])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fmodule_function_p" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [11817 11836])
                    ("" variable (:type ("Smodule_function_p" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [11837 11856])
                    ("" variable (:type ("NULL" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [11863 11868])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [11876 11880])
                    ("" variable (:type ("attributes" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [11958 11969]))                  
                :type "int")
                nil [11789 11999])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fchar_or_string_p" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [12080 12098])
                    ("" variable (:type ("Schar_or_string_p" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [12099 12117])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [12134 12138])
                    ("" variable (:type ("attributes" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [12200 12211]))                  
                :type "int")
                nil [12053 12250])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fintegerp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [12353 12363])
                    ("" variable (:type ("Sintegerp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [12364 12374])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [12391 12395])
                    ("" variable (:type ("attributes" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [12444 12455]))                  
                :type "int")
                nil [12334 12485])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Finteger_or_marker_p" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [12576 12597])
                    ("" variable (:type ("Sinteger_or_marker_p" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [12598 12619])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [12636 12640]))                  
                :type "int")
                nil [12546 12743])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fnatnump" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [12842 12851])
                    ("" variable (:type ("Snatnump" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [12852 12861])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [12878 12882])
                    ("" variable (:type ("attributes" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [12942 12953]))                  
                :type "int")
                nil [12824 12983])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fnumberp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [13061 13070])
                    ("" variable (:type ("Snumberp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [13071 13080])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [13097 13101])
                    ("" variable (:type ("attributes" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [13176 13187]))                  
                :type "int")
                nil [13043 13217])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fnumber_or_marker_p" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [13315 13335])
                    ("" variable (:type ("Snumber_or_marker_p" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [13343 13363])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [13380 13384]))                  
                :type "int")
                nil [13286 13459])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Ffloatp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [13556 13564])
                    ("" variable (:type ("Sfloatp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [13565 13573])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [13590 13594])
                    ("" variable (:type ("attributes" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [13656 13667]))                  
                :type "int")
                nil [13539 13697])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fthreadp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [13774 13783])
                    ("" variable (:type ("Sthreadp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [13784 13793])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [13810 13814]))                  
                :type "int")
                nil [13756 13877])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fmutexp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [13954 13962])
                    ("" variable (:type ("Smutexp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [13963 13971])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [13988 13992]))                  
                :type "int")
                nil [13937 14054])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fcondition_variable_p" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [14144 14166])
                    ("" variable (:type ("Scondition_variable_p" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [14167 14189])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [14213 14217]))                  
                :type "int")
                nil [14113 14292])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fcar" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [14413 14418])
                    ("" variable (:type ("Scar" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [14419 14424])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [14441 14445]))                  
                :type "int")
                nil [14399 14723])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fcar_safe" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [14769 14779])
                    ("" variable (:type ("Scar_safe" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [14780 14790])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [14807 14811]))                  
                :type "int")
                nil [14750 14902])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fcdr" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [14950 14955])
                    ("" variable (:type ("Scdr" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [14956 14961])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [14978 14982]))                  
                :type "int")
                nil [14936 15260])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fcdr_safe" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [15306 15316])
                    ("" variable (:type ("Scdr_safe" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [15317 15327])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [15344 15348]))                  
                :type "int")
                nil [15287 15439])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fsetcar" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [15490 15498])
                    ("" variable (:type ("Ssetcar" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [15499 15507])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [15524 15528]))                  
                :type "int")
                nil [15473 15637])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fsetcdr" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [15761 15769])
                    ("" variable (:type ("Ssetcdr" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [15770 15778])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [15795 15799]))                  
                :type "int")
                nil [15744 15908])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fboundp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [16080 16088])
                    ("" variable (:type ("Sboundp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [16089 16097])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [16114 16118]))                  
                :type "int")
                nil [16063 16305])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Ffboundp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [17419 17428])
                    ("" variable (:type ("Sfboundp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [17429 17438])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [17455 17459]))                  
                :type "int")
                nil [17401 17553])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fmakunbound" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [17661 17673])
                    ("" variable (:type ("Smakunbound" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [17674 17686])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [17703 17707]))                  
                :type "int")
                nil [17640 17791])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Ffmakunbound" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [17964 17977])
                    ("" variable (:type ("Sfmakunbound" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [17978 17991])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [18008 18012]))                  
                :type "int")
                nil [17942 18109])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fsymbol_function" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [18303 18320])
                    ("" variable (:type ("Ssymbol_function" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [18321 18338])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [18355 18359]))                  
                :type "int")
                nil [18277 18460])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fsymbol_plist" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [18551 18565])
                    ("" variable (:type ("Ssymbol_plist" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [18566 18580])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [18597 18601]))                  
                :type "int")
                nil [18528 18672])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fsymbol_name" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [18759 18772])
                    ("" variable (:type ("Ssymbol_name" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [18773 18786])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [18803 18807]))                  
                :type "int")
                nil [18737 18879])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Ffset" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [19001 19007])
                    ("" variable (:type ("Sfset" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [19008 19014])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [19031 19035]))                  
                :type "int")
                nil [18986 19170])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fdefalias" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [19892 19902])
                    ("" variable (:type ("Sdefalias" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [19903 19913])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [19930 19934]))                  
                :type "int")
                nil [19873 20467])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fsetplist" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [21658 21668])
                    ("" variable (:type ("Ssetplist" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [21669 21679])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [21696 21700]))                  
                :type "int")
                nil [21639 21823])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fsubr_arity" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [21933 21945])
                    ("" variable (:type ("Ssubr_arity" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [21946 21958])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [21975 21979]))                  
                :type "int")
                nil [21912 22298])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fsubr_name" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [22604 22615])
                    ("" variable (:type ("Ssubr_name" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [22616 22627])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [22644 22648]))                  
                :type "int")
                nil [22584 22743])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Finteractive_form" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [22883 22901])
                    ("" variable (:type ("Sinteractive_form" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [22902 22920])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [22937 22941]))                  
                :type "int")
                nil [22856 23119])
            ("indirect_variable" function
               (:pointer 1
                :arguments 
                  ( ("symbol" variable
                       (:pointer 1
                        :type ("Lisp_Symbol" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [24656 24683]))                  
                :type ("Lisp_Symbol" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [24616 25125])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Findirect_variable" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [25156 25175])
                    ("" variable (:type ("Sindirect_variable" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [25176 25195])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [25212 25216]))                  
                :type "int")
                nil [25128 25609])
            ("do_symval_forwarding" function
               (:arguments 
                  ( ("valcontents" variable
                       (:pointer 1
                        :typemodifiers ("register")
                        :type ("Lisp_Fwd" type (:type "union") nil nil))
                        (reparse-symbol arg-sub-list) [25991 26028]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [25957 27150])
            ("wrong_choice" function
               (:arguments 
                  ( ("choice" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [27299 27318])
                    ("wrong" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [27319 27337]))                  
                :type "void")
                nil [27280 27945])
            ("wrong_range" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("min" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [28115 28131])
                    ("max" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [28132 28148])
                    ("wrong" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [28149 28167]))                  
                :type "void")
                nil [28090 28398])
            ("store_symval_forwarding" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("valcontents" variable
                       (:pointer 1
                        :type ("Lisp_Fwd" type (:type "union") nil nil))
                        (reparse-symbol arg-sub-list) [28823 28851])
                    ("newval" variable
                       (:typemodifiers ("register")
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [28852 28880])
                    ("buf" variable
                       (:pointer 1
                        :type ("buffer" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [28881 28900]))                  
                :type "void")
                nil [28786 31109])
            ("swap_in_global_binding" function
               (:arguments 
                  ( ("symbol" variable
                       (:pointer 1
                        :type ("Lisp_Symbol" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [31414 31441]))                  
                :type "void")
                nil [31385 31914])
            ("swap_in_symval_forwarding" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("symbol" variable
                       (:pointer 1
                        :type ("Lisp_Symbol" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [32254 32281])
                    ("blv" variable
                       (:pointer 1
                        :type ("Lisp_Buffer_Local_Value" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [32282 32318]))                  
                :type "void")
                nil [32215 33063])
            ("find_symbol_value" function
               (:arguments 
                  ( ("symbol" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [33392 33411]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [33361 34003])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fsymbol_value" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [34028 34042])
                    ("" variable (:type ("Ssymbol_value" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [34043 34057])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [34074 34078]))                  
                :type "int")
                nil [34005 34261])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fset" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [34418 34423])
                    ("" variable (:type ("Sset" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [34424 34429])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [34446 34450]))                  
                :type "int")
                nil [34404 34559])
            ("set_internal" function
               (:arguments 
                  ( ("symbol" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [35047 35066])
                    ("newval" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [35067 35086])
                    ("where" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [35087 35105])
                    ("bindflag" variable (:type ("Set_Internal_Bind" type (:type "enum") nil nil)) (reparse-symbol arg-sub-list) [35120 35152]))                  
                :type "void")
                nil [35028 39757])
            ("set_symbol_trapped_write" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("symbol" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [39797 39816])
                    ("trap" variable (:type ("symbol_trapped_write" type (:type "enum") nil nil)) (reparse-symbol arg-sub-list) [39817 39848]))                  
                :type "void")
                nil [39759 40014])
            ("restore_symbol_trapped_write" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("symbol" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [40058 40077]))                  
                :type "void")
                nil [40016 40140])
            ("harmonize_variable_watchers" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("alias" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [40183 40201])
                    ("base_variable" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [40202 40228]))                  
                :type "void")
                nil [40142 40406])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fadd_variable_watcher" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [40439 40461])
                    ("" variable (:type ("Sadd_variable_watcher" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [40462 40484])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [40508 40512]))                  
                :type "int")
                nil [40408 41048])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fremove_variable_watcher" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [41461 41486])
                    ("" variable (:type ("Sremove_variable_watcher" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [41487 41512])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [41536 41540]))                  
                :type "int")
                nil [41427 41742])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fget_variable_watchers" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [42140 42163])
                    ("" variable (:type ("Sget_variable_watchers" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [42164 42187])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [42211 42215]))                  
                :type "int")
                nil [42108 42289])
            ("notify_variable_watchers" function
               (:arguments 
                  ( ("symbol" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [42457 42476])
                    ("newval" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [42503 42522])
                    ("operation" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [42549 42571])
                    ("where" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [42598 42616]))                  
                :type "void")
                nil [42426 43635])
            ("default_value" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("symbol" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [43842 43861]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [43808 45117])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fdefault_boundp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [45144 45160])
                    ("" variable (:type ("Sdefault_boundp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [45161 45177])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [45194 45198]))                  
                :type "int")
                nil [45119 45373])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fdefault_value" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [45513 45528])
                    ("" variable (:type ("Sdefault_value" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [45529 45544])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [45561 45565]))                  
                :type "int")
                nil [45489 45809])
            ("set_default_internal" function
               (:arguments 
                  ( ("symbol" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [45973 45992])
                    ("value" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [45993 46011])
                    ("bindflag" variable (:type ("Set_Internal_Bind" type (:type "enum") nil nil)) (reparse-symbol arg-sub-list) [46034 46066]))                  
                :type "void")
                nil [45946 48288])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fset_default" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [48312 48325])
                    ("" variable (:type ("Sset_default" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [48326 48339])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [48356 48360]))                  
                :type "int")
                nil [48290 48570])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fsetq_default" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [48673 48687])
                    ("" variable (:type ("Ssetq_default" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [48688 48702])
                    ("" variable (:type ("UNEVALLED" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [48706 48716])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [48727 48731]))                  
                :type "int")
                nil [48650 49313])
            ("Lisp_Val_Fwd" type
               (:members 
                  ( ("value" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [49699 49717])
                    ("fwd" variable
                       (:pointer 1
                        :type ("Lisp_Fwd" type (:type "union") nil nil))
                        (reparse-symbol classsubparts) [49722 49742]))                  
                :type "union")
                nil [49672 49747])
            ("make_blv" function
               (:pointer 1
                :typemodifiers ("static")
                :arguments 
                  ( ("sym" variable
                       (:pointer 1
                        :type ("Lisp_Symbol" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [49799 49823])
                    ("forwarded" variable (:type "bool") (reparse-symbol arg-sub-list) [49824 49839])
                    ("valcontents" variable (:type ("Lisp_Val_Fwd" type (:type "union") nil nil)) (reparse-symbol arg-sub-list) [49843 49874]))                  
                :type ("Lisp_Buffer_Local_Value" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [49749 50583])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fmake_variable_buffer_local" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [50622 50650])
                    ("" variable (:type ("Smake_variable_buffer_local" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [50658 50686])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [50733 50737]))                  
                :type "int")
                nil [50585 51625])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fmake_local_variable" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [52839 52860])
                    ("" variable (:type ("Smake_local_variable" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [52861 52882])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [52929 52933]))                  
                :type "int")
                nil [52809 53679])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fkill_local_variable" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [56398 56419])
                    ("" variable (:type ("Skill_local_variable" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [56420 56441])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [56488 56492]))                  
                :type "int")
                nil [56368 56678])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Flocal_variable_p" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [58449 58467])
                    ("" variable (:type ("Slocal_variable_p" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [58468 58486])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [58510 58514]))                  
                :type "int")
                nil [58422 58664])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Flocal_variable_if_set_p" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [59846 59871])
                    ("" variable (:type ("Slocal_variable_if_set_p" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [59872 59897])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [59921 59925]))                  
                :type "int")
                nil [59812 60257])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fvariable_binding_locus" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [60966 60990])
                    ("" variable (:type ("Svariable_binding_locus" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [60991 61015])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [61039 61043]))                  
                :type "int")
                nil [60933 61295])
            ("indirect_function" function
               (:arguments 
                  ( ("object" variable
                       (:typemodifiers ("register")
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [64112 64140]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [64081 64551])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Findirect_function" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [64581 64600])
                    ("" variable (:type ("Sindirect_function" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [64601 64620])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [64637 64641]))                  
                :type "int")
                nil [64553 64995])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Faref" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [65354 65360])
                    ("" variable (:type ("Saref" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [65361 65367])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [65384 65388]))                  
                :type "int")
                nil [65339 65595])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Faset" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [66726 66732])
                    ("" variable (:type ("Saset" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [66733 66739])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [66756 66760]))                  
                :type "int")
                nil [66711 66997])
            ("arithcompare" function
               (:arguments 
                  ( ("num1" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [69556 69573])
                    ("num2" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [69574 69591])
                    ("comparison" variable (:type ("Arith_Comparison" type (:type "enum") nil nil)) (reparse-symbol arg-sub-list) [69599 69632]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [69530 71763])
            ("arithcompare_driver" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("nargs" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [71805 71821])
                    ("args" variable
                       (:pointer 1
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [71822 71840])
                    ("comparison" variable (:type ("Arith_Comparison" type (:type "enum") nil nil)) (reparse-symbol arg-sub-list) [71862 71895]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [71765 72035])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Feqlsign" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [72049 72058])
                    ("" variable (:type ("Seqlsign" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [72059 72068])
                    ("" variable (:type ("MANY" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [72072 72077])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [72088 72092]))                  
                :type "int")
                nil [72037 72245])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Flss" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [72320 72325])
                    ("" variable (:type ("Slss" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [72326 72331])
                    ("" variable (:type ("MANY" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [72335 72340])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [72351 72355]))                  
                :type "int")
                nil [72308 72525])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fgtr" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [72599 72604])
                    ("" variable (:type ("Sgtr" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [72605 72610])
                    ("" variable (:type ("MANY" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [72614 72619])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [72630 72634]))                  
                :type "int")
                nil [72587 72806])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fleq" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [72881 72886])
                    ("" variable (:type ("Sleq" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [72887 72892])
                    ("" variable (:type ("MANY" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [72896 72901])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [72912 72916]))                  
                :type "int")
                nil [72868 73094])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fgeq" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [73178 73183])
                    ("" variable (:type ("Sgeq" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [73184 73189])
                    ("" variable (:type ("MANY" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [73193 73198])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [73209 73213]))                  
                :type "int")
                nil [73165 73394])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fneq" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [73478 73483])
                    ("" variable (:type ("Sneq" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [73484 73489])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [73506 73510]))                  
                :type "int")
                nil [73465 73650])
            ("INTBIG_TO_LISP" variable (:constant-flag t) nil [73805 73819])
            ("intbig_to_lisp" function
               (:arguments 
                  ( ("i" variable (:type ("intmax_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [74368 74379]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [74340 74424])
            ("uintbig_to_lisp" function
               (:arguments 
                  ( ("i" variable (:type ("uintmax_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [74455 74467]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [74426 74513])
            ("cons_to_unsigned" function
               (:arguments 
                  ( ("c" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [74772 74786])
                    ("max" variable (:type ("uintmax_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [74787 74801]))                  
                :type ("uintmax_t" type (:type "class") nil nil))
                nil [74744 75873])
            ("cons_to_signed" function
               (:arguments 
                  ( ("c" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [76188 76202])
                    ("min" variable (:type ("intmax_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [76203 76216])
                    ("max" variable (:type ("intmax_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [76217 76230]))                  
                :type ("intmax_t" type (:type "class") nil nil))
                nil [76163 77361])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fnumber_to_string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [77391 77409])
                    ("" variable (:type ("Snumber_to_string" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [77410 77428])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [77445 77449]))                  
                :type "int")
                nil [77364 77621])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fstring_to_number" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [77964 77982])
                    ("" variable (:type ("Sstring_to_number" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [77983 78001])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [78018 78022]))                  
                :type "int")
                nil [77937 78474])
            ("arithop" type
               (:members 
                  ( ("Aadd" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [78926 78931])
                    ("Asub" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [78936 78941])
                    ("Amult" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [78946 78952])
                    ("Adiv" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [78957 78962])
                    ("Alogand" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [78967 78975])
                    ("Alogior" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [78980 78988])
                    ("Alogxor" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [78993 79004]))                  
                :type "enum")
                nil [78905 79005])
            ("float_arith_driver" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type "double") (reparse-symbol arg-sub-list) [79046 79053])
                    ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [79054 79064])
                    ("" variable (:type ("arithop" type (:type "enum") nil nil)) (reparse-symbol arg-sub-list) [79065 79078])
                    ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [79118 79128])
                    ("" variable
                       (:pointer 1
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [79129 79143]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [79007 79144])
            ("arith_driver" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("code" variable (:type ("arithop" type (:type "enum") nil nil)) (reparse-symbol arg-sub-list) [79178 79196])
                    ("nargs" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [79197 79213])
                    ("args" variable
                       (:pointer 1
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [79214 79232]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [79145 80777])
            ("isnan" variable (:constant-flag t) nil [80802 80807])
            ("float_arith_driver" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("accum" variable (:type "double") (reparse-symbol arg-sub-list) [80871 80884])
                    ("argnum" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [80885 80902])
                    ("code" variable (:type ("arithop" type (:type "enum") nil nil)) (reparse-symbol arg-sub-list) [80903 80921])
                    ("nargs" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [80928 80944])
                    ("args" variable
                       (:pointer 1
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [80945 80963]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [80832 81870])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fplus" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [81885 81891])
                    ("" variable (:type ("Splus" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [81892 81898])
                    ("" variable (:type ("MANY" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [81902 81907])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [81918 81922]))                  
                :type "int")
                nil [81873 82074])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fminus" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [82135 82142])
                    ("" variable (:type ("Sminus" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [82143 82150])
                    ("" variable (:type ("MANY" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [82154 82159])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [82170 82174]))                  
                :type "int")
                nil [82123 82452])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Ftimes" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [82513 82520])
                    ("" variable (:type ("Stimes" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [82521 82528])
                    ("" variable (:type ("MANY" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [82532 82537])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [82548 82552]))                  
                :type "int")
                nil [82501 82708])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fquo" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [82770 82775])
                    ("" variable (:type ("Squo" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [82776 82781])
                    ("" variable (:type ("MANY" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [82785 82790])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [82801 82805]))                  
                :type "int")
                nil [82758 83100])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Frem" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [83316 83321])
                    ("" variable (:type ("Srem" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [83322 83327])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [83344 83348]))                  
                :type "int")
                nil [83304 83468])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fmod" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [83680 83685])
                    ("" variable (:type ("Smod" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [83686 83691])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [83708 83712]))                  
                :type "int")
                nil [83666 83883])
            ("minmax_driver" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("nargs" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [84355 84371])
                    ("args" variable
                       (:pointer 1
                        :type ("Lisp_Object" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [84372 84390])
                    ("comparison" variable (:type ("Arith_Comparison" type (:type "enum") nil nil)) (reparse-symbol arg-sub-list) [84399 84432]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [84321 84826])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fmax" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [84842 84847])
                    ("" variable (:type ("Smax" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [84848 84853])
                    ("" variable (:type ("MANY" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [84857 84862])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [84873 84877]))                  
                :type "int")
                nil [84828 85115])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fmin" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [85185 85190])
                    ("" variable (:type ("Smin" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [85191 85196])
                    ("" variable (:type ("MANY" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [85200 85205])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [85216 85220]))                  
                :type "int")
                nil [85171 85459])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Flogand" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [85532 85540])
                    ("" variable (:type ("Slogand" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [85541 85549])
                    ("" variable (:type ("MANY" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [85553 85558])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [85569 85573]))                  
                :type "int")
                nil [85515 85760])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Flogior" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [85829 85837])
                    ("" variable (:type ("Slogior" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [85838 85846])
                    ("" variable (:type ("MANY" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [85850 85855])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [85866 85870]))                  
                :type "int")
                nil [85812 86056])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Flogxor" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [86125 86133])
                    ("" variable (:type ("Slogxor" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [86134 86142])
                    ("" variable (:type ("MANY" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [86146 86151])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [86162 86166]))                  
                :type "int")
                nil [86108 86362])
            ("ash_lsh_impl" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("value" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [86447 86465])
                    ("count" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [86466 86484])
                    ("lsh" variable (:type "bool") (reparse-symbol arg-sub-list) [86485 86494]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [86414 87032])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fash" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [87048 87053])
                    ("" variable (:type ("Sash" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [87054 87059])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [87076 87080]))                  
                :type "int")
                nil [87034 87287])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Flsh" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [87352 87357])
                    ("" variable (:type ("Slsh" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [87358 87363])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [87380 87384]))                  
                :type "int")
                nil [87338 87597])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fadd1" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [87660 87666])
                    ("" variable (:type ("Sadd1" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [87667 87673])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [87690 87694]))                  
                :type "int")
                nil [87647 87830])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fsub1" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [88032 88038])
                    ("" variable (:type ("Ssub1" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [88039 88045])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [88062 88066]))                  
                :type "int")
                nil [88019 88203])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Flognot" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [88410 88418])
                    ("" variable (:type ("Slognot" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [88419 88427])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [88444 88448]))                  
                :type "int")
                nil [88393 88557])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fbyteorder" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [88661 88672])
                    ("" variable (:type ("Sbyteorder" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [88673 88684])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [88701 88705])
                    ("" variable (:type ("attributes" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [88867 88878]))                  
                :type "int")
                nil [88641 88894])
            ("bool_vector_spare_mask" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("nr_bits" variable (:type ("EMACS_INT" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [89234 89252]))                  
                :type ("bits_word" type (:type "class") nil nil))
                nil [89193 89322])
            ("" type
               (:members 
                  ( ("ULL_WIDTH" variable
                       (:constant-flag t
                        :default-value (89580 89591)
                        :type "int")
                        (reparse-symbol enumsubparts) [89568 89591]))                  
                :type "enum")
                nil [89561 89594])
            ("ULL_MAX" variable (:constant-flag t) nil [89604 89611])
            ("count_one_bits_ll" variable (:constant-flag t) nil [89631 89648])
            ("count_trailing_zeros_ll" variable (:constant-flag t) nil [89675 89698])
            ("shift_right_ull" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("w" variable (:type ("bits_word" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [89878 89890]))                  
                :type ("bits_word" type (:type "class") nil nil))
                nil [89844 90055])
            ("count_one_bits_word" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("w" variable (:type ("bits_word" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [90131 90143]))                  
                :type "int")
                nil [90099 90466])
            ("bool_vector_op" type
               (:members 
                  ( ("bool_vector_exclusive_or" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [90490 90515])
                    ("bool_vector_union" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [90538 90556])
                    ("bool_vector_intersection" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [90579 90604])
                    ("bool_vector_set_difference" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [90627 90654])
                    ("bool_vector_subsetp" variable
                       (:constant-flag t
                        :type "int")
                        (reparse-symbol enumsubparts) [90677 90698]))                  
                :type "enum")
                nil [90468 90699])
            ("bool_vector_binop_driver" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("a" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [90746 90760])
                    ("b" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [90787 90801])
                    ("dest" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [90828 90845])
                    ("op" variable (:type ("bool_vector_op" type (:type "enum") nil nil)) (reparse-symbol arg-sub-list) [90872 90895]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [90701 92846])
            ("pre_value" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("precondition" variable (:type "bool") (reparse-symbol arg-sub-list) [93014 93032])
                    ("value" variable (:type "int") (reparse-symbol arg-sub-list) [93033 93043]))                  
                :type "int")
                nil [92992 93108])
            ("count_trailing_zero_bits" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("val" variable (:type ("bits_word" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [93257 93271]))                  
                :type "int")
                nil [93220 94305])
            ("bits_word_to_host_endian" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("val" variable (:type ("bits_word" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [94350 94364]))                  
                :type ("bits_word" type (:type "class") nil nil))
                nil [94307 94812])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fbool_vector_exclusive_or" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [94849 94875])
                    ("" variable (:type ("Sbool_vector_exclusive_or" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [94883 94909])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [94926 94930]))                  
                :type "int")
                nil [94814 95197])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fbool_vector_union" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [95302 95321])
                    ("" variable (:type ("Sbool_vector_union" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [95329 95348])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [95365 95369]))                  
                :type "int")
                nil [95274 95626])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fbool_vector_intersection" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [95731 95757])
                    ("" variable (:type ("Sbool_vector_intersection" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [95765 95791])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [95808 95812]))                  
                :type "int")
                nil [95696 96070])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fbool_vector_set_difference" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [96184 96212])
                    ("" variable (:type ("Sbool_vector_set_difference" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [96220 96248])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [96265 96269]))                  
                :type "int")
                nil [96147 96531])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fbool_vector_subsetp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [96640 96661])
                    ("" variable (:type ("Sbool_vector_subsetp" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [96669 96690])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [96707 96711]))                  
                :type "int")
                nil [96610 96863])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fbool_vector_not" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [96961 96978])
                    ("" variable (:type ("Sbool_vector_not" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [96986 97003])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [97020 97024]))                  
                :type "int")
                nil [96935 97234])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fbool_vector_count_population" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [97997 98027])
                    ("" variable (:type ("Sbool_vector_count_population" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [98035 98065])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [98082 98086]))                  
                :type "int")
                nil [97958 98239])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fbool_vector_count_consecutive" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [98622 98653])
                    ("" variable (:type ("Sbool_vector_count_consecutive" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [98661 98692])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [98709 98713]))                  
                :type "int")
                nil [98582 98894])
            ("syms_of_data" function
               (:arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [101014 101019]))                  
                :type "void")
                nil [100995 111318]))          
      :file "data.c"
      :pointmax 111319
      :fsize 111318
      :lastmodtime '(22986 14551 0 0)
      :unmatched-syntax '((semantic-list 98895 . 100991) (punctuation 98712 . 98713) (number 98699 . 98700) (number 98696 . 98697) (number 98693 . 98694) (string 98589 . 98620) (semantic-list 98240 . 98580) (punctuation 98085 . 98086) (number 98072 . 98073) (number 98069 . 98070) (number 98066 . 98067) (string 97965 . 97995) (semantic-list 97235 . 97956) (punctuation 97023 . 97024) (number 97010 . 97011) (number 97007 . 97008) (number 97004 . 97005) (string 96942 . 96959) (semantic-list 96864 . 96933) (punctuation 96710 . 96711) (number 96697 . 96698) (number 96694 . 96695) (number 96691 . 96692) (string 96617 . 96638) (semantic-list 96532 . 96608) (punctuation 96268 . 96269) (number 96255 . 96256) (number 96252 . 96253) (number 96249 . 96250) (string 96154 . 96182) (semantic-list 96071 . 96145) (punctuation 95811 . 95812) (number 95798 . 95799) (number 95795 . 95796) (number 95792 . 95793) (string 95703 . 95729) (semantic-list 95627 . 95694) (punctuation 95368 . 95369) (number 95355 . 95356) (number 95352 . 95353) (number 95349 . 95350) (string 95281 . 95300) (semantic-list 95198 . 95272) (punctuation 94929 . 94930) (number 94916 . 94917) (number 94913 . 94914) (number 94910 . 94911) (string 94821 . 94847) (semantic-list 88895 . 88999) (CONST 88879 . 88884) (punctuation 88877 . 88878) (punctuation 88704 . 88705) (number 88691 . 88692) (number 88688 . 88689) (number 88685 . 88686) (string 88648 . 88659) (semantic-list 88558 . 88639) (punctuation 88447 . 88448) (number 88434 . 88435) (number 88431 . 88432) (number 88428 . 88429) (string 88400 . 88408) (semantic-list 88204 . 88391) (punctuation 88065 . 88066) (number 88052 . 88053) (number 88049 . 88050) (number 88046 . 88047) (string 88026 . 88030) (semantic-list 87831 . 88017) (punctuation 87693 . 87694) (number 87680 . 87681) (number 87677 . 87678) (number 87674 . 87675) (string 87654 . 87658) (semantic-list 87598 . 87645) (punctuation 87383 . 87384) (number 87370 . 87371) (number 87367 . 87368) (number 87364 . 87365) (string 87345 . 87350) (semantic-list 87288 . 87336) (punctuation 87079 . 87080) (number 87066 . 87067) (number 87063 . 87064) (number 87060 . 87061) (string 87041 . 87046) (semantic-list 86363 . 86412) (punctuation 86165 . 86166) (number 86152 . 86153) (number 86143 . 86144) (string 86115 . 86123) (semantic-list 86057 . 86106) (punctuation 85869 . 85870) (number 85856 . 85857) (number 85847 . 85848) (string 85819 . 85827) (semantic-list 85761 . 85810) (punctuation 85572 . 85573) (number 85559 . 85560) (number 85550 . 85551) (string 85522 . 85530) (semantic-list 85460 . 85513) (punctuation 85219 . 85220) (number 85206 . 85207) (number 85197 . 85198) (string 85178 . 85183) (semantic-list 85116 . 85169) (punctuation 84876 . 84877) (number 84863 . 84864) (number 84854 . 84855) (string 84835 . 84840) (semantic-list 83884 . 84319) (punctuation 83711 . 83712) (number 83698 . 83699) (number 83695 . 83696) (number 83692 . 83693) (string 83673 . 83678) (semantic-list 83469 . 83664) (punctuation 83347 . 83348) (number 83334 . 83335) (number 83331 . 83332) (number 83328 . 83329) (string 83311 . 83314) (semantic-list 83101 . 83302) (punctuation 82804 . 82805) (number 82791 . 82792) (number 82782 . 82783) (string 82765 . 82768) (semantic-list 82709 . 82756) (punctuation 82551 . 82552) (number 82538 . 82539) (number 82529 . 82530) (string 82508 . 82511) (semantic-list 82453 . 82499) (punctuation 82173 . 82174) (number 82160 . 82161) (number 82151 . 82152) (string 82130 . 82133) (semantic-list 82075 . 82121) (punctuation 81921 . 81922) (number 81908 . 81909) (number 81899 . 81900) (string 81880 . 81883) (semantic-list 78475 . 78902) (punctuation 78021 . 78022) (number 78008 . 78009) (number 78005 . 78006) (number 78002 . 78003) (string 77944 . 77962) (semantic-list 77622 . 77935) (punctuation 77448 . 77449) (number 77435 . 77436) (number 77432 . 77433) (number 77429 . 77430) (string 77371 . 77389) (semantic-list 73651 . 73706) (punctuation 73509 . 73510) (number 73496 . 73497) (number 73493 . 73494) (number 73490 . 73491) (string 73472 . 73476) (semantic-list 73395 . 73463) (punctuation 73212 . 73213) (number 73199 . 73200) (number 73190 . 73191) (string 73172 . 73176) (semantic-list 73095 . 73163) (punctuation 72915 . 72916) (number 72902 . 72903) (number 72893 . 72894) (string 72875 . 72879) (semantic-list 72807 . 72866) (punctuation 72633 . 72634) (number 72620 . 72621) (number 72611 . 72612) (string 72594 . 72597) (semantic-list 72526 . 72585) (punctuation 72354 . 72355) (number 72341 . 72342) (number 72332 . 72333) (string 72315 . 72318) (semantic-list 72246 . 72306) (punctuation 72091 . 72092) (number 72078 . 72079) (number 72069 . 72070) (string 72044 . 72047) (semantic-list 66998 . 69499) (punctuation 66759 . 66760) (number 66746 . 66747) (number 66743 . 66744) (number 66740 . 66741) (string 66718 . 66724) (semantic-list 65596 . 66709) (punctuation 65387 . 65388) (number 65374 . 65375) (number 65371 . 65372) (number 65368 . 65369) (string 65346 . 65352) (semantic-list 64996 . 65284) (punctuation 64640 . 64641) (number 64627 . 64628) (number 64624 . 64625) (number 64621 . 64622) (string 64560 . 64579) (semantic-list 61296 . 62276) (punctuation 61042 . 61043) (number 61029 . 61030) (number 61026 . 61027) (number 61023 . 61024) (string 60940 . 60964) (semantic-list 60258 . 60931) (punctuation 59924 . 59925) (number 59911 . 59912) (number 59908 . 59909) (number 59905 . 59906) (string 59819 . 59844) (semantic-list 58665 . 59810) (punctuation 58513 . 58514) (number 58500 . 58501) (number 58497 . 58498) (number 58494 . 58495) (string 58429 . 58447) (semantic-list 56679 . 58347) (punctuation 56491 . 56492) (string 56455 . 56479) (number 56452 . 56453) (number 56449 . 56450) (string 56375 . 56396) (semantic-list 53680 . 56366) (punctuation 52932 . 52933) (string 52896 . 52920) (number 52893 . 52894) (number 52890 . 52891) (string 52816 . 52837) (semantic-list 51626 . 52807) (punctuation 50736 . 50737) (string 50693 . 50724) (number 50690 . 50691) (number 50687 . 50688) (string 50592 . 50620) (semantic-list 49314 . 49596) (punctuation 48730 . 48731) (number 48717 . 48718) (number 48703 . 48704) (string 48657 . 48671) (semantic-list 48571 . 48648) (punctuation 48359 . 48360) (number 48346 . 48347) (number 48343 . 48344) (number 48340 . 48341) (string 48297 . 48310) (semantic-list 45810 . 45944) (punctuation 45564 . 45565) (number 45551 . 45552) (number 45548 . 45549) (number 45545 . 45546) (string 45496 . 45511) (semantic-list 45374 . 45487) (punctuation 45197 . 45198) (number 45184 . 45185) (number 45181 . 45182) (number 45178 . 45179) (string 45126 . 45142) (semantic-list 42290 . 42424) (punctuation 42214 . 42215) (number 42201 . 42202) (number 42198 . 42199) (number 42195 . 42196) (string 42115 . 42138) (semantic-list 41743 . 42106) (punctuation 41539 . 41540) (number 41526 . 41527) (number 41523 . 41524) (number 41520 . 41521) (string 41434 . 41459) (semantic-list 41049 . 41425) (punctuation 40511 . 40512) (number 40498 . 40499) (number 40495 . 40496) (number 40492 . 40493) (string 40415 . 40437) (semantic-list 34560 . 34637) (punctuation 34449 . 34450) (number 34436 . 34437) (number 34433 . 34434) (number 34430 . 34431) (string 34411 . 34416) (semantic-list 34262 . 34402) (punctuation 34077 . 34078) (number 34064 . 34065) (number 34061 . 34062) (number 34058 . 34059) (string 34012 . 34026) (semantic-list 25610 . 25768) (punctuation 25215 . 25216) (number 25202 . 25203) (number 25199 . 25200) (number 25196 . 25197) (string 25135 . 25154) (semantic-list 23120 . 24270) (punctuation 22940 . 22941) (number 22927 . 22928) (number 22924 . 22925) (number 22921 . 22922) (string 22863 . 22881) (semantic-list 22744 . 22854) (punctuation 22647 . 22648) (number 22634 . 22635) (number 22631 . 22632) (number 22628 . 22629) (string 22591 . 22602) (semantic-list 22299 . 22582) (punctuation 21978 . 21979) (number 21965 . 21966) (number 21962 . 21963) (number 21959 . 21960) (string 21919 . 21931) (semantic-list 21824 . 21910) (punctuation 21699 . 21700) (number 21686 . 21687) (number 21683 . 21684) (number 21680 . 21681) (string 21646 . 21656) (semantic-list 20468 . 21637) (punctuation 19933 . 19934) (number 19920 . 19921) (number 19917 . 19918) (number 19914 . 19915) (string 19880 . 19890) (semantic-list 19171 . 19871) (punctuation 19034 . 19035) (number 19021 . 19022) (number 19018 . 19019) (number 19015 . 19016) (string 18993 . 18999) (semantic-list 18880 . 18984) (punctuation 18806 . 18807) (number 18793 . 18794) (number 18790 . 18791) (number 18787 . 18788) (string 18744 . 18757) (semantic-list 18673 . 18735) (punctuation 18600 . 18601) (number 18587 . 18588) (number 18584 . 18585) (number 18581 . 18582) (string 18535 . 18549) (semantic-list 18461 . 18526) (punctuation 18358 . 18359) (number 18345 . 18346) (number 18342 . 18343) (number 18339 . 18340) (string 18284 . 18301) (semantic-list 18110 . 18275) (punctuation 18011 . 18012) (number 17998 . 17999) (number 17995 . 17996) (number 17992 . 17993) (string 17949 . 17962) (semantic-list 17792 . 17940) (punctuation 17706 . 17707) (number 17693 . 17694) (number 17690 . 17691) (number 17687 . 17688) (string 17647 . 17659) (semantic-list 17554 . 17638) (punctuation 17458 . 17459) (number 17445 . 17446) (number 17442 . 17443) (number 17439 . 17440) (string 17408 . 17417) (semantic-list 16306 . 17132) (punctuation 16117 . 16118) (number 16104 . 16105) (number 16101 . 16102) (number 16098 . 16099) (string 16070 . 16078) (semantic-list 15909 . 16013) (punctuation 15798 . 15799) (number 15785 . 15786) (number 15782 . 15783) (number 15779 . 15780) (string 15751 . 15759) (semantic-list 15638 . 15742) (punctuation 15527 . 15528) (number 15514 . 15515) (number 15511 . 15512) (number 15508 . 15509) (string 15480 . 15488) (semantic-list 15440 . 15471) (punctuation 15347 . 15348) (number 15334 . 15335) (number 15331 . 15332) (number 15328 . 15329) (string 15294 . 15304) (semantic-list 15261 . 15285) (punctuation 14981 . 14982) (number 14968 . 14969) (number 14965 . 14966) (number 14962 . 14963) (string 14943 . 14948) (semantic-list 14903 . 14934) (punctuation 14810 . 14811) (number 14797 . 14798) (number 14794 . 14795) (number 14791 . 14792) (string 14757 . 14767) (semantic-list 14724 . 14748) (punctuation 14444 . 14445) (number 14431 . 14432) (number 14428 . 14429) (number 14425 . 14426) (string 14406 . 14411) (semantic-list 14293 . 14351) (punctuation 14216 . 14217) (number 14203 . 14204) (number 14200 . 14201) (number 14197 . 14198) (string 14120 . 14142) (semantic-list 14055 . 14111) (punctuation 13991 . 13992) (number 13978 . 13979) (number 13975 . 13976) (number 13972 . 13973) (string 13944 . 13952) (semantic-list 13878 . 13935) (punctuation 13813 . 13814) (number 13800 . 13801) (number 13797 . 13798) (number 13794 . 13795) (string 13763 . 13772) (semantic-list 13698 . 13754) (CONST 13668 . 13673) (punctuation 13666 . 13667) (punctuation 13593 . 13594) (number 13580 . 13581) (number 13577 . 13578) (number 13574 . 13575) (string 13546 . 13554) (semantic-list 13460 . 13537) (punctuation 13383 . 13384) (number 13370 . 13371) (number 13367 . 13368) (number 13364 . 13365) (string 13293 . 13313) (semantic-list 13218 . 13284) (CONST 13188 . 13193) (punctuation 13186 . 13187) (punctuation 13100 . 13101) (number 13087 . 13088) (number 13084 . 13085) (number 13081 . 13082) (string 13050 . 13059) (semantic-list 12984 . 13041) (CONST 12954 . 12959) (punctuation 12952 . 12953) (punctuation 12881 . 12882) (number 12868 . 12869) (number 12865 . 12866) (number 12862 . 12863) (string 12831 . 12840) (semantic-list 12744 . 12822) (punctuation 12639 . 12640) (number 12626 . 12627) (number 12623 . 12624) (number 12620 . 12621) (string 12553 . 12574) (semantic-list 12486 . 12544) (CONST 12456 . 12461) (punctuation 12454 . 12455) (punctuation 12394 . 12395) (number 12381 . 12382) (number 12378 . 12379) (number 12375 . 12376) (string 12341 . 12351) (semantic-list 12251 . 12331) (CONST 12212 . 12217) (punctuation 12210 . 12211) (punctuation 12137 . 12138) (number 12124 . 12125) (number 12121 . 12122) (number 12118 . 12119) (string 12060 . 12078) (semantic-list 12000 . 12051) (CONST 11970 . 11975) (punctuation 11968 . 11969) (punctuation 11879 . 11880) (number 11860 . 11861) (number 11857 . 11858) (string 11796 . 11815) (semantic-list 11728 . 11787) (punctuation 11640 . 11641) (number 11627 . 11628) (number 11624 . 11625) (number 11621 . 11622) (string 11544 . 11566) (semantic-list 11480 . 11535) (punctuation 11404 . 11405) (number 11391 . 11392) (number 11388 . 11389) (number 11385 . 11386) (string 11360 . 11367) (semantic-list 11062 . 11119) (punctuation 10980 . 10981) (number 10967 . 10968) (number 10964 . 10965) (number 10961 . 10962) (string 10930 . 10939) (semantic-list 10864 . 10921) (punctuation 10791 . 10792) (number 10778 . 10779) (number 10775 . 10776) (number 10772 . 10773) (string 10741 . 10750) (semantic-list 10641 . 10732) (punctuation 10549 . 10550) (number 10536 . 10537) (number 10533 . 10534) (number 10530 . 10531) (string 10493 . 10504) (semantic-list 10428 . 10484) (punctuation 10344 . 10345) (number 10331 . 10332) (number 10328 . 10329) (number 10325 . 10326) (string 10297 . 10305) (semantic-list 10225 . 10288) (punctuation 10155 . 10156) (number 10142 . 10143) (number 10139 . 10140) (number 10136 . 10137) (string 10087 . 10102) (semantic-list 9996 . 10078) (punctuation 9917 . 9918) (number 9904 . 9905) (number 9901 . 9902) (number 9898 . 9899) (string 9815 . 9839) (semantic-list 9744 . 9806) (punctuation 9675 . 9676) (number 9662 . 9663) (number 9659 . 9660) (number 9656 . 9657) (string 9610 . 9624) (semantic-list 9515 . 9601) (punctuation 9374 . 9375) (number 9361 . 9362) (number 9358 . 9359) (number 9355 . 9356) (string 9284 . 9304) (semantic-list 9218 . 9275) (CONST 9188 . 9193) (punctuation 9186 . 9187) (punctuation 9128 . 9129) (number 9115 . 9116) (number 9112 . 9113) (number 9109 . 9110) (string 9078 . 9087) (semantic-list 9012 . 9069) (punctuation 8947 . 8948) (number 8934 . 8935) (number 8931 . 8932) (number 8928 . 8929) (string 8897 . 8906) (semantic-list 8831 . 8888) (punctuation 8766 . 8767) (number 8753 . 8754) (number 8750 . 8751) (number 8747 . 8748) (string 8716 . 8725) (semantic-list 8548 . 8707) (punctuation 8381 . 8382) (number 8368 . 8369) (number 8365 . 8366) (number 8362 . 8363) (string 8328 . 8338) (semantic-list 8184 . 8241) (CONST 8154 . 8159) (punctuation 8152 . 8153) (punctuation 8094 . 8095) (number 8081 . 8082) (number 8078 . 8079) (number 8075 . 8076) (string 8044 . 8053) (semantic-list 7962 . 8034) (CONST 7932 . 7937) (punctuation 7930 . 7931) (punctuation 7850 . 7851) (number 7837 . 7838) (number 7834 . 7835) (number 7831 . 7832) (string 7803 . 7811) (semantic-list 7722 . 7794) (CONST 7692 . 7697) (punctuation 7690 . 7691) (punctuation 7582 . 7583) (number 7569 . 7570) (number 7566 . 7567) (number 7563 . 7564) (string 7538 . 7545) (semantic-list 7474 . 7529) (CONST 7444 . 7449) (punctuation 7442 . 7443) (punctuation 7357 . 7358) (number 7344 . 7345) (number 7341 . 7342) (number 7338 . 7339) (string 7316 . 7322) (semantic-list 7252 . 7307) (CONST 7222 . 7227) (punctuation 7220 . 7221) (punctuation 7159 . 7160) (number 7146 . 7147) (number 7143 . 7144) (number 7140 . 7141) (string 7115 . 7122) (semantic-list 4857 . 7106) (punctuation 4680 . 4681) (number 4667 . 4668) (number 4664 . 4665) (number 4661 . 4662) (string 4630 . 4639) (semantic-list 4567 . 4621) (CONST 4537 . 4542) (punctuation 4535 . 4536) (punctuation 4456 . 4457) (number 4443 . 4444) (number 4440 . 4441) (number 4437 . 4438) (string 4415 . 4421) (semantic-list 4350 . 4406) (CONST 4304 . 4309) (punctuation 4302 . 4303) (punctuation 4225 . 4226) (number 4212 . 4213) (number 4209 . 4210) (number 4206 . 4207) (string 4190 . 4194) (symbol 3236 . 3245) (symbol 2853 . 2862) (STATIC 2846 . 2852))
      :lexical-table 
        '(("isnan" (spp-arg-list ("x") 80807 . 80810) . ((semantic-list "((x) != (x))" 80811 . 80823)))
          ("ULL_MAX" . ((symbol "ULONG_MAX" 89612 . 89621)))
          ("count_trailing_zeros_ll" . ((symbol "count_trailing_zeros_l" 89699 . 89721)))
          ("INTBIG_TO_LISP" (spp-arg-list ("i" "extremum") 73819 . 73832) . ((semantic-list "(eassert (FIXNUM_OVERFLOW_P (i)),				    \\
   (! (FIXNUM_OVERFLOW_P ((extremum) >> 16)			    \\
       && FIXNUM_OVERFLOW_P ((i) >> 16))			    \\
    ? Fcons (make_number ((i) >> 16), make_number ((i) & 0xffff))   \\
    : ! (FIXNUM_OVERFLOW_P ((extremum) >> 16 >> 24)		    \\
	 && FIXNUM_OVERFLOW_P ((i) >> 16 >> 24))		    \\
    ? Fcons (make_number ((i) >> 16 >> 24),			    \\
	     Fcons (make_number ((i) >> 16 & 0xffffff),		    \\
		    make_number ((i) & 0xffff)))		    \\
    : make_float (i)))" 73844 . 74338)))
          ("count_one_bits_ll" . ((symbol "count_one_bits_l" 89649 . 89665)))
          )
)
    (semanticdb-table "semanticdb-table"
      :major-mode c-mode
      :tags 
        '( ("config.h" include (:system-flag t) nil [775 794])
            ("lisp.h" include nil nil [796 813])
            ("character.h" include nil nil [814 836])
            ("buffer.h" include nil nil [837 856])
            ("syntax.h" include nil nil [857 876])
            ("charset.h" include nil nil [877 897])
            ("region-cache.h" include nil nil [898 923])
            ("blockinput.h" include nil nil [924 947])
            ("intervals.h" include nil nil [948 970])
            ("regex.h" include nil nil [972 990])
            ("REGEXP_CACHE_SIZE" variable (:constant-flag t) nil [1000 1017])
            ("regexp_cache" type
               (:members 
                  ( ("next" variable
                       (:pointer 1
                        :type ("regexp_cache" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol classsubparts) [1165 1191])
                    ("regexp" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [1194 1234])
                    ("f_whitespace_regexp" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [1194 1234])
                    ("syntax_table" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol classsubparts) [1415 1440])
                    ("buf" variable (:type ("re_pattern_buffer" type
                         (:prototype t
                          :type "struct")
                          nil nil)) (reparse-symbol classsubparts) [1443 1472])
                    ("fastmap" variable
                       (:dereference 1
                        :type "char")
                        (reparse-symbol classsubparts) [1475 1494])
                    ("posix" variable (:type "bool") (reparse-symbol classsubparts) [1568 1579]))                  
                :type "struct")
                nil [1141 1582])
            ("searchbufs" variable
               (:dereference 1
                :typemodifiers ("static")
                :type ("regexp_cache" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [1621 1678])
            ("searchbuf_head" variable
               (:pointer 1
                :typemodifiers ("static")
                :type ("regexp_cache" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [1757 1800])
            ("set_search_regs" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3026 3036])
                    ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3037 3047]))                  
                :type "void")
                nil [2997 3048])
            ("save_search_regs" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [3079 3084]))                  
                :type "void")
                nil [3049 3085])
            ("simple_search" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type ("EMACS_INT" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3118 3128])
                    ("" variable
                       (:pointer 1
                        :type "unsigned char")
                        (reparse-symbol arg-sub-list) [3129 3145])
                    ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3146 3156])
                    ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3161 3171])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3172 3184])
                    ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3185 3195])
                    ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3196 3206])
                    ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3239 3249])
                    ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3250 3260]))                  
                :type ("EMACS_INT" type (:type "class") nil nil))
                nil [3086 3261])
            ("boyer_moore" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type ("EMACS_INT" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3292 3302])
                    ("" variable
                       (:pointer 1
                        :type "unsigned char")
                        (reparse-symbol arg-sub-list) [3303 3319])
                    ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3320 3330])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3361 3373])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3374 3386])
                    ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3387 3397])
                    ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3428 3438])
                    ("" variable (:type "int") (reparse-symbol arg-sub-list) [3439 3443]))                  
                :type ("EMACS_INT" type (:type "class") nil nil))
                nil [3262 3444])
            ("search_buffer" function
               (:prototype-flag t
                :typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3477 3489])
                    ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3490 3500])
                    ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3501 3511])
                    ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3544 3554])
                    ("" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3555 3565])
                    ("" variable (:type ("EMACS_INT" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3566 3576])
                    ("" variable (:type "int") (reparse-symbol arg-sub-list) [3577 3581])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3614 3626])
                    ("" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3627 3639])
                    ("" variable (:type "bool") (reparse-symbol arg-sub-list) [3640 3645]))                  
                :type ("EMACS_INT" type (:type "class") nil nil))
                nil [3445 3646])
            ("matcher_overflow" function
               (:arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [3688 3693]))                  
                :type "void")
                nil [3665 3743])
            ("freeze_buffer_relocation" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [3783 3788]))                  
                :type "void")
                nil [3745 4011])
            ("thaw_buffer_relocation" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [4049 4054]))                  
                :type "void")
                nil [4013 4124])
            ("compile_pattern_1" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("cp" variable
                       (:pointer 1
                        :type ("regexp_cache" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [4571 4595])
                    ("pattern" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [4596 4616])
                    ("translate" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [4622 4644])
                    ("posix" variable (:type "bool") (reparse-symbol arg-sub-list) [4645 4656]))                  
                :type "void")
                nil [4540 5875])
            ("shrink_regexp_cache" function
               (:arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [6042 6047]))                  
                :type "void")
                nil [6016 6247])
            ("clear_regexp_cache" function
               (:arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [6553 6558]))                  
                :type "void")
                nil [6528 6920])
            ("compile_pattern" function
               (:pointer 1
                :arguments 
                  ( ("pattern" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [7515 7535])
                    ("regp" variable
                       (:pointer 1
                        :type ("re_registers" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [7536 7562])
                    ("translate" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [7566 7588])
                    ("posix" variable (:type "bool") (reparse-symbol arg-sub-list) [7589 7600])
                    ("multibyte" variable (:type "bool") (reparse-symbol arg-sub-list) [7601 7616]))                  
                :type ("re_pattern_buffer" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [7471 9530])
            ("looking_at_1" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("string" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [9567 9586])
                    ("posix" variable (:type "bool") (reparse-symbol arg-sub-list) [9587 9598]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [9534 11535])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Flooking_at" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [11558 11570])
                    ("" variable (:type ("Slooking_at" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [11571 11583])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [11600 11604]))                  
                :type "int")
                nil [11537 11860])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fposix_looking_at" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [11928 11946])
                    ("" variable (:type ("Sposix_looking_at" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [11947 11965])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [11982 11986]))                  
                :type "int")
                nil [11901 12313])
            ("string_match_1" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("regexp" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [12390 12409])
                    ("string" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [12410 12429])
                    ("start" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [12430 12448])
                    ("posix" variable (:type "bool") (reparse-symbol arg-sub-list) [12451 12462]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [12355 14229])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fstring_match" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [14254 14268])
                    ("" variable (:type ("Sstring_match" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [14269 14283])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [14300 14304]))                  
                :type "int")
                nil [14231 14860])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fposix_string_match" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [14947 14967])
                    ("" variable (:type ("Sposix_string_match" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [14968 14988])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [15005 15009]))                  
                :type "int")
                nil [14918 15534])
            ("fast_string_match_internal" function
               (:arguments 
                  ( ("regexp" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [15826 15845])
                    ("string" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [15846 15865])
                    ("table" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [15873 15891]))                  
                :type ("ptrdiff_t" type (:type "class") nil nil))
                nil [15788 16163])
            ("fast_c_string_match_ignore_case" function
               (:arguments 
                  ( ("regexp" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [16445 16464])
                    ("string" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [16470 16489])
                    ("len" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [16490 16504]))                  
                :type ("ptrdiff_t" type (:type "class") nil nil))
                nil [16402 16763])
            ("fast_looking_at" function
               (:arguments 
                  ( ("regexp" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [17076 17095])
                    ("pos" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [17096 17110])
                    ("pos_byte" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [17111 17130])
                    ("limit" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [17134 17150])
                    ("limit_byte" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [17151 17172])
                    ("string" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [17173 17192]))                  
                :type ("ptrdiff_t" type (:type "class") nil nil))
                nil [17049 18442])
            ("newline_cache_on_off" function
               (:pointer 1
                :typemodifiers ("static")
                :arguments 
                  ( ("buf" variable
                       (:pointer 1
                        :type ("buffer" type
                             (:prototype t
                              :type "struct")
                              nil nil))
                        (reparse-symbol arg-sub-list) [18794 18813]))                  
                :type ("region_cache" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [18743 19859])
            ("find_newline" function
               (:arguments 
                  ( ("start" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [20846 20862])
                    ("start_byte" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [20863 20884])
                    ("end" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [20885 20899])
                    ("end_byte" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [20907 20926])
                    ("count" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [20927 20943])
                    ("shortage" variable
                       (:pointer 1
                        :type ("ptrdiff_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [20944 20964])
                    ("bytepos" variable
                       (:pointer 1
                        :type ("ptrdiff_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [20972 20991])
                    ("allow_quit" variable (:type "bool") (reparse-symbol arg-sub-list) [20992 21008]))                  
                :type ("ptrdiff_t" type (:type "class") nil nil))
                nil [20822 28810])
            ("scan_newline" function
               (:arguments 
                  ( ("start" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [29462 29478])
                    ("start_byte" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [29479 29500])
                    ("limit" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [29508 29524])
                    ("limit_byte" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [29525 29546])
                    ("count" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [29554 29570])
                    ("allow_quit" variable (:type "bool") (reparse-symbol arg-sub-list) [29571 29587]))                  
                :type ("ptrdiff_t" type (:type "class") nil nil))
                nil [29438 29867])
            ("scan_newline_from_point" function
               (:arguments 
                  ( ("count" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [30014 30030])
                    ("charpos" variable
                       (:pointer 1
                        :type ("ptrdiff_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [30031 30050])
                    ("bytepos" variable
                       (:pointer 1
                        :type ("ptrdiff_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [30055 30074]))                  
                :type ("ptrdiff_t" type (:type "class") nil nil))
                nil [29979 30341])
            ("find_newline_no_quit" function
               (:arguments 
                  ( ("from" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [30460 30475])
                    ("frombyte" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [30476 30495])
                    ("cnt" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [30504 30518])
                    ("bytepos" variable
                       (:pointer 1
                        :type ("ptrdiff_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [30519 30538]))                  
                :type ("ptrdiff_t" type (:type "class") nil nil))
                nil [30428 30612])
            ("find_before_next_newline" function
               (:arguments 
                  ( ("from" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [30833 30848])
                    ("to" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [30849 30862])
                    ("cnt" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [30868 30882])
                    ("bytepos" variable
                       (:pointer 1
                        :type ("ptrdiff_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [30883 30902]))                  
                :type ("ptrdiff_t" type (:type "class") nil nil))
                nil [30797 31120])
            ("search_command" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("string" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [31210 31229])
                    ("bound" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [31230 31248])
                    ("noerror" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [31249 31269])
                    ("count" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [31272 31290])
                    ("direction" variable (:type "int") (reparse-symbol arg-sub-list) [31291 31305])
                    ("RE" variable (:type "int") (reparse-symbol arg-sub-list) [31306 31313])
                    ("posix" variable (:type "bool") (reparse-symbol arg-sub-list) [31314 31325]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [31175 32932])
            ("trivial_regexp_p" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("regexp" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [33032 33051]))                  
                :type "bool")
                nil [33002 33729])
            ("TRANSLATE" variable (:constant-flag t) nil [34442 34451])
            ("search_regs_1" variable
               (:typemodifiers ("static")
                :type ("re_registers" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [34939 34980])
            ("search_buffer" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("string" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [35014 35033])
                    ("pos" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [35034 35048])
                    ("pos_byte" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [35049 35068])
                    ("lim" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [35077 35091])
                    ("lim_byte" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [35092 35111])
                    ("n" variable (:type ("EMACS_INT" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [35112 35124])
                    ("RE" variable (:type "int") (reparse-symbol arg-sub-list) [35133 35140])
                    ("trt" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [35141 35157])
                    ("inverse_trt" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [35158 35182])
                    ("posix" variable (:type "bool") (reparse-symbol arg-sub-list) [35183 35194]))                  
                :type ("EMACS_INT" type (:type "class") nil nil))
                nil [34982 44637])
            ("simple_search" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("n" variable (:type ("EMACS_INT" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [45128 45140])
                    ("pat" variable
                       (:pointer 1
                        :type "unsigned char")
                        (reparse-symbol arg-sub-list) [45141 45160])
                    ("len" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [45169 45183])
                    ("len_byte" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [45184 45203])
                    ("trt" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [45204 45220])
                    ("pos" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [45229 45243])
                    ("pos_byte" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [45244 45263])
                    ("lim" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [45272 45286])
                    ("lim_byte" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [45287 45306]))                  
                :type ("EMACS_INT" type (:type "class") nil nil))
                nil [45096 48784])
            ("boyer_moore" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("n" variable (:type ("EMACS_INT" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [49503 49515])
                    ("base_pat" variable
                       (:pointer 1
                        :type "unsigned char")
                        (reparse-symbol arg-sub-list) [49516 49540])
                    ("len_byte" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [49547 49566])
                    ("trt" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [49573 49589])
                    ("inverse_trt" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [49590 49614])
                    ("pos_byte" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [49621 49640])
                    ("lim_byte" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [49641 49660])
                    ("char_base" variable (:type "int") (reparse-symbol arg-sub-list) [49674 49688]))                  
                :type ("EMACS_INT" type (:type "class") nil nil))
                nil [49473 62032])
            ("set_search_regs" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("beg_byte" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [62239 62258])
                    ("nbytes" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [62259 62276]))                  
                :type "void")
                nil [62210 62948])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fsearch_backward" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [62977 62994])
                    ("" variable (:type ("Ssearch_backward" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [62995 63012])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [63055 63059]))                  
                :type "int")
                nil [62951 64222])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fsearch_forward" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [64320 64336])
                    ("" variable (:type ("Ssearch_forward" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [64337 64353])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [64380 64384]))                  
                :type "int")
                nil [64295 65519])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fre_search_backward" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [65620 65640])
                    ("" variable (:type ("Sre_search_backward" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [65641 65661])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [65707 65711]))                  
                :type "int")
                nil [65591 66098])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fre_search_forward" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [66199 66218])
                    ("" variable (:type ("Sre_search_forward" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [66219 66238])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [66275 66279]))                  
                :type "int")
                nil [66171 67627])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fposix_search_backward" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [67731 67754])
                    ("" variable (:type ("Sposix_search_backward" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [67755 67778])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [67827 67831]))                  
                :type "int")
                nil [67699 69110])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fposix_search_forward" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [69214 69236])
                    ("" variable (:type ("Sposix_search_forward" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [69237 69259])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [69299 69303]))                  
                :type "int")
                nil [69183 70544])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Freplace_match" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [70641 70656])
                    ("" variable (:type ("Sreplace_match" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [70657 70672])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [70689 70693]))                  
                :type "int")
                nil [70617 72617])
            ("match_limit" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("num" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [83815 83831])
                    ("beginningp" variable (:type "bool") (reparse-symbol arg-sub-list) [83832 83848]))                  
                :type ("Lisp_Object" type (:type "class") nil nil))
                nil [83783 84247])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fmatch_beginning" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [84275 84292])
                    ("" variable (:type ("Smatch_beginning" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [84293 84310])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [84327 84331]))                  
                :type "int")
                nil [84249 84710])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fmatch_end" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [84770 84781])
                    ("" variable (:type ("Smatch_end" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [84782 84793])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [84810 84814]))                  
                :type "int")
                nil [84750 85191])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fmatch_data" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [85252 85264])
                    ("" variable (:type ("Smatch_data" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [85265 85277])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [85294 85298]))                  
                :type "int")
                nil [85231 86282])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fset_match_data" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [88748 88764])
                    ("" variable (:type ("Sset_match_data" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [88765 88781])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [88798 88802]))                  
                :type "int")
                nil [88723 89060])
            ("save_search_regs" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [91931 91936]))                  
                :type "void")
                nil [91901 92340])
            ("restore_search_regs" function
               (:arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [92419 92424]))                  
                :type "void")
                nil [92393 92844])
            ("update_search_regs" function
               (:arguments 
                  ( ("oldstart" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [92923 92942])
                    ("oldend" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [92943 92960])
                    ("newend" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [92961 92978]))                  
                :type "void")
                nil [92898 93472])
            ("unwind_set_match_data" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("list" variable (:type ("Lisp_Object" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [93509 93526]))                  
                :type "void")
                nil [93474 93636])
            ("record_unwind_save_match_data" function
               (:arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [93722 93727]))                  
                :type "void")
                nil [93686 93816])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fregexp_quote" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [93892 93906])
                    ("" variable (:type ("Sregexp_quote" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [93907 93921])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [93938 93942]))                  
                :type "int")
                nil [93869 94043])
            ("find_newline1" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("start" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [94876 94892])
                    ("start_byte" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [94893 94914])
                    ("end" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [94915 94929])
                    ("end_byte" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [94938 94957])
                    ("count" variable (:type ("ptrdiff_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [94958 94974])
                    ("shortage" variable
                       (:pointer 1
                        :type ("ptrdiff_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [94975 94995])
                    ("bytepos" variable
                       (:pointer 1
                        :type ("ptrdiff_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [95004 95023])
                    ("allow_quit" variable (:type "bool") (reparse-symbol arg-sub-list) [95024 95040]))                  
                :type ("ptrdiff_t" type (:type "class") nil nil))
                nil [94844 97139])
            ("DEFUN" function
               (:arguments 
                  ( ("" variable (:type ("Fnewline_cache_check" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [97171 97192])
                    ("" variable (:type ("Snewline_cache_check" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [97193 97214])
                    ("" variable (:type ("doc" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [97238 97242]))                  
                :type "int")
                nil [97141 97576])
            ("syms_of_search" function
               (:arguments 
                  ( ("" variable (:type "void") (reparse-symbol arg-sub-list) [99960 99965]))                  
                :type "void")
                nil [99939 103134]))          
      :file "search.c"
      :pointmax 103135
      :fsize 103134
      :lastmodtime '(22986 14552 0 0)
      :unmatched-syntax '((semantic-list 97577 . 99936) (punctuation 97241 . 97242) (number 97228 . 97229) (number 97225 . 97226) (number 97222 . 97223) (string 97148 . 97169) (semantic-list 94044 . 94762) (punctuation 93941 . 93942) (number 93928 . 93929) (number 93925 . 93926) (number 93922 . 93923) (string 93876 . 93890) (semantic-list 89061 . 91506) (punctuation 88801 . 88802) (number 88788 . 88789) (number 88785 . 88786) (number 88782 . 88783) (string 88730 . 88746) (semantic-list 86283 . 88273) (punctuation 85297 . 85298) (number 85284 . 85285) (number 85281 . 85282) (number 85278 . 85279) (string 85238 . 85250) (semantic-list 85192 . 85229) (punctuation 84813 . 84814) (number 84800 . 84801) (number 84797 . 84798) (number 84794 . 84795) (string 84757 . 84768) (semantic-list 84711 . 84748) (punctuation 84330 . 84331) (number 84317 . 84318) (number 84314 . 84315) (number 84311 . 84312) (string 84256 . 84273) (semantic-list 72618 . 83780) (punctuation 70692 . 70693) (number 70679 . 70680) (number 70676 . 70677) (number 70673 . 70674) (string 70624 . 70639) (semantic-list 70545 . 70614) (punctuation 69302 . 69303) (string 69273 . 69290) (number 69263 . 69264) (number 69260 . 69261) (string 69190 . 69212) (semantic-list 69111 . 69181) (punctuation 67830 . 67831) (string 67792 . 67818) (number 67782 . 67783) (number 67779 . 67780) (string 67706 . 67729) (semantic-list 67628 . 67697) (punctuation 66278 . 66279) (string 66252 . 66266) (number 66242 . 66243) (number 66239 . 66240) (string 66178 . 66197) (semantic-list 66099 . 66169) (punctuation 65710 . 65711) (string 65675 . 65698) (number 65665 . 65666) (number 65662 . 65663) (string 65598 . 65618) (semantic-list 65520 . 65589) (punctuation 64383 . 64384) (string 64360 . 64371) (number 64357 . 64358) (number 64354 . 64355) (string 64302 . 64318) (semantic-list 64223 . 64293) (punctuation 63058 . 63059) (string 63026 . 63046) (number 63016 . 63017) (number 63013 . 63014) (string 62958 . 62975) (semantic-list 15535 . 15590) (punctuation 15008 . 15009) (number 14995 . 14996) (number 14992 . 14993) (number 14989 . 14990) (string 14925 . 14945) (semantic-list 14861 . 14916) (punctuation 14303 . 14304) (number 14290 . 14291) (number 14287 . 14288) (number 14284 . 14285) (string 14238 . 14252) (semantic-list 12314 . 12352) (punctuation 11985 . 11986) (number 11972 . 11973) (number 11969 . 11970) (number 11966 . 11967) (string 11908 . 11926) (semantic-list 11861 . 11899) (punctuation 11603 . 11604) (number 11590 . 11591) (number 11587 . 11588) (number 11584 . 11585) (string 11544 . 11556) (symbol 3655 . 3664) (STATIC 3648 . 3654))
      :lexical-table 
        '(("REGEXP_CACHE_SIZE" . ((number "20" 1018 . 1020)))
          ("TRANSLATE" (spp-arg-list ("out" "trt" "d") 34451 . 34464) . 
              ((DO "do" 34469 . 34471) (semantic-list "{						\\
    if (! NILP (trt))				\\
      {						\\
	Lisp_Object temp;			\\
	temp = Faref (trt, make_number (d));	\\
	if (INTEGERP (temp))			\\
	  out = XINT (temp);			\\
	else					\\
	  out = d;				\\
      }						\\
    else					\\
      out = d;					\\
  }" 34481 . 34730) (WHILE "while" 34738 . 34743) (semantic-list "(0)" 34744 . 34747)))
          )
))
  :file "!Volumes!Transcend!emacs!src!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
