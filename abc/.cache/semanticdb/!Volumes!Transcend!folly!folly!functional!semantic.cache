;; Object semanticdb-project-database-file
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file"
  :tables
  (list
    (semanticdb-table "semanticdb-table"
      :major-mode c++-mode
      :tags 
        '( ("functional" include (:system-flag t) nil [882 903])
            ("tuple" include (:system-flag t) nil [904 920])
            ("utility" include (:system-flag t) nil [921 939])
            ("folly/Utility.h" include (:system-flag t) nil [941 967])
            ("folly" type
               (:members 
                  ( ("detail" type
                       (:members 
                          ( ("apply_tuple" type
                               (:members 
                                  ( ("sum" function (:type ("std::size_t" type (:type "class") nil nil)) (reparse-symbol namespacesubparts) [1121 1154])
                                    ("sum" function
                                       (:arguments 
                                          ( ("v1" variable (:type ("std::size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [1216 1231])
                                            ("" variable (:type ("Args" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [1232 1237])
                                            ("" variable (:type ("vs" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [1240 1243]))                                          
                                        :type ("std::size_t" type (:type "class") nil nil))
                                        (reparse-symbol namespacesubparts) [1200 1273])
                                    ("TupleSizeSum" type
                                       (:members 
                                          ( ("value" variable
                                               (:default-value "sum(std::tuple_size<Tuples>::value...)"
                                                :type ("auto" type (:type "class") nil nil))
                                                (reparse-symbol classsubparts) [1346 1398]))                                          
                                        :type "struct")
                                        (reparse-symbol namespacesubparts) [1305 1401])
                                    ("makeCallable" function
                                       (:arguments 
                                          ( ("" variable
                                               (:reference 1
                                                :type ("F" type (:type "class") nil nil))
                                                (reparse-symbol arg-sub-list) [1747 1750])
                                            ("" variable (:type ("f" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [1751 1753]))                                          
                                        :type "int")
                                        (reparse-symbol namespacesubparts) [1734 1786])
                                    ("decltype" function
                                       (:arguments 
                                          ( ("" variable (:type ("std::mem_fn" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [1872 1886]))                                          
                                        :type "int")
                                        (reparse-symbol namespacesubparts) [1863 1916])
                                    ("decltype" function
                                       (:arguments 
                                          ( ("f" variable
                                               (:pointer 
                                                  ( ("" variable (:type ("std::get" type
                                                         (:template-specifier 
                                                            ( ("Indexes" type nil nil nil))                                                            
                                                          :type "class")
                                                          nil nil)) (reparse-symbol arg-sub-list) [2098 2139])
                                                    ("..." variable (:type "vararg") (reparse-symbol arg-sub-list) [2139 2143]))                                                  
                                                :type ("std::forward" type
                                                     (:template-specifier 
                                                        ( ("F" type nil nil nil))                                                        
                                                      :type "class")
                                                      nil nil))
                                                (reparse-symbol arg-sub-list) [2079 2144]))                                          
                                        :type "int")
                                        (reparse-symbol namespacesubparts) [2061 2223])
                                    ("decltype" function
                                       (:arguments 
                                          ( ("" variable (:type ("std::forward_as_tuple" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [2378 2445]))                                          
                                        :type "int")
                                        (reparse-symbol namespacesubparts) [2360 2528]))                                  
                                :type "namespace")
                                (reparse-symbol namespacesubparts) [1079 2531]))                          
                        :type "namespace")
                        (reparse-symbol namespacesubparts) [1060 2558])
                    ("decltype" function
                       (:arguments 
                          ( ("" variable (:type ("detail::apply_tuple::call" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3080 3410]))                          
                        :type "int")
                        (reparse-symbol namespacesubparts) [3071 3746])
                    ("detail" type
                       (:members 
                          ( ("apply_tuple" type
                               (:members 
                                  ( ("Uncurry" type
                                       (:template 
                                          ( ("F" type (:type "class") nil nil))                                          
                                        :type "class"
                                        :members 
                                          ( ("public" label nil (reparse-symbol classsubparts) [3828 3835])
                                            ("Uncurry" function
                                               (:constructor-flag t
                                                :arguments 
                                                  ( ("" variable
                                                       (:reference 1
                                                        :type ("F" type (:type "class") nil nil))
                                                        (reparse-symbol arg-sub-list) [3855 3858])
                                                    ("" variable (:type ("func" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [3859 3864]))                                                  
                                                :type ("Uncurry" type (:type "class") nil nil))
                                                (reparse-symbol classsubparts) [3847 3892])
                                            ("Uncurry" function
                                               (:constructor-flag t
                                                :arguments 
                                                  ( ("func" variable
                                                       (:reference 1
                                                        :constant-flag t
                                                        :type ("F" type (:type "class") nil nil))
                                                        (reparse-symbol arg-sub-list) [3912 3926]))                                                  
                                                :type ("Uncurry" type (:type "class") nil nil))
                                                (reparse-symbol classsubparts) [3904 3943])
                                            ("decltype" function
                                               (:arguments 
                                                  ( ("" variable (:type ("applyTuple" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [4027 4084]))                                                  
                                                :type "int")
                                                (reparse-symbol classsubparts) [4018 4149])
                                            ("private" label nil (reparse-symbol classsubparts) [4152 4160])
                                            ("func_" variable (:type ("F" type (:type "class") nil nil)) (reparse-symbol classsubparts) [4163 4171]))                                          )
                                        (reparse-symbol namespacesubparts) [3792 4174]))                                  
                                :type "namespace")
                                (reparse-symbol namespacesubparts) [3767 4176]))                          
                        :type "namespace")
                        (reparse-symbol namespacesubparts) [3748 4203]))                  
                :type "namespace")
                nil [969 5117]))          
      :file "ApplyTuple.h"
      :pointmax 5137
      :fsize 5136
      :lastmodtime '(23032 17478 0 0)
      :unmatched-syntax '((semantic-list 4944 . 5043) (punctuation 4942 . 4943) (symbol 4938 . 4942) (punctuation 4937 . 4938) (punctuation 4936 . 4937) (punctuation 4935 . 4936) (symbol 4934 . 4935) (punctuation 4933 . 4934) (symbol 4928 . 4933) (punctuation 4927 . 4928) (punctuation 4926 . 4927) (symbol 4923 . 4926) (TYPENAME 4914 . 4922) (punctuation 4913 . 4914) (symbol 4906 . 4913) (punctuation 4905 . 4906) (punctuation 4904 . 4905) (symbol 4893 . 4904) (punctuation 4892 . 4893) (punctuation 4891 . 4892) (symbol 4885 . 4891) (punctuation 4883 . 4884) (punctuation 4882 . 4883) (semantic-list 4870 . 4877) (symbol 4863 . 4870) (punctuation 4873 . 4874) (symbol 4858 . 4862) (punctuation 4873 . 4874) (punctuation 4856 . 4857) (symbol 4855 . 4856) (CLASS 4849 . 4854) (punctuation 4848 . 4849) (TEMPLATE 4839 . 4847) (punctuation 4873 . 4874) (semantic-list 4037 . 4084) (punctuation 4016 . 4017) (punctuation 4015 . 4016) (CONST 4003 . 4008) (semantic-list 3987 . 4002) (semantic-list 3985 . 3987) (OPERATOR 3977 . 3985) (punctuation 3994 . 3995) (symbol 3972 . 3976) (punctuation 3994 . 3995) (punctuation 3968 . 3969) (symbol 3963 . 3968) (CLASS 3957 . 3962) (punctuation 3956 . 3957) (TEMPLATE 3947 . 3955) (punctuation 3994 . 3995) (EXPLICIT 3895 . 3903) (punctuation 3857 . 3858) (EXPLICIT 3838 . 3846) (semantic-list 3105 . 3410) (punctuation 3069 . 3070) (punctuation 3068 . 3069) (semantic-list 3041 . 3063) (symbol 3031 . 3041) (punctuation 3059 . 3060) (punctuation 3058 . 3059) (punctuation 3057 . 3058) (punctuation 3056 . 3057) (punctuation 3044 . 3045) (symbol 3026 . 3030) (punctuation 3059 . 3060) (punctuation 3058 . 3059) (punctuation 3057 . 3058) (punctuation 3056 . 3057) (punctuation 3044 . 3045) (symbol 3016 . 3025) (INLINE 3009 . 3015) (punctuation 3007 . 3008) (symbol 3001 . 3007) (punctuation 2999 . 3000) (punctuation 2998 . 2999) (punctuation 2997 . 2998) (CLASS 2992 . 2997) (punctuation 2990 . 2991) (symbol 2989 . 2990) (CLASS 2983 . 2988) (punctuation 2982 . 2983) (TEMPLATE 2973 . 2981) (semantic-list 2399 . 2445) (punctuation 2358 . 2359) (punctuation 2357 . 2358) (semantic-list 2306 . 2352) (symbol 2294 . 2306) (punctuation 2350 . 2351) (punctuation 2349 . 2350) (punctuation 2348 . 2349) (punctuation 2347 . 2348) (punctuation 2339 . 2340) (punctuation 2313 . 2314) (symbol 2289 . 2293) (punctuation 2350 . 2351) (punctuation 2349 . 2350) (punctuation 2348 . 2349) (punctuation 2347 . 2348) (punctuation 2339 . 2340) (punctuation 2313 . 2314) (symbol 2279 . 2288) (INLINE 2272 . 2278) (punctuation 2270 . 2271) (symbol 2263 . 2270) (punctuation 2261 . 2262) (punctuation 2260 . 2261) (punctuation 2259 . 2260) (symbol 2253 . 2259) (punctuation 2252 . 2253) (punctuation 2251 . 2252) (symbol 2248 . 2251) (punctuation 2246 . 2247) (symbol 2241 . 2246) (CLASS 2235 . 2240) (punctuation 2234 . 2235) (TEMPLATE 2225 . 2233) (semantic-list 2115 . 2139) (punctuation 2059 . 2060) (punctuation 2058 . 2059) (semantic-list 2000 . 2053) (symbol 1996 . 2000) (punctuation 2051 . 2052) (punctuation 2050 . 2051) (punctuation 2049 . 2050) (punctuation 2048 . 2049) (punctuation 2040 . 2041) (punctuation 2014 . 2015) (punctuation 2003 . 2004) (symbol 1991 . 1995) (punctuation 2051 . 2052) (punctuation 2050 . 2051) (punctuation 2049 . 2050) (punctuation 2048 . 2049) (punctuation 2040 . 2041) (punctuation 2014 . 2015) (punctuation 2003 . 2004) (symbol 1981 . 1990) (INLINE 1974 . 1980) (punctuation 1972 . 1973) (symbol 1965 . 1972) (punctuation 1963 . 1964) (punctuation 1962 . 1963) (punctuation 1961 . 1962) (symbol 1955 . 1961) (punctuation 1954 . 1955) (punctuation 1953 . 1954) (symbol 1950 . 1953) (punctuation 1948 . 1949) (symbol 1943 . 1948) (CLASS 1937 . 1942) (punctuation 1935 . 1936) (symbol 1934 . 1935) (CLASS 1928 . 1933) (punctuation 1927 . 1928) (TEMPLATE 1918 . 1926) (semantic-list 1883 . 1886) (punctuation 1861 . 1862) (punctuation 1860 . 1861) (semantic-list 1849 . 1859) (symbol 1837 . 1849) (semantic-list 1851 . 1858) (symbol 1832 . 1836) (semantic-list 1851 . 1858) (symbol 1822 . 1831) (INLINE 1815 . 1821) (punctuation 1813 . 1814) (symbol 1812 . 1813) (CLASS 1806 . 1811) (punctuation 1804 . 1805) (symbol 1803 . 1804) (CLASS 1797 . 1802) (punctuation 1796 . 1797) (TEMPLATE 1787 . 1795) (punctuation 1749 . 1750) (punctuation 1732 . 1733) (punctuation 1731 . 1732) (symbol 1730 . 1731) (symbol 1720 . 1729) (INLINE 1713 . 1719) (punctuation 1711 . 1712) (symbol 1710 . 1711) (CLASS 1704 . 1709) (punctuation 1703 . 1704) (TEMPLATE 1694 . 1702) (punctuation 1558 . 1559) (punctuation 1557 . 1558) (symbol 1552 . 1557) (punctuation 1551 . 1552) (punctuation 1550 . 1551) (punctuation 1549 . 1550) (punctuation 1548 . 1549) (punctuation 1547 . 1548) (punctuation 1546 . 1547) (symbol 1542 . 1546) (punctuation 1541 . 1542) (punctuation 1540 . 1541) (punctuation 1539 . 1540) (symbol 1533 . 1539) (punctuation 1532 . 1533) (symbol 1527 . 1532) (punctuation 1526 . 1527) (punctuation 1525 . 1526) (symbol 1522 . 1525) (TYPENAME 1513 . 1521) (punctuation 1512 . 1513) (symbol 1500 . 1512) (punctuation 1494 . 1495) (symbol 1475 . 1494) (punctuation 1474 . 1475) (punctuation 1473 . 1474) (symbol 1468 . 1473) (punctuation 1466 . 1467) (symbol 1439 . 1465) (USING 1433 . 1438) (punctuation 1431 . 1432) (symbol 1425 . 1431) (punctuation 1423 . 1424) (punctuation 1422 . 1423) (punctuation 1421 . 1422) (TYPENAME 1413 . 1421) (punctuation 1412 . 1413) (TEMPLATE 1403 . 1411) (symbol 1336 . 1345) (STATIC 1329 . 1335) (punctuation 1303 . 1304) (symbol 1297 . 1303) (punctuation 1295 . 1296) (punctuation 1294 . 1295) (punctuation 1293 . 1294) (TYPENAME 1285 . 1293) (punctuation 1284 . 1285) (TEMPLATE 1275 . 1283) (punctuation 1238 . 1239) (punctuation 1237 . 1238) (punctuation 1236 . 1237) (symbol 1190 . 1199) (INLINE 1183 . 1189) (punctuation 1181 . 1182) (symbol 1177 . 1181) (punctuation 1175 . 1176) (punctuation 1174 . 1175) (punctuation 1173 . 1174) (TYPENAME 1165 . 1173) (punctuation 1164 . 1165) (TEMPLATE 1155 . 1163) (symbol 1111 . 1120) (INLINE 1104 . 1110) (symbol 876 . 880) (symbol 869 . 875) (punctuation 868 . 869)))
    (semanticdb-table "semanticdb-table"
      :major-mode c++-mode
      :tags 
        '( ("functional" include (:system-flag t) nil [620 641])
            ("type_traits" include (:system-flag t) nil [642 664])
            ("folly/Traits.h" include (:system-flag t) nil [666 691])
            ("folly" type
               (:members 
                  ( ("decltype" function
                       (:arguments 
                          ( ("f" variable
                               (:pointer 
                                  ( ("" variable (:type ("std::forward" type
                                         (:template-specifier 
                                            ( ("Args" type nil nil nil))                                            
                                          :type "class")
                                          nil nil)) (reparse-symbol arg-sub-list) [1269 1293])
                                    ("..." variable (:type "vararg") (reparse-symbol arg-sub-list) [1293 1297]))                                  
                                :type ("std::forward" type
                                     (:template-specifier 
                                        ( ("F" type nil nil nil))                                        
                                      :type "class")
                                      nil nil))
                                (reparse-symbol arg-sub-list) [1250 1298]))                          
                        :type "int")
                        (reparse-symbol namespacesubparts) [1241 1360])
                    ("decltype" function
                       (:arguments 
                          ( ("d" variable
                               (:pointer 
                                  ( ("" variable (:type ("std::forward" type
                                         (:template-specifier 
                                            ( ("Args" type nil nil nil))                                            
                                          :type "class")
                                          nil nil)) (reparse-symbol arg-sub-list) [1492 1516])
                                    ("..." variable (:type "vararg") (reparse-symbol arg-sub-list) [1516 1520]))                                  
                                :type ("std::mem_fn" type (:type "class") nil nil))
                                (reparse-symbol arg-sub-list) [1477 1521]))                          
                        :type "int")
                        (reparse-symbol namespacesubparts) [1468 1579]))                  
                :type "namespace")
                nil [1027 1582])
            ("folly" type
               (:members 
                  ( ("detail" type
                       (:members 
                          ( ("invoke_result_" variable
                               (:default-value "decltype(invoke(std::declval<F>(), std::declval<Args>()...))"
                                :type "int")
                                (reparse-symbol namespacesubparts) [2123 2205])
                            ("invoke_result" type (:type "struct") (reparse-symbol namespacesubparts) [2518 2542])
                            ("is_invocable" type
                               (:superclasses 
                                  ( ("std::false_type" type
                                       (:protection "unspecified"
                                        :type "class")
                                        nil nil))                                  
                                :type "struct")
                                (reparse-symbol namespacesubparts) [2757 2798])
                            ("std::true_type" variable (:type "int") (reparse-symbol namespacesubparts) [2914 2932])
                            ("is_invocable_r" type
                               (:superclasses 
                                  ( ("std::false_type" type
                                       (:protection "unspecified"
                                        :type "class")
                                        nil nil))                                  
                                :type "struct")
                                (reparse-symbol namespacesubparts) [3001 3044])
                            ("is_nothrow_invocable" type
                               (:superclasses 
                                  ( ("std::false_type" type
                                       (:protection "unspecified"
                                        :type "class")
                                        nil nil))                                  
                                :type "struct")
                                (reparse-symbol namespacesubparts) [3288 3337])
                            ("is_nothrow_invocable_r" type
                               (:superclasses 
                                  ( ("std::false_type" type
                                       (:protection "unspecified"
                                        :type "class")
                                        nil nil))                                  
                                :type "struct")
                                (reparse-symbol namespacesubparts) [3561 3612]))                          
                        :type "namespace")
                        (reparse-symbol namespacesubparts) [2057 3875])
                    ("type" variable (:type "int") (reparse-symbol namespacesubparts) [4181 4186]))                  
                :type "namespace")
                nil [2038 4851])
            ("FOLLY_CREATE_MEMBER_INVOKE_TRAITS" variable (:constant-flag t) nil [6847 6880]))          
      :file "Invoke.h"
      :pointmax 12283
      :fsize 12282
      :lastmodtime '(23109 45034 0 0)
      :unmatched-syntax '((punctuation 4847 . 4848) (semantic-list 4845 . 4847) (punctuation 4843 . 4844) (punctuation 4842 . 4843) (punctuation 4841 . 4842) (punctuation 4840 . 4841) (symbol 4836 . 4840) (punctuation 4834 . 4835) (symbol 4833 . 4834) (punctuation 4831 . 4832) (symbol 4830 . 4831) (punctuation 4828 . 4829) (VOID 4824 . 4828) (punctuation 4823 . 4824) (symbol 4801 . 4823) (punctuation 4800 . 4801) (punctuation 4799 . 4800) (symbol 4793 . 4799) (punctuation 4791 . 4792) (symbol 4764 . 4786) (STRUCT 4757 . 4763) (punctuation 4755 . 4756) (symbol 4751 . 4755) (punctuation 4749 . 4750) (punctuation 4748 . 4749) (punctuation 4747 . 4748) (TYPENAME 4739 . 4747) (punctuation 4737 . 4738) (symbol 4736 . 4737) (TYPENAME 4727 . 4735) (punctuation 4725 . 4726) (symbol 4724 . 4725) (TYPENAME 4715 . 4723) (punctuation 4714 . 4715) (TEMPLATE 4705 . 4713) (punctuation 4656 . 4657) (semantic-list 4654 . 4656) (punctuation 4652 . 4653) (punctuation 4651 . 4652) (punctuation 4650 . 4651) (punctuation 4649 . 4650) (symbol 4645 . 4649) (punctuation 4643 . 4644) (symbol 4642 . 4643) (punctuation 4640 . 4641) (VOID 4636 . 4640) (punctuation 4635 . 4636) (symbol 4615 . 4635) (punctuation 4614 . 4615) (punctuation 4613 . 4614) (symbol 4607 . 4613) (punctuation 4605 . 4606) (symbol 4584 . 4604) (STRUCT 4577 . 4583) (punctuation 4575 . 4576) (symbol 4571 . 4575) (punctuation 4569 . 4570) (punctuation 4568 . 4569) (punctuation 4567 . 4568) (TYPENAME 4559 . 4567) (punctuation 4557 . 4558) (symbol 4556 . 4557) (TYPENAME 4547 . 4555) (punctuation 4546 . 4547) (TEMPLATE 4537 . 4545) (punctuation 4490 . 4491) (semantic-list 4488 . 4490) (punctuation 4486 . 4487) (punctuation 4485 . 4486) (punctuation 4484 . 4485) (punctuation 4483 . 4484) (symbol 4479 . 4483) (punctuation 4477 . 4478) (symbol 4476 . 4477) (punctuation 4474 . 4475) (symbol 4473 . 4474) (punctuation 4471 . 4472) (VOID 4467 . 4471) (punctuation 4466 . 4467) (symbol 4452 . 4466) (punctuation 4451 . 4452) (punctuation 4450 . 4451) (symbol 4444 . 4450) (punctuation 4442 . 4443) (symbol 4427 . 4441) (STRUCT 4420 . 4426) (punctuation 4418 . 4419) (symbol 4414 . 4418) (punctuation 4412 . 4413) (punctuation 4411 . 4412) (punctuation 4410 . 4411) (TYPENAME 4402 . 4410) (punctuation 4400 . 4401) (symbol 4399 . 4400) (TYPENAME 4390 . 4398) (punctuation 4388 . 4389) (symbol 4387 . 4388) (TYPENAME 4378 . 4386) (punctuation 4377 . 4378) (TEMPLATE 4368 . 4376) (punctuation 4327 . 4328) (semantic-list 4325 . 4327) (punctuation 4323 . 4324) (punctuation 4322 . 4323) (punctuation 4321 . 4322) (punctuation 4320 . 4321) (symbol 4316 . 4320) (punctuation 4314 . 4315) (symbol 4313 . 4314) (punctuation 4311 . 4312) (VOID 4307 . 4311) (punctuation 4306 . 4307) (symbol 4294 . 4306) (punctuation 4293 . 4294) (punctuation 4292 . 4293) (symbol 4286 . 4292) (punctuation 4284 . 4285) (symbol 4271 . 4283) (STRUCT 4264 . 4270) (punctuation 4262 . 4263) (symbol 4258 . 4262) (punctuation 4256 . 4257) (punctuation 4255 . 4256) (punctuation 4254 . 4255) (TYPENAME 4246 . 4254) (punctuation 4244 . 4245) (symbol 4243 . 4244) (TYPENAME 4234 . 4242) (punctuation 4233 . 4234) (TEMPLATE 4224 . 4232) (punctuation 4180 . 4181) (punctuation 4179 . 4180) (punctuation 4178 . 4179) (punctuation 4177 . 4178) (punctuation 4176 . 4177) (punctuation 4175 . 4176) (symbol 4171 . 4175) (punctuation 4169 . 4170) (symbol 4168 . 4169) (punctuation 4167 . 4168) (symbol 4154 . 4167) (TYPENAME 4145 . 4153) (punctuation 4143 . 4144) (symbol 4127 . 4142) (USING 4121 . 4126) (punctuation 4119 . 4120) (symbol 4115 . 4119) (punctuation 4113 . 4114) (punctuation 4112 . 4113) (punctuation 4111 . 4112) (TYPENAME 4103 . 4111) (punctuation 4101 . 4102) (symbol 4100 . 4101) (TYPENAME 4091 . 4099) (punctuation 4090 . 4091) (TEMPLATE 4081 . 4089) (punctuation 4039 . 4040) (semantic-list 4037 . 4039) (punctuation 4035 . 4036) (punctuation 4034 . 4035) (punctuation 4033 . 4034) (punctuation 4032 . 4033) (symbol 4028 . 4032) (punctuation 4026 . 4027) (symbol 4025 . 4026) (punctuation 4023 . 4024) (VOID 4019 . 4023) (punctuation 4018 . 4019) (symbol 4005 . 4018) (punctuation 4004 . 4005) (punctuation 4003 . 4004) (symbol 3997 . 4003) (punctuation 3995 . 3996) (symbol 3981 . 3994) (STRUCT 3974 . 3980) (punctuation 3972 . 3973) (symbol 3968 . 3972) (punctuation 3966 . 3967) (punctuation 3965 . 3966) (punctuation 3964 . 3965) (TYPENAME 3956 . 3964) (punctuation 3954 . 3955) (symbol 3953 . 3954) (TYPENAME 3944 . 3952) (punctuation 3943 . 3944) (TEMPLATE 3934 . 3942) (punctuation 3871 . 3872) (semantic-list 3869 . 3871) (punctuation 3867 . 3868) (punctuation 3866 . 3867) (punctuation 3865 . 3866) (punctuation 3864 . 3865) (punctuation 3863 . 3864) (symbol 3859 . 3863) (punctuation 3857 . 3858) (symbol 3856 . 3857) (punctuation 3855 . 3856) (symbol 3840 . 3855) (punctuation 3830 . 3831) (punctuation 3829 . 3830) (symbol 3828 . 3829) (punctuation 3826 . 3827) (punctuation 3825 . 3826) (punctuation 3824 . 3825) (punctuation 3823 . 3824) (punctuation 3822 . 3823) (symbol 3818 . 3822) (punctuation 3816 . 3817) (symbol 3815 . 3816) (punctuation 3814 . 3815) (symbol 3800 . 3814) (punctuation 3799 . 3800) (symbol 3785 . 3799) (punctuation 3784 . 3785) (punctuation 3783 . 3784) (symbol 3780 . 3783) (punctuation 3770 . 3771) (symbol 3753 . 3770) (punctuation 3751 . 3752) (punctuation 3745 . 3746) (punctuation 3744 . 3745) (punctuation 3743 . 3744) (punctuation 3742 . 3743) (symbol 3738 . 3742) (punctuation 3736 . 3737) (symbol 3735 . 3736) (punctuation 3733 . 3734) (symbol 3732 . 3733) (punctuation 3730 . 3731) (punctuation 3729 . 3730) (punctuation 3728 . 3729) (punctuation 3727 . 3728) (punctuation 3726 . 3727) (punctuation 3725 . 3726) (symbol 3721 . 3725) (punctuation 3719 . 3720) (symbol 3718 . 3719) (punctuation 3717 . 3718) (symbol 3703 . 3717) (punctuation 3702 . 3703) (symbol 3696 . 3702) (punctuation 3695 . 3696) (symbol 3673 . 3695) (STRUCT 3666 . 3672) (punctuation 3664 . 3665) (symbol 3660 . 3664) (punctuation 3658 . 3659) (punctuation 3657 . 3658) (punctuation 3656 . 3657) (TYPENAME 3648 . 3656) (punctuation 3646 . 3647) (symbol 3645 . 3646) (TYPENAME 3636 . 3644) (punctuation 3634 . 3635) (symbol 3633 . 3634) (TYPENAME 3624 . 3632) (punctuation 3623 . 3624) (TEMPLATE 3614 . 3622) (punctuation 3559 . 3560) (symbol 3555 . 3559) (punctuation 3553 . 3554) (punctuation 3552 . 3553) (punctuation 3551 . 3552) (TYPENAME 3543 . 3551) (punctuation 3541 . 3542) (symbol 3540 . 3541) (TYPENAME 3531 . 3539) (punctuation 3529 . 3530) (symbol 3528 . 3529) (TYPENAME 3519 . 3527) (punctuation 3517 . 3518) (symbol 3513 . 3517) (TYPENAME 3504 . 3512) (punctuation 3503 . 3504) (TEMPLATE 3494 . 3502) (punctuation 3491 . 3492) (semantic-list 3489 . 3491) (punctuation 3487 . 3488) (punctuation 3486 . 3487) (punctuation 3485 . 3486) (punctuation 3484 . 3485) (symbol 3480 . 3484) (punctuation 3478 . 3479) (symbol 3477 . 3478) (punctuation 3476 . 3477) (symbol 3461 . 3476) (punctuation 3459 . 3460) (punctuation 3453 . 3454) (punctuation 3452 . 3453) (punctuation 3451 . 3452) (punctuation 3450 . 3451) (symbol 3446 . 3450) (punctuation 3444 . 3445) (symbol 3443 . 3444) (punctuation 3441 . 3442) (punctuation 3440 . 3441) (punctuation 3439 . 3440) (punctuation 3438 . 3439) (punctuation 3437 . 3438) (punctuation 3436 . 3437) (symbol 3432 . 3436) (punctuation 3430 . 3431) (symbol 3429 . 3430) (punctuation 3428 . 3429) (symbol 3414 . 3428) (punctuation 3413 . 3414) (symbol 3407 . 3413) (punctuation 3406 . 3407) (symbol 3386 . 3406) (STRUCT 3379 . 3385) (punctuation 3377 . 3378) (symbol 3373 . 3377) (punctuation 3371 . 3372) (punctuation 3370 . 3371) (punctuation 3369 . 3370) (TYPENAME 3361 . 3369) (punctuation 3359 . 3360) (symbol 3358 . 3359) (TYPENAME 3349 . 3357) (punctuation 3348 . 3349) (TEMPLATE 3339 . 3347) (punctuation 3286 . 3287) (symbol 3282 . 3286) (punctuation 3280 . 3281) (punctuation 3279 . 3280) (punctuation 3278 . 3279) (TYPENAME 3270 . 3278) (punctuation 3268 . 3269) (symbol 3267 . 3268) (TYPENAME 3258 . 3266) (punctuation 3256 . 3257) (symbol 3252 . 3256) (TYPENAME 3243 . 3251) (punctuation 3242 . 3243) (TEMPLATE 3233 . 3241) (punctuation 3230 . 3231) (semantic-list 3228 . 3230) (punctuation 3226 . 3227) (symbol 3225 . 3226) (punctuation 3223 . 3224) (punctuation 3222 . 3223) (punctuation 3221 . 3222) (punctuation 3220 . 3221) (punctuation 3219 . 3220) (symbol 3215 . 3219) (punctuation 3213 . 3214) (symbol 3212 . 3213) (punctuation 3211 . 3212) (symbol 3197 . 3211) (punctuation 3196 . 3197) (symbol 3182 . 3196) (punctuation 3181 . 3182) (punctuation 3180 . 3181) (symbol 3177 . 3180) (punctuation 3175 . 3176) (punctuation 3169 . 3170) (punctuation 3168 . 3169) (punctuation 3167 . 3168) (punctuation 3166 . 3167) (symbol 3162 . 3166) (punctuation 3160 . 3161) (symbol 3159 . 3160) (punctuation 3157 . 3158) (symbol 3156 . 3157) (punctuation 3154 . 3155) (punctuation 3153 . 3154) (punctuation 3152 . 3153) (punctuation 3151 . 3152) (punctuation 3150 . 3151) (punctuation 3149 . 3150) (symbol 3145 . 3149) (punctuation 3143 . 3144) (symbol 3142 . 3143) (punctuation 3141 . 3142) (symbol 3127 . 3141) (punctuation 3126 . 3127) (symbol 3120 . 3126) (punctuation 3119 . 3120) (symbol 3105 . 3119) (STRUCT 3098 . 3104) (punctuation 3096 . 3097) (symbol 3092 . 3096) (punctuation 3090 . 3091) (punctuation 3089 . 3090) (punctuation 3088 . 3089) (TYPENAME 3080 . 3088) (punctuation 3078 . 3079) (symbol 3077 . 3078) (TYPENAME 3068 . 3076) (punctuation 3066 . 3067) (symbol 3065 . 3066) (TYPENAME 3056 . 3064) (punctuation 3055 . 3056) (TEMPLATE 3046 . 3054) (punctuation 2999 . 3000) (symbol 2995 . 2999) (punctuation 2993 . 2994) (punctuation 2992 . 2993) (punctuation 2991 . 2992) (TYPENAME 2983 . 2991) (punctuation 2981 . 2982) (symbol 2980 . 2981) (TYPENAME 2971 . 2979) (punctuation 2969 . 2970) (symbol 2968 . 2969) (TYPENAME 2959 . 2967) (punctuation 2957 . 2958) (symbol 2953 . 2957) (TYPENAME 2944 . 2952) (punctuation 2943 . 2944) (TEMPLATE 2934 . 2942) (punctuation 2912 . 2913) (punctuation 2906 . 2907) (punctuation 2905 . 2906) (punctuation 2904 . 2905) (punctuation 2903 . 2904) (symbol 2899 . 2903) (punctuation 2897 . 2898) (symbol 2896 . 2897) (punctuation 2894 . 2895) (punctuation 2893 . 2894) (punctuation 2892 . 2893) (punctuation 2891 . 2892) (punctuation 2890 . 2891) (punctuation 2889 . 2890) (symbol 2885 . 2889) (punctuation 2883 . 2884) (symbol 2882 . 2883) (punctuation 2881 . 2882) (symbol 2867 . 2881) (punctuation 2866 . 2867) (symbol 2860 . 2866) (punctuation 2859 . 2860) (symbol 2847 . 2859) (STRUCT 2840 . 2846) (punctuation 2838 . 2839) (symbol 2834 . 2838) (punctuation 2832 . 2833) (punctuation 2831 . 2832) (punctuation 2830 . 2831) (TYPENAME 2822 . 2830) (punctuation 2820 . 2821) (symbol 2819 . 2820) (TYPENAME 2810 . 2818) (punctuation 2809 . 2810) (TEMPLATE 2800 . 2808) (punctuation 2755 . 2756) (symbol 2751 . 2755) (punctuation 2749 . 2750) (punctuation 2748 . 2749) (punctuation 2747 . 2748) (TYPENAME 2739 . 2747) (punctuation 2737 . 2738) (symbol 2736 . 2737) (TYPENAME 2727 . 2735) (punctuation 2725 . 2726) (symbol 2721 . 2725) (TYPENAME 2712 . 2720) (punctuation 2711 . 2712) (TEMPLATE 2702 . 2710) (punctuation 2699 . 2700) (semantic-list 2653 . 2699) (punctuation 2651 . 2652) (punctuation 2650 . 2651) (punctuation 2649 . 2650) (punctuation 2648 . 2649) (symbol 2644 . 2648) (punctuation 2642 . 2643) (symbol 2641 . 2642) (punctuation 2639 . 2640) (punctuation 2638 . 2639) (punctuation 2637 . 2638) (punctuation 2636 . 2637) (punctuation 2635 . 2636) (punctuation 2634 . 2635) (symbol 2630 . 2634) (punctuation 2628 . 2629) (symbol 2627 . 2628) (punctuation 2626 . 2627) (symbol 2612 . 2626) (punctuation 2611 . 2612) (symbol 2605 . 2611) (punctuation 2604 . 2605) (symbol 2591 . 2604) (STRUCT 2584 . 2590) (punctuation 2582 . 2583) (symbol 2578 . 2582) (punctuation 2576 . 2577) (punctuation 2575 . 2576) (punctuation 2574 . 2575) (TYPENAME 2566 . 2574) (punctuation 2564 . 2565) (symbol 2563 . 2564) (TYPENAME 2554 . 2562) (punctuation 2553 . 2554) (TEMPLATE 2544 . 2552) (punctuation 2516 . 2517) (symbol 2512 . 2516) (punctuation 2510 . 2511) (punctuation 2509 . 2510) (punctuation 2508 . 2509) (TYPENAME 2500 . 2508) (punctuation 2498 . 2499) (symbol 2497 . 2498) (TYPENAME 2488 . 2496) (punctuation 2486 . 2487) (symbol 2482 . 2486) (TYPENAME 2473 . 2481) (punctuation 2472 . 2473) (TEMPLATE 2463 . 2471) (punctuation 2390 . 2391) (semantic-list 2388 . 2390) (punctuation 2386 . 2387) (semantic-list 2334 . 2386) (symbol 2326 . 2334) (semantic-list 2341 . 2385) (punctuation 2314 . 2315) (BOOL 2310 . 2314) (punctuation 2298 . 2299) (symbol 2281 . 2298) (punctuation 2280 . 2281) (punctuation 2279 . 2280) (symbol 2276 . 2279) (punctuation 2274 . 2275) (symbol 2254 . 2269) (STRUCT 2247 . 2253) (punctuation 2245 . 2246) (symbol 2241 . 2245) (punctuation 2239 . 2240) (punctuation 2238 . 2239) (punctuation 2237 . 2238) (TYPENAME 2229 . 2237) (punctuation 2227 . 2228) (symbol 2226 . 2227) (TYPENAME 2217 . 2225) (punctuation 2216 . 2217) (TEMPLATE 2207 . 2215) (USING 2117 . 2122) (punctuation 2115 . 2116) (symbol 2111 . 2115) (punctuation 2109 . 2110) (punctuation 2108 . 2109) (punctuation 2107 . 2108) (TYPENAME 2099 . 2107) (punctuation 2097 . 2098) (symbol 2096 . 2097) (TYPENAME 2087 . 2095) (punctuation 2086 . 2087) (TEMPLATE 2077 . 2085) (semantic-list 1510 . 1516) (punctuation 1466 . 1467) (punctuation 1465 . 1466) (semantic-list 1434 . 1460) (symbol 1428 . 1434) (punctuation 1453 . 1454) (punctuation 1452 . 1453) (punctuation 1451 . 1452) (punctuation 1450 . 1451) (semantic-list 1436 . 1443) (symbol 1423 . 1427) (punctuation 1453 . 1454) (punctuation 1452 . 1453) (punctuation 1451 . 1452) (punctuation 1450 . 1451) (semantic-list 1436 . 1443) (symbol 1413 . 1422) (punctuation 1411 . 1412) (symbol 1407 . 1411) (punctuation 1405 . 1406) (punctuation 1404 . 1405) (punctuation 1403 . 1404) (TYPENAME 1395 . 1403) (punctuation 1393 . 1394) (symbol 1392 . 1393) (TYPENAME 1383 . 1391) (punctuation 1381 . 1382) (symbol 1380 . 1381) (TYPENAME 1371 . 1379) (punctuation 1370 . 1371) (TEMPLATE 1361 . 1369) (semantic-list 1287 . 1293) (punctuation 1239 . 1240) (punctuation 1238 . 1239) (semantic-list 1169 . 1233) (symbol 1161 . 1169) (semantic-list 1183 . 1232) (semantic-list 1137 . 1160) (symbol 1131 . 1137) (punctuation 1153 . 1154) (punctuation 1152 . 1153) (punctuation 1151 . 1152) (punctuation 1150 . 1151) (punctuation 1140 . 1141) (symbol 1126 . 1130) (punctuation 1153 . 1154) (punctuation 1152 . 1153) (punctuation 1151 . 1152) (punctuation 1150 . 1151) (punctuation 1140 . 1141) (symbol 1116 . 1125) (punctuation 1114 . 1115) (symbol 1110 . 1114) (punctuation 1108 . 1109) (punctuation 1107 . 1108) (punctuation 1106 . 1107) (TYPENAME 1098 . 1106) (punctuation 1096 . 1097) (symbol 1095 . 1096) (TYPENAME 1086 . 1094) (punctuation 1085 . 1086) (TEMPLATE 1076 . 1084) (symbol 614 . 618) (symbol 607 . 613) (punctuation 606 . 607))
      :lexical-table 
        '(("FOLLY_CREATE_MEMBER_INVOKE_TRAITS" (spp-arg-list ("classname" "membername") 6880 . 6903) . 
              ((STRUCT "struct" 6921 . 6927) (symbol "classname" 6928 . 6937) (semantic-list "{                                                          \\
   private:                                                                   \\
    template <typename T>                                                     \\
    using v_ = ::folly::void_t<T>;                                            \\
    template <typename F, typename... Args>                                   \\
    using result_ =                                                           \\
        decltype(::std::declval<F>().membername(::std::declval<Args>()...));  \\
    template <typename F, typename... Args>                                   \\
    struct nothrow_ : std::integral_constant<                                 \\
                          bool,                                               \\
                          noexcept(::std::declval<F>().membername(            \\
                              ::std::declval<Args>()...))> {};                \\
                                                                              \\
    template <typename, typename F, typename... Args>                         \\
    struct invoke_result_ {};                                                 \\
    template <typename F, typename... Args>                                   \\
    struct invoke_result_<v_<result_<F, Args...>>, F, Args...> {              \\
      using type = result_<F, Args...>;                                       \\
    };                                                                        \\
                                                                              \\
    template <typename, typename F, typename... Args>                         \\
    struct is_invocable_ : ::std::false_type {};                              \\
    template <typename F, typename... Args>                                   \\
    struct is_invocable_<v_<result_<F, Args...>>, F, Args...>                 \\
        : ::std::true_type {};                                                \\
                                                                              \\
    template <typename, typename R, typename F, typename... Args>             \\
    struct is_invocable_r_ : ::std::false_type {};                            \\
    template <typename R, typename F, typename... Args>                       \\
    struct is_invocable_r_<v_<result_<F, Args...>>, R, F, Args...>            \\
        : ::std::is_convertible<result_<F, Args...>, R> {};                   \\
                                                                              \\
    template <typename, typename F, typename... Args>                         \\
    struct is_nothrow_invocable_ : ::std::false_type {};                      \\
    template <typename F, typename... Args>                                   \\
    struct is_nothrow_invocable_<v_<result_<F, Args...>>, F, Args...>         \\
        : nothrow_<F, Args...> {};                                            \\
                                                                              \\
    template <typename, typename R, typename F, typename... Args>             \\
    struct is_nothrow_invocable_r_ : ::std::false_type {};                    \\
    template <typename R, typename F, typename... Args>                       \\
    struct is_nothrow_invocable_r_<v_<result_<F, Args...>>, R, F, Args...>    \\
        : ::folly::StrictConjunction<                                         \\
              ::std::is_convertible<result_<F, Args...>, R>,                  \\
              nothrow_<F, Args...>> {};                                       \\
                                                                              \\
   public:                                                                    \\
    template <typename F, typename... Args>                                   \\
    struct invoke_result : invoke_result_<void, F, Args...> {};               \\
    template <typename F, typename... Args>                                   \\
    using invoke_result_t = typename invoke_result<F, Args...>::type;         \\
    template <typename F, typename... Args>                                   \\
    struct is_invocable : is_invocable_<void, F, Args...> {};                 \\
    template <typename R, typename F, typename... Args>                       \\
    struct is_invocable_r : is_invocable_r_<void, R, F, Args...> {};          \\
    template <typename F, typename... Args>                                   \\
    struct is_nothrow_invocable : is_nothrow_invocable_<void, F, Args...> {}; \\
    template <typename R, typename F, typename... Args>                       \\
    struct is_nothrow_invocable_r                                             \\
        : is_nothrow_invocable_r_<void, R, F, Args...> {};                    \\
                                                                              \\
    template <typename F, typename... Args>                                   \\
    static constexpr result_<F, Args...> invoke(                              \\
        F&& f,                                                                \\
        Args&&... args) noexcept(nothrow_<F, Args...>::value) {               \\
      return std::forward<F>(f).membername(std::forward<Args>(args)...);      \\
    }                                                                         \\
  }" 6938 . 12282)))
          )
))
  :file "!Volumes!Transcend!folly!folly!functional!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
