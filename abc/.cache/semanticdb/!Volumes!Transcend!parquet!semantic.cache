;; Object semanticdb-project-database-file
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file"
  :tables
  (list
    (semanticdb-table "semanticdb-table"
      :major-mode python-mode
      :tags 
        '( ("_GetPath" function (:arguments 
              ( ("ctx" variable nil (reparse-symbol function_parameters) [14 17])
                ("path" variable nil (reparse-symbol function_parameters) [19 23]))              ) nil [1 142])
            ("_SourceDir" function (:arguments 
              ( ("ctx" variable nil (reparse-symbol function_parameters) [158 161]))              ) nil [143 449])
            ("_GenDir" function (:arguments 
              ( ("ctx" variable nil (reparse-symbol function_parameters) [462 465]))              ) nil [450 521])
            ("_thrift_gen_impl" function
               (:documentation "General implementation for generating thrifts"
                :arguments 
                  ( ("ctx" variable nil (reparse-symbol function_parameters) [543 546]))                  )
                nil [522 631])
            ("_thrift_filetype" variable nil nil [818 858])
            ("_thriftlib_tar_filetype" variable nil nil [859 913])
            ("_get_target_genfiles_root" function (:arguments 
              ( ("ctx" variable nil (reparse-symbol function_parameters) [946 949]))              ) nil [916 1004])
            ("_mkdir_command_string" function (:arguments 
              ( ("path" variable nil (reparse-symbol function_parameters) [1032 1036]))              ) nil [1006 1078])
            ("_ls_command_string" function (:arguments 
              ( ("path" variable nil (reparse-symbol function_parameters) [1103 1107]))              ) nil [1080 1147])
            ("_cp_command_string" function (:arguments 
              ( ("from_path" variable nil (reparse-symbol function_parameters) [1172 1181])
                ("to_path" variable nil (reparse-symbol function_parameters) [1183 1190]))              ) nil [1149 1271])
            ("_fix_timestamps_command_string" function (:arguments 
              ( ("root" variable nil (reparse-symbol function_parameters) [1308 1312]))              ) nil [1273 1418])
            ("_tar_extract_command_string" function (:arguments 
              ( ("filename" variable nil (reparse-symbol function_parameters) [1452 1460])
                ("to_path" variable nil (reparse-symbol function_parameters) [1462 1469]))              ) nil [1420 1542])
            ("_thrift_java_compile_command_string" function (:arguments 
              ( ("include_dir" variable nil (reparse-symbol function_parameters) [1584 1595])
                ("java_root" variable nil (reparse-symbol function_parameters) [1597 1606])
                ("src" variable nil (reparse-symbol function_parameters) [1608 1611]))              ) nil [1544 1746])
            ("_get_full_remove_prefix" function (:arguments 
              ( ("ctx" variable nil (reparse-symbol function_parameters) [1776 1779]))              ) nil [1748 2477])
            ("_thrift_library_impl" function (:arguments 
              ( ("ctx" variable nil (reparse-symbol function_parameters) [2504 2507]))              ) nil [2479 3707])
            ("thrift_library" variable nil nil [3709 4063])
            ("_gen_thrift_srcjar_impl" function (:arguments 
              ( ("ctx" variable nil (reparse-symbol function_parameters) [4094 4097]))              ) nil [4066 5396])
            ("thrift_java_srcjar" variable nil nil [5398 5899])
            ("thrift_java_library" function (:arguments 
              ( ("name" variable nil (reparse-symbol function_parameters) [5926 5930])
                ("thrift_library" variable nil (reparse-symbol function_parameters) [5932 5946])
                ("deps" variable nil (reparse-symbol function_parameters) [5948 5952])
                ("visibility" variable nil (reparse-symbol function_parameters) [5957 5967]))              ) nil [5902 6343]))          
      :file "thrift.bzl"
      :pointmax 6343
      :fsize 6342
      :lastmodtime '(23108 47587 0 0)
      :unmatched-syntax nil))
  :file "!Volumes!Transcend!parquet!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
