;; Object semanticdb-project-database-file
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file"
  :tables
  (list
    (semanticdb-table "semanticdb-table"
      :major-mode c-mode
      :tags 
        '( ("common.h" include nil nil [778 797])
            ("threads.h" include nil nil [799 819])
            ("comms.h" include nil nil [820 838])
            ("cfg.h" include nil nil [839 855])
            ("log.h" include nil nil [856 872])
            ("zbxgetopt.h" include nil nil [873 895])
            ("zbxjson.h" include nil nil [896 916])
            ("../libs/zbxcrypto/tls.h" include nil nil [917 951])
            ("zbxnix.h" include nil nil [970 990])
            ("progname" variable
               (:pointer 1
                :constant-flag t
                :default-value "NULL"
                :type "char")
                nil [999 1027])
            ("title_message" variable
               (:dereference 1
                :constant-flag t
                :default-value "\"zabbix_sender\""
                :type "char")
                nil [1028 1073])
            ("syslog_app_name" variable
               (:dereference 1
                :constant-flag t
                :default-value "\"zabbix_sender\""
                :type "char")
                nil [1074 1121])
            ("usage_message" variable
               (:pointer 1
                :dereference 1
                :constant-flag t
                :default-value "{
	\"[-v]\", \"-z server\", \"[-p port]\", \"[-I IP-address]\", \"-s host\", \"-k key\", \"-o value\", NULL,
	\"[-v]\", \"-z server\", \"[-p port]\", \"[-I IP-address]\", \"[-s host]\", \"[-T]\", \"[-r]\", \"-i input-file\", NULL,
	\"[-v]\", \"-c config-file\", \"[-z server]\", \"[-p port]\", \"[-I IP-address]\", \"[-s host]\", \"-k key\", \"-o value\",
	NULL,
	\"[-v]\", \"-c config-file\", \"[-z server]\", \"[-p port]\", \"[-I IP-address]\", \"[-s host]\", \"[-T]\", \"[-r]\",
	\"-i input-file\", NULL,
#if defined(HAVE_POLARSSL) || defined(HAVE_GNUTLS) || defined(HAVE_OPENSSL)
	\"[-v]\", \"-z server\", \"[-p port]\", \"[-I IP-address]\", \"-s host\", \"--tls-connect cert\", \"--tls-ca-file CA-file\",
	\"[--tls-crl-file CRL-file]\", \"[--tls-server-cert-issuer cert-issuer]\",
	\"[--tls-server-cert-subject cert-subject]\", \"--tls-cert-file cert-file\", \"--tls-key-file key-file\", \"-k key\",
	\"-o value\", NULL,
	\"[-v]\", \"-z server\", \"[-p port]\", \"[-I IP-address]\", \"[-s host]\", \"--tls-connect cert\", \"--tls-ca-file CA-file\",
	\"[--tls-crl-file CRL-file]\", \"[--tls-server-cert-issuer cert-issuer]\",
	\"[--tls-server-cert-subject cert-subject]\", \"--tls-cert-file cert-file\", \"--tls-key-file key-file\", \"[-T]\",
	\"[-r]\", \"-i input-file\", NULL,
	\"[-v]\", \"-c config-file [-z server]\", \"[-p port]\", \"[-I IP-address]\", \"[-s host]\", \"--tls-connect cert\",
	\"--tls-ca-file CA-file\", \"[--tls-crl-file CRL-file]\", \"[--tls-server-cert-issuer cert-issuer]\",
	\"[--tls-server-cert-subject cert-subject]\", \"--tls-cert-file cert-file\", \"--tls-key-file key-file\", \"-k key\",
	\"-o value\", NULL,
	\"[-v]\", \"-c config-file\", \"[-z server]\", \"[-p port]\", \"[-I IP-address]\", \"[-s host]\", \"--tls-connect cert\",
	\"--tls-ca-file CA-file\", \"[--tls-crl-file CRL-file]\", \"[--tls-server-cert-issuer cert-issuer]\",
	\"[--tls-server-cert-subject cert-subject]\", \"--tls-cert-file cert-file\", \"--tls-key-file key-file\", \"[-T]\",
	\"[-r]\", \"-i input-file\", NULL,
	\"[-v]\", \"-z server\", \"[-p port]\", \"[-I IP-address]\", \"-s host\", \"--tls-connect psk\",
	\"--tls-psk-identity PSK-identity\", \"--tls-psk-file PSK-file\", \"-k key\", \"-o value\", NULL,
	\"[-v]\", \"-z server\", \"[-p port]\", \"[-I IP-address]\", \"[-s host]\", \"--tls-connect psk\",
	\"--tls-psk-identity PSK-identity\", \"--tls-psk-file PSK-file\", \"[-T]\", \"[-r]\", \"-i input-file\", NULL,
	\"[-v]\", \"-c config-file\", \"[-z server]\", \"[-p port]\", \"[-I IP-address]\", \"[-s host]\", \"--tls-connect psk\",
	\"--tls-psk-identity PSK-identity\", \"--tls-psk-file PSK-file\", \"-k key\", \"-o value\", NULL,
	\"[-v]\", \"-c config-file\", \"[-z server]\", \"[-p port]\", \"[-I IP-address]\", \"[-s host]\", \"--tls-connect psk\",
	\"--tls-psk-identity PSK-identity\", \"--tls-psk-file PSK-file\", \"[-T]\", \"[-r]\", \"-i input-file\", NULL,
#endif
	\"-h\", NULL,
	\"-V\", NULL,
	NULL	/* end of text */
}"
                :type "char")
                nil [1123 3829])
            ("program_type" variable
               (:default-value "ZBX_PROGRAM_TYPE_SENDER"
                :type "unsigned char")
                nil [3831 3884])
            ("help_message" variable
               (:pointer 1
                :dereference 1
                :constant-flag t
                :default-value "{
	\"Utility for sending monitoring data to Zabbix server or proxy.\",
	\"\",
	\"General options:\",
	\"  -c --config config-file    Path to Zabbix agentd configuration file\",
	\"\",
	\"  -z --zabbix-server server  Hostname or IP address of Zabbix server or proxy\",
	\"                             to send data to. When used together with --config,\",
	\"                             overrides the first entry of \\\"ServerActive\\\"\",
	\"                             parameter specified in agentd configuration file\",
	\"\",
	\"  -p --port port             Specify port number of trapper process of Zabbix\",
	\"                             server or proxy. When used together with --config,\",
	\"                             overrides the port of the first entry of\",
	\"                             \\\"ServerActive\\\" parameter specified in agentd\",
	\"                             configuration file (default: \" ZBX_DEFAULT_SERVER_PORT_STR \")\",
	\"\",
	\"  -I --source-address IP-address   Specify source IP address. When used\",
	\"                             together with --config, overrides \\\"SourceIP\\\"\",
	\"                             parameter specified in agentd configuration file\",
	\"\",
	\"  -s --host host             Specify host name the item belongs to (as\",
	\"                             registered in Zabbix frontend). Host IP address\",
	\"                             and DNS name will not work. When used together\",
	\"                             with --config, overrides \\\"Hostname\\\" parameter\",
	\"                             specified in agentd configuration file\",
	\"\",
	\"  -k --key key               Specify item key\",
	\"  -o --value value           Specify item value\",
	\"\",
	\"  -i --input-file input-file   Load values from input file. Specify - for\",
	\"                             standard input. Each line of file contains\",
	\"                             whitespace delimited: <host> <key> <value>.\",
	\"                             Specify - in <host> to use hostname from\",
	\"                             configuration file or --host argument\",
	\"\",
	\"  -T --with-timestamps       Each line of file contains whitespace delimited:\",
	\"                             <host> <key> <timestamp> <value>. This can be used\",
	\"                             with --input-file option. Timestamp should be\",
	\"                             specified in Unix timestamp format\",
	\"\",
	\"  -r --real-time             Send metrics one by one as soon as they are\",
	\"                             received. This can be used when reading from\",
	\"                             standard input\",
	\"\",
	\"  -v --verbose               Verbose mode, -vv for more details\",
	\"\",
	\"  -h --help                  Display this help message\",
	\"  -V --version               Display version number\",
	\"\",
	\"TLS connection options:\",
#if defined(HAVE_POLARSSL) || defined(HAVE_GNUTLS) || defined(HAVE_OPENSSL)
	\"  --tls-connect value        How to connect to server or proxy. Values:\",
	\"                               unencrypted - connect without encryption\",
	\"                                             (default)\",
	\"                               psk         - connect using TLS and a pre-shared\",
	\"                                             key\",
	\"                               cert        - connect using TLS and a\",
	\"                                             certificate\",
	\"\",
	\"  --tls-ca-file CA-file      Full pathname of a file containing the top-level\",
	\"                             CA(s) certificates for peer certificate\",
	\"                             verification\",
	\"\",
	\"  --tls-crl-file CRL-file    Full pathname of a file containing revoked\",
	\"                             certificates\",
	\"\",
	\"  --tls-server-cert-issuer cert-issuer   Allowed server certificate issuer\",
	\"\",
	\"  --tls-server-cert-subject cert-subject   Allowed server certificate subject\",
	\"\",
	\"  --tls-cert-file cert-file  Full pathname of a file containing the certificate\",
	\"                             or certificate chain\",
	\"\",
	\"  --tls-key-file key-file    Full pathname of a file containing the private key\",
	\"\",
	\"  --tls-psk-identity PSK-identity   Unique, case sensitive string used to\",
	\"                             identify the pre-shared key\",
	\"\",
	\"  --tls-psk-file PSK-file    Full pathname of a file containing the pre-shared\",
	\"                             key\",
#else
	\"  Not available. This Zabbix sender was compiled without TLS support\",
#endif
	\"\",
	\"Example(s):\",
	\"  zabbix_sender -z 127.0.0.1 -s \\\"Linux DB3\\\" -k db.connections -o 43\",
#if defined(HAVE_POLARSSL) || defined(HAVE_GNUTLS) || defined(HAVE_OPENSSL)
	\"\",
	\"  zabbix_sender -z 127.0.0.1 -s \\\"Linux DB3\\\" -k db.connections -o 43 \\\\\",
	\"    --tls-connect cert --tls-ca-file /home/zabbix/zabbix_ca_file \\\\\",
	\"    --tls-server-cert-issuer \\\\\",
	\"    \\\"CN=Signing CA,OU=IT operations,O=Example Corp,DC=example,DC=com\\\" \\\\\",
	\"    --tls-server-cert-subject \\\\\",
	\"    \\\"CN=Zabbix proxy,OU=IT operations,O=Example Corp,DC=example,DC=com\\\" \\\\\",
	\"    --tls-cert-file /home/zabbix/zabbix_agentd.crt \\\\\",
	\"    --tls-key-file /home/zabbix/zabbix_agentd.key\",
	\"\",
	\"  zabbix_sender -z 127.0.0.1 -s \\\"Linux DB3\\\" -k db.connections -o 43 \\\\\",
	\"    --tls-connect psk --tls-psk-identity \\\"PSK ID Zabbix agentd\\\" \\\\\",
	\"    --tls-psk-file /home/zabbix/zabbix_agentd.psk\",
#endif
	NULL	/* end of text */
}"
                :type "char")
                nil [3886 9274])
            ("configured_tls_connect_mode" variable
               (:default-value "ZBX_TCP_SEC_UNENCRYPTED"
                :type "unsigned int")
                nil [9297 9364])
            ("configured_tls_accept_modes" variable
               (:default-value "ZBX_TCP_SEC_UNENCRYPTED"
                :type "unsigned int")
                nil [9365 9432])
            ("CONFIG_TLS_CONNECT" variable
               (:pointer 1
                :default-value "NULL"
                :type "char")
                nil [9509 9542])
            ("CONFIG_TLS_ACCEPT" variable
               (:pointer 1
                :default-value "NULL"
                :type "char")
                nil [9543 9575])
            ("CONFIG_TLS_CA_FILE" variable
               (:pointer 1
                :default-value "NULL"
                :type "char")
                nil [9637 9670])
            ("CONFIG_TLS_CRL_FILE" variable
               (:pointer 1
                :default-value "NULL"
                :type "char")
                nil [9671 9705])
            ("CONFIG_TLS_SERVER_CERT_ISSUER" variable
               (:pointer 1
                :default-value "NULL"
                :type "char")
                nil [9706 9749])
            ("CONFIG_TLS_SERVER_CERT_SUBJECT" variable
               (:pointer 1
                :default-value "NULL"
                :type "char")
                nil [9750 9794])
            ("CONFIG_TLS_CERT_FILE" variable
               (:pointer 1
                :default-value "NULL"
                :type "char")
                nil [9795 9830])
            ("CONFIG_TLS_KEY_FILE" variable
               (:pointer 1
                :default-value "NULL"
                :type "char")
                nil [9831 9865])
            ("CONFIG_TLS_PSK_IDENTITY" variable
               (:pointer 1
                :default-value "NULL"
                :type "char")
                nil [9866 9903])
            ("CONFIG_TLS_PSK_FILE" variable
               (:pointer 1
                :default-value "NULL"
                :type "char")
                nil [9904 9938])
            ("CONFIG_PASSIVE_FORKS" variable
               (:default-value "0"
                :type "int")
                nil [9940 9970])
            ("CONFIG_ACTIVE_FORKS" variable
               (:default-value "0"
                :type "int")
                nil [10032 10061])
            ("longopts" variable
               (:dereference 1
                :typemodifiers ("static")
                :default-value "{
	{\"config\",			1,	NULL,	'c'},
	{\"zabbix-server\",		1,	NULL,	'z'},
	{\"port\",			1,	NULL,	'p'},
	{\"host\",			1,	NULL,	's'},
	{\"source-address\",		1,	NULL,	'I'},
	{\"key\",				1,	NULL,	'k'},
	{\"value\",			1,	NULL,	'o'},
	{\"input-file\",			1,	NULL,	'i'},
	{\"with-timestamps\",		0,	NULL,	'T'},
	{\"real-time\",			0,	NULL,	'r'},
	{\"verbose\",			0,	NULL,	'v'},
	{\"help\",			0,	NULL,	'h'},
	{\"version\",			0,	NULL,	'V'},
	{\"tls-connect\",			1,	NULL,	'1'},
	{\"tls-ca-file\",			1,	NULL,	'2'},
	{\"tls-crl-file\",		1,	NULL,	'3'},
	{\"tls-server-cert-issuer\",	1,	NULL,	'4'},
	{\"tls-server-cert-subject\",	1,	NULL,	'5'},
	{\"tls-cert-file\",		1,	NULL,	'6'},
	{\"tls-key-file\",		1,	NULL,	'7'},
	{\"tls-psk-identity\",		1,	NULL,	'8'},
	{\"tls-psk-file\",		1,	NULL,	'9'},
	{NULL}
}"
                :type ("zbx_option" type
                     (:prototype t
                      :type "struct")
                      nil nil))
                nil [10171 10949])
            ("shortopts" variable
               (:dereference 1
                :typemodifiers ("static")
                :default-value "\"c:I:z:p:s:k:o:Ti:rvhV\""
                :type "char")
                nil [10971 11021])
            ("CONFIG_LOG_LEVEL" variable
               (:typemodifiers ("static")
                :default-value "LOG_LEVEL_CRIT"
                :type "int")
                nil [11058 11103])
            ("INPUT_FILE" variable
               (:pointer 1
                :typemodifiers ("static")
                :default-value "NULL"
                :type "char")
                nil [11105 11136])
            ("WITH_TIMESTAMPS" variable
               (:typemodifiers ("static")
                :default-value "0"
                :type "int")
                nil [11137 11168])
            ("REAL_TIME" variable
               (:typemodifiers ("static")
                :default-value "0"
                :type "int")
                nil [11169 11194])
            ("CONFIG_SOURCE_IP" variable
               (:pointer 1
                :typemodifiers ("static")
                :default-value "NULL"
                :type "char")
                nil [11196 11233])
            ("ZABBIX_SERVER" variable
               (:pointer 1
                :typemodifiers ("static")
                :default-value "NULL"
                :type "char")
                nil [11234 11268])
            ("ZABBIX_SERVER_PORT" variable
               (:default-value "0"
                :type "unsigned short")
                nil [11269 11307])
            ("ZABBIX_HOSTNAME" variable
               (:pointer 1
                :typemodifiers ("static")
                :default-value "NULL"
                :type "char")
                nil [11308 11344])
            ("ZABBIX_KEY" variable
               (:pointer 1
                :typemodifiers ("static")
                :default-value "NULL"
                :type "char")
                nil [11345 11376])
            ("ZABBIX_KEY_VALUE" variable
               (:pointer 1
                :typemodifiers ("static")
                :default-value "NULL"
                :type "char")
                nil [11377 11414])
            ("send_signal_handler" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("sig" variable (:type "int") (reparse-symbol arg-sub-list) [11471 11479]))                  
                :type "void")
                nil [11439 11697])
            ("ZBX_THREAD_SENDVAL_ARGS" type
               (:typedef ("" type
                     (:members 
                        ( ("source_ip" variable
                             (:pointer 1
                              :type "char")
                              (reparse-symbol classsubparts) [11724 11741])
                          ("server" variable
                             (:pointer 1
                              :type "char")
                              (reparse-symbol classsubparts) [11743 11757])
                          ("port" variable (:type "unsigned short") (reparse-symbol classsubparts) [11759 11779])
                          ("json" variable (:type ("zbx_json" type
                               (:prototype t
                                :type "struct")
                                nil nil)) (reparse-symbol classsubparts) [11781 11802])
                          ("sync_timestamp" variable (:type "int") (reparse-symbol classsubparts) [11949 11969]))                        
                      :type "struct")
                      nil nil)
                :type "typedef")
                nil [11706 11996])
            ("SUCCEED_PARTIAL" variable (:constant-flag t) nil [12006 12021])
            ("update_exit_status" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("old_status" variable (:type "int") (reparse-symbol arg-sub-list) [12856 12871])
                    ("new_status" variable (:type "int") (reparse-symbol arg-sub-list) [12872 12887]))                  
                :type "int")
                nil [12826 13140])
            ("get_string" function
               (:pointer 1
                :typemodifiers ("static")
                :constant-flag t
                :arguments 
                  ( ("p" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [14373 14387])
                    ("buf" variable
                       (:pointer 1
                        :type "char")
                        (reparse-symbol arg-sub-list) [14388 14398])
                    ("bufsize" variable (:type ("size_t" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [14399 14414]))                  
                :type "char")
                nil [14343 15750])
            ("check_response" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("response" variable
                       (:pointer 1
                        :type "char")
                        (reparse-symbol arg-sub-list) [17219 17234]))                  
                :type "int")
                nil [17193 17872])
            ("ZBX_THREAD_ENTRY" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("" variable (:type ("send_value" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [17898 17909])
                    ("" variable (:type ("args" type (:type "class") nil nil)) (reparse-symbol arg-sub-list) [17910 17915]))                  
                :type "int")
                nil [17874 20111])
            ("zbx_fill_from_config_file" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("dst" variable
                       (:pointer 2
                        :type "char")
                        (reparse-symbol arg-sub-list) [20151 20162])
                    ("src" variable
                       (:pointer 1
                        :type "char")
                        (reparse-symbol arg-sub-list) [20163 20173]))                  
                :type "void")
                nil [20113 20343])
            ("zbx_load_config" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("config_file" variable
                       (:pointer 1
                        :constant-flag t
                        :type "char")
                        (reparse-symbol arg-sub-list) [20376 20400]))                  
                :type "void")
                nil [20345 23361])
            ("parse_commandline" function
               (:typemodifiers ("static")
                :arguments 
                  ( ("argc" variable (:type "int") (reparse-symbol arg-sub-list) [23393 23402])
                    ("argv" variable
                       (:pointer 2
                        :type "char")
                        (reparse-symbol arg-sub-list) [23403 23415]))                  
                :type "void")
                nil [23363 36930])
            ("zbx_fgets_alloc" function
               (:pointer 1
                :typemodifiers ("static")
                :arguments 
                  ( ("buffer" variable
                       (:pointer 2
                        :type "char")
                        (reparse-symbol arg-sub-list) [38242 38256])
                    ("buffer_alloc" variable
                       (:pointer 1
                        :type ("size_t" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [38257 38278])
                    ("fp" variable
                       (:pointer 1
                        :type ("FILE" type (:type "class") nil nil))
                        (reparse-symbol arg-sub-list) [38279 38288]))                  
                :type "char")
                nil [38213 38819])
            ("VALUES_MAX" variable (:constant-flag t) nil [38977 38987])
            ("main" function
               (:arguments 
                  ( ("argc" variable (:type "int") (reparse-symbol arg-sub-list) [39002 39011])
                    ("argv" variable
                       (:pointer 2
                        :type "char")
                        (reparse-symbol arg-sub-list) [39012 39024]))                  
                :type "int")
                nil [38993 47918]))          
      :file "zabbix_sender.c"
      :pointmax 47919
      :fsize 47918
      :lastmodtime '(22952 1108 0 0)
      :unmatched-syntax nil
      :lexical-table 
        '(("VALUES_MAX" . ((number "250" 38988 . 38991)))
          ("SUCCEED_PARTIAL" . ((number "2" 12022 . 12023)))
          )
))
  :file "!Volumes!Transcend!zabbix!src!zabbix_sender!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
