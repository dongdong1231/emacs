;; Object semanticdb-project-database-file
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file"
  :tables
  (list
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("unsafep" package nil nil [3953 3971])
            ("byte-opt" include nil nil [3972 3991])
            ("safe-functions" variable nil nil [4036 4213])
            ("unsafep-vars" variable nil nil [4215 4330])
            ("put" code nil nil [4331 4374])
            ("dolist" code nil nil [4418 4585])
            ("dolist" code nil nil [4610 5078])
            ("unsafep" function (:arguments ("form" "unsafep-vars")) nil [5095 8509])
            ("unsafep-function" function (:arguments ("fun")) nil [8512 8940])
            ("unsafep-progn" function (:arguments ("list")) nil [8942 9218])
            ("unsafep-let" function (:arguments ("clause")) nil [9220 9659])
            ("unsafep-variable" function (:arguments ("sym" "to-bind")) nil [9661 10108]))          
      :file "unsafep.el.gz"
      :pointmax 10135
      :fsize 3652
      :lastmodtime '(22676 23208 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("lisp-mode" include nil nil [1211 1231])
            ("lisp-mnt" include nil nil [1268 1287])
            ("cl-lib" include nil nil [1307 1324])
            ("generated-autoload-file" variable nil nil [1327 1849])
            ("put" code nil nil [1865 1925])
            ("generated-autoload-load-name" variable nil nil [1927 2241])
            ("put" code nil nil [2257 2322])
            ("generate-autoload-cookie" variable (:default-value ";;;###autoload") nil [2465 2968])
            ("autoload-excludes" variable nil nil [2970 3071])
            ("generate-autoload-section-header" variable
               (:constant-flag t
                :default-value "
;;;### ")
                nil [3073 3208])
            ("generate-autoload-section-trailer" variable
               (:constant-flag t
                :default-value "
;;;***
")
                nil [3210 3342])
            ("generate-autoload-section-continuation" variable
               (:constant-flag t
                :default-value ";;;;;; ")
                nil [3344 3470])
            ("autoload-modified-buffers" variable nil nil [3472 3506])
            ("make-autoload" function (:arguments ("form" "file" "expansion")) nil [3538 9884])
            ("autoload-find-generated-file" function nil nil [10094 10589])
            ("autoload-generated-file" function nil nil [10591 10994])
            ("autoload-read-section-header" function nil nil [10997 11703])
            ("autoload-print-form-outbuf" variable nil nil [11705 11803])
            ("autoload-print-form" function (:arguments ("form")) nil [11805 13492])
            ("autoload-rubric" function (:arguments ("file" "type" "feature")) nil [13494 14513])
            ("autoload-ensure-writable" variable nil nil [14515 14631])
            ("put" code nil nil [14735 14790])
            ("autoload-ensure-default-file" function (:arguments ("file")) nil [14792 15509])
            ("autoload-insert-section-header" function (:arguments ("outbuf" "autoloads" "load-name" "file" "time")) nil [15511 16136])
            ("autoload-find-file" function (:arguments ("file")) nil [16138 16746])
            ("no-update-autoloads" variable nil nil [16748 16856])
            ("autoload-file-load-name" function (:arguments ("file")) nil [16858 18183])
            ("generate-file-autoloads" function
               (:user-visible-flag t
                :arguments ("file"))
                nil [18185 18693])
            ("print-readably" variable nil nil [18695 18718])
            ("autoload--setup-output" function (:arguments ("otherbuf" "outbuf" "absfile" "load-name")) nil [18721 19379])
            ("autoload--print-cookie-text" function (:arguments ("output-start" "load-name" "file")) nil [19381 20669])
            ("autoload-builtin-package-versions" variable nil nil [20671 20717])
            ("autoload-generate-file-autoloads" function (:arguments ("file" "outbuf" "outfile")) nil [21070 28987])
            ("autoload-save-buffers" function nil nil [28990 29170])
            ("update-file-autoloads" function
               (:user-visible-flag t
                :arguments ("file" "save-after" "outfile"))
                nil [29187 30262])
            ("autoload-find-destination" function (:arguments ("file" "load-name")) nil [30264 33585])
            ("autoload-remove-section" function (:arguments ("begin")) nil [33587 33731])
            ("update-directory-autoloads" function
               (:user-visible-flag t
                :arguments ("dirs"))
                nil [33748 38777])
            ("define-obsolete-function-alias" code nil nil [38779 38885])
            ("batch-update-autoloads" function nil nil [38902 39953])
            ("autoload" package nil nil [39955 39974]))          
      :file "autoload.el.gz"
      :pointmax 40002
      :fsize 11451
      :lastmodtime '(22676 23208 0 0)
      :unmatched-syntax '((close-paren 1324 . 1325) (symbol 1289 . 1306) (open-paren 1288 . 1289)))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("defun-prompt-regexp" variable nil nil [1097 1346])
            ("make-variable-buffer-local" code nil nil [1347 1396])
            ("parens-require-spaces" variable (:default-value t) nil [1398 1587])
            ("forward-sexp-function" variable nil nil [1589 2090])
            ("forward-sexp" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [2092 2822])
            ("backward-sexp" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [2824 3182])
            ("mark-sexp" function
               (:user-visible-flag t
                :arguments ("arg" "allow-extend"))
                nil [3184 4009])
            ("forward-list" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [4011 4477])
            ("backward-list" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [4479 4908])
            ("down-list" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [4910 5456])
            ("backward-up-list" function
               (:user-visible-flag t
                :arguments ("arg" "escape-strings" "no-syntax-crossing"))
                nil [5458 6199])
            ("up-list" function
               (:user-visible-flag t
                :arguments ("arg" "escape-strings" "no-syntax-crossing"))
                nil [6201 9554])
            ("kill-sexp" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [9556 9907])
            ("backward-kill-sexp" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [9909 10208])
            ("kill-backward-up-list" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [10226 10724])
            ("beginning-of-defun-function" variable nil nil [10727 11296])
            ("beginning-of-defun" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [11298 12624])
            ("beginning-of-defun-raw" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [12626 15979])
            ("end-of-defun-function" variable (:default-value (lambda nil (forward-sexp 1))) nil [15981 16349])
            ("buffer-end" function (:arguments ("arg")) nil [16351 16582])
            ("end-of-defun" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [16584 18890])
            ("mark-defun" function
               (:user-visible-flag t
                :arguments ("allow-extend"))
                nil [18892 20215])
            ("narrow-to-defun-include-comments" variable nil nil [20217 20341])
            ("narrow-to-defun" function
               (:user-visible-flag t
                :arguments ("include-comments"))
                nil [20343 22435])
            ("insert-pair-alist" variable (:default-value (quote ((40 41) (91 93) (123 125) (60 62) (34 34) (39 39) (96 39)))) nil [22437 22982])
            ("insert-pair" function
               (:user-visible-flag t
                :arguments ("arg" "open" "close"))
                nil [22984 25253])
            ("insert-parentheses" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [25255 25819])
            ("delete-pair" function (:user-visible-flag t) nil [25821 26001])
            ("raise-sexp" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [26003 26459])
            ("move-past-close-and-reindent" function (:user-visible-flag t) nil [26461 27458])
            ("check-parens" function (:user-visible-flag t) nil [27460 28373])
            ("field-complete" function (:arguments ("table" "predicate")) nil [28376 28920])
            ("lisp-complete-symbol" function (:arguments ("_predicate")) nil [28922 29909]))          
      :file "lisp.el.gz"
      :pointmax 29933
      :fsize 8391
      :lastmodtime '(22676 23208 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [1047 1064])
            ("macroexp" include nil nil [1065 1084])
            ("gv" include nil nil [1085 1098])
            ("cl-unload-function" function nil nil [3594 3752])
            ("dolist" code nil nil [3789 4502])
            ("dolist" code nil nil [4504 9695])
            ("cl--wrap-in-nil-block" function (:arguments ("fun" "args")) nil [9697 9779])
            ("advice-add" code nil nil [9780 9832])
            ("advice-add" code nil nil [9833 9886])
            ("cl--pass-args-to-cl-declare" function (:arguments ("specs")) nil [9888 9976])
            ("advice-add" code nil nil [9977 10035])
            ("cl-closure-vars" variable nil nil [10195 10223])
            ("cl--function-convert-cache" variable nil nil [10224 10263])
            ("cl--function-convert" function (:arguments ("f")) nil [10265 12377])
            ("lexical-let" function (:arguments ("bindings" "body")) nil [12379 14390])
            ("lexical-let*" function (:arguments ("bindings" "body")) nil [14392 14922])
            ("flet" function (:arguments ("bindings" "body")) nil [15001 16755])
            ("labels" function (:arguments ("bindings" "body")) nil [16757 17701])
            ("cl--gv-adapt" function (:arguments ("cl-gv" "do")) nil [17897 18787])
            ("define-setf-expander" function (:arguments ("name" "arglist" "body")) nil [18789 19692])
            ("defsetf" function (:arguments ("name" "arg1" "args")) nil [19694 21312])
            ("make-obsolete" code nil nil [23226 23278])
            ("declare-function" code nil nil [23280 23332])
            ("define-modify-macro" function (:arguments ("name" "arglist" "func" "doc")) nil [23334 24156])
            ("define-obsolete-function-alias" code nil nil [24258 24326])
            ("define-obsolete-variable-alias" code nil nil [24327 24419])
            ("define-obsolete-function-alias" code nil nil [24420 24496])
            ("cl-not-hash-table" function (:arguments ("x" "y" "_z")) nil [24634 24783])
            ("cl-builtin-gethash" variable (:default-value (symbol-function (quote gethash))) nil [24785 24839])
            ("make-obsolete-variable" code nil nil [24840 24895])
            ("cl-builtin-remhash" variable (:default-value (symbol-function (quote remhash))) nil [24896 24950])
            ("make-obsolete-variable" code nil nil [24951 25006])
            ("cl-builtin-clrhash" variable (:default-value (symbol-function (quote clrhash))) nil [25007 25061])
            ("make-obsolete-variable" code nil nil [25062 25117])
            ("cl-builtin-maphash" variable (:default-value (symbol-function (quote maphash))) nil [25118 25172])
            ("make-obsolete-variable" code nil nil [25174 25229])
            ("define-obsolete-function-alias" code nil nil [25230 25296])
            ("define-obsolete-function-alias" code nil nil [25297 25361])
            ("define-obsolete-function-alias" code nil nil [25362 25422])
            ("define-obsolete-function-alias" code nil nil [25423 25483])
            ("define-obsolete-function-alias" code nil nil [25484 25544])
            ("define-obsolete-function-alias" code nil nil [25545 25605])
            ("define-obsolete-function-alias" code nil nil [25606 25666])
            ("define-obsolete-function-alias" code nil nil [25667 25743])
            ("define-obsolete-function-alias" code nil nil [25744 25814])
            ("define-obsolete-function-alias" code nil nil [25815 25893])
            ("define-obsolete-function-alias" code nil nil [25895 25991])
            ("define-obsolete-function-alias" code nil nil [25992 26068])
            ("define-obsolete-function-alias" code nil nil [26069 26142])
            ("define-obsolete-function-alias" code nil nil [26143 26209])
            ("cl-maclisp-member" function (:arguments ("item" "list")) nil [26211 26366])
            ("cl-struct-setf-expander" function (:arguments ("x" "name" "accessor" "pred-form" "pos")) nil [26417 27351])
            ("cl" package nil nil [27353 27366])
            ("run-hooks" code nil nil [27368 27393]))          
      :file "cl.el.gz"
      :pointmax 27415
      :fsize 7980
      :lastmodtime '(22676 23208 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("warnings" customgroup (:user-visible-flag t) nil [946 1032])
            ("warning-levels" variable (:default-value (quote ((:emergency "Emergency%s: " ding) (:error "Error%s: ") (:warning "Warning%s: ") (:debug "Debug%s: ")))) nil [1034 1811])
            ("put" code nil nil [1812 1857])
            ("warning-level-aliases" variable (:default-value (quote ((emergency . :emergency) (error . :error) (warning . :warning) (notice . :warning) (info . :warning) (critical . :emergency) (alarm . :emergency)))) nil [2007 2433])
            ("warning-minimum-level" variable (:default-value :warning) nil [2436 2858])
            ("defvaralias" code nil nil [2859 2926])
            ("warning-minimum-log-level" variable (:default-value :warning) nil [2928 3357])
            ("defvaralias" code nil nil [3358 3425])
            ("warning-suppress-log-types" variable nil nil [3427 3941])
            ("warning-suppress-types" variable nil nil [3943 4556])
            ("warning-prefix-function" variable nil nil [4730 5127])
            ("warning-series" variable nil nil [5300 5738])
            ("put" code nil nil [5739 5784])
            ("warning-fill-prefix" variable nil nil [5957 6066])
            ("warning-type-format" variable (:default-value (purecopy " (%s)")) nil [6239 6478])
            ("warning-numeric-level" function (:arguments ("level")) nil [6481 6682])
            ("warning-suppress-p" function (:arguments ("type" "suppress-list")) nil [6684 7605])
            ("display-warning" function (:arguments ("type" "message" "level" "buffer-name")) nil [7623 12052])
            ("lwarn" function (:arguments ("type" "level" "message" "args")) nil [12185 13085])
            ("warn" function (:arguments ("message" "args")) nil [13102 13427])
            ("warnings" package nil nil [13429 13448]))          
      :file "warnings.el.gz"
      :pointmax 13476
      :fsize 4271
      :lastmodtime '(22676 23208 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("lisp-mnt" customgroup (:user-visible-flag t) nil [4555 4660])
            ("lm-header-prefix" variable (:default-value "^;+[ 	]+\\(@(#)\\)?[ 	]*\\$?") nil [4797 5234])
            ("lm-copyright-prefix" variable (:default-value "^\\(;+[ 	]\\)+Copyright (C) ") nil [5236 5465])
            ("lm-comment-column" variable (:default-value 16) nil [5467 5581])
            ("lm-any-header" variable (:default-value ".*") nil [5583 5695])
            ("lm-commentary-header" variable (:default-value "Commentary\\|Documentation") nil [5697 5850])
            ("lm-history-header" variable (:default-value "Change ?Log\\|History") nil [5852 5996])
            ("lm-get-header-re" function (:arguments ("header" "mode")) nil [6078 6388])
            ("lm-get-package-name" function nil nil [6390 6702])
            ("lm-section-start" function (:arguments ("header" "after")) nil [6704 7181])
            ("defalias" code nil nil [7182 7227])
            ("lm-section-end" function (:arguments ("header")) nil [7229 8559])
            ("lm-code-start" function nil nil [8561 8675])
            ("defalias" code nil nil [8676 8715])
            ("lm-commentary-start" function nil nil [8717 8857])
            ("defalias" code nil nil [8858 8909])
            ("lm-commentary-end" function nil nil [8911 9046])
            ("lm-history-start" function nil nil [9048 9179])
            ("defalias" code nil nil [9180 9225])
            ("lm-copyright-mark" function nil nil [9227 9464])
            ("lm-header" function (:arguments ("header")) nil [9466 9940])
            ("lm-header-multiline" function (:arguments ("header")) nil [9942 10399])
            ("lm-with-file" function (:arguments ("file" "body")) nil [10468 11171])
            ("lm-crack-copyright" function (:arguments ("file")) nil [11294 12609])
            ("lm-summary" function (:arguments ("file")) nil [12611 13111])
            ("lm-crack-address" function (:arguments ("x")) nil [13113 13567])
            ("lm-authors" function (:arguments ("file")) nil [13569 13892])
            ("lm-maintainer" function (:arguments ("file")) nil [13894 14186])
            ("lm-creation-date" function (:arguments ("file")) nil [14188 14359])
            ("lm-last-modified-date" function (:arguments ("file" "iso-date")) nil [14361 15034])
            ("lm-version" function (:arguments ("file")) nil [15036 15869])
            ("lm-keywords" function (:arguments ("file")) nil [15871 16258])
            ("lm-keywords-list" function (:arguments ("file")) nil [16260 16540])
            ("finder-known-keywords" variable nil nil [16542 16572])
            ("lm-keywords-finder-p" function (:arguments ("file")) nil [16573 16909])
            ("lm-adapted-by" function (:arguments ("file")) nil [16911 17157])
            ("lm-commentary" function (:arguments ("file")) nil [17159 17629])
            ("lm-homepage" function (:arguments ("file")) nil [17631 17909])
            ("lm-insert-at-column" function (:arguments ("col" "strings")) nil [17942 18130])
            ("lm-verify" function
               (:user-visible-flag t
                :arguments ("file" "showok" "verbose" "non-fsf-ok"))
                nil [18132 20394])
            ("lm-synopsis" function
               (:user-visible-flag t
                :arguments ("file" "showall"))
                nil [20396 21499])
            ("report-emacs-bug-address" variable nil nil [21501 21534])
            ("lm-report-bug" function
               (:user-visible-flag t
                :arguments ("topic"))
                nil [21536 22175])
            ("lisp-mnt" package nil nil [22177 22196]))          
      :file "lisp-mnt.el.gz"
      :pointmax 22224
      :fsize 7211
      :lastmodtime '(22676 23208 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [1084 1101])
            ("font-lock-comment-face" variable nil nil [1104 1135])
            ("font-lock-doc-face" variable nil nil [1136 1163])
            ("font-lock-keywords-case-fold-search" variable nil nil [1164 1208])
            ("font-lock-string-face" variable nil nil [1209 1239])
            ("define-abbrev-table" code nil nil [1241 1321])
            ("lisp--mode-syntax-table" variable (:default-value (let ((table (make-syntax-table)) (i 0)) (while (< i 48) (modify-syntax-entry i "_   " table) (setq i (1+ i))) (setq i (1+ 57)) (while (< i 65) (modify-syntax-entry i "_   " table) (setq i (1+ i))) (setq i (1+ 90)) (while (< i 97) (modify-syntax-entry i "_   " table) (setq i (1+ i))) (setq i (1+ 122)) (while (< i 128) (modify-syntax-entry i "_   " table) (setq i (1+ i))) (modify-syntax-entry 32 "    " table) (modify-syntax-entry 160 "    " table) (modify-syntax-entry 9 "    " table) (modify-syntax-entry 12 "    " table) (modify-syntax-entry 10 ">   " table) (modify-syntax-entry 59 "<   " table) (modify-syntax-entry 96 "'   " table) (modify-syntax-entry 39 "'   " table) (modify-syntax-entry 44 "'   " table) (modify-syntax-entry 64 "_ p" table) (modify-syntax-entry 46 "_   " table) (modify-syntax-entry 35 "'   " table) (modify-syntax-entry 34 "\"    " table) (modify-syntax-entry 92 "\\   " table) (modify-syntax-entry 40 "()  " table) (modify-syntax-entry 41 ")(  " table) table)) nil [1323 2842])
            ("lisp-mode-syntax-table" variable (:default-value (let ((table (make-syntax-table lisp--mode-syntax-table))) (modify-syntax-entry 91 "_   " table) (modify-syntax-entry 93 "_   " table) (modify-syntax-entry 35 "' 14" table) (modify-syntax-entry 124 "\" 23bn" table) table)) nil [2844 3158])
            ("lisp-mode-symbol-regexp" variable
               (:constant-flag t
                :default-value "\\(?:\\sw\\|\\s_\\|\\\\.\\)+")
                nil [3180 3245])
            ("lisp-imenu-generic-expression" variable (:default-value (list (list nil (purecopy (concat "^\\s-*(" (eval-when-compile (regexp-opt (quote ("defun" "defmacro" "defun*" "defsubst" "define-inline" "define-advice" "defadvice" "define-skeleton" "define-compilation-mode" "define-minor-mode" "define-global-minor-mode" "define-globalized-minor-mode" "define-derived-mode" "define-generic-mode" "ert-deftest" "cl-defun" "cl-defsubst" "cl-defmacro" "cl-define-compiler-macro" "cl-defgeneric" "cl-defmethod" "define-compiler-macro" "define-modify-macro" "defsetf" "define-setf-expander" "define-method-combination" "defgeneric" "defmethod")) t)) "\\s-+\\(" lisp-mode-symbol-regexp "\\)")) 2) (list (purecopy "Variables") (purecopy (concat "^\\s-*(" (eval-when-compile (regexp-opt (quote ("defconst" "defcustom" "defconstant" "defparameter" "define-symbol-macro")) t)) "\\s-+\\(" lisp-mode-symbol-regexp "\\)")) 2) (list (purecopy "Variables") (purecopy (concat "^\\s-*(defvar\\(?:-local\\)?\\s-+\\(" lisp-mode-symbol-regexp "\\)" "[[:space:]
]+[^)]")) 1) (list (purecopy "Types") (purecopy (concat "^\\s-*(" (eval-when-compile (regexp-opt (quote ("defgroup" "deftheme" "define-widget" "define-error" "defface" "cl-deftype" "cl-defstruct" "deftype" "defstruct" "define-condition" "defpackage" "defclass")) t)) "\\s-+'?\\(" lisp-mode-symbol-regexp "\\)")) 2))) nil [3248 5510])
            ("put" code nil nil [5575 5608])
            ("put" code nil nil [5609 5643])
            ("put" code nil nil [5644 5677])
            ("put" code nil nil [5678 5711])
            ("put" code nil nil [5712 5745])
            ("put" code nil nil [5746 5782])
            ("put" code nil nil [5783 5823])
            ("lisp-doc-string-elt-property" variable (:default-value (quote doc-string-elt)) nil [5825 5942])
            ("lisp--match-hidden-arg" function (:arguments ("limit")) nil [5970 6554])
            ("lisp--el-non-funcall-position-p" function (:arguments ("pos")) nil [6556 8090])
            ("lisp--el-match-keyword" function (:arguments ("limit")) nil [8092 8631])
            ("let-when-compile" function (:arguments ("bindings" "body")) nil [8633 9365])
            ("let-when-compile" code nil nil [9367 21065])
            ("define-obsolete-variable-alias" code nil nil [21067 21161])
            ("lisp-el-font-lock-keywords" variable (:default-value lisp-el-font-lock-keywords-1) nil [21162 21283])
            ("lisp-cl-font-lock-keywords" variable (:default-value lisp-cl-font-lock-keywords-1) nil [21284 21400])
            ("lisp-string-in-doc-position-p" function (:arguments ("listbeg" "startpos")) nil [21402 22867])
            ("lisp-string-after-doc-keyword-p" function (:arguments ("listbeg" "startpos")) nil [22869 23320])
            ("lisp-font-lock-syntactic-face-function" function (:arguments ("state")) nil [23322 24076])
            ("lisp-mode-variables" function (:arguments ("lisp-syntax" "keywords-case-insensitive" "elisp")) nil [24078 26535])
            ("lisp-outline-level" function nil nil [26537 26719])
            ("lisp-current-defun-name" function nil nil [26721 27645])
            ("lisp-mode-shared-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map prog-mode-map) (define-key map "" (quote indent-sexp)) (define-key map "" (quote backward-delete-char-untabify)) map)) nil [27647 28171])
            ("lisp-mode-hook" variable nil nil [28173 28308])
            ("lisp-interaction-mode-hook" variable nil nil [28310 28456])
            ("lisp--prettify-symbols-alist" variable
               (:constant-flag t
                :default-value (quote (("lambda" . 955))))
                nil [28458 28519])
            ("lisp-mode-map" variable (:default-value (let ((map (make-sparse-keymap)) (menu-map (make-sparse-keymap "Lisp"))) (set-keymap-parent map lisp-mode-shared-map) (define-key map "" (quote lisp-eval-defun)) (define-key map "" (quote run-lisp)) (bindings--define-key map [menu-bar lisp] (cons "Lisp" menu-map)) (bindings--define-key menu-map [run-lisp] (quote (menu-item "Run inferior Lisp" run-lisp :help "Run an inferior Lisp process, input and output via buffer `*inferior-lisp*'"))) (bindings--define-key menu-map [ev-def] (quote (menu-item "Eval defun" lisp-eval-defun :help "Send the current defun to the Lisp process made by M-x run-lisp"))) (bindings--define-key menu-map [ind-sexp] (quote (menu-item "Indent sexp" indent-sexp :help "Indent each line of the list starting just after point"))) map)) nil [28545 29472])
            ("define-derived-mode" code nil nil [29474 30070])
            ("lisp-find-tag-default" function nil nil [30072 30264])
            ("defalias" code nil nil [30293 30332])
            ("lisp-eval-defun" function
               (:user-visible-flag t
                :arguments ("_and-go"))
                nil [30380 30548])
            ("define-obsolete-function-alias" code nil nil [30607 30695])
            ("define-obsolete-function-alias" code nil nil [30696 30770])
            ("lisp-indent-offset" variable nil nil [30772 30933])
            ("put" code nil nil [30934 31025])
            ("lisp-indent-function" variable (:default-value (quote lisp-indent-function)) nil [31027 31399])
            ("lisp-indent-line" function
               (:user-visible-flag t
                :arguments ("_whole-exp"))
                nil [31401 32608])
            ("calculate-lisp-indent-last-sexp" variable nil nil [32610 32650])
            ("calculate-lisp-indent" function (:arguments ("parse-start")) nil [32652 39387])
            ("lisp-indent-function" function (:arguments ("indent-point" "state")) nil [39389 42152])
            ("lisp-body-indent" variable (:default-value 2) nil [42154 42286])
            ("put" code nil nil [42287 42341])
            ("lisp-indent-specform" function (:arguments ("count" "state" "indent-point" "normal-indent")) nil [42343 44645])
            ("lisp-indent-defform" function (:arguments ("state" "_indent-point")) nil [44647 44874])
            ("put" code nil nil [45094 45138])
            ("put" code nil nil [45146 45182])
            ("put" code nil nil [45183 45219])
            ("put" code nil nil [45220 45256])
            ("put" code nil nil [45257 45302])
            ("put" code nil nil [45315 45362])
            ("put" code nil nil [45373 45423])
            ("put" code nil nil [45431 45465])
            ("put" code nil nil [45466 45501])
            ("put" code nil nil [45502 45538])
            ("put" code nil nil [45539 45572])
            ("put" code nil nil [45573 45609])
            ("put" code nil nil [45610 45655])
            ("put" code nil nil [45656 45699])
            ("put" code nil nil [45704 45747])
            ("put" code nil nil [45752 45797])
            ("put" code nil nil [45798 45855])
            ("indent-sexp" function
               (:user-visible-flag t
                :arguments ("endpos"))
                nil [45857 49668])
            ("indent-pp-sexp" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [49670 50124])
            ("emacs-lisp-docstring-fill-column" variable (:default-value 65) nil [50165 50478])
            ("put" code nil nil [50479 50584])
            ("lisp-fill-paragraph" function
               (:user-visible-flag t
                :arguments ("justify"))
                nil [50586 53268])
            ("indent-code-rigidly" function
               (:user-visible-flag t
                :arguments ("start" "end" "arg" "nochange-regexp"))
                nil [53270 54434])
            ("lisp-mode" package nil nil [54436 54456]))          
      :file "lisp-mode.el.gz"
      :pointmax 54485
      :fsize 14470
      :lastmodtime '(22676 23208 0 0)
      :unmatched-syntax '((close-paren 3245 . 3246) (symbol 3161 . 3177) (open-paren 3160 . 3161) (close-paren 1101 . 1102) (symbol 1066 . 1083) (open-paren 1065 . 1066)))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("defalias" code nil nil [1120 1570])
            ("function-put" code nil nil [1571 1613])
            ("function-put" code nil nil [1614 1662])
            ("macro-declaration-function" variable (:default-value (function macro-declaration-function)) nil [1783 2115])
            ("defalias" code nil nil [2117 3259])
            ("defun-declarations-alist" variable (:default-value (list (list (quote advertised-calling-convention) (function (lambda (f _args arglist when) (list (quote set-advertised-calling-convention) (list (quote quote) f) (list (quote quote) arglist) (list (quote quote) when))))) (list (quote obsolete) (function (lambda (f _args new-name when) (list (quote make-obsolete) (list (quote quote) f) (list (quote quote) new-name) (list (quote quote) when))))) (list (quote interactive-only) (function (lambda (f _args instead) (list (quote function-put) (list (quote quote) f) (quote (quote interactive-only)) (list (quote quote) instead))))) (list (quote pure) (function (lambda (f _args val) (list (quote function-put) (list (quote quote) f) (quote (quote pure)) (list (quote quote) val)))) "If non-nil, the compiler can replace calls with their return value.
This may shift errors from run-time to compile-time.") (list (quote side-effect-free) (function (lambda (f _args val) (list (quote function-put) (list (quote quote) f) (quote (quote side-effect-free)) (list (quote quote) val)))) "If non-nil, calls can be ignored if their value is unused.
If `error-free', drop calls even if `byte-compile-delete-errors' is nil.") (list (quote compiler-macro) (function (lambda (f args compiler-function) (if (not (eq (car-safe compiler-function) (quote lambda))) (\` (eval-and-compile (function-put (quote (\, f)) (quote compiler-macro) (function (\, compiler-function))))) (let ((cfname (intern (concat (symbol-name f) "--anon-cmacro")))) (\` (progn (eval-and-compile (function-put (quote (\, f)) (quote compiler-macro) (function (\, cfname)))) :autoload-end (eval-and-compile (defun (\, cfname) ((\,@ (cadr compiler-function)) (\,@ args)) (\,@ (cddr compiler-function))))))))))) (list (quote doc-string) (function (lambda (f _args pos) (list (quote function-put) (list (quote quote) f) (quote (quote doc-string-elt)) (list (quote quote) pos))))) (list (quote indent) (function (lambda (f _args val) (list (quote function-put) (list (quote quote) f) (quote (quote lisp-indent-function)) (list (quote quote) val))))))) nil [3515 6459])
            ("macro-declarations-alist" variable (:default-value (cons (list (quote debug) (function (lambda (name _args spec) (list (quote progn) :autoload-end (list (quote put) (list (quote quote) name) (quote (quote edebug-form-spec)) (list (quote quote) spec)))))) (cons (list (quote no-font-lock-keyword) (function (lambda (name _args val) (list (quote function-put) (list (quote quote) name) (quote (quote no-font-lock-keyword)) (list (quote quote) val))))) defun-declarations-alist))) nil [6461 7236])
            ("defalias" code nil nil [7238 9491])
            ("defun" function (:arguments ("name" "arglist" "docstring" "body")) nil [9540 11919])
            ("fset" code nil nil [12026 12047])
            ("defsubst" function (:arguments ("name" "arglist" "body")) nil [13058 13529])
            ("advertised-signature-table" variable (:default-value (make-hash-table :test (quote eq) :weakness (quote key))) nil [13531 13609])
            ("set-advertised-calling-convention" function (:arguments ("function" "signature" "_when")) nil [13611 13981])
            ("make-obsolete" function (:arguments ("obsolete-name" "current-name" "when")) nil [13983 14876])
            ("define-obsolete-function-alias" function (:arguments ("obsolete-name" "current-name" "when" "docstring")) nil [14878 15845])
            ("make-obsolete-variable" function (:arguments ("obsolete-name" "current-name" "when" "access-type")) nil [15847 16678])
            ("define-obsolete-variable-alias" function (:arguments ("obsolete-name" "current-name" "when" "docstring")) nil [16681 18522])
            ("define-obsolete-face-alias" function (:arguments ("obsolete-face" "current-face" "when")) nil [18852 19288])
            ("dont-compile" function (:arguments ("body")) nil [19290 19599])
            ("eval-when-compile" function (:arguments ("body")) nil [19842 20335])
            ("eval-and-compile" function (:arguments ("body")) nil [20337 20908])
            ("with-no-warnings" function (:arguments ("body")) nil [20910 21118])
            ("make-obsolete-variable" code nil nil [22413 22522])
            ("make-obsolete" code nil nil [22523 22614]))          
      :file "byte-run.el.gz"
      :pointmax 22642
      :fsize 6648
      :lastmodtime '(22676 23208 0 0)
      :unmatched-syntax nil))
  :file "!usr!local!Cellar!emacs-plus!25.2!share!emacs!25.2!lisp!emacs-lisp!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
