;; Object semanticdb-project-database-file
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file"
  :tables
  (list
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("unless" code nil nil [3171 3246])
            ("let" code nil nil [3270 3485])
            ("cc-require" code nil nil [3488 3509])
            ("cc-require" code nil nil [3510 3531])
            ("cc-require-when-compile" code nil nil [3532 3567])
            ("cc-require" code nil nil [3568 3591])
            ("cc-require" code nil nil [3592 3615])
            ("cc-require" code nil nil [3616 3637])
            ("cc-require" code nil nil [3638 3660])
            ("cc-require" code nil nil [3661 3683])
            ("cc-require" code nil nil [3684 3706])
            ("cc-bytecomp-defvar" code nil nil [3733 3785])
            ("cc-bytecomp-defun" code nil nil [3794 3828])
            ("cc-bytecomp-defvar" code nil nil [3920 3959])
            ("cc-external-require" code nil nil [4085 4116])
            ("cc-fonts" include nil nil [4308 4327])
            ("c-leave-cc-mode-mode" function nil nil [5341 5405])
            ("c-init-language-vars-for" function (:arguments ("mode")) nil [5407 6196])
            ("c-initialize-cc-mode" function (:arguments ("new-style-init")) nil [6213 7677])
            ("c-mode-base-map" variable nil nil [7703 7778])
            ("c-make-inherited-keymap" function nil nil [7780 8363])
            ("c-define-abbrev-table" function (:arguments ("name" "defs" "doc")) nil [8365 9171])
            ("put" code nil nil [9172 9224])
            ("c-bind-special-erase-keys" function nil nil [9226 9790])
            ("if" code nil nil [9792 16359])
            ("cc-bytecomp-defvar" code nil nil [16436 16470])
            ("c-mode-menu" function (:arguments ("modestr")) nil [16472 16836])
            ("defalias" code nil nil [17095 17269])
            ("c-unfind-enclosing-token" function (:arguments ("pos")) nil [17779 18265])
            ("c-unfind-coalesced-tokens" function (:arguments ("beg" "end")) nil [18267 19072])
            ("c-maybe-stale-found-type" variable nil nil [19846 19883])
            ("make-variable-buffer-local" code nil nil [19884 19938])
            ("c-just-done-before-change" variable nil nil [19940 19978])
            ("make-variable-buffer-local" code nil nil [19979 20034])
            ("c-basic-common-init" function (:arguments ("mode" "default-style")) nil [20372 26953])
            ("c-setup-doc-comment-style" function nil nil [27069 27357])
            ("c-new-BEG" variable nil nil [27827 27847])
            ("make-variable-buffer-local" code nil nil [27848 27887])
            ("c-new-END" variable nil nil [27888 27908])
            ("make-variable-buffer-local" code nil nil [27909 27948])
            ("c-common-init" function (:arguments ("mode")) nil [27950 29868])
            ("c-count-cfss" function (:arguments ("lv-alist")) nil [29870 30235])
            ("c-before-hack-hook" function nil nil [30237 31637])
            ("c-remove-any-local-eval-or-mode-variables" function nil nil [31639 33331])
            ("c-postprocess-file-styles" function nil nil [33333 35225])
            ("if" code nil nil [35227 35410])
            ("c-run-mode-hooks" function (:arguments ("hooks")) nil [35412 35724])
            ("c-old-BOM" variable nil nil [36014 36034])
            ("make-variable-buffer-local" code nil nil [36035 36074])
            ("c-old-EOM" variable nil nil [36075 36095])
            ("make-variable-buffer-local" code nil nil [36096 36135])
            ("c-called-from-text-property-change-p" function nil nil [36137 36711])
            ("c-extend-region-for-CPP" function (:arguments ("beg" "end")) nil [36713 37525])
            ("c-extend-font-lock-region-for-macros" function (:arguments ("begg" "endd" "old-len")) nil [37527 38653])
            ("c-neutralize-CPP-line" function (:arguments ("beg" "end")) nil [38655 39537])
            ("c-neutralize-syntax-in-and-mark-CPP" function (:arguments ("begg" "endd" "old-len")) nil [39539 43069])
            ("c-before-change" function (:arguments ("beg" "end")) nil [43071 46899])
            ("c-in-after-change-fontification" variable nil nil [46901 46945])
            ("make-variable-buffer-local" code nil nil [46946 47007])
            ("c-after-change" function (:arguments ("beg" "end" "old-len")) nil [47105 49715])
            ("c-fl-decl-start" function (:arguments ("pos")) nil [49717 51376])
            ("c-change-expand-fl-region" function (:arguments ("beg" "end" "old-len")) nil [51378 52018])
            ("c-context-expand-fl-region" function (:arguments ("beg" "end")) nil [52020 52362])
            ("c-before-context-fl-expand-region" function (:arguments ("beg" "end")) nil [52364 52885])
            ("c-font-lock-fontify-region" function (:arguments ("beg" "end" "verbose")) nil [52887 54930])
            ("c-after-font-lock-init" function nil nil [54932 55277])
            ("c-font-lock-init" function nil nil [55279 56722])
            ("c-extend-after-change-region" function (:arguments ("beg" "end" "_old-len")) nil [56747 57650])
            ("c-advise-fl-for-region" function (:arguments ("function")) nil [57677 57965])
            ("unless" code nil nil [57973 58267])
            ("c-electric-indent-mode-hook" function nil nil [58333 58764])
            ("c-electric-indent-local-mode-hook" function nil nil [58766 59056])
            ("c-mode-syntax-table" variable (:default-value (funcall (c-lang-const c-make-mode-syntax-table c))) nil [59078 59201])
            ("c-define-abbrev-table" code nil nil [59203 59403])
            ("c-mode-map" variable (:default-value (let ((map (c-make-inherited-keymap))) (define-key map "" (quote c-macro-expand)) map)) nil [59405 59607])
            ("easy-menu-define" code nil nil [59610 59710])
            ("unless" code nil nil [61282 61351])
            ("define-derived-mode" code nil nil [61368 62371])
            ("c++-mode-syntax-table" variable (:default-value (funcall (c-lang-const c-make-mode-syntax-table c++))) nil [62395 62524])
            ("c-define-abbrev-table" code nil nil [62526 62785])
            ("c++-mode-map" variable (:default-value (let ((map (c-make-inherited-keymap))) (define-key map "" (quote c-macro-expand)) (define-key map ":" (quote c-scope-operator)) (define-key map "<" (quote c-electric-lt-gt)) (define-key map ">" (quote c-electric-lt-gt)) map)) nil [62787 63144])
            ("easy-menu-define" code nil nil [63146 63256])
            ("define-derived-mode" code nil nil [63273 64303])
            ("objc-mode-syntax-table" variable (:default-value (funcall (c-lang-const c-make-mode-syntax-table objc))) nil [64335 64467])
            ("c-define-abbrev-table" code nil nil [64469 64675])
            ("objc-mode-map" variable (:default-value (let ((map (c-make-inherited-keymap))) (define-key map "" (quote c-macro-expand)) map)) nil [64677 64894])
            ("easy-menu-define" code nil nil [64896 65011])
            ("define-derived-mode" code nil nil [65100 66147])
            ("java-mode-syntax-table" variable (:default-value (funcall (c-lang-const c-make-mode-syntax-table java))) nil [66172 66304])
            ("c-define-abbrev-table" code nil nil [66306 66626])
            ("java-mode-map" variable (:default-value (let ((map (c-make-inherited-keymap))) map)) nil [66628 66790])
            ("c-Java-defun-prompt-regexp" variable
               (:constant-flag t
                :default-value "^[ 	]*\\(\\(\\(public\\|protected\\|private\\|const\\|abstract\\|synchronized\\|final\\|static\\|threadsafe\\|transient\\|native\\|volatile\\)\\s-+\\)*\\(\\(\\([[a-zA-Z][][_$.a-zA-Z0-9]*[][_$.a-zA-Z0-9]+\\|[[a-zA-Z]\\)\\s-*\\)\\s-+\\)\\)?\\(\\([[a-zA-Z][][_$.a-zA-Z0-9]*\\s-+\\)\\s-*\\)?\\([_a-zA-Z][^][ 	:;.,{}()=]*\\|\\([_$a-zA-Z][_$.a-zA-Z0-9]*\\)\\)\\s-*\\(([^);{}]*)\\)?\\([] 	]*\\)\\(\\s-*\\<throws\\>\\s-*\\(\\([_$a-zA-Z][_$.a-zA-Z0-9]*\\)[, 	
]*\\)+\\)?\\s-*")
                nil [67047 67567])
            ("easy-menu-define" code nil nil [67569 67684])
            ("define-derived-mode" code nil nil [67776 68740])
            ("idl-mode-syntax-table" variable (:default-value (funcall (c-lang-const c-make-mode-syntax-table idl))) nil [68781 68910])
            ("c-define-abbrev-table" code nil nil [68912 69011])
            ("idl-mode-map" variable (:default-value (let ((map (c-make-inherited-keymap))) map)) nil [69013 69172])
            ("easy-menu-define" code nil nil [69174 69284])
            ("define-derived-mode" code nil nil [69374 70341])
            ("pike-mode-syntax-table" variable (:default-value (funcall (c-lang-const c-make-mode-syntax-table pike))) nil [70366 70498])
            ("c-define-abbrev-table" code nil nil [70500 70706])
            ("pike-mode-map" variable (:default-value (let ((map (c-make-inherited-keymap))) (define-key map "" (quote c-macro-expand)) map)) nil [70708 70894])
            ("easy-menu-define" code nil nil [70896 71011])
            ("define-derived-mode" code nil nil [71211 72183])
            ("c-define-abbrev-table" code nil nil [72575 72779])
            ("awk-mode-map" variable (:default-value (let ((map (c-make-inherited-keymap))) (define-key map "#" (quote self-insert-command)) (define-key map "/" (quote self-insert-command)) (define-key map "*" (quote self-insert-command)) (define-key map "" (quote undefined)) (define-key map "" (quote undefined)) (define-key map "" (quote undefined)) (define-key map "\341" (quote c-beginning-of-statement)) (define-key map "\345" (quote c-end-of-statement)) (define-key map "\201" (quote c-awk-beginning-of-defun)) (define-key map "\205" (quote c-awk-end-of-defun)) map)) nil [72781 73475])
            ("easy-menu-define" code nil nil [73477 73587])
            ("awk-mode-syntax-table" variable nil nil [73627 73657])
            ("declare-function" code nil nil [73658 73710])
            ("define-derived-mode" code nil nil [73727 74867])
            ("c-mode-help-address" variable
               (:constant-flag t
                :default-value "submit@debbugs.gnu.org")
                nil [74889 74987])
            ("c-version" function (:user-visible-flag t) nil [74989 75158])
            ("define-obsolete-variable-alias" code nil nil [75160 75256])
            ("c-prepare-bug-report-hook" variable nil nil [75257 75295])
            ("reporter-prompt-for-summary-p" variable nil nil [75336 75374])
            ("reporter-dont-compact-list" variable nil nil [75375 75410])
            ("c-mode-bug-package" variable
               (:constant-flag t
                :default-value "cc-mode")
                nil [75479 75564])
            ("declare-function" code nil nil [75615 75690])
            ("c-submit-bug-report" function (:user-visible-flag t) nil [75692 77795])
            ("cc-provide" code nil nil [77799 77820]))          
      :file "cc-mode.el.gz"
      :pointmax 77914
      :fsize 22084
      :lastmodtime '(22676 23208 0 0)
      :unmatched-syntax '((close-paren 3485 . 3486) (symbol 3250 . 3267) (open-paren 3249 . 3250) (close-paren 3246 . 3247) (symbol 3152 . 3168) (open-paren 3151 . 3152)))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cc-mode" include nil nil [4192 4210])
            ("cl-lib" include nil nil [4211 4228])
            ("hide-ifdef" customgroup (:user-visible-flag t) nil [4230 4306])
            ("hide-ifdef-initially" variable nil nil [4308 4460])
            ("hide-ifdef-read-only" variable nil nil [4462 4609])
            ("hide-ifdef-lines" variable nil nil [4611 4739])
            ("hide-ifdef-shadow" variable nil nil [4741 4882])
            ("hide-ifdef-shadow" variable
               (:default-value (quote ((t (:inherit shadow))))
                :type "face")
                nil [4884 5012])
            ("hide-ifdef-exclude-define-regexp" variable nil nil [5014 5187])
            ("hide-ifdef-expand-reinclusion-protection" variable (:default-value t) nil [5189 5873])
            ("hide-ifdef-header-regexp" variable (:default-value "\\.h\\(h\\|xx\\|pp\\|\\+\\+\\)?\\'") nil [5875 6152])
            ("hide-ifdef-mode-submap" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map "d" (quote hide-ifdef-define)) (define-key map "u" (quote hide-ifdef-undef)) (define-key map "D" (quote hide-ifdef-set-define-alist)) (define-key map "U" (quote hide-ifdef-use-define-alist)) (define-key map "h" (quote hide-ifdefs)) (define-key map "s" (quote show-ifdefs)) (define-key map "" (quote hide-ifdef-block)) (define-key map "" (quote show-ifdef-block)) (define-key map "e" (quote hif-evaluate-macro)) (define-key map "C" (quote hif-clear-all-ifdef-defined)) (define-key map "" (quote hide-ifdef-toggle-read-only)) (define-key map "" (quote hide-ifdef-toggle-shadowing)) (substitute-key-definition (quote read-only-mode) (quote hide-ifdef-toggle-outside-read-only) map) (substitute-key-definition (quote toggle-read-only) (quote hide-ifdef-toggle-outside-read-only) map) map)) nil [6154 7186])
            ("hide-ifdef-mode-prefix-key" variable
               (:constant-flag t
                :default-value "@")
                nil [7188 7282])
            ("hide-ifdef-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map hide-ifdef-mode-prefix-key hide-ifdef-mode-submap) map)) nil [7284 7547])
            ("easy-menu-define" code nil nil [7549 8899])
            ("hide-ifdef-hiding" variable nil nil [8901 8968])
            ("or" code nil nil [8970 9126])
            ("hide-ifdef-syntax-table" variable (:default-value (let ((st (copy-syntax-table c-mode-syntax-table))) (modify-syntax-entry 95 "w" st) (modify-syntax-entry 38 "." st) (modify-syntax-entry 124 "." st) st)) nil [9190 9447])
            ("hide-ifdef-env" variable nil nil [9449 9526])
            ("hide-ifdef-env-backup" variable nil nil [9528 9736])
            ("hif-outside-read-only" variable nil nil [9738 9848])
            ("define-minor-mode" code nil nil [9865 13165])
            ("hif-clear-all-ifdef-defined" function (:user-visible-flag t) nil [13167 13507])
            ("hif-show-all" function (:user-visible-flag t) nil [13509 13646])
            ("hif-after-revert-function" function nil nil [13806 13907])
            ("add-hook" code nil nil [13908 13964])
            ("hif-end-of-line" function nil nil [13966 14084])
            ("hif-merge-ifdef-region" function (:arguments ("start" "end")) nil [14086 16185])
            ("hide-ifdef-region-internal" function (:arguments ("start" "end")) nil [16187 16475])
            ("hide-ifdef-region" function (:arguments ("start" "end")) nil [16477 16826])
            ("hif-show-ifdef-region" function (:arguments ("start" "end")) nil [16828 17066])
            ("hide-ifdef-evaluator" variable (:default-value (quote eval)) nil [17216 17394])
            ("hif-undefined-symbol" variable nil nil [17396 17474])
            ("hif-set-var" function (:arguments ("var" "value")) nil [17477 17621])
            ("declare-function" code nil nil [17623 17693])
            ("declare-function" code nil nil [17694 17764])
            ("hif-lookup" function (:arguments ("var")) nil [17766 18006])
            ("hif-defined" function (:arguments ("var")) nil [18008 18172])
            ("hif-cpp-prefix" variable
               (:constant-flag t
                :default-value "\\(^\\|\\)[ 	]*#[ 	]*")
                nil [18315 18373])
            ("hif-ifxdef-regexp" variable
               (:constant-flag t
                :default-value (concat hif-cpp-prefix "if\\(n\\)?def"))
                nil [18374 18444])
            ("hif-ifndef-regexp" variable
               (:constant-flag t
                :default-value (concat hif-cpp-prefix "ifndef"))
                nil [18445 18508])
            ("hif-ifx-regexp" variable
               (:constant-flag t
                :default-value (concat hif-cpp-prefix "if\\(n?def\\)?[ 	]+"))
                nil [18509 18586])
            ("hif-elif-regexp" variable
               (:constant-flag t
                :default-value (concat hif-cpp-prefix "elif"))
                nil [18587 18648])
            ("hif-else-regexp" variable
               (:constant-flag t
                :default-value (concat hif-cpp-prefix "else"))
                nil [18649 18710])
            ("hif-endif-regexp" variable
               (:constant-flag t
                :default-value (concat hif-cpp-prefix "endif"))
                nil [18711 18773])
            ("hif-ifx-else-endif-regexp" variable
               (:constant-flag t
                :default-value (concat hif-ifx-regexp "\\|" hif-elif-regexp "\\|" hif-else-regexp "\\|" hif-endif-regexp))
                nil [18774 18913])
            ("hif-macro-expr-prefix-regexp" variable
               (:constant-flag t
                :default-value (concat hif-cpp-prefix "\\(if\\(n?def\\)?\\|elif\\|define\\)[ 	]+"))
                nil [18914 19024])
            ("hif-white-regexp" variable
               (:constant-flag t
                :default-value "[ 	]*")
                nil [19026 19065])
            ("hif-define-regexp" variable
               (:constant-flag t
                :default-value (concat hif-cpp-prefix "\\(define\\|undef\\)"))
                nil [19066 19143])
            ("hif-id-regexp" variable
               (:constant-flag t
                :default-value (concat "[[:alpha:]_][[:alnum:]_]*"))
                nil [19144 19211])
            ("hif-macroref-regexp" variable
               (:constant-flag t
                :default-value (concat hif-white-regexp "\\(" hif-id-regexp "\\)" hif-white-regexp "\\(" "(" hif-white-regexp "\\(" hif-id-regexp "\\)?" hif-white-regexp "\\(" "," hif-white-regexp hif-id-regexp hif-white-regexp "\\)*" "\\(\\.\\.\\.\\)?" hif-white-regexp ")" "\\)?"))
                nil [19212 19567])
            ("hif-token" variable nil nil [19659 19677])
            ("hif-token-list" variable nil nil [19678 19701])
            ("hif-token-alist" variable
               (:constant-flag t
                :default-value (quote (("||" . hif-or) ("&&" . hif-and) ("|" . hif-logior) ("^" . hif-logxor) ("&" . hif-logand) ("<<" . hif-shiftleft) (">>" . hif-shiftright) ("==" . hif-equal) ("=" . hif-assign) ("!=" . hif-notequal) ("##" . hif-token-concat) ("!" . hif-not) ("~" . hif-lognot) ("(" . hif-lparen) (")" . hif-rparen) (">" . hif-greater) ("<" . hif-less) (">=" . hif-greater-equal) ("<=" . hif-less-equal) ("+" . hif-plus) ("-" . hif-minus) ("*" . hif-multiply) ("/" . hif-divide) ("%" . hif-modulo) ("?" . hif-conditional) (":" . hif-colon) ("," . hif-comma) ("#" . hif-stringify) ("..." . hif-etc))))
                nil [19703 20662])
            ("hif-valid-token-list" variable
               (:constant-flag t
                :default-value (mapcar (quote cdr) hif-token-alist))
                nil [20664 20725])
            ("hif-token-regexp" variable
               (:constant-flag t
                :default-value (concat (regexp-opt (mapcar (quote car) hif-token-alist)) "\\|0x[0-9a-fA-F]+\\.?[0-9a-fA-F]*" "\\|[0-9]+\\.?[0-9]*" "\\|\\w+"))
                nil [20727 20924])
            ("hif-string-literal-regexp" variable
               (:constant-flag t
                :default-value "\\(\"\\(?:[^\"\\]\\|\\\\.\\)*\"\\)")
                nil [20926 21000])
            ("hif-string-to-number" function (:arguments ("string" "base")) nil [21002 21511])
            ("hif-simple-token-only" variable nil nil [21920 21950])
            ("hif-tokenize" function (:arguments ("start" "end")) nil [21952 24084])
            ("hif-nexttoken" function nil nil [25938 26079])
            ("hif-if-valid-identifier-p" function (:arguments ("id")) nil [26081 26172])
            ("hif-define-operator" function (:arguments ("tokens")) nil [26174 27079])
            ("hif-flatten" function (:arguments ("l")) nil [27081 27279])
            ("hif-expand-token-list" function (:arguments ("tokens" "macroname" "expand_list")) nil [27281 30304])
            ("hif-parse-exp" function (:arguments ("token-list" "macroname")) nil [30306 30756])
            ("hif-exprlist" function nil nil [30758 31126])
            ("hif-expr" function nil nil [31128 31602])
            ("hif-or-expr" function nil nil [31604 31840])
            ("hif-and-expr" function nil nil [31842 32097])
            ("hif-logior-expr" function nil nil [32099 32365])
            ("hif-logxor-expr" function nil nil [32367 32635])
            ("hif-logand-expr" function nil nil [32637 32889])
            ("hif-eq-expr" function nil nil [32891 33197])
            ("hif-comp-expr" function nil nil [33199 33619])
            ("hif-logshift-expr" function nil nil [33621 33946])
            ("hif-math" function nil nil [33948 34282])
            ("hif-muldiv-expr" function nil nil [34284 34636])
            ("hif-factor" function nil nil [34638 36186])
            ("hif-get-argument-list" function nil nil [36188 36939])
            ("hif-place-macro-invocation" function (:arguments ("ident")) nil [36941 37079])
            ("hif-string-concatenation" function nil nil [37081 37441])
            ("hif-define-macro" function (:arguments ("_parmlist" "_token-body")) nil [37443 37760])
            ("hif-stringify" function (:arguments ("a")) nil [37762 38004])
            ("intern-safe" function (:arguments ("str")) nil [38006 38071])
            ("hif-token-concat" function (:arguments ("a" "b")) nil [38073 39092])
            ("hif-mathify" function (:arguments ("val")) nil [39094 39225])
            ("hif-conditional" function (:arguments ("a" "b" "c")) nil [39227 39327])
            ("hif-and" function (:arguments ("a" "b")) nil [39328 39417])
            ("hif-or" function (:arguments ("a" "b")) nil [39418 39505])
            ("hif-not" function (:arguments ("a")) nil [39506 39551])
            ("hif-lognot" function (:arguments ("a")) nil [39552 39601])
            ("hif-mathify-binop" function (:arguments ("fun")) nil [39603 39762])
            ("hif-shiftleft" function (:arguments ("a" "b")) nil [39764 39890])
            ("hif-shiftright" function (:arguments ("a" "b")) nil [39892 40027])
            ("defalias" code nil nil [40030 40081])
            ("defalias" code nil nil [40082 40133])
            ("defalias" code nil nil [40134 40185])
            ("defalias" code nil nil [40186 40237])
            ("defalias" code nil nil [40238 40289])
            ("defalias" code nil nil [40290 40341])
            ("defalias" code nil nil [40342 40394])
            ("defalias" code nil nil [40395 40446])
            ("defalias" code nil nil [40447 40498])
            ("defalias" code nil nil [40499 40551])
            ("defalias" code nil nil [40552 40604])
            ("defalias" code nil nil [40605 40661])
            ("defalias" code nil nil [40662 40718])
            ("defalias" code nil nil [40719 40775])
            ("hif-comma" function (:arguments ("expr")) nil [40778 41006])
            ("hif-token-stringification" function (:arguments ("l")) nil [41008 41486])
            ("hif-token-concatenation" function (:arguments ("l")) nil [41488 42114])
            ("hif-delimit" function (:arguments ("lis" "atom")) nil [42116 42249])
            ("hif-macro-supply-arguments" function (:arguments ("macro-name" "actual-parms")) nil [42281 45019])
            ("hif-invoke" function (:arguments ("macro-name" "actual-parms")) nil [45021 45335])
            ("hif-canonicalize-tokens" function (:arguments ("regexp")) nil [45392 46102])
            ("hif-canonicalize" function (:arguments ("regexp")) nil [46104 46949])
            ("hif-find-any-ifX" function nil nil [46951 47163])
            ("hif-find-next-relevant" function nil nil [47166 47516])
            ("hif-find-previous-relevant" function nil nil [47518 47877])
            ("hif-looking-at-ifX" function nil nil [47880 47939])
            ("hif-looking-at-endif" function nil nil [47970 48033])
            ("hif-looking-at-else" function nil nil [48034 48095])
            ("hif-looking-at-elif" function nil nil [48097 48158])
            ("hif-ifdef-to-endif" function nil nil [48161 48764])
            ("hif-endif-to-ifdef" function nil nil [48767 49431])
            ("forward-ifdef" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [49468 49935])
            ("backward-ifdef" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [49938 50435])
            ("down-ifdef" function (:user-visible-flag t) nil [50438 50709])
            ("up-ifdef" function (:user-visible-flag t) nil [50712 51042])
            ("next-ifdef" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [51044 51438])
            ("previous-ifdef" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [51440 51853])
            ("hif-make-range" function (:arguments ("start" "end" "else" "elif")) nil [52214 52300])
            ("hif-range-start" function (:arguments ("range")) nil [52302 52350])
            ("hif-range-else" function (:arguments ("range")) nil [52351 52398])
            ("hif-range-end" function (:arguments ("range")) nil [52399 52445])
            ("hif-range-elif" function (:arguments ("range")) nil [52446 52493])
            ("hif-find-range" function nil nil [52715 54015])
            ("hif-hide-line" function (:arguments ("point")) nil [54035 54316])
            ("hif-recurse-level" variable nil nil [55410 55438])
            ("hif-recurse-on" function (:arguments ("start" "end" "dont-go-eol")) nil [55440 55809])
            ("hif-possibly-hide" function (:arguments ("expand-reinclusion")) nil [55811 58993])
            ("hif-evaluate-region" function (:arguments ("start" "end")) nil [58995 59447])
            ("hif-evaluate-macro" function
               (:user-visible-flag t
                :arguments ("rstart" "rend"))
                nil [59449 62028])
            ("hif-parse-macro-arglist" function (:arguments ("str")) nil [62030 62757])
            ("hif-find-define" function
               (:user-visible-flag t
                :arguments ("min" "max"))
                nil [64448 67708])
            ("hif-add-new-defines" function
               (:user-visible-flag t
                :arguments ("min" "max"))
                nil [67711 68051])
            ("hide-ifdef-guts" function nil nil [68053 68944])
            ("hide-ifdef-toggle-read-only" function (:user-visible-flag t) nil [69023 69405])
            ("hide-ifdef-toggle-outside-read-only" function (:user-visible-flag t) nil [69407 69789])
            ("hide-ifdef-toggle-shadowing" function (:user-visible-flag t) nil [69791 70360])
            ("hide-ifdef-define" function
               (:user-visible-flag t
                :arguments ("var" "val"))
                nil [70362 71174])
            ("hif-undefine-symbol" function (:arguments ("var")) nil [71176 71292])
            ("hide-ifdef-undef" function
               (:user-visible-flag t
                :arguments ("start" "end"))
                nil [71294 72005])
            ("hide-ifdefs" function
               (:user-visible-flag t
                :arguments ("nomsg"))
                nil [72007 72901])
            ("show-ifdefs" function (:user-visible-flag t) nil [72904 73112])
            ("hif-find-ifdef-block" function nil nil [73115 73824])
            ("hide-ifdef-block" function
               (:user-visible-flag t
                :arguments ("arg" "start" "end"))
                nil [73827 74646])
            ("show-ifdef-block" function
               (:user-visible-flag t
                :arguments ("start" "end"))
                nil [74648 76090])
            ("hide-ifdef-define-alist" variable nil nil [76124 76213])
            ("hif-compress-define-list" function (:arguments ("env")) nil [76215 76440])
            ("hide-ifdef-set-define-alist" function
               (:user-visible-flag t
                :arguments ("name"))
                nil [76442 76663])
            ("hide-ifdef-use-define-alist" function
               (:user-visible-flag t
                :arguments ("name"))
                nil [76665 77280])
            ("hideif" package nil nil [77282 77299]))          
      :file "hideif.el.gz"
      :pointmax 77325
      :fsize 20173
      :lastmodtime '(22676 23208 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-generic" include nil nil [1014 1035])
            ("lisp-mode" include nil nil [1036 1056])
            ("cl-lib" include nil nil [1076 1093])
            ("define-abbrev-table" code nil nil [1096 1276])
            ("emacs-lisp-mode-syntax-table" variable (:default-value (let ((table (make-syntax-table lisp--mode-syntax-table))) (modify-syntax-entry 91 "(]  " table) (modify-syntax-entry 93 ")[  " table) table)) nil [1278 1517])
            ("emacs-lisp-mode-map" variable (:default-value (let ((map (make-sparse-keymap "Emacs-Lisp")) (menu-map (make-sparse-keymap "Emacs-Lisp")) (lint-map (make-sparse-keymap)) (prof-map (make-sparse-keymap)) (tracing-map (make-sparse-keymap))) (set-keymap-parent map lisp-mode-shared-map) (define-key map "	" (quote completion-at-point)) (define-key map "" (quote eval-defun)) (define-key map "" (quote indent-pp-sexp)) (bindings--define-key map [menu-bar emacs-lisp] (cons "Emacs-Lisp" menu-map)) (bindings--define-key menu-map [eldoc] (quote (menu-item "Auto-Display Documentation Strings" eldoc-mode :button (:toggle bound-and-true-p eldoc-mode) :help "Display the documentation string for the item under cursor"))) (bindings--define-key menu-map [checkdoc] (quote (menu-item "Check Documentation Strings" checkdoc :help "Check documentation strings for style requirements"))) (bindings--define-key menu-map [re-builder] (quote (menu-item "Construct Regexp" re-builder :help "Construct a regexp interactively"))) (bindings--define-key menu-map [tracing] (cons "Tracing" tracing-map)) (bindings--define-key tracing-map [tr-a] (quote (menu-item "Untrace All" untrace-all :help "Untrace all currently traced functions"))) (bindings--define-key tracing-map [tr-uf] (quote (menu-item "Untrace Function..." untrace-function :help "Untrace function, and possibly activate all remaining advice"))) (bindings--define-key tracing-map [tr-sep] menu-bar-separator) (bindings--define-key tracing-map [tr-q] (quote (menu-item "Trace Function Quietly..." trace-function-background :help "Trace the function with trace output going quietly to a buffer"))) (bindings--define-key tracing-map [tr-f] (quote (menu-item "Trace Function..." trace-function :help "Trace the function given as an argument"))) (bindings--define-key menu-map [profiling] (cons "Profiling" prof-map)) (bindings--define-key prof-map [prof-restall] (quote (menu-item "Remove Instrumentation for All Functions" elp-restore-all :help "Restore the original definitions of all functions being profiled"))) (bindings--define-key prof-map [prof-restfunc] (quote (menu-item "Remove Instrumentation for Function..." elp-restore-function :help "Restore an instrumented function to its original definition"))) (bindings--define-key prof-map [sep-rem] menu-bar-separator) (bindings--define-key prof-map [prof-resall] (quote (menu-item "Reset Counters for All Functions" elp-reset-all :help "Reset the profiling information for all functions being profiled"))) (bindings--define-key prof-map [prof-resfunc] (quote (menu-item "Reset Counters for Function..." elp-reset-function :help "Reset the profiling information for a function"))) (bindings--define-key prof-map [prof-res] (quote (menu-item "Show Profiling Results" elp-results :help "Display current profiling results"))) (bindings--define-key prof-map [prof-pack] (quote (menu-item "Instrument Package..." elp-instrument-package :help "Instrument for profiling all function that start with a prefix"))) (bindings--define-key prof-map [prof-func] (quote (menu-item "Instrument Function..." elp-instrument-function :help "Instrument a function for profiling"))) (bindings--define-key prof-map [sep-natprof] menu-bar-separator) (bindings--define-key prof-map [prof-natprof-stop] (quote (menu-item "Stop Native Profiler" profiler-stop :help "Stop recording profiling information" :enable (and (featurep (quote profiler)) (profiler-running-p))))) (bindings--define-key prof-map [prof-natprof-report] (quote (menu-item "Show Profiler Report" profiler-report :help "Show the current profiler report" :enable (and (featurep (quote profiler)) (profiler-running-p))))) (bindings--define-key prof-map [prof-natprof-start] (quote (menu-item "Start Native Profiler..." profiler-start :help "Start recording profiling information"))) (bindings--define-key menu-map [lint] (cons "Linting" lint-map)) (bindings--define-key lint-map [lint-di] (quote (menu-item "Lint Directory..." elint-directory :help "Lint a directory"))) (bindings--define-key lint-map [lint-f] (quote (menu-item "Lint File..." elint-file :help "Lint a file"))) (bindings--define-key lint-map [lint-b] (quote (menu-item "Lint Buffer" elint-current-buffer :help "Lint the current buffer"))) (bindings--define-key lint-map [lint-d] (quote (menu-item "Lint Defun" elint-defun :help "Lint the function at point"))) (bindings--define-key menu-map [edebug-defun] (quote (menu-item "Instrument Function for Debugging" edebug-defun :help "Evaluate the top level form point is in, stepping through with Edebug" :keys "C-u C-M-x"))) (bindings--define-key menu-map [separator-byte] menu-bar-separator) (bindings--define-key menu-map [disas] (quote (menu-item "Disassemble Byte Compiled Object..." disassemble :help "Print disassembled code for OBJECT in a buffer"))) (bindings--define-key menu-map [byte-recompile] (quote (menu-item "Byte-recompile Directory..." byte-recompile-directory :help "Recompile every `.el' file in DIRECTORY that needs recompilation"))) (bindings--define-key menu-map [emacs-byte-compile-and-load] (quote (menu-item "Byte-compile and Load" emacs-lisp-byte-compile-and-load :help "Byte-compile the current file (if it has changed), then load compiled code"))) (bindings--define-key menu-map [byte-compile] (quote (menu-item "Byte-compile This File" emacs-lisp-byte-compile :help "Byte compile the file containing the current buffer"))) (bindings--define-key menu-map [separator-eval] menu-bar-separator) (bindings--define-key menu-map [ielm] (quote (menu-item "Interactive Expression Evaluation" ielm :help "Interactively evaluate Emacs Lisp expressions"))) (bindings--define-key menu-map [eval-buffer] (quote (menu-item "Evaluate Buffer" eval-buffer :help "Execute the current buffer as Lisp code"))) (bindings--define-key menu-map [eval-region] (quote (menu-item "Evaluate Region" eval-region :help "Execute the region as Lisp code" :enable mark-active))) (bindings--define-key menu-map [eval-sexp] (quote (menu-item "Evaluate Last S-expression" eval-last-sexp :help "Evaluate sexp before point; print value in echo area"))) (bindings--define-key menu-map [separator-format] menu-bar-separator) (bindings--define-key menu-map [comment-region] (quote (menu-item "Comment Out Region" comment-region :help "Comment or uncomment each line in the region" :enable mark-active))) (bindings--define-key menu-map [indent-region] (quote (menu-item "Indent Region" indent-region :help "Indent each nonblank line in the region" :enable mark-active))) (bindings--define-key menu-map [indent-line] (quote (menu-item "Indent Line" lisp-indent-line))) map)) nil [1519 8607])
            ("emacs-lisp-byte-compile" function (:user-visible-flag t) nil [8609 8838])
            ("emacs-lisp-byte-compile-and-load" function (:user-visible-flag t) nil [8840 9316])
            ("emacs-lisp-macroexpand" function (:user-visible-flag t) nil [9318 9820])
            ("emacs-lisp-mode-hook" variable nil nil [9822 10000])
            ("define-derived-mode" code nil nil [10017 10994])
            ("elisp--font-lock-flush-elisp-buffers" function (:arguments ("file")) nil [11022 11817])
            ("elisp--local-variables-1" function (:arguments ("vars" "sexp")) nil [11854 13919])
            ("elisp--local-variables" function nil nil [13921 15522])
            ("elisp--local-variables-completion-table" variable (:default-value (let ((lastpos nil) (lastvars nil)) (letrec ((hookfun (lambda nil (setq lastpos nil) (remove-hook (quote post-command-hook) hookfun)))) (completion-table-dynamic (lambda (_string) (save-excursion (skip-syntax-backward "_w") (let ((newpos (cons (point) (current-buffer)))) (unless (equal lastpos newpos) (add-hook (quote post-command-hook) hookfun) (setq lastpos newpos) (setq lastvars (mapcar (function symbol-name) (elisp--local-variables)))))) lastvars))))) nil [15524 16497])
            ("elisp--expect-function-p" function (:arguments ("pos")) nil [16499 17191])
            ("elisp--form-quoted-p" function (:arguments ("pos")) nil [17193 18042])
            ("elisp--company-doc-buffer" function (:arguments ("str")) nil [18628 19355])
            ("elisp--company-doc-string" function (:arguments ("str")) nil [19357 19676])
            ("declare-function" code nil nil [19728 19786])
            ("declare-function" code nil nil [19787 19866])
            ("elisp--company-location" function (:arguments ("str")) nil [19868 20292])
            ("elisp-completion-at-point" function nil nil [20294 27008])
            ("lisp-completion-at-point" function (:arguments ("_predicate")) nil [27010 27151])
            ("declare-function" code nil nil [27171 27231])
            ("declare-function" code nil nil [27232 27286])
            ("declare-function" code nil nil [27287 27349])
            ("elisp--xref-backend" function nil nil [27351 27388])
            ("elisp--xref-format" variable (:default-value (let ((str "(%s %s)")) (put-text-property 1 3 (quote face) (quote font-lock-keyword-face) str) (put-text-property 4 6 (quote face) (quote font-lock-function-name-face) str) str)) nil [27523 27714])
            ("elisp--xref-format-extra" variable (:default-value (let ((str "(%s %s %s)")) (put-text-property 1 3 (quote face) (quote font-lock-keyword-face) str) (put-text-property 4 6 (quote face) (quote font-lock-function-name-face) str) str)) nil [27849 28049])
            ("find-feature-regexp" variable nil nil [28051 28079])
            ("elisp--xref-make-xref" function (:arguments ("type" "symbol" "file" "summary")) nil [28099 28513])
            ("elisp-xref-find-def-functions" variable nil nil [28515 28854])
            ("cl-defmethod" code nil nil [28856 29261])
            ("elisp--xref-find-definitions" function (:arguments ("symbol")) nil [29263 36805])
            ("declare-function" code nil nil [36807 36858])
            ("cl-defmethod" code nil nil [36860 37102])
            ("elisp--xref-identifier-completion-table" variable (:default-value (apply-partially (function completion-table-with-predicate) obarray (lambda (sym) (or (boundp sym) (fboundp sym) (featurep sym) (facep sym))) (quote strict))) nil [37104 37449])
            ("cl-defmethod" code nil nil [37451 37573])
            ("cl-defstruct" code nil nil [37575 37753])
            ("cl-defmethod" code nil nil [37755 38118])
            ("cl-defmethod" code nil nil [38120 38211])
            ("elisp-load-path-roots" function nil nil [38213 38333])
            ("lisp-interaction-mode-map" variable (:default-value (let ((map (make-sparse-keymap)) (menu-map (make-sparse-keymap "Lisp-Interaction"))) (set-keymap-parent map lisp-mode-shared-map) (define-key map "" (quote eval-defun)) (define-key map "" (quote indent-pp-sexp)) (define-key map "	" (quote completion-at-point)) (define-key map "
" (quote eval-print-last-sexp)) (bindings--define-key map [menu-bar lisp-interaction] (cons "Lisp-Interaction" menu-map)) (bindings--define-key menu-map [eval-defun] (quote (menu-item "Evaluate Defun" eval-defun :help "Evaluate the top-level form containing point, or after point"))) (bindings--define-key menu-map [eval-print-last-sexp] (quote (menu-item "Evaluate and Print" eval-print-last-sexp :help "Evaluate sexp before point; print value into current buffer"))) (bindings--define-key menu-map [edebug-defun-lisp-interaction] (quote (menu-item "Instrument Function for Debugging" edebug-defun :help "Evaluate the top level form point is in, stepping through with Edebug" :keys "C-u C-M-x"))) (bindings--define-key menu-map [indent-pp-sexp] (quote (menu-item "Indent or Pretty-Print" indent-pp-sexp :help "Indent each line of the list starting just after point, or prettyprint it"))) (bindings--define-key menu-map [complete-symbol] (quote (menu-item "Complete Lisp Symbol" completion-at-point :help "Perform completion on Lisp symbol preceding point"))) map)) nil [38363 39909])
            ("define-derived-mode" code nil nil [39911 40475])
            ("emacs-list-byte-code-comment-re" variable
               (:constant-flag t
                :default-value (concat "\\(#\\)@\\([0-9]+\\) " "\\(?:[^(]\\|([^\"]\\)"))
                nil [40528 40718])
            ("elisp--byte-code-comment" function (:arguments ("end" "_point")) nil [40721 41989])
            ("elisp-byte-code-syntax-propertize" function (:arguments ("start" "end")) nil [41991 42259])
            ("add-to-list" code nil nil [42276 42344])
            ("define-derived-mode" code nil nil [42360 42676])
            ("eval-print-last-sexp" function
               (:user-visible-flag t
                :arguments ("eval-last-sexp-arg-internal"))
                nil [42718 43480])
            ("last-sexp-setup-props" function (:arguments ("beg" "end" "value" "alt1" "alt2")) nil [43483 44275])
            ("elisp-last-sexp-toggle-display" function
               (:user-visible-flag t
                :arguments ("_arg"))
                nil [44278 45058])
            ("prin1-char" function (:arguments ("char")) nil [45060 46228])
            ("elisp--preceding-sexp" function nil nil [46230 48028])
            ("define-obsolete-function-alias" code nil nil [48029 48107])
            ("elisp--eval-last-sexp" function (:arguments ("eval-last-sexp-arg-internal")) nil [48109 48787])
            ("elisp--eval-last-sexp-print-value" function (:arguments ("value" "eval-last-sexp-arg-internal")) nil [48789 49694])
            ("elisp--eval-last-sexp-fake-value" variable (:default-value (make-symbol "t")) nil [49697 49756])
            ("eval-sexp-add-defvars" function (:arguments ("exp" "pos")) nil [49758 50604])
            ("eval-last-sexp" function
               (:user-visible-flag t
                :arguments ("eval-last-sexp-arg-internal"))
                nil [50606 51681])
            ("elisp--eval-defun-1" function (:arguments ("form")) nil [51683 53632])
            ("elisp--eval-defun" function nil nil [53634 55395])
            ("eval-defun" function
               (:user-visible-flag t
                :arguments ("edebug-it"))
                nil [55397 57014])
            ("elisp--eldoc-last-data" variable (:default-value (make-vector 3 nil)) nil [57035 57367])
            ("elisp-eldoc-documentation-function" function nil nil [57369 57891])
            ("elisp-get-fnsym-args-string" function (:arguments ("sym" "index" "prefix")) nil [57893 59339])
            ("elisp--highlight-function-argument" function (:arguments ("sym" "args" "index" "prefix")) nil [59341 64563])
            ("elisp-get-var-docstring" function (:arguments ("sym")) nil [64656 65225])
            ("elisp--last-data-store" function (:arguments ("symbol" "doc" "type")) nil [65227 65399])
            ("elisp--docstring-first-line" function (:arguments ("doc")) nil [65510 65981])
            ("elisp--fnsym-in-current-sexp" function nil nil [66046 66464])
            ("elisp--beginning-of-sexp" function nil nil [66574 67125])
            ("elisp--current-symbol" function nil nil [67185 67343])
            ("elisp-function-argstring" function (:arguments ("arglist")) nil [67345 67807])
            ("elisp-mode" package nil nil [67809 67830]))          
      :file "elisp-mode.el.gz"
      :pointmax 67859
      :fsize 18026
      :lastmodtime '(22676 23208 0 0)
      :unmatched-syntax '((close-paren 40718 . 40719) (symbol 40509 . 40525) (open-paren 40508 . 40509) (close-paren 1093 . 1094) (symbol 1058 . 1075) (open-paren 1057 . 1058))))
  :file "!usr!local!Cellar!emacs-plus!25.2!share!emacs!25.2!lisp!progmodes!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
