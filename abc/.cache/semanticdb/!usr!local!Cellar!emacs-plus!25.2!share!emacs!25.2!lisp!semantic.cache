;; Object semanticdb-project-database-file
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file"
  :tables
  (list
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("declare-function" function (:arguments ("_fn" "_file" "_arglist" "_fileonly")) nil [1096 2616])
            ("defalias" code nil nil [2645 2666])
            ("noreturn" function (:arguments ("form")) nil [2668 2872])
            ("1value" function (:arguments ("form")) nil [2874 3112])
            ("def-edebug-spec" function (:arguments ("symbol" "spec")) nil [3114 3574])
            ("lambda" function (:arguments ("cdr")) nil [3576 4734])
            ("setq-local" function (:arguments ("var" "val")) nil [4736 4948])
            ("defvar-local" function (:arguments ("var" "val" "docstring")) nil [4950 5391])
            ("apply-partially" function (:arguments ("fun" "args")) nil [5393 5770])
            ("push" function (:arguments ("newelt" "place")) nil [5772 6366])
            ("pop" function (:arguments ("place")) nil [6368 7225])
            ("when" function (:arguments ("cond" "body")) nil [7227 7515])
            ("unless" function (:arguments ("cond" "body")) nil [7517 7803])
            ("dolist" function (:arguments ("spec" "body")) nil [7805 9084])
            ("dotimes" function (:arguments ("spec" "body")) nil [9086 10551])
            ("declare" function (:arguments ("_specs")) nil [10553 11128])
            ("ignore-errors" function (:arguments ("body")) nil [11130 11437])
            ("ignore" function
               (:user-visible-flag t
                :arguments ("_ignore"))
                nil [11468 11616])
            ("error" function (:arguments ("args")) nil [11673 12189])
            ("user-error" function (:arguments ("format" "args")) nil [12191 12851])
            ("define-error" function (:arguments ("name" "message" "parent")) nil [12853 13766])
            ("frame-configuration-p" function (:arguments ("object")) nil [13880 14135])
            ("internal--compiler-macro-cXXr" function (:arguments ("form" "x")) nil [14329 14909])
            ("caar" function (:arguments ("x")) nil [14911 15038])
            ("cadr" function (:arguments ("x")) nil [15040 15167])
            ("cdar" function (:arguments ("x")) nil [15169 15296])
            ("cddr" function (:arguments ("x")) nil [15298 15425])
            ("last" function (:arguments ("list" "n")) nil [15427 15844])
            ("butlast" function (:arguments ("list" "n")) nil [15846 16074])
            ("nbutlast" function (:arguments ("list" "n")) nil [16076 16353])
            ("zerop" function (:arguments ("number")) nil [16355 16585])
            ("delete-dups" function (:arguments ("list")) nil [16587 17374])
            ("delete-consecutive-dups" function (:arguments ("list" "circular")) nil [17451 17909])
            ("number-sequence" function (:arguments ("from" "to" "inc")) nil [17911 19918])
            ("copy-tree" function (:arguments ("tree" "vecp")) nil [19920 20669])
            ("assoc-default" function (:arguments ("key" "alist" "test" "default")) nil [20709 21509])
            ("assoc-ignore-case" function (:arguments ("key" "alist")) nil [21511 21833])
            ("assoc-ignore-representation" function (:arguments ("key" "alist")) nil [21835 22103])
            ("member-ignore-case" function (:arguments ("elt" "list")) nil [22105 22540])
            ("assq-delete-all" function (:arguments ("key" "alist")) nil [22542 23026])
            ("rassq-delete-all" function (:arguments ("value" "alist")) nil [23028 23521])
            ("alist-get" function (:arguments ("key" "alist" "default" "remove")) nil [23523 23983])
            ("remove" function (:arguments ("elt" "seq")) nil [23985 24338])
            ("remq" function (:arguments ("elt" "list")) nil [24340 24671])
            ("kbd" function (:arguments ("keys")) nil [24696 25076])
            ("put" code nil nil [25077 25095])
            ("undefined" function (:user-visible-flag t) nil [25097 25552])
            ("put" code nil nil [25647 25682])
            ("suppress-keymap" function (:arguments ("map" "nodigits")) nil [25684 26248])
            ("make-composed-keymap" function (:arguments ("maps" "parent")) nil [26250 26902])
            ("define-key-after" function (:arguments ("keymap" "key" "definition" "after")) nil [26904 28965])
            ("map-keymap-sorted" function (:arguments ("function" "keymap")) nil [28967 29647])
            ("keymap--menu-item-binding" function (:arguments ("val")) nil [29649 30119])
            ("keymap--menu-item-with-binding" function (:arguments ("item" "binding")) nil [30173 30773])
            ("keymap--merge-bindings" function (:arguments ("val1" "val2")) nil [30775 31241])
            ("keymap-canonicalize" function (:arguments ("map")) nil [31243 33112])
            ("put" code nil nil [33114 33171])
            ("keyboard-translate" function (:arguments ("from" "to")) nil [33173 33548])
            ("global-set-key" function
               (:user-visible-flag t
                :arguments ("key" "command"))
                nil [33579 34325])
            ("local-set-key" function
               (:user-visible-flag t
                :arguments ("key" "command"))
                nil [34327 35131])
            ("global-unset-key" function
               (:user-visible-flag t
                :arguments ("key"))
                nil [35133 35329])
            ("local-unset-key" function
               (:user-visible-flag t
                :arguments ("key"))
                nil [35331 35560])
            ("key-substitution-in-progress" variable nil nil [35616 35709])
            ("substitute-key-definition" function (:arguments ("olddef" "newdef" "keymap" "oldmap" "prefix")) nil [35711 37093])
            ("substitute-key-definition-key" function (:arguments ("defn" "olddef" "newdef" "prefix" "keymap")) nil [37095 38758])
            ("global-map" variable nil nil [38907 39081])
            ("esc-map" variable nil nil [39083 39223])
            ("ctl-x-map" variable nil nil [39225 39360])
            ("ctl-x-4-map" variable (:default-value (make-sparse-keymap)) nil [39362 39440])
            ("defalias" code nil nil [39441 39479])
            ("define-key" code nil nil [39480 39522])
            ("ctl-x-5-map" variable (:default-value (make-sparse-keymap)) nil [39524 39596])
            ("defalias" code nil nil [39597 39635])
            ("define-key" code nil nil [39636 39678])
            ("listify-key-sequence-1" variable
               (:constant-flag t
                :default-value (logior 128 134217728))
                nil [39718 39773])
            ("listify-key-sequence" function (:arguments ("key")) nil [39775 40013])
            ("eventp" function (:arguments ("obj")) nil [40015 40216])
            ("event-modifiers" function (:arguments ("event")) nil [40218 41512])
            ("event-basic-type" function (:arguments ("event")) nil [41514 42282])
            ("mouse-movement-p" function (:arguments ("object")) nil [42284 42417])
            ("mouse-event-p" function (:arguments ("object")) nil [42419 42637])
            ("event-start" function (:arguments ("event")) nil [42639 43799])
            ("event-end" function (:arguments ("event")) nil [43801 44119])
            ("event-click-count" function (:arguments ("event")) nil [44121 44331])
            ("posnp" function (:arguments ("obj")) nil [44388 45036])
            ("posn-window" function (:arguments ("position")) nil [45070 45252])
            ("posn-area" function (:arguments ("position")) nil [45254 45578])
            ("posn-point" function (:arguments ("position")) nil [45580 46046])
            ("posn-set-point" function (:arguments ("position")) nil [46048 46368])
            ("posn-x-y" function (:arguments ("position")) nil [46370 46623])
            ("declare-function" code nil nil [46625 46691])
            ("posn-col-row" function (:arguments ("position")) nil [46693 48511])
            ("posn-actual-col-row" function (:arguments ("position")) nil [48513 49101])
            ("posn-timestamp" function (:arguments ("position")) nil [49103 49291])
            ("posn-string" function (:arguments ("position")) nil [49293 49652])
            ("posn-image" function (:arguments ("position")) nil [49654 49894])
            ("posn-object" function (:arguments ("position")) nil [49896 50265])
            ("posn-object-x-y" function (:arguments ("position")) nil [50267 50554])
            ("posn-object-width-height" function (:arguments ("position")) nil [50556 50816])
            ("define-obsolete-function-alias" code nil nil [50859 50924])
            ("define-obsolete-function-alias" code nil nil [50925 50998])
            ("define-obsolete-function-alias" code nil nil [50999 51063])
            ("define-obsolete-function-alias" code nil nil [51064 51135])
            ("define-obsolete-function-alias" code nil nil [51136 51209])
            ("define-obsolete-function-alias" code nil nil [51210 51282])
            ("make-obsolete" code nil nil [51284 51350])
            ("make-obsolete" code nil nil [51351 51400])
            ("insert-string" function (:arguments ("args")) nil [51402 51720])
            ("makehash" function (:arguments ("test")) nil [51722 51842])
            ("log10" function (:arguments ("x")) nil [51844 51953])
            ("defalias" code nil nil [52001 52035])
            ("make-obsolete" code nil nil [52036 52090])
            ("defalias" code nil nil [52091 52127])
            ("make-obsolete" code nil nil [52128 52184])
            ("make-obsolete" code nil nil [52185 52292])
            ("set-advertised-calling-convention" code nil nil [52293 52394])
            ("set-advertised-calling-convention" code nil nil [52395 52463])
            ("set-advertised-calling-convention" code nil nil [52464 52535])
            ("set-advertised-calling-convention" code nil nil [52536 52621])
            ("set-advertised-calling-convention" code nil nil [52622 52691])
            ("set-advertised-calling-convention" code nil nil [52692 52761])
            ("make-obsolete-variable" code nil nil [53166 53353])
            ("make-obsolete-variable" code nil nil [53354 53433])
            ("make-obsolete-variable" code nil nil [53434 53501])
            ("make-obsolete-variable" code nil nil [53502 53567])
            ("make-obsolete-variable" code nil nil [53568 53629])
            ("make-obsolete-variable" code nil nil [53630 53701])
            ("make-obsolete-variable" code nil nil [53702 53767])
            ("make-obsolete-variable" code nil nil [53768 53829])
            ("make-obsolete-variable" code nil nil [53830 53905])
            ("make-obsolete-variable" code nil nil [53906 53983])
            ("make-obsolete-variable" code nil nil [53984 54063])
            ("make-obsolete-variable" code nil nil [54064 54141])
            ("make-obsolete-variable" code nil nil [54142 54221])
            ("make-obsolete-variable" code nil nil [54222 54311])
            ("make-obsolete-variable" code nil nil [54312 54387])
            ("make-obsolete-variable" code nil nil [54388 54469])
            ("make-obsolete-variable" code nil nil [54470 54553])
            ("make-obsolete-variable" code nil nil [54554 54649])
            ("make-obsolete-variable" code nil nil [54650 54737])
            ("make-obsolete-variable" code nil nil [54738 54819])
            ("make-obsolete-variable" code nil nil [54820 54907])
            ("make-obsolete-variable" code nil nil [54908 54999])
            ("make-obsolete-variable" code nil nil [55000 55065])
            ("make-obsolete-variable" code nil nil [55066 55131])
            ("make-obsolete-variable" code nil nil [55132 55235])
            ("make-obsolete-variable" code nil nil [55236 55329])
            ("make-obsolete-variable" code nil nil [55330 55393])
            ("make-obsolete-variable" code nil nil [55394 55534])
            ("make-obsolete-variable" code nil nil [55536 55600])
            ("make-obsolete-variable" code nil nil [55601 55684])
            ("make-obsolete-variable" code nil nil [55685 55757])
            ("make-obsolete-variable" code nil nil [55758 55834])
            ("make-obsolete-variable" code nil nil [55835 55892])
            ("make-obsolete" code nil nil [55893 55949])
            ("make-obsolete" code nil nil [55950 56010])
            ("make-obsolete" code nil nil [56012 56066])
            ("make-obsolete" code nil nil [56067 56123])
            ("make-obsolete-variable" code nil nil [56125 56249])
            ("define-obsolete-variable-alias" code nil nil [56288 56375])
            ("define-obsolete-variable-alias" code nil nil [56377 56470])
            ("define-obsolete-variable-alias" code nil nil [56471 56564])
            ("make-obsolete-variable" code nil nil [56810 56874])
            ("defvaralias" code nil nil [56876 56933])
            ("defalias" code nil nil [57006 57050])
            ("defalias" code nil nil [57051 57095])
            ("defalias" code nil nil [57096 57129])
            ("defalias" code nil nil [57130 57163])
            ("defalias" code nil nil [57164 57200])
            ("defalias" code nil nil [57201 57236])
            ("defalias" code nil nil [57237 57263])
            ("defalias" code nil nil [57264 57290])
            ("defalias" code nil nil [57291 57313])
            ("defalias" code nil nil [57339 57378])
            ("defalias" code nil nil [57379 57433])
            ("defalias" code nil nil [57434 57504])
            ("defalias" code nil nil [57505 57577])
            ("defalias" code nil nil [57578 57621])
            ("defalias" code nil nil [57622 57666])
            ("defalias" code nil nil [57667 57700])
            ("defalias" code nil nil [57701 57734])
            ("defalias" code nil nil [57766 57809])
            ("defalias" code nil nil [57810 57859])
            ("defalias" code nil nil [57861 57914])
            ("add-hook" function (:arguments ("hook" "function" "append" "local")) nil [57953 60082])
            ("remove-hook" function (:arguments ("hook" "function" "local")) nil [60084 61752])
            ("letrec" function (:arguments ("binders" "body")) nil [61754 62383])
            ("with-wrapper-hook" function (:arguments ("hook" "args" "body")) nil [62385 65438])
            ("add-to-list" function (:arguments ("list-var" "element" "append" "compare-fn")) nil [65440 68809])
            ("add-to-ordered-list" function (:arguments ("list-var" "element" "order")) nil [68812 70131])
            ("add-to-history" function (:arguments ("history-var" "newelt" "maxelt" "keep-all")) nil [70133 71345])
            ("delay-mode-hooks" variable nil nil [71367 71461])
            ("delayed-mode-hooks" variable nil nil [71462 71543])
            ("make-variable-buffer-local" code nil nil [71544 71592])
            ("put" code nil nil [71593 71635])
            ("change-major-mode-after-body-hook" variable nil nil [71637 71751])
            ("after-change-major-mode-hook" variable nil nil [71753 71855])
            ("run-mode-hooks" function (:arguments ("hooks")) nil [71857 72740])
            ("delay-mode-hooks" function (:arguments ("body")) nil [72742 73141])
            ("derived-mode-p" function (:arguments ("modes")) nil [73202 73515])
            ("minor-mode-list" variable (:default-value (quote (auto-save-mode auto-fill-mode abbrev-mode overwrite-mode view-mode hs-minor-mode))) nil [73706 73899])
            ("add-minor-mode" function (:arguments ("toggle" "name" "keymap" "after" "toggle-fun")) nil [73901 76586])
            ("autoloadp" function (:arguments ("object")) nil [76608 76710])
            ("symbol-file" function (:arguments ("symbol" "type")) nil [77194 78401])
            ("locate-library" function
               (:user-visible-flag t
                :arguments ("library" "nosuffix" "path" "interactive-call"))
                nil [78403 79809])
            ("start-process" function (:arguments ("name" "buffer" "program" "program-args")) nil [79834 81177])
            ("process-lines" function (:arguments ("program" "args")) nil [81179 81784])
            ("process-live-p" function (:arguments ("process")) nil [81786 82099])
            ("process-kill-without-query" function (:arguments ("process" "_flag")) nil [82119 82589])
            ("process-kill-buffer-query-function" function nil nil [82591 83010])
            ("add-hook" code nil nil [83012 83087])
            ("process-get" function (:arguments ("process" "propname")) nil [83118 83330])
            ("process-put" function (:arguments ("process" "propname" "value")) nil [83332 83571])
            ("read-key-empty-map" variable
               (:constant-flag t
                :default-value (make-sparse-keymap))
                nil [83611 83661])
            ("read-key-delay" variable (:default-value 0.01) nil [83663 83691])
            ("read-key" function (:arguments ("prompt")) nil [83740 86964])
            ("read-passwd-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map minibuffer-local-map) (define-key map "" (function delete-minibuffer-contents)) map)) nil [86966 87303])
            ("read-passwd" function (:arguments ("prompt" "confirm" "default")) nil [87305 90017])
            ("read-number" function (:arguments ("prompt" "default")) nil [90019 91089])
            ("read-char-choice" function (:arguments ("prompt" "chars" "inhibit-keyboard-quit")) nil [91091 92830])
            ("sit-for" function (:arguments ("seconds" "nodisp" "obsolete")) nil [92832 96191])
            ("declare-function" code nil nil [96231 96310])
            ("y-or-n-p" function (:arguments ("prompt")) nil [96312 99873])
            ("atomic-change-group" function (:arguments ("body")) nil [99904 101110])
            ("prepare-change-group" function (:arguments ("buffer")) nil [101112 102588])
            ("activate-change-group" function (:arguments ("handle")) nil [102590 102828])
            ("accept-change-group" function (:arguments ("handle")) nil [102830 103121])
            ("cancel-change-group" function (:arguments ("handle")) nil [103123 104294])
            ("define-obsolete-function-alias" code nil nil [104352 104434])
            ("momentary-string-display" function (:arguments ("string" "pos" "exit-char" "message")) nil [104436 105988])
            ("copy-overlay" function (:arguments ("o")) nil [106017 106591])
            ("remove-overlays" function (:arguments ("beg" "end" "name" "val")) nil [106593 107601])
            ("suspend-hook" variable nil nil [107623 107707])
            ("suspend-resume-hook" variable nil nil [107709 107807])
            ("temp-buffer-show-hook" variable nil nil [107809 108025])
            ("temp-buffer-setup-hook" variable nil nil [108027 108258])
            ("user-emacs-directory" variable
               (:constant-flag t
                :default-value (if (eq system-type (quote ms-dos)) "~/_emacs.d/" "~/.emacs.d/"))
                nil [108260 108635])
            ("buffer-narrowed-p" function nil nil [108668 108802])
            ("find-tag-default-bounds" function nil nil [108804 109058])
            ("find-tag-default" function nil nil [109060 109326])
            ("find-tag-default-as-regexp" function nil nil [109328 109763])
            ("find-tag-default-as-symbol-regexp" function nil nil [109765 110324])
            ("play-sound" function (:arguments ("sound")) nil [110326 111145])
            ("declare-function" code nil nil [111147 111203])
            ("shell-quote-argument" function (:arguments ("argument")) nil [111205 113539])
            ("string-or-null-p" function (:arguments ("object")) nil [113541 113678])
            ("booleanp" function (:arguments ("object")) nil [113680 113838])
            ("special-form-p" function (:arguments ("object")) nil [113840 114083])
            ("macrop" function (:arguments ("object")) nil [114085 114315])
            ("field-at-pos" function (:arguments ("pos")) nil [114317 114587])
            ("sha1" function (:arguments ("object" "start" "end" "binary")) nil [114589 114952])
            ("function-get" function (:arguments ("f" "prop" "autoload")) nil [114954 115764])
            ("yank-handled-properties" variable nil nil [115871 115903])
            ("yank-excluded-properties" variable nil nil [115904 115937])
            ("remove-yank-excluded-properties" function (:arguments ("start" "end")) nil [115939 116850])
            ("yank-undo-function" variable nil nil [116852 116879])
            ("insert-for-yank" function (:arguments ("string")) nil [116881 117362])
            ("insert-for-yank-1" function (:arguments ("string")) nil [117364 118396])
            ("insert-buffer-substring-no-properties" function (:arguments ("buffer" "start" "end")) nil [118398 118883])
            ("insert-buffer-substring-as-yank" function (:arguments ("buffer" "start" "end")) nil [118885 119571])
            ("yank-handle-font-lock-face-property" function (:arguments ("face" "start" "end")) nil [119573 119885])
            ("yank-handle-category-property" function (:arguments ("category" "start" "end")) nil [120024 120462])
            ("start-process-shell-command" function (:arguments ("name" "buffer" "args")) nil [120500 121484])
            ("start-file-process-shell-command" function (:arguments ("name" "buffer" "args")) nil [121486 121978])
            ("call-process-shell-command" function (:arguments ("command" "infile" "buffer" "display" "args")) nil [121980 123621])
            ("process-file-shell-command" function (:arguments ("command" "infile" "buffer" "display" "args")) nil [123623 124172])
            ("track-mouse" function (:arguments ("body")) nil [124227 124533])
            ("with-current-buffer" function (:arguments ("buffer-or-name" "body")) nil [124535 124923])
            ("internal--before-with-selected-window" function (:arguments ("window")) nil [124925 125445])
            ("internal--after-with-selected-window" function (:arguments ("state")) nil [125447 126007])
            ("with-selected-window" function (:arguments ("window" "body")) nil [126009 127147])
            ("with-selected-frame" function (:arguments ("frame" "body")) nil [127149 127890])
            ("save-window-excursion" function (:arguments ("body")) nil [127892 128711])
            ("internal-temp-output-buffer-show" function (:arguments ("buffer")) nil [128713 130108])
            ("with-output-to-temp-buffer" function (:arguments ("bufname" "body")) nil [130161 132614])
            ("with-temp-file" function (:arguments ("file" "body")) nil [132616 133311])
            ("with-temp-message" function (:arguments ("message" "body")) nil [133313 134240])
            ("with-temp-buffer" function (:arguments ("body")) nil [134242 134801])
            ("with-silent-modifications" function (:arguments ("body")) nil [134803 135793])
            ("with-output-to-string" function (:arguments ("body")) nil [135795 136240])
            ("with-local-quit" function (:arguments ("body")) nil [136242 136997])
            ("while-no-input" function (:arguments ("body")) nil [136999 137499])
            ("condition-case-unless-debug" function (:arguments ("var" "bodyform" "handlers")) nil [137501 138054])
            ("define-obsolete-function-alias" code nil nil [138056 138151])
            ("with-demoted-errors" function (:arguments ("format" "body")) nil [138153 139090])
            ("combine-after-change-calls" function (:arguments ("body")) nil [139092 139787])
            ("with-case-table" function (:arguments ("table" "body")) nil [139789 140310])
            ("with-file-modes" function (:arguments ("modes" "body")) nil [140312 140737])
            ("save-match-data-internal" variable nil nil [140771 140804])
            ("save-match-data" function (:arguments ("body")) nil [141062 141742])
            ("match-string" function (:arguments ("num" "string")) nil [141744 142389])
            ("match-string-no-properties" function (:arguments ("num" "string")) nil [142391 143115])
            ("match-substitute-replacement" function (:arguments ("replacement" "fixedcase" "literal" "string" "subexp")) nil [143118 143767])
            ("looking-back" function (:arguments ("regexp" "limit" "greedy")) nil [143770 145041])
            ("looking-at-p" function (:arguments ("regexp")) nil [145043 145221])
            ("string-match-p" function (:arguments ("regexp" "string" "start")) nil [145223 145443])
            ("subregexp-context-p" function (:arguments ("regexp" "pos" "start")) nil [145445 147355])
            ("split-string-default-separators" variable
               (:constant-flag t
                :default-value "[ 	
]+")
                nil [147377 147730])
            ("split-string" function (:arguments ("string" "separators" "omit-nulls" "trim")) nil [147992 151108])
            ("combine-and-quote-strings" function (:arguments ("strings" "separator")) nil [151110 151790])
            ("split-string-and-unquote" function (:arguments ("string" "separator")) nil [151792 152428])
            ("subst-char-in-string" function (:arguments ("fromchar" "tochar" "string" "inplace")) nil [152462 152866])
            ("replace-regexp-in-string" function (:arguments ("regexp" "rep" "string" "fixedcase" "literal" "subexp" "start")) nil [152868 155549])
            ("string-prefix-p" function (:arguments ("prefix" "string" "ignore-case")) nil [155552 155947])
            ("string-suffix-p" function (:arguments ("suffix" "string" "ignore-case")) nil [155949 156358])
            ("bidi-string-mark-left-to-right" function (:arguments ("str")) nil [156360 157143])
            ("string-greaterp" function (:arguments ("string1" "string2")) nil [157145 157380])
            ("load-history-regexp" function (:arguments ("file")) nil [157421 158057])
            ("load-history-filename-element" function (:arguments ("file-regexp")) nil [158059 158495])
            ("put" code nil nil [158497 158543])
            ("eval-after-load" function (:arguments ("file" "form")) nil [158544 162426])
            ("with-eval-after-load" function (:arguments ("file" "body")) nil [162428 162803])
            ("after-load-functions" variable nil nil [162805 162978])
            ("do-after-load-evaluation" function (:arguments ("abs-file")) nil [162980 164549])
            ("eval-next-after-load" function (:arguments ("file")) nil [164551 164851])
            ("display-delayed-warnings" function nil nil [164855 165122])
            ("collapse-delayed-warnings" function nil nil [165124 165803])
            ("delayed-warnings-hook" variable (:default-value (quote (collapse-delayed-warnings display-delayed-warnings))) nil [165933 166273])
            ("delay-warning" function (:arguments ("type" "message" "level" "buffer-name")) nil [166275 166530])
            ("add-to-invisibility-spec" function (:arguments ("element")) nil [166559 166902])
            ("remove-from-invisibility-spec" function (:arguments ("element")) nil [166904 167149])
            ("with-syntax-table" function (:arguments ("table" "body")) nil [167173 167809])
            ("make-syntax-table" function (:arguments ("oldtable")) nil [167811 168131])
            ("syntax-after" function (:arguments ("pos")) nil [168133 168506])
            ("syntax-class" function (:arguments ("syntax")) nil [168508 168860])
            ("word-move-empty-char-table" variable nil nil [168891 169061])
            ("forward-word-strictly" function (:arguments ("arg")) nil [169063 169836])
            ("backward-word-strictly" function (:arguments ("arg")) nil [169838 170455])
            ("forward-whitespace" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [170473 171056])
            ("forward-symbol" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [171071 171620])
            ("forward-same-syntax" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [171641 172123])
            ("text-clone--maintaining" variable nil nil [172145 172181])
            ("text-clone--maintain" function (:arguments ("ol1" "after" "beg" "end" "_len")) nil [172183 174249])
            ("text-clone-create" function (:arguments ("start" "end" "spreadp" "syntax")) nil [174251 176499])
            ("define-mail-user-agent" function (:arguments ("symbol" "composefunc" "sendfunc" "abortfunc" "hookvar")) nil [176607 178185])
            ("called-interactively-p-functions" variable nil nil [178188 178605])
            ("internal--funcall-interactively" variable
               (:constant-flag t
                :default-value (symbol-function (quote funcall-interactively)))
                nil [178607 178692])
            ("called-interactively-p" function (:arguments ("kind")) nil [178694 182875])
            ("interactive-p" function nil nil [182877 183887])
            ("internal-push-keymap" function (:arguments ("keymap" "symbol")) nil [183889 184234])
            ("internal-pop-keymap" function (:arguments ("keymap" "symbol")) nil [184236 184544])
            ("define-obsolete-function-alias" code nil nil [184546 184633])
            ("set-transient-map" function (:arguments ("map" "keep-pred" "on-exit")) nil [184635 187328])
            ("progress-reporter-update" function (:arguments ("reporter" "value")) nil [187911 188678])
            ("make-progress-reporter" function (:arguments ("message" "min-value" "max-value" "current-value" "min-change" "min-time")) nil [188680 190525])
            ("progress-reporter-force-update" function (:arguments ("reporter" "value" "new-message")) nil [190527 191026])
            ("progress-reporter--pulse-characters" variable (:default-value ["-" "\\" "|" "/"]) nil [191028 191145])
            ("progress-reporter-do-update" function (:arguments ("reporter" "value")) nil [191147 192823])
            ("progress-reporter-done" function (:arguments ("reporter")) nil [192825 192980])
            ("dotimes-with-progress-reporter" function (:arguments ("spec" "message" "body")) nil [192982 194086])
            ("version-separator" variable
               (:constant-flag t
                :default-value ".")
                nil [194123 194282])
            ("version-regexp-alist" variable
               (:constant-flag t
                :default-value (quote (("^[-._+ ]?snapshot$" . -4) ("^[-._+]$" . -4) ("^[-._+ ]?\\(cvs\\|git\\|bzr\\|svn\\|hg\\|darcs\\)$" . -4) ("^[-._+ ]?alpha$" . -3) ("^[-._+ ]?beta$" . -2) ("^[-._+ ]?\\(pre\\|rc\\)$" . -1))))
                nil [194285 195819])
            ("version-to-list" function (:arguments ("ver")) nil [195822 198605])
            ("version-list-<" function (:arguments ("l1" "l2")) nil [198607 199438])
            ("version-list-=" function (:arguments ("l1" "l2")) nil [199441 200240])
            ("version-list-<=" function (:arguments ("l1" "l2")) nil [200243 201028])
            ("version-list-not-zero" function (:arguments ("lst")) nil [201030 201340])
            ("version<" function (:arguments ("v1" "v2")) nil [201343 201847])
            ("version<=" function (:arguments ("v1" "v2")) nil [201849 202367])
            ("version=" function (:arguments ("v1" "v2")) nil [202369 202863])
            ("package--builtin-versions" variable (:default-value (purecopy (\` ((emacs \, (version-to-list emacs-version)))))) nil [202865 203242])
            ("package--description-file" function (:arguments ("dir")) nil [203244 203575])
            ("menu-bar-separator" variable
               (:constant-flag t
                :default-value (quote ("--")))
                nil [203589 203651])
            ("when" code nil nil [203813 203938])
            ("unmsys--file-name" function (:arguments ("file")) nil [204071 204558]))          
      :file "subr.el.gz"
      :pointmax 204583
      :fsize 61007
      :lastmodtime '(22776 51906 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("defalias" code nil nil [2941 2987])
            ("defalias" code nil nil [3003 3053])
            ("defalias" code nil nil [3069 3107])
            ("defalias" code nil nil [3123 3183])
            ("comment" customgroup (:user-visible-flag t) nil [3185 3300])
            ("comment-use-syntax" variable (:default-value (quote undecided)) nil [3387 3715])
            ("comment-fill-column" variable nil nil [3717 3884])
            ("comment-column" variable (:default-value 32) nil [3901 4298])
            ("make-variable-buffer-local" code nil nil [4299 4343])
            ("put" code nil nil [4359 4411])
            ("comment-start" variable nil nil [4428 4528])
            ("put" code nil nil [4544 4603])
            ("comment-start-skip" variable nil nil [4620 4889])
            ("put" code nil nil [4905 4960])
            ("comment-end-skip" variable nil nil [4977 5081])
            ("put" code nil nil [5097 5150])
            ("comment-end" variable (:default-value (purecopy "")) nil [5167 5313])
            ("put" code nil nil [5329 5377])
            ("comment-indent-function" variable (:default-value (quote comment-indent-default)) nil [5394 5750])
            ("comment-insert-comment-function" variable nil nil [5767 6017])
            ("comment-region-function" variable (:default-value (quote comment-region-default)) nil [6019 6370])
            ("uncomment-region-function" variable (:default-value (quote uncomment-region-default)) nil [6372 6731])
            ("block-comment-start" variable nil nil [6749 6781])
            ("block-comment-end" variable nil nil [6782 6812])
            ("comment-quote-nested" variable (:default-value t) nil [6814 6951])
            ("comment-quote-nested-function" variable (:default-value (function comment-quote-nested-default)) nil [6953 7196])
            ("comment-continue" variable nil nil [7198 7673])
            ("comment-add" variable nil nil [7675 8033])
            ("comment-styles" variable
               (:constant-flag t
                :default-value (quote ((plain nil nil nil nil "Start in column 0 (do not indent), as in Emacs-20") (indent-or-triple nil nil nil multi-char "Start in column 0, but only for single-char starters") (indent nil nil nil t "Full comment per line, ends not aligned") (aligned nil t nil t "Full comment per line, ends aligned") (box nil t t t "Full comment per line, ends aligned, + top and bottom") (extra-line t nil t t "One comment for all lines, end on a line by itself") (multi-line t nil nil t "One comment for all lines, end on last commented line") (box-multi t t t t "One comment for all lines, + top and bottom"))))
                nil [8050 10253])
            ("comment-style" variable (:default-value (quote indent)) nil [10270 10696])
            ("comment-padding" variable (:default-value (purecopy " ")) nil [10713 11137])
            ("comment-inline-offset" variable (:default-value 1) nil [11139 11588])
            ("comment-multi-line" variable nil nil [11605 12022])
            ("comment-empty-lines" variable nil nil [12024 12408])
            ("comment-string-strip" function (:arguments ("str" "beforep" "afterp")) nil [12434 12687])
            ("comment-string-reverse" function (:arguments ("s")) nil [12689 12862])
            ("comment-normalize-vars" function (:arguments ("noerror")) nil [12879 16112])
            ("comment-quote-re" function (:arguments ("str" "unp")) nil [16114 16257])
            ("comment-quote-nested" function (:arguments ("cs" "ce" "unp")) nil [16259 16586])
            ("comment-quote-nested-default" function (:arguments ("cs" "ce" "unp")) nil [16588 17927])
            ("comment-use-global-state" variable (:default-value t) nil [17956 18410])
            ("make-obsolete-variable" code nil nil [18412 18489])
            ("comment-search-forward" function (:arguments ("limit" "noerror")) nil [18491 20079])
            ("comment-search-backward" function (:arguments ("limit" "noerror")) nil [20081 21293])
            ("comment-beginning" function nil nil [21295 23181])
            ("comment-forward" function (:arguments ("n")) nil [23183 23686])
            ("comment-enter-backward" function nil nil [23688 25252])
            ("comment-indent-default" function nil nil [25294 25641])
            ("comment-choose-indent" function (:arguments ("indent")) nil [25643 28227])
            ("comment-indent" function
               (:user-visible-flag t
                :arguments ("continue"))
                nil [28244 31210])
            ("comment-set-column" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [31227 32058])
            ("comment-kill" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [32075 32642])
            ("comment-padright" function (:arguments ("str" "n")) nil [32644 34389])
            ("comment-padleft" function (:arguments ("str" "n")) nil [34416 36103])
            ("uncomment-region" function
               (:user-visible-flag t
                :arguments ("beg" "end" "arg"))
                nil [36120 36732])
            ("uncomment-region-default" function (:arguments ("beg" "end" "arg")) nil [36734 40632])
            ("comment-make-bol-ws" function (:arguments ("len")) nil [40634 40955])
            ("comment-make-extra-lines" function (:arguments ("cs" "ce" "ccs" "cce" "min-indent" "max-indent" "block")) nil [40957 42483])
            ("comment-with-narrowing" function (:arguments ("beg" "end" "body")) nil [42485 43541])
            ("comment-add" function (:arguments ("arg")) nil [43543 43942])
            ("comment-region-internal" function (:arguments ("beg" "end" "cs" "ce" "ccs" "cce" "block" "lines" "indent")) nil [43944 47335])
            ("comment-region" function
               (:user-visible-flag t
                :arguments ("beg" "end" "arg"))
                nil [47352 48352])
            ("comment-region-default" function (:arguments ("beg" "end" "arg")) nil [48354 50853])
            ("comment-box" function
               (:user-visible-flag t
                :arguments ("beg" "end" "arg"))
                nil [50870 51332])
            ("comment-only-p" function (:arguments ("beg" "end")) nil [51334 51528])
            ("comment-or-uncomment-region" function
               (:user-visible-flag t
                :arguments ("beg" "end" "arg"))
                nil [51545 51937])
            ("comment-dwim" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [51954 53556])
            ("comment-auto-fill-only-comments" variable nil nil [53573 53773])
            ("comment-valid-prefix-p" function (:arguments ("prefix" "compos")) nil [53775 55867])
            ("comment-indent-new-line" function
               (:user-visible-flag t
                :arguments ("soft"))
                nil [55885 60802])
            ("comment-line" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [60819 61916])
            ("newcomment" package nil nil [61918 61939]))          
      :file "newcomment.el.gz"
      :pointmax 61969
      :fsize 17358
      :lastmodtime '(22676 23208 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [1051 1068])
            ("declare-function" code nil nil [1071 1133])
            ("declare-function" code nil nil [1134 1174])
            ("compilation-current-error" variable nil nil [1196 1230])
            ("compilation-context-lines" variable nil nil [1231 1265])
            ("idle-update-delay" variable (:default-value 0.5) nil [1267 1564])
            ("killing" customgroup (:user-visible-flag t) nil [1566 1640])
            ("paren-matching" customgroup (:user-visible-flag t) nil [1642 1744])
            ("next-error" customgroup (:user-visible-flag t) nil [1781 1882])
            ("next-error" variable
               (:default-value (quote ((t (:inherit region))))
                :type "face")
                nil [1884 2015])
            ("next-error-highlight" variable (:default-value 0.5) nil [2017 2772])
            ("next-error-highlight-no-select" variable (:default-value 0.5) nil [2774 3467])
            ("next-error-recenter" variable nil nil [3469 3831])
            ("next-error-hook" variable nil nil [3833 3974])
            ("next-error-highlight-timer" variable nil nil [3976 4015])
            ("next-error-overlay-arrow-position" variable nil nil [4017 4063])
            ("put" code nil nil [4064 4142])
            ("add-to-list" code nil nil [4143 4220])
            ("next-error-last-buffer" variable nil nil [4222 4449])
            ("next-error-function" variable nil nil [4451 4909])
            ("make-variable-buffer-local" code nil nil [4910 4959])
            ("next-error-move-function" variable nil nil [4961 5274])
            ("make-variable-buffer-local" code nil nil [5275 5329])
            ("next-error-buffer-p" function (:arguments ("buffer" "avoid-current" "extra-test-inclusive" "extra-test-exclusive")) nil [5331 6413])
            ("next-error-find-buffer" function (:arguments ("avoid-current" "extra-test-inclusive" "extra-test-exclusive")) nil [6415 8697])
            ("next-error" function
               (:user-visible-flag t
                :arguments ("arg" "reset"))
                nil [8699 10468])
            ("next-error-internal" function nil nil [10470 10891])
            ("defalias" code nil nil [10893 10932])
            ("defalias" code nil nil [10933 10967])
            ("previous-error" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [10969 11286])
            ("first-error" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [11288 11556])
            ("next-error-no-select" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [11558 12010])
            ("previous-error-no-select" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [12012 12390])
            ("next-error-follow-last-line" variable nil nil [12461 12501])
            ("define-minor-mode" code nil nil [12503 13211])
            ("next-error-follow-mode-post-command-hook" function nil nil [13327 13660])
            ("fundamental-mode" function (:user-visible-flag t) nil [13669 13878])
            ("special-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (suppress-keymap map) (define-key map "q" (quote quit-window)) (define-key map " " (quote scroll-up-command)) (define-key map [33554464] (quote scroll-down-command)) (define-key map "" (quote scroll-down-command)) (define-key map "?" (quote describe-mode)) (define-key map "h" (quote describe-mode)) (define-key map ">" (quote end-of-buffer)) (define-key map "<" (quote beginning-of-buffer)) (define-key map "g" (quote revert-buffer)) map)) nil [13956 14440])
            ("put" code nil nil [14442 14482])
            ("define-derived-mode" code nil nil [14483 14628])
            ("self-insert-uses-region-functions" variable nil nil [14661 15034])
            ("hard-newline" variable (:default-value (propertize "
" (quote hard) t (quote rear-nonsticky) (quote (hard)))) nil [15036 15169])
            ("newline" function
               (:user-visible-flag t
                :arguments ("arg" "interactive"))
                nil [15171 18496])
            ("set-hard-newline-properties" function (:arguments ("from" "to")) nil [18498 18846])
            ("open-line" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [18848 19625])
            ("split-line" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [19627 20428])
            ("delete-indentation" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [20430 21143])
            ("defalias" code nil nil [21145 21187])
            ("delete-blank-lines" function (:user-visible-flag t) nil [21206 22633])
            ("delete-trailing-lines" variable (:default-value t) nil [22635 22921])
            ("delete-trailing-whitespace" function
               (:user-visible-flag t
                :arguments ("start" "end"))
                nil [22923 24729])
            ("newline-and-indent" function (:user-visible-flag t) nil [24731 25164])
            ("reindent-then-newline-and-indent" function (:user-visible-flag t) nil [25166 26392])
            ("read-quoted-char-radix" variable (:default-value 8) nil [26394 26615])
            ("read-quoted-char" function (:arguments ("prompt")) nil [26617 29466])
            ("quoted-insert" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [29468 31497])
            ("forward-to-indentation" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [31499 31692])
            ("backward-to-indentation" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [31694 31893])
            ("back-to-indentation" function (:user-visible-flag t) nil [31895 32185])
            ("fixup-whitespace" function (:user-visible-flag t) nil [32187 32526])
            ("delete-horizontal-space" function
               (:user-visible-flag t
                :arguments ("backward-only"))
                nil [32528 32966])
            ("just-one-space" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [32968 33228])
            ("cycle-spacing--context" variable nil nil [33230 33485])
            ("cycle-spacing" function
               (:user-visible-flag t
                :arguments ("n" "preserve-nl-back" "mode"))
                nil [33487 35936])
            ("beginning-of-buffer" function (:arguments ("arg")) nil [35939 36862])
            ("end-of-buffer" function (:arguments ("arg")) nil [36864 38111])
            ("delete-active-region" variable (:default-value t) nil [38113 38650])
            ("region-extract-function" variable (:default-value (lambda (delete) (when (region-beginning) (cond ((eq delete (quote bounds)) (list (cons (region-beginning) (region-end)))) ((eq delete (quote delete-only)) (delete-region (region-beginning) (region-end))) (t (filter-buffer-substring (region-beginning) (region-end) delete)))))) nil [38652 39474])
            ("region-insert-function" variable (:default-value (lambda (lines) (let ((first t)) (while lines (or first (insert 10)) (insert-for-yank (car lines)) (setq lines (cdr lines) first nil))))) nil [39476 39822])
            ("delete-backward-char" function (:arguments ("n" "killflag")) nil [39824 41461])
            ("delete-forward-char" function (:arguments ("n" "killflag")) nil [41463 42606])
            ("mark-whole-buffer" function nil nil [42608 43045])
            ("goto-line" function (:arguments ("line" "buffer")) nil [43089 45366])
            ("count-words-region" function
               (:user-visible-flag t
                :arguments ("start" "end" "arg"))
                nil [45368 46050])
            ("count-words" function
               (:user-visible-flag t
                :arguments ("start" "end"))
                nil [46052 46845])
            ("count-words--buffer-message" function nil nil [46847 47000])
            ("count-words--message" function (:arguments ("str" "start" "end")) nil [47002 47327])
            ("define-obsolete-function-alias" code nil nil [47329 47408])
            ("what-line" function (:user-visible-flag t) nil [47410 47761])
            ("count-lines" function (:arguments ("start" "end")) nil [47763 48600])
            ("line-number-at-pos" function (:arguments ("pos")) nil [48602 49062])
            ("what-cursor-position" function
               (:user-visible-flag t
                :arguments ("detail"))
                nil [49064 53567])
            ("read-expression-map" variable (:default-value (let ((m (make-sparse-keymap))) (define-key m "\211" (quote completion-at-point)) (define-key m "	" (quote completion-at-point)) (set-keymap-parent m minibuffer-local-map) m)) nil [53632 53947])
            ("read-minibuffer" function (:arguments ("prompt" "initial-contents")) nil [53949 54472])
            ("eval-minibuffer" function (:arguments ("prompt" "initial-contents")) nil [54474 54931])
            ("minibuffer-completing-symbol" variable nil nil [54933 55036])
            ("make-obsolete-variable" code nil nil [55037 55107])
            ("minibuffer-default" variable nil nil [55109 55302])
            ("eval-expression-print-level" variable (:default-value 4) nil [55304 55534])
            ("eval-expression-print-length" variable (:default-value 12) nil [55536 55769])
            ("eval-expression-debug-on-error" variable (:default-value t) nil [55771 55980])
            ("eval-expression-print-format" function (:arguments ("value")) nil [55982 56674])
            ("eval-expression-minibuffer-setup-hook" variable nil nil [56676 56790])
            ("read--expression" function (:arguments ("prompt" "initial-contents")) nil [56792 57451])
            ("eval-expression" function
               (:user-visible-flag t
                :arguments ("exp" "insert-value"))
                nil [57581 59870])
            ("edit-and-eval-command" function (:arguments ("prompt" "command")) nil [59872 60799])
            ("repeat-complex-command" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [60801 62469])
            ("extended-command-history" variable nil nil [62472 62509])
            ("execute-extended-command--last-typed" variable nil nil [62510 62559])
            ("read-extended-command" function nil nil [62561 64745])
            ("suggest-key-bindings" variable (:default-value t) nil [64747 65113])
            ("execute-extended-command--shorter-1" function (:arguments ("name" "length")) nil [65115 65577])
            ("execute-extended-command--shorter" function (:arguments ("name" "typed")) nil [65579 66489])
            ("execute-extended-command" function (:arguments ("prefixarg" "command-name" "typed")) nil [66491 70056])
            ("command-execute" function (:arguments ("cmd" "record-flag" "keys" "special")) nil [70058 72667])
            ("minibuffer-history" variable nil nil [72670 72923])
            ("minibuffer-history-sexp-flag" variable nil nil [72924 73239])
            ("setq" code nil nil [73240 73294])
            ("setq" code nil nil [73295 73333])
            ("minibuffer-history-search-history" variable nil nil [73359 73405])
            ("minibuffer-text-before-history" variable nil nil [73407 73607])
            ("add-hook" code nil nil [73609 73673])
            ("minibuffer-history-initialize" function nil nil [73675 73759])
            ("minibuffer-avoid-prompt" function (:arguments ("_new" "_old")) nil [73761 73976])
            ("minibuffer-history-case-insensitive-variables" variable nil nil [73978 74368])
            ("previous-matching-history-element" function
               (:user-visible-flag t
                :arguments ("regexp" "n"))
                nil [74370 77214])
            ("next-matching-history-element" function
               (:user-visible-flag t
                :arguments ("regexp" "n"))
                nil [77216 78270])
            ("minibuffer-temporary-goal-position" variable nil nil [78272 78319])
            ("minibuffer-default-add-function" variable (:default-value (quote minibuffer-default-add-completions)) nil [78321 78961])
            ("minibuffer-default-add-done" variable nil nil [78963 79286])
            ("make-variable-buffer-local" code nil nil [79288 79345])
            ("minibuffer-default-add-completions" function nil nil [79347 79801])
            ("goto-history-element" function
               (:user-visible-flag t
                :arguments ("nabs"))
                nil [79803 82091])
            ("next-history-element" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [82093 82344])
            ("previous-history-element" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [82346 82604])
            ("next-line-or-history-element" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [82606 84088])
            ("previous-line-or-history-element" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [84090 86129])
            ("next-complete-history-element" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [86131 86787])
            ("previous-complete-history-element" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [86789 87074])
            ("minibuffer-prompt-width" function nil nil [87133 87422])
            ("add-hook" code nil nil [87455 87522])
            ("minibuffer-history-isearch-message-overlay" variable nil nil [87524 87575])
            ("make-variable-buffer-local" code nil nil [87576 87648])
            ("minibuffer-history-isearch-setup" function nil nil [87650 88290])
            ("minibuffer-history-isearch-end" function nil nil [88292 88522])
            ("minibuffer-history-isearch-search" function nil nil [88524 90429])
            ("minibuffer-history-isearch-message" function (:arguments ("c-q-hack" "ellipsis")) nil [90431 91828])
            ("minibuffer-history-isearch-wrap" function nil nil [91830 92447])
            ("minibuffer-history-isearch-push-state" function nil nil [92449 92780])
            ("minibuffer-history-isearch-pop-state" function (:arguments ("_cmd" "hist-pos")) nil [92782 92994])
            ("define-obsolete-function-alias" code nil nil [93072 93134])
            ("undo-equiv-table" variable
               (:constant-flag t
                :default-value (make-hash-table :test (quote eq) :weakness t))
                nil [93136 93379])
            ("undo-in-region" variable nil nil [93381 93485])
            ("undo-no-redo" variable nil nil [93487 93562])
            ("pending-undo-list" variable nil nil [93564 93715])
            ("undo" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [93717 98338])
            ("buffer-disable-undo" function
               (:user-visible-flag t
                :arguments ("buffer"))
                nil [98340 98621])
            ("undo-only" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [98623 98885])
            ("undo-in-progress" variable nil nil [98887 99018])
            ("undo-more" function (:arguments ("n")) nil [99020 99715])
            ("primitive-undo" function (:arguments ("n" "list")) nil [99717 106117])
            ("undo-copy-list" function (:arguments ("list")) nil [106142 106240])
            ("undo-copy-list-1" function (:arguments ("elt")) nil [106242 106351])
            ("undo-start" function (:arguments ("beg" "end")) nil [106353 106941])
            ("undo-make-selective-list" function (:arguments ("start" "end")) nil [109939 112225])
            ("undo-elt-in-region" function (:arguments ("undo-elt" "start" "end")) nil [112227 113266])
            ("undo-elt-crosses-region" function (:arguments ("undo-elt" "start" "end")) nil [113268 113810])
            ("undo-adjust-elt" function (:arguments ("elt" "deltas")) nil [113812 114577])
            ("undo-adjust-beg-end" function (:arguments ("beg" "end" "deltas")) nil [115468 115773])
            ("undo-adjust-pos" function (:arguments ("pos" "deltas" "use-<")) nil [115775 116247])
            ("undo-delta" function (:arguments ("undo-elt")) nil [116418 116751])
            ("defvar-local" code nil nil [116947 117668])
            ("undo-auto-current-boundary-timer" variable nil nil [117670 117845])
            ("undo-auto--this-command-amalgamating" variable nil nil [117847 118043])
            ("undo-auto--needs-boundary-p" function nil nil [118045 118185])
            ("undo-auto--last-boundary-amalgamating-number" function nil nil [118187 118491])
            ("undo-auto--ensure-boundary" function (:arguments ("cause")) nil [118493 119121])
            ("undo-auto--boundaries" function (:arguments ("cause")) nil [119123 119557])
            ("undo-auto--boundary-timer" function nil nil [119559 119728])
            ("undo-auto--boundary-ensure-timer" function nil nil [119730 119975])
            ("undo-auto--undoably-changed-buffers" variable nil nil [119977 120214])
            ("undo-auto--add-boundary" function nil nil [120216 120495])
            ("undo-auto-amalgamate" function nil nil [120497 121826])
            ("undo-auto--undoable-change-no-timer" function nil nil [122050 122206])
            ("undo-auto--undoable-change" function nil nil [122208 122369])
            ("undo-ask-before-discard" variable nil nil [122400 123166])
            ("undo-extra-outer-limit" variable nil nil [123168 123444])
            ("make-variable-buffer-local" code nil nil [123445 123497])
            ("setq" code nil nil [123782 123841])
            ("undo-outer-limit-truncate" function (:arguments ("size")) nil [123842 125633])
            ("password-word-equivalents" variable (:default-value (quote ("password" "passcode" "passphrase" "pass phrase" "암호" "パスワード" "ପ୍ରବେଶ ସଙ୍କେତ" "ពាក្យសម្ងាត់" "adgangskode" "contraseña" "contrasenya" "geslo" "hasło" "heslo" "iphasiwedi" "jelszó" "lösenord" "lozinka" "mật khẩu" "mot de passe" "parola" "pasahitza" "passord" "passwort" "pasvorto" "salasana" "senha" "slaptažodis" "wachtwoord" "كلمة السر" "ססמה" "лозинка" "пароль" "गुप्तशब्द" "शब्दकूट" "પાસવર્ડ" "సంకేతపదము" "ਪਾਸਵਰਡ" "ಗುಪ್ತಪದ" "கடவுச்சொல்" "അടയാളവാക്ക്" "গুপ্তশব্দ" "পাসওয়ার্ড" "රහස්පදය" "密码" "密碼"))) nil [125636 127025])
            ("shell-command-history" variable nil nil [127027 127217])
            ("shell-command-switch" variable (:default-value (purecopy "-c")) nil [127219 127333])
            ("shell-command-default-error-buffer" variable nil nil [127335 127650])
            ("declare-function" code nil nil [127652 127718])
            ("declare-function" code nil nil [127719 127805])
            ("minibuffer-default-add-shell-commands" function (:user-visible-flag t) nil [127807 128511])
            ("declare-function" code nil nil [128513 128564])
            ("minibuffer-local-shell-command-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map minibuffer-local-map) (define-key map "	" (quote completion-at-point)) map)) nil [128566 128811])
            ("read-shell-command" function (:arguments ("prompt" "initial-contents" "hist" "args")) nil [128813 129442])
            ("async-shell-command-buffer" variable (:default-value (quote confirm-new-buffer)) nil [129444 130697])
            ("async-shell-command" function
               (:user-visible-flag t
                :arguments ("command" "output-buffer" "error-buffer"))
                nil [130699 132004])
            ("shell-command" function
               (:user-visible-flag t
                :arguments ("command" "output-buffer" "error-buffer"))
                nil [132006 140155])
            ("display-message-or-buffer" function (:arguments ("message" "buffer-name" "action" "frame")) nil [140157 142553])
            ("shell-command-sentinel" function (:arguments ("process" "signal")) nil [142649 142860])
            ("shell-command-on-region" function
               (:user-visible-flag t
                :arguments ("start" "end" "command" "output-buffer" "replace" "error-buffer" "display-error-buffer" "region-noncontiguous-p"))
                nil [142862 152418])
            ("shell-command-to-string" function (:arguments ("command")) nil [152420 152680])
            ("process-file" function (:arguments ("program" "infile" "buffer" "display" "args")) nil [152682 154132])
            ("process-file-side-effects" variable (:default-value t) nil [154134 154556])
            ("start-file-process" function (:arguments ("name" "buffer" "program" "program-args")) nil [154558 155443])
            ("tabulated-list-format" variable nil nil [155465 155495])
            ("tabulated-list-entries" variable nil nil [155496 155527])
            ("tabulated-list-sort-key" variable nil nil [155528 155560])
            ("declare-function" code nil nil [155561 155627])
            ("declare-function" code nil nil [155628 155734])
            ("process-menu-query-only" variable nil nil [155736 155772])
            ("process-menu-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [100] (quote process-menu-delete-process)) map)) nil [155774 155904])
            ("define-derived-mode" code nil nil [155906 156402])
            ("process-menu-delete-process" function (:user-visible-flag t) nil [156404 156575])
            ("list-processes--refresh" function nil nil [156577 158224])
            ("process-menu-visit-buffer" function (:arguments ("button")) nil [158226 158323])
            ("list-processes" function
               (:user-visible-flag t
                :arguments ("query-only" "buffer"))
                nil [158325 159288])
            ("setq" code nil nil [159313 159352])
            ("setq" code nil nil [159353 159389])
            ("internal-echo-keystrokes-prefix" function nil nil [159391 159996])
            ("prefix-command-echo-keystrokes-functions" variable nil nil [159998 160204])
            ("prefix-command-update" function nil nil [160206 160373])
            ("prefix-command-preserve-state-hook" variable nil nil [160375 160487])
            ("prefix-command-preserve-state" function nil nil [160489 160982])
            ("reset-this-command-lengths" function nil nil [160984 161087])
            ("add-hook" code nil nil [161183 161279])
            ("universal-argument--description" function nil nil [161280 161739])
            ("add-hook" code nil nil [161741 161828])
            ("universal-argument--preserve" function nil nil [161829 161907])
            ("universal-argument-map" variable (:default-value (let ((map (make-sparse-keymap)) (universal-argument-minus (\` (menu-item "" negative-argument :filter (\, (lambda (cmd) (if (integerp prefix-arg) nil cmd))))))) (define-key map [switch-frame] (lambda (e) (interactive "e") (handle-switch-frame e) (universal-argument--mode))) (define-key map [21] (quote universal-argument-more)) (define-key map [45] universal-argument-minus) (define-key map [48] (quote digit-argument)) (define-key map [49] (quote digit-argument)) (define-key map [50] (quote digit-argument)) (define-key map [51] (quote digit-argument)) (define-key map [52] (quote digit-argument)) (define-key map [53] (quote digit-argument)) (define-key map [54] (quote digit-argument)) (define-key map [55] (quote digit-argument)) (define-key map [56] (quote digit-argument)) (define-key map [57] (quote digit-argument)) (define-key map [kp-0] (quote digit-argument)) (define-key map [kp-1] (quote digit-argument)) (define-key map [kp-2] (quote digit-argument)) (define-key map [kp-3] (quote digit-argument)) (define-key map [kp-4] (quote digit-argument)) (define-key map [kp-5] (quote digit-argument)) (define-key map [kp-6] (quote digit-argument)) (define-key map [kp-7] (quote digit-argument)) (define-key map [kp-8] (quote digit-argument)) (define-key map [kp-9] (quote digit-argument)) (define-key map [kp-subtract] universal-argument-minus) map)) nil [161909 163525])
            ("universal-argument--mode" function nil nil [163527 163637])
            ("universal-argument" function (:user-visible-flag t) nil [163639 164382])
            ("universal-argument-more" function (:arguments ("arg")) nil [164384 164856])
            ("negative-argument" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [164858 165232])
            ("digit-argument" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [165234 166002])
            ("filter-buffer-substring-functions" variable nil nil [166006 166183])
            ("make-obsolete-variable" code nil nil [166184 166308])
            ("filter-buffer-substring-function" variable (:default-value (function buffer-substring--filter)) nil [166310 166716])
            ("buffer-substring-filters" variable nil nil [166718 167199])
            ("make-obsolete-variable" code nil nil [167200 167315])
            ("filter-buffer-substring" function (:arguments ("beg" "end" "delete")) nil [167317 168173])
            ("buffer-substring--filter" function (:arguments ("beg" "end" "delete")) nil [168175 169072])
            ("interprogram-cut-function" variable (:default-value (function gui-select-text)) nil [169116 169667])
            ("interprogram-paste-function" variable (:default-value (function gui-selection-value)) nil [169669 171108])
            ("kill-ring" variable nil nil [171149 171604])
            ("kill-ring-max" variable (:default-value 60) nil [171606 171741])
            ("kill-ring-yank-pointer" variable nil nil [171743 171844])
            ("save-interprogram-paste-before-kill" variable nil nil [171846 172348])
            ("kill-do-not-save-duplicates" variable nil nil [172350 172579])
            ("kill-new" function (:arguments ("string" "replace")) nil [172581 174607])
            ("kill-append-merge-undo" variable nil nil [174766 174956])
            ("kill-append" function (:arguments ("string" "before-p")) nil [174958 175814])
            ("yank-pop-change-selection" variable nil nil [175816 176164])
            ("current-kill" function (:arguments ("n" "do-not-move")) nil [176166 177824])
            ("kill-read-only-ok" variable nil nil [177875 178011])
            ("kill-region" function
               (:user-visible-flag t
                :arguments ("beg" "end" "region"))
                nil [178013 180889])
            ("copy-region-as-kill" function
               (:user-visible-flag t
                :arguments ("beg" "end" "region"))
                nil [181083 182216])
            ("kill-ring-save" function
               (:user-visible-flag t
                :arguments ("beg" "end" "region"))
                nil [182218 183507])
            ("indicate-copied-region" function (:arguments ("message-len")) nil [183509 185091])
            ("append-next-kill" function
               (:user-visible-flag t
                :arguments ("interactive"))
                nil [185093 185913])
            ("bidi-directional-controls-chars" variable (:default-value "‪-‮⁦-⁩") nil [185915 186060])
            ("bidi-directional-non-controls-chars" variable (:default-value "^‪-‮⁦-⁩") nil [186062 186212])
            ("squeeze-bidi-context-1" function (:arguments ("from" "to" "category" "replacement")) nil [186214 187320])
            ("squeeze-bidi-context" function (:arguments ("from" "to")) nil [187322 188423])
            ("line-substring-with-bidi-context" function (:arguments ("start" "end" "no-properties")) nil [188425 190351])
            ("buffer-substring-with-bidi-context" function (:arguments ("start" "end" "no-properties")) nil [190353 191656])
            ("yank-handled-properties" variable (:default-value (quote ((font-lock-face . yank-handle-font-lock-face-property) (category . yank-handle-category-property)))) nil [191672 192497])
            ("yank-excluded-properties" variable (:default-value (quote (category field follow-link fontified font-lock-face help-echo intangible invisible keymap local-map mouse-face read-only yank-handler))) nil [192570 193033])
            ("yank-window-start" variable nil nil [193035 193065])
            ("yank-undo-function" variable nil nil [193066 193397])
            ("yank-pop" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [193399 195115])
            ("yank" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [195117 197865])
            ("rotate-yank-pointer" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [197867 198057])
            ("kill-forward-chars" function (:arguments ("arg")) nil [198122 198267])
            ("kill-backward-chars" function (:arguments ("arg")) nil [198316 198462])
            ("backward-delete-char-untabify-method" variable (:default-value (quote untabify)) nil [198464 198939])
            ("backward-delete-char-untabify" function
               (:user-visible-flag t
                :arguments ("arg" "killp"))
                nil [198941 200293])
            ("zap-to-char" function
               (:user-visible-flag t
                :arguments ("arg" "char"))
                nil [200295 200912])
            ("kill-whole-line" variable nil nil [200949 201094])
            ("kill-line" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [201096 203310])
            ("kill-whole-line" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [203312 204941])
            ("forward-visible-line" function (:arguments ("arg")) nil [204943 207433])
            ("end-of-visible-line" function nil nil [207435 208201])
            ("insert-buffer" function (:arguments ("buffer")) nil [208204 208757])
            ("append-to-buffer" function
               (:user-visible-flag t
                :arguments ("buffer" "start" "end"))
                nil [208759 209659])
            ("prepend-to-buffer" function
               (:user-visible-flag t
                :arguments ("buffer" "start" "end"))
                nil [209661 210203])
            ("copy-to-buffer" function
               (:user-visible-flag t
                :arguments ("buffer" "start" "end"))
                nil [210205 210774])
            ("define-error" code nil nil [210777 210846])
            ("activate-mark-hook" variable nil nil [210848 211037])
            ("deactivate-mark-hook" variable nil nil [211039 211117])
            ("mark" function (:arguments ("force")) nil [211119 211743])
            ("deactivate-mark" function (:arguments ("force")) nil [211778 213868])
            ("activate-mark" function (:arguments ("no-tmm")) nil [213870 214261])
            ("set-mark" function (:arguments ("pos")) nil [214263 215487])
            ("save-mark-and-excursion--save" function nil nil [215489 215638])
            ("save-mark-and-excursion--restore" function (:arguments ("saved-mark-info")) nil [215640 216590])
            ("save-mark-and-excursion" function (:arguments ("body")) nil [216592 217014])
            ("use-empty-active-region" variable nil nil [217016 217515])
            ("use-region-p" function nil nil [217517 218123])
            ("region-active-p" function nil nil [218125 218814])
            ("region-noncontiguous-p" function nil nil [218816 219065])
            ("redisplay-unhighlight-region-function" variable (:default-value (lambda (rol) (when (overlayp rol) (delete-overlay rol)))) nil [219067 219173])
            ("redisplay-highlight-region-function" variable (:default-value (lambda (start end window rol) (if (not (overlayp rol)) (let ((nrol (make-overlay start end))) (funcall redisplay-unhighlight-region-function rol) (overlay-put nrol (quote window) window) (overlay-put nrol (quote face) (quote region)) (overlay-put nrol (quote priority) (quote (nil . 100))) nrol) (unless (and (eq (overlay-buffer rol) (current-buffer)) (eq (overlay-start rol) start) (eq (overlay-end rol) end)) (move-overlay rol start end (current-buffer))) rol))) nil [219175 220046])
            ("redisplay--update-region-highlight" function (:arguments ("window")) nil [220048 220884])
            ("pre-redisplay-functions" variable (:default-value (list (function redisplay--update-region-highlight))) nil [220886 221202])
            ("redisplay--pre-redisplay-functions" function (:arguments ("windows")) nil [221204 221669])
            ("add-function" code nil nil [221671 221767])
            ("defvar-local" code nil nil [221770 221869])
            ("put" code nil nil [221870 221905])
            ("mark-ring-max" variable (:default-value 16) nil [221907 222052])
            ("global-mark-ring" variable nil nil [222054 222138])
            ("global-mark-ring-max" variable (:default-value 16) nil [222140 222301])
            ("pop-to-mark-command" function (:user-visible-flag t) nil [222303 222616])
            ("push-mark-command" function
               (:user-visible-flag t
                :arguments ("arg" "nomsg"))
                nil [222618 223029])
            ("set-mark-command-repeat-pop" variable nil nil [223031 223490])
            ("set-mark-command" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [223492 225811])
            ("push-mark" function (:arguments ("location" "nomsg" "activate")) nil [225813 227367])
            ("pop-mark" function nil nil [227369 227788])
            ("define-obsolete-function-alias" code nil nil [227790 227879])
            ("exchange-point-and-mark" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [227880 228775])
            ("shift-select-mode" variable (:default-value t) nil [228777 229349])
            ("handle-shift-selection" function nil nil [229351 230676])
            ("define-minor-mode" code nil nil [230678 232038])
            ("widen-automatically" variable (:default-value t) nil [232040 232374])
            ("non-essential" variable nil nil [232376 232774])
            ("pop-global-mark" function (:user-visible-flag t) nil [232776 233591])
            ("next-line-add-newlines" variable nil nil [233594 233768])
            ("next-line" function (:arguments ("arg" "try-vscroll")) nil [233770 235967])
            ("previous-line" function (:arguments ("arg" "try-vscroll")) nil [235969 237675])
            ("track-eol" variable nil nil [237677 238015])
            ("goal-column" variable nil nil [238017 238284])
            ("make-variable-buffer-local" code nil nil [238285 238326])
            ("temporary-goal-column" variable nil nil [238328 238845])
            ("line-move-ignore-invisible" variable (:default-value t) nil [238847 239505])
            ("line-move-visual" variable (:default-value t) nil [239507 240083])
            ("declare-function" code nil nil [240120 240180])
            ("default-font-height" function nil nil [240182 240816])
            ("default-font-width" function nil nil [240818 241539])
            ("default-line-height" function nil nil [241541 242003])
            ("window-screen-lines" function nil nil [242005 242575])
            ("line-move-partial" function (:arguments ("arg" "noerror" "to-end")) nil [242622 246395])
            ("line-move" function (:arguments ("arg" "noerror" "to-end" "try-vscroll")) nil [246719 248696])
            ("line-move-visual" function (:arguments ("arg" "noerror")) nil [248844 251434])
            ("line-move-1" function (:arguments ("arg" "noerror" "_to-end")) nil [251588 256261])
            ("line-move-finish" function (:arguments ("column" "opoint" "forward")) nil [256263 259401])
            ("line-move-to-column" function (:arguments ("col")) nil [259403 260985])
            ("move-end-of-line" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [260987 262342])
            ("move-beginning-of-line" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [262344 263876])
            ("put" code nil nil [264006 264040])
            ("set-goal-column" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [264042 265075])
            ("end-of-visual-line" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [265143 265707])
            ("beginning-of-visual-line" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [265709 266300])
            ("kill-visual-line" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [266302 267717])
            ("next-logical-line" function
               (:user-visible-flag t
                :arguments ("arg" "try-vscroll"))
                nil [267719 268088])
            ("previous-logical-line" function
               (:user-visible-flag t
                :arguments ("arg" "try-vscroll"))
                nil [268090 268469])
            ("visual-line" customgroup (:user-visible-flag t) nil [268471 268572])
            ("visual-line-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [remap kill-line] (quote kill-visual-line)) (define-key map [remap move-beginning-of-line] (quote beginning-of-visual-line)) (define-key map [remap move-end-of-line] (quote end-of-visual-line)) map)) nil [268574 269062])
            ("visual-line-fringe-indicators" variable (:default-value (quote (nil nil))) nil [269064 270251])
            ("visual-line--saved-state" variable nil nil [270253 270290])
            ("define-minor-mode" code nil nil [270292 271933])
            ("turn-on-visual-line-mode" function nil nil [271935 271993])
            ("define-globalized-minor-mode" code nil nil [271995 272093])
            ("transpose-chars" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [272097 272611])
            ("transpose-words" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [272613 273057])
            ("transpose-sexps" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [273059 274813])
            ("transpose-lines" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [274815 275422])
            ("transpose-subr" function (:arguments ("mover" "arg" "special")) nil [275573 276830])
            ("transpose-subr-1" function (:arguments ("pos1" "pos2")) nil [276832 277836])
            ("backward-word" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [277839 278389])
            ("mark-word" function
               (:user-visible-flag t
                :arguments ("arg" "allow-extend"))
                nil [278391 279143])
            ("kill-word" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [279145 279357])
            ("backward-kill-word" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [279359 279550])
            ("current-word" function (:arguments ("strict" "really-word")) nil [279552 281160])
            ("fill-prefix" variable nil nil [281163 281329])
            ("make-variable-buffer-local" code nil nil [281330 281371])
            ("put" code nil nil [281372 281429])
            ("auto-fill-inhibit-regexp" variable nil nil [281431 281597])
            ("do-auto-fill" function nil nil [281599 284899])
            ("comment-line-break-function" variable (:default-value (quote comment-indent-new-line)) nil [284901 285227])
            ("default-indent-new-line" function
               (:user-visible-flag t
                :arguments ("soft"))
                nil [285229 286336])
            ("normal-auto-fill-function" variable (:default-value (quote do-auto-fill)) nil [286338 286494])
            ("put" code nil nil [286496 286558])
            ("put" code nil nil [286732 286784])
            ("define-minor-mode" code nil nil [286786 287529])
            ("auto-fill-function" function nil nil [287596 287703])
            ("turn-on-auto-fill" function nil nil [287705 287798])
            ("turn-off-auto-fill" function nil nil [287800 287896])
            ("custom-add-option" code nil nil [287898 287952])
            ("set-fill-column" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [287954 288792])
            ("set-selective-display" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [288795 289585])
            ("defvaralias" code nil nil [289587 289645])
            ("toggle-truncate-lines" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [289647 290427])
            ("toggle-word-wrap" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [290429 290973])
            ("overwrite-mode-textual" variable (:default-value (purecopy " Ovwrt")) nil [290975 291092])
            ("overwrite-mode-binary" variable (:default-value (purecopy " Bin Ovwrt")) nil [291093 291220])
            ("define-minor-mode" code nil nil [291222 291955])
            ("define-minor-mode" code nil nil [291957 292885])
            ("define-minor-mode" code nil nil [292887 293363])
            ("define-minor-mode" code nil nil [293365 293669])
            ("define-minor-mode" code nil nil [293671 293979])
            ("define-minor-mode" code nil nil [293981 294977])
            ("paren-blinking" customgroup (:user-visible-flag t) nil [294980 295111])
            ("blink-matching-paren" variable (:default-value t) nil [295113 295711])
            ("blink-matching-paren-on-screen" variable (:default-value t) nil [295713 296129])
            ("blink-matching-paren-distance" variable (:default-value (* 100 1024)) nil [296131 296456])
            ("blink-matching-delay" variable (:default-value 1) nil [296458 296594])
            ("blink-matching-paren-dont-ignore-comments" variable nil nil [296596 296864])
            ("blink-matching-check-mismatch" function (:arguments ("start" "end")) nil [296866 297851])
            ("blink-matching-check-function" variable (:default-value (function blink-matching-check-mismatch)) nil [297853 298219])
            ("blink-matching--overlay" variable (:default-value (let ((ol (make-overlay (point) (point) nil t))) (overlay-put ol (quote face) (quote show-paren-match)) (delete-overlay ol) ol)) nil [298221 298431])
            ("blink-matching-open" function (:user-visible-flag t) nil [298433 302997])
            ("blink-paren-function" variable (:default-value (quote blink-matching-open)) nil [302999 303188])
            ("blink-paren-post-self-insert-function" function nil nil [303190 303837])
            ("put" code nil nil [303839 303897])
            ("add-hook" code nil nil [303899 304278])
            ("keyboard-quit" function (:user-visible-flag t) nil [304456 305174])
            ("buffer-quit-function" variable nil nil [305176 305426])
            ("keyboard-escape-quit" function (:user-visible-flag t) nil [305428 306254])
            ("play-sound-file" function
               (:user-visible-flag t
                :arguments ("file" "volume" "device"))
                nil [306256 306651])
            ("read-mail-command" variable (:default-value (quote rmail)) nil [306655 307172])
            ("mail-user-agent" variable (:default-value (quote message-user-agent)) nil [307174 308718])
            ("compose-mail-user-agent-warnings" variable (:default-value t) nil [308720 309045])
            ("rfc822-goto-eoh" function nil nil [309047 309451])
            ("mail-encode-mml" variable nil nil [309493 309632])
            ("compose-mail" function
               (:user-visible-flag t
                :arguments ("to" "subject" "other-headers" "continue" "switch-function" "yank-action" "send-actions" "return-action"))
                nil [309634 312328])
            ("compose-mail-other-window" function
               (:user-visible-flag t
                :arguments ("to" "subject" "other-headers" "continue" "yank-action" "send-actions" "return-action"))
                nil [312330 312721])
            ("compose-mail-other-frame" function
               (:user-visible-flag t
                :arguments ("to" "subject" "other-headers" "continue" "yank-action" "send-actions" "return-action"))
                nil [312723 313111])
            ("set-variable-value-history" variable nil nil [313115 313300])
            ("set-variable" function
               (:user-visible-flag t
                :arguments ("variable" "value" "make-local"))
                nil [313302 316398])
            ("completion-list-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [mouse-2] (quote choose-completion)) (define-key map [follow-link] (quote mouse-face)) (define-key map [down-mouse-2] nil) (define-key map "" (quote choose-completion)) (define-key map "" (quote delete-completion-window)) (define-key map [left] (quote previous-completion)) (define-key map [right] (quote next-completion)) (define-key map [9] (quote next-completion)) (define-key map [backtab] (quote previous-completion)) (define-key map "q" (quote quit-window)) (define-key map "z" (quote kill-this-buffer)) map)) nil [316453 317086])
            ("put" code nil nil [317154 317202])
            ("completion-reference-buffer" variable nil nil [317204 317433])
            ("completion-no-auto-exit" variable nil nil [317435 317616])
            ("completion-base-position" variable nil nil [317618 317988])
            ("completion-list-insert-choice-function" variable (:default-value (function completion--replace)) nil [317990 318289])
            ("completion-base-size" variable nil nil [318291 318746])
            ("make-obsolete-variable" code nil nil [318747 318826])
            ("delete-completion-window" function (:user-visible-flag t) nil [318828 319202])
            ("previous-completion" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [319204 319335])
            ("next-completion" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [319337 320587])
            ("choose-completion" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [320589 322548])
            ("choose-completion-guess-base-position" function (:arguments ("string")) nil [322632 323470])
            ("choose-completion-delete-max-match" function (:arguments ("string")) nil [323472 323664])
            ("choose-completion-string-functions" variable nil nil [323666 324305])
            ("choose-completion-string" function (:arguments ("choice" "buffer" "base-position" "insert-function")) nil [324307 327717])
            ("define-derived-mode" code nil nil [327719 328091])
            ("completion-list-mode-finish" function nil nil [328093 328289])
            ("add-hook" code nil nil [328291 328353])
            ("completion-show-help" variable (:default-value t) nil [328417 328568])
            ("completion-setup-function" function nil nil [328699 330681])
            ("add-hook" code nil nil [330683 330743])
            ("define-key" code nil nil [330745 330820])
            ("define-key" code nil nil [330821 330896])
            ("switch-to-completions" function (:user-visible-flag t) nil [330898 331439])
            ("event-apply-alt-modifier" function (:arguments ("_ignore-prompt")) nil [331601 331844])
            ("event-apply-super-modifier" function (:arguments ("_ignore-prompt")) nil [331845 332098])
            ("event-apply-hyper-modifier" function (:arguments ("_ignore-prompt")) nil [332099 332352])
            ("event-apply-shift-modifier" function (:arguments ("_ignore-prompt")) nil [332353 332606])
            ("event-apply-control-modifier" function (:arguments ("_ignore-prompt")) nil [332607 332864])
            ("event-apply-meta-modifier" function (:arguments ("_ignore-prompt")) nil [332865 333113])
            ("event-apply-modifier" function (:arguments ("event" "symbol" "lshiftby" "prefix")) nil [333115 334179])
            ("define-key" code nil nil [334181 334252])
            ("define-key" code nil nil [334253 334324])
            ("define-key" code nil nil [334325 334395])
            ("define-key" code nil nil [334396 334465])
            ("define-key" code nil nil [334466 334537])
            ("define-key" code nil nil [334538 334611])
            ("mapc" code nil nil [334901 335496])
            ("clone-buffer-hook" variable nil nil [335548 335649])
            ("clone-indirect-buffer-hook" variable nil nil [335651 335770])
            ("clone-process" function (:arguments ("process" "newname")) nil [335772 337281])
            ("clone-buffer" function
               (:user-visible-flag t
                :arguments ("newname" "display-flag"))
                nil [337384 340347])
            ("clone-indirect-buffer" function
               (:user-visible-flag t
                :arguments ("newname" "display-flag" "norecord"))
                nil [340350 341986])
            ("clone-indirect-buffer-other-window" function
               (:user-visible-flag t
                :arguments ("newname" "display-flag" "norecord"))
                nil [341989 342472])
            ("normal-erase-is-backspace" variable (:default-value (quote maybe)) nil [342520 344061])
            ("normal-erase-is-backspace-setup-frame" function (:arguments ("frame")) nil [344063 345138])
            ("define-minor-mode" code nil nil [345140 348635])
            ("vis-mode-saved-buffer-invisibility-spec" variable nil nil [348638 348761])
            ("define-minor-mode" code nil nil [348763 349916])
            ("define-minor-mode" code nil nil [349918 350688])
            ("messages-buffer-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map special-mode-map) (define-key map "g" nil) map)) nil [350691 350874])
            ("define-derived-mode" code nil nil [350876 350992])
            ("messages-buffer" function nil nil [350994 351281])
            ("bad-packages-alist" variable
               (:constant-flag t
                :default-value (quote ((semantic semantic-version "\\`2\\.0pre[1-3]\\'" "The version of `semantic' loaded does not work in Emacs 22.
It can cause constant high CPU load.
Upgrade to at least Semantic 2.0pre4 (distributed with CEDET 1.0pre4).") (CUA-mode t nil "CUA-mode is now part of the standard GNU Emacs distribution,
so you can now enable CUA via the Options menu or by customizing `cua-mode'.

You have loaded an older version of CUA-mode which does not work
correctly with this version of Emacs.  You should remove the old
version and use the one distributed with Emacs."))))
                nil [352240 353666])
            ("bad-package-check" function (:arguments ("package")) nil [353668 354173])
            ("dolist" code nil nil [354175 354297])
            ("define-alternatives" function (:arguments ("command" "customizations")) nil [354950 357574])
            ("upcase-dwim" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [357640 358009])
            ("downcase-dwim" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [358011 358398])
            ("capitalize-dwim" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [358400 358801])
            ("simple" package nil nil [358806 358823]))          
      :file "simple.el.gz"
      :pointmax 358849
      :fsize 97606
      :lastmodtime '(22676 23208 0 0)
      :unmatched-syntax '((close-paren 1068 . 1069) (symbol 1033 . 1050) (open-paren 1032 . 1033)))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("untabify" function
               (:user-visible-flag t
                :arguments ("start" "end" "_arg"))
                nil [1041 2078])
            ("tabify-regexp" variable (:default-value " [ 	]+") nil [2080 2320])
            ("tabify" function
               (:user-visible-flag t
                :arguments ("start" "end" "_arg"))
                nil [2337 4171])
            ("tabify" package nil nil [4173 4190]))          
      :file "tabify.el.gz"
      :pointmax 4216
      :fsize 1620
      :lastmodtime '(22676 23208 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [3969 3986])
            ("uniquify" customgroup (:user-visible-flag t) nil [4017 4104])
            ("uniquify-buffer-name-style" variable (:default-value (quote post-forward-angle-brackets)) nil [4107 5192])
            ("uniquify-after-kill-buffer-p" variable (:default-value t) nil [5194 5328])
            ("uniquify-ignore-buffers-re" variable nil nil [5381 5769])
            ("uniquify-min-dir-content" variable nil nil [5771 5899])
            ("uniquify-separator" variable nil nil [5901 6253])
            ("uniquify-trailing-separator-p" variable nil nil [6255 6551])
            ("uniquify-strip-common-suffix" variable (:default-value (eq 0 uniquify-min-dir-content)) nil [6553 6976])
            ("uniquify-list-buffers-directory-modes" variable (:default-value (quote (dired-mode cvs-mode vc-dir-mode))) nil [6978 7279])
            ("cl-defstruct" code nil nil [7332 7517])
            ("uniquify-possibly-resolvable" variable nil nil [7551 7592])
            ("defvar-local" code nil nil [7594 7770])
            ("put" code nil nil [7771 7813])
            ("uniquify-buffer-base-name" function nil nil [7876 8089])
            ("uniquify-rationalize-file-buffer-names" function
               (:user-visible-flag t
                :arguments ("base" "dirname" "newbuf"))
                nil [8114 10711])
            ("uniquify-buffer-file-name" function (:arguments ("buffer")) nil [10793 11352])
            ("uniquify-rerationalize-w/o-cb" function (:arguments ("fix-list")) nil [11354 11744])
            ("uniquify-rationalize" function (:arguments ("fix-list")) nil [11746 13269])
            ("uniquify-item-greaterp" function (:arguments ("item1" "item2")) nil [13271 13396])
            ("uniquify-rationalize-a-list" function (:arguments ("fix-list" "depth")) nil [13398 14208])
            ("uniquify-get-proposed-name" function (:arguments ("base" "dirname" "depth")) nil [14210 16460])
            ("uniquify-rationalize-conflicting-sublist" function (:arguments ("conf-list" "old-name" "depth")) nil [16556 17297])
            ("uniquify-rename-buffer" function (:arguments ("item" "newname")) nil [17300 17652])
            ("uniquify-maybe-rerationalize-w/o-cb" function nil nil [17688 17913])
            ("uniquify-kill-buffer-function" function nil nil [18235 18446])
            ("add-hook" code nil nil [18627 18686])
            ("advice-add" code nil nil [19507 19575])
            ("uniquify--rename-buffer-advice" function (:arguments ("rb-fun" "newname" "unique" "args")) nil [19576 20213])
            ("advice-add" code nil nil [20216 20294])
            ("uniquify--create-file-buffer-advice" function (:arguments ("cfb-fun" "filename" "args")) nil [20295 20722])
            ("uniquify-unload-function" function nil nil [20737 21277])
            ("uniquify" package nil nil [21279 21298]))          
      :file "uniquify.el.gz"
      :pointmax 21326
      :fsize 6927
      :lastmodtime '(22676 23208 0 0)
      :unmatched-syntax '((close-paren 3986 . 3987) (symbol 3951 . 3968) (open-paren 3950 . 3951)))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("widget" include nil nil [1248 1265])
            ("custom-define-hook" variable nil nil [1267 1416])
            ("custom-dont-initialize" variable nil nil [1418 1601])
            ("custom-current-group-alist" variable nil nil [1603 1716])
            ("custom-initialize-default" function (:arguments ("symbol" "exp")) nil [1746 2209])
            ("custom-initialize-set" function (:arguments ("symbol" "exp")) nil [2211 2786])
            ("custom-initialize-reset" function (:arguments ("symbol" "exp")) nil [2788 3555])
            ("custom-initialize-changed" function (:arguments ("symbol" "exp")) nil [3557 4335])
            ("custom-delayed-init-variables" variable nil nil [4337 4434])
            ("custom-initialize-delay" function (:arguments ("symbol" "_value")) nil [4436 5560])
            ("custom-declare-variable" function (:arguments ("symbol" "default" "doc" "args")) nil [5562 8227])
            ("defcustom" function (:arguments ("symbol" "standard" "doc" "args")) nil [8229 14423])
            ("defface" function (:arguments ("face" "spec" "doc" "args")) nil [14451 17391])
            ("custom-current-group" function nil nil [17420 17509])
            ("custom-declare-group" function (:arguments ("symbol" "members" "doc" "args")) nil [17511 18556])
            ("defgroup" function (:arguments ("symbol" "members" "doc" "args")) nil [18558 19721])
            ("custom-add-to-group" function (:arguments ("group" "option" "widget")) nil [19723 20069])
            ("custom-group-of-mode" function (:arguments ("mode")) nil [20071 20473])
            ("custom-handle-all-keywords" function (:arguments ("symbol" "args" "type")) nil [20492 21082])
            ("custom-handle-keyword" function (:arguments ("symbol" "keyword" "value" "type")) nil [21084 21795])
            ("custom-add-dependencies" function (:arguments ("symbol" "value")) nil [21797 22550])
            ("custom-add-option" function (:arguments ("symbol" "option")) nil [22552 23003])
            ("defalias" code nil nil [23004 23060])
            ("custom-add-link" function (:arguments ("symbol" "widget")) nil [23062 23298])
            ("custom-add-version" function (:arguments ("symbol" "version")) nil [23300 23450])
            ("custom-add-package-version" function (:arguments ("symbol" "version")) nil [23452 23626])
            ("custom-add-load" function (:arguments ("symbol" "load")) nil [23628 23924])
            ("custom-autoload" function (:arguments ("symbol" "load" "noset")) nil [23926 24212])
            ("custom-variable-p" function (:arguments ("variable")) nil [24214 24647])
            ("define-obsolete-function-alias" code nil nil [24649 24724])
            ("custom-note-var-changed" function (:arguments ("variable")) nil [24726 25021])
            ("custom-load-recursion" variable nil nil [25164 25240])
            ("custom-load-symbol" function (:arguments ("symbol")) nil [25242 26501])
            ("custom-local-buffer" variable nil nil [26504 26824])
            ("put" code nil nil [26825 26870])
            ("custom-set-default" function (:arguments ("variable" "value")) nil [26872 27253])
            ("custom-set-minor-mode" function (:arguments ("variable" "value")) nil [27255 27679])
            ("custom-quote" function (:arguments ("sexp")) nil [27681 28019])
            ("customize-mark-to-save" function (:arguments ("symbol")) nil [28021 29184])
            ("customize-mark-as-set" function (:arguments ("symbol")) nil [29186 30341])
            ("custom-reevaluate-setting" function (:arguments ("symbol")) nil [30343 30815])
            ("custom-known-themes" variable (:default-value (quote (user changed))) nil [32642 33030])
            ("custom-theme-p" function (:arguments ("theme")) nil [33032 33141])
            ("custom-check-theme" function (:arguments ("theme")) nil [33143 33321])
            ("custom-push-theme" function (:arguments ("prop" "symbol" "theme" "mode" "value")) nil [33323 35519])
            ("custom-fix-face-spec" function (:arguments ("spec")) nil [35521 36291])
            ("custom-set-variables" function (:arguments ("args")) nil [36294 36905])
            ("custom-theme-set-variables" function (:arguments ("theme" "args")) nil [36907 39582])
            ("custom--sort-vars-table" variable nil nil [39584 39616])
            ("custom--sort-vars-result" variable nil nil [39617 39650])
            ("custom--sort-vars" function (:arguments ("vars")) nil [39652 41184])
            ("custom--sort-vars-1" function (:arguments ("sym" "_ignored")) nil [41186 41770])
            ("deftheme" function (:arguments ("theme" "doc" "ignored")) nil [42366 42987])
            ("custom-declare-theme" function (:arguments ("theme" "feature" "doc" "ignored")) nil [42989 43477])
            ("custom-make-theme-feature" function (:arguments ("theme")) nil [43479 43984])
            ("custom-theme-directory" variable (:default-value user-emacs-directory) nil [44008 44355])
            ("custom-theme-load-path" variable (:default-value (list (quote custom-theme-directory) t)) nil [44357 45115])
            ("custom--inhibit-theme-enable" variable nil nil [45117 45403])
            ("provide-theme" function (:arguments ("theme")) nil [45405 45803])
            ("custom-safe-themes" variable (:default-value (quote (default))) nil [45805 46425])
            ("load-theme" function
               (:user-visible-flag t
                :arguments ("theme" "no-confirm" "no-enable"))
                nil [46427 49351])
            ("custom-theme-load-confirm" function (:arguments ("hash")) nil [49353 50103])
            ("custom-theme-name-valid-p" function (:arguments ("name")) nil [50105 50370])
            ("custom-available-themes" function nil nil [50372 51252])
            ("custom-theme--load-path" function nil nil [51254 51573])
            ("enable-theme" function
               (:user-visible-flag t
                :arguments ("theme"))
                nil [51620 52856])
            ("custom-enabled-themes" variable nil nil [52858 54168])
            ("custom-theme-enabled-p" function (:arguments ("theme")) nil [54170 54288])
            ("disable-theme" function
               (:user-visible-flag t
                :arguments ("theme"))
                nil [54290 55889])
            ("declare-function" code nil nil [55931 56025])
            ("custom--frame-color-default" function (:arguments ("frame" "attribute" "resource-attr" "resource-class" "tty-default" "x-default")) nil [56027 56387])
            ("custom-variable-theme-value" function (:arguments ("variable")) nil [56389 56782])
            ("custom-theme-recalc-variable" function (:arguments ("variable")) nil [56784 57239])
            ("custom-theme-recalc-face" function (:arguments ("face")) nil [57241 57661])
            ("custom-theme-reset-variables" function (:arguments ("theme" "args")) nil [57878 58249])
            ("custom-reset-variables" function (:arguments ("args")) nil [58251 58592])
            ("custom" package nil nil [58608 58625]))          
      :file "custom.el.gz"
      :pointmax 58651
      :fsize 17191
      :lastmodtime '(22676 23208 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("internal--before-save-selected-window" function nil nil [962 1995])
            ("internal--after-save-selected-window" function (:arguments ("state")) nil [1997 2294])
            ("save-selected-window" function (:arguments ("body")) nil [2296 3334])
            ("temp-buffer-window-setup-hook" variable nil nil [3336 3537])
            ("temp-buffer-window-show-hook" variable nil nil [3539 3760])
            ("temp-buffer-window-setup" function (:arguments ("buffer-or-name")) nil [3762 4376])
            ("temp-buffer-window-show" function (:arguments ("buffer" "action")) nil [4378 5622])
            ("with-temp-buffer-window" function (:arguments ("buffer-or-name" "action" "quit-function" "body")) nil [5624 8206])
            ("with-current-buffer-window" function (:arguments ("buffer-or-name" "action" "quit-function" "body")) nil [8208 9097])
            ("with-displayed-buffer-window" function (:arguments ("buffer-or-name" "action" "quit-function" "body")) nil [9099 10679])
            ("window-right" function (:arguments ("window")) nil [10986 11198])
            ("window-left" function (:arguments ("window")) nil [11200 11410])
            ("window-child" function (:arguments ("window")) nil [11412 11567])
            ("window-child-count" function (:arguments ("window")) nil [11569 11865])
            ("window-last-child" function (:arguments ("window")) nil [11867 12134])
            ("window-normalize-buffer" function (:arguments ("buffer-or-name")) nil [12136 12630])
            ("window-normalize-frame" function (:arguments ("frame")) nil [12632 12885])
            ("window-normalize-window" function (:arguments ("window" "live-only")) nil [12887 13442])
            ("frame-char-size" function (:arguments ("window-or-frame" "horizontal")) nil [13481 14253])
            ("ignore-window-parameters" variable nil nil [14255 14599])
            ("window-safe-min-height" variable
               (:constant-flag t
                :default-value 1)
                nil [14649 14773])
            ("window-safe-min-pixel-height" function (:arguments ("window")) nil [14775 14971])
            ("window-min-height" variable (:default-value 4) nil [14973 15676])
            ("window-min-pixel-height" function (:arguments ("window")) nil [15678 15865])
            ("window-safe-min-width" variable
               (:constant-flag t
                :default-value 2)
                nil [15915 16038])
            ("window-safe-min-pixel-width" function (:arguments ("window")) nil [16040 16235])
            ("window-min-width" variable (:default-value 10) nil [16237 16936])
            ("window-min-pixel-width" function (:arguments ("window")) nil [16938 17123])
            ("window-safe-min-pixel-size" function (:arguments ("window" "horizontal")) nil [17125 17442])
            ("window-min-pixel-size" function (:arguments ("window" "horizontal")) nil [17444 17728])
            ("window-combined-p" function (:arguments ("window" "horizontal")) nil [17730 18362])
            ("window-combination-p" function (:arguments ("window" "horizontal")) nil [18364 18790])
            ("window-combinations" function (:arguments ("window" "horizontal")) nil [18792 19899])
            ("walk-window-tree-1" function (:arguments ("fun" "walk-window-tree-window" "any" "sub-only")) nil [19901 20613])
            ("walk-window-tree" function (:arguments ("fun" "frame" "any" "minibuf")) nil [20615 21838])
            ("walk-window-subtree" function (:arguments ("fun" "window" "any")) nil [21840 22491])
            ("window-with-parameter" function (:arguments ("parameter" "value" "frame" "any" "minibuf")) nil [22493 23451])
            ("window-atom-root" function (:arguments ("window")) nil [23473 23893])
            ("window-make-atom" function (:arguments ("window")) nil [23895 24283])
            ("display-buffer-in-atom-window" function (:arguments ("buffer" "alist")) nil [24285 26730])
            ("window--atom-check-1" function (:arguments ("window")) nil [26732 27620])
            ("window--atom-check" function (:arguments ("frame")) nil [27622 28010])
            ("window-sides" variable (:default-value (quote (left top right bottom))) nil [28029 28093])
            ("window-sides-vertical" variable nil nil [28095 28301])
            ("window-sides-slots" variable (:default-value (quote (nil nil nil nil))) nil [28303 29724])
            ("window--side-window-p" function (:arguments ("window")) nil [29726 30046])
            ("window--major-non-side-window" function (:arguments ("frame")) nil [30048 31104])
            ("window--major-side-window" function (:arguments ("side")) nil [31106 32776])
            ("display-buffer-in-major-side-window" function (:arguments ("buffer" "side" "slot" "alist")) nil [32778 34830])
            ("delete-side-window" function (:arguments ("window")) nil [34832 35050])
            ("display-buffer-in-side-window" function (:arguments ("buffer" "alist")) nil [35052 40055])
            ("window--side-check" function (:arguments ("frame")) nil [40057 42561])
            ("window--check" function (:arguments ("frame")) nil [42563 42742])
            ("window--dump-window" function (:arguments ("window" "erase")) nil [42778 44622])
            ("window--dump-frame" function (:arguments ("window-or-frame")) nil [44624 46245])
            ("window-total-size" function (:arguments ("window" "horizontal" "round")) nil [46265 47213])
            ("window-size" function (:arguments ("window" "horizontal" "pixelwise" "round")) nil [47215 48019])
            ("window-size-fixed" variable nil nil [48021 48458])
            ("make-variable-buffer-local" code nil nil [48459 48506])
            ("window--preservable-size" function (:arguments ("window" "horizontal")) nil [48508 48934])
            ("window-preserve-size" function (:arguments ("window" "horizontal" "preserve")) nil [48936 50340])
            ("window-preserved-size" function (:arguments ("window" "horizontal")) nil [50342 50880])
            ("window--preserve-size" function (:arguments ("window" "horizontal")) nil [50882 51242])
            ("window-safe-min-size" function (:arguments ("window" "horizontal" "pixelwise")) nil [51244 51949])
            ("window-min-size" function (:arguments ("window" "horizontal" "ignore" "pixelwise")) nil [51951 52519])
            ("window--min-size-ignore-p" function (:arguments ("window" "horizontal" "ignore")) nil [52521 52853])
            ("window--min-size-1" function (:arguments ("window" "horizontal" "ignore" "pixelwise")) nil [52855 56690])
            ("window-sizable" function (:arguments ("window" "delta" "horizontal" "ignore" "pixelwise")) nil [56692 58062])
            ("window-sizable-p" function (:arguments ("window" "delta" "horizontal" "ignore" "pixelwise")) nil [58064 58569])
            ("window--size-fixed-1" function (:arguments ("window" "horizontal" "ignore")) nil [58571 59896])
            ("window-size-fixed-p" function (:arguments ("window" "horizontal" "ignore")) nil [59898 60546])
            ("window--min-delta-1" function (:arguments ("window" "delta" "horizontal" "ignore" "trail" "noup" "pixelwise")) nil [60548 61890])
            ("window-min-delta" function (:arguments ("window" "horizontal" "ignore" "trail" "noup" "nodown" "pixelwise")) nil [61892 63675])
            ("frame-windows-min-size" function (:arguments ("frame" "horizontal" "ignore" "pixelwise")) nil [63677 64286])
            ("window--max-delta-1" function (:arguments ("window" "delta" "horizontal" "ignore" "trail" "noup" "pixelwise")) nil [64288 65588])
            ("window-max-delta" function (:arguments ("window" "horizontal" "ignore" "trail" "noup" "nodown" "pixelwise")) nil [65590 67036])
            ("window--resizable" function (:arguments ("window" "delta" "horizontal" "ignore" "trail" "noup" "nodown" "pixelwise")) nil [67084 68893])
            ("window--resizable-p" function (:arguments ("window" "delta" "horizontal" "ignore" "trail" "noup" "nodown" "pixelwise")) nil [68895 69553])
            ("window-resizable" function (:arguments ("window" "delta" "horizontal" "ignore" "pixelwise")) nil [69555 71067])
            ("window-resizable-p" function (:arguments ("window" "delta" "horizontal" "ignore" "pixelwise")) nil [71069 71625])
            ("defalias" code nil nil [71672 71718])
            ("defalias" code nil nil [71719 71762])
            ("window-full-height-p" function (:arguments ("window")) nil [71764 72302])
            ("window-full-width-p" function (:arguments ("window")) nil [72304 72736])
            ("window-body-size" function (:arguments ("window" "horizontal" "pixelwise")) nil [72738 73269])
            ("declare-function" code nil nil [73271 73331])
            ("window-font-width" function (:arguments ("window" "face")) nil [73333 73963])
            ("window-font-height" function (:arguments ("window" "face")) nil [73965 74528])
            ("overflow-newline-into-fringe" variable nil nil [74530 74567])
            ("window-max-chars-per-line" function (:arguments ("window" "face")) nil [74569 76083])
            ("window-current-scroll-bars" function (:arguments ("window")) nil [76085 77056])
            ("walk-windows" function (:arguments ("fun" "minibuf" "all-frames")) nil [77058 78940])
            ("window-at-side-p" function (:arguments ("window" "side")) nil [78942 79519])
            ("window-at-side-list" function (:arguments ("frame" "side")) nil [79521 80039])
            ("window--in-direction-2" function (:arguments ("window" "posn" "horizontal")) nil [80041 80431])
            ("window-in-direction" function (:arguments ("direction" "window" "ignore" "sign" "wrap" "mini")) nil [80726 86224])
            ("get-window-with-predicate" function (:arguments ("predicate" "minibuf" "all-frames" "default")) nil [86226 87847])
            ("defalias" code nil nil [87849 87899])
            ("get-lru-window" function (:arguments ("all-frames" "dedicated" "not-selected")) nil [87901 89552])
            ("get-mru-window" function (:arguments ("all-frames" "dedicated" "not-selected")) nil [89554 90824])
            ("get-largest-window" function (:arguments ("all-frames" "dedicated" "not-selected")) nil [90826 92119])
            ("get-buffer-window-list" function (:arguments ("buffer-or-name" "minibuf" "all-frames")) nil [92121 93689])
            ("minibuffer-window-active-p" function (:arguments ("window")) nil [93691 93841])
            ("count-windows" function (:arguments ("minibuf")) nil [93843 94136])
            ("window--size-to-pixel" function (:arguments ("window" "size" "horizontal" "pixelwise" "round-maybe")) nil [94161 95111])
            ("window--pixel-to-total-1" function (:arguments ("window" "horizontal" "char-size")) nil [95113 96737])
            ("window--pixel-to-total" function (:arguments ("frame" "horizontal")) nil [96739 98654])
            ("window--resize-reset" function (:arguments ("frame" "horizontal")) nil [98656 99092])
            ("window--resize-reset-1" function (:arguments ("window" "horizontal")) nil [99094 99616])
            ("window--resize-mini-window" function (:arguments ("window" "delta")) nil [99618 100842])
            ("window--resize-apply-p" function (:arguments ("frame" "horizontal")) nil [100844 101250])
            ("window-resize" function (:arguments ("window" "delta" "horizontal" "ignore" "pixelwise")) nil [101252 105153])
            ("window-resize-no-error" function (:arguments ("window" "delta" "horizontal" "ignore" "pixelwise")) nil [105155 105702])
            ("window--resize-child-windows-skip-p" function (:arguments ("window")) nil [105704 105881])
            ("window--resize-child-windows-normal" function (:arguments ("parent" "horizontal" "window" "this-delta" "trail" "other-delta")) nil [105883 109401])
            ("window--resize-child-windows" function (:arguments ("parent" "delta" "horizontal" "window" "ignore" "trail" "edge" "char-size")) nil [109403 116015])
            ("window--resize-siblings" function (:arguments ("window" "delta" "horizontal" "ignore" "trail" "edge" "char-size")) nil [116017 119813])
            ("window--resize-this-window" function (:arguments ("window" "delta" "horizontal" "ignore" "add" "trail" "edge" "char-size")) nil [119815 121718])
            ("window--resize-root-window" function (:arguments ("window" "delta" "horizontal" "ignore" "pixelwise")) nil [121720 122553])
            ("window--resize-root-window-vertically" function (:arguments ("window" "delta" "pixelwise")) nil [122555 124476])
            ("window--sanitize-window-sizes" function (:arguments ("frame" "horizontal")) nil [124478 125440])
            ("adjust-window-trailing-edge" function (:arguments ("window" "delta" "horizontal" "pixelwise")) nil [125442 132448])
            ("enlarge-window" function
               (:user-visible-flag t
                :arguments ("delta" "horizontal"))
                nil [132450 134284])
            ("shrink-window" function
               (:user-visible-flag t
                :arguments ("delta" "horizontal"))
                nil [134286 136137])
            ("maximize-window" function
               (:user-visible-flag t
                :arguments ("window"))
                nil [136139 136735])
            ("minimize-window" function
               (:user-visible-flag t
                :arguments ("window"))
                nil [136737 137347])
            ("window-edges" function (:arguments ("window" "body" "absolute" "pixelwise")) nil [137367 140431])
            ("window-body-edges" function (:arguments ("window")) nil [140433 140641])
            ("defalias" code nil nil [140642 140692])
            ("window-pixel-edges" function (:arguments ("window")) nil [140694 140915])
            ("window-body-pixel-edges" function (:arguments ("window")) nil [140917 141158])
            ("defalias" code nil nil [141159 141221])
            ("window-absolute-pixel-edges" function (:arguments ("window")) nil [141223 141450])
            ("window-absolute-body-pixel-edges" function (:arguments ("window")) nil [141452 141704])
            ("defalias" code nil nil [141705 141785])
            ("window-absolute-pixel-position" function (:arguments ("position" "window")) nil [141787 142687])
            ("frame-root-window-p" function (:arguments ("window")) nil [142690 142829])
            ("window--subtree" function (:arguments ("window" "next")) nil [142831 143554])
            ("window-tree" function (:arguments ("frame")) nil [143556 144451])
            ("other-window" function
               (:user-visible-flag t
                :arguments ("count" "all-frames"))
                nil [144454 147085])
            ("one-window-p" function (:arguments ("nomini" "all-frames")) nil [147221 148494])
            ("window-deletable-p" function (:arguments ("window")) nil [148519 149909])
            ("window--in-subtree-p" function (:arguments ("window" "root")) nil [149911 150214])
            ("delete-window" function
               (:user-visible-flag t
                :arguments ("window"))
                nil [150216 153612])
            ("delete-other-windows" function
               (:user-visible-flag t
                :arguments ("window"))
                nil [153614 156065])
            ("delete-other-windows-vertically" function
               (:user-visible-flag t
                :arguments ("window"))
                nil [156067 156693])
            ("record-window-buffer" function (:arguments ("window")) nil [158429 159848])
            ("unrecord-window-buffer" function (:arguments ("window" "buffer")) nil [159850 160349])
            ("set-window-buffer-start-and-point" function (:arguments ("window" "buffer" "start" "point")) nil [160351 161278])
            ("switch-to-visible-buffer" variable (:default-value t) nil [161280 161735])
            ("switch-to-prev-buffer" function
               (:user-visible-flag t
                :arguments ("window" "bury-or-kill"))
                nil [161737 167088])
            ("switch-to-next-buffer" function
               (:user-visible-flag t
                :arguments ("window"))
                nil [167090 170489])
            ("get-next-valid-buffer" function (:arguments ("list" "buffer" "visible-ok" "frame")) nil [170491 171487])
            ("last-buffer" function (:arguments ("buffer" "visible-ok" "frame")) nil [171489 172216])
            ("frame-auto-hide-function" variable (:default-value (function iconify-frame)) nil [172218 172736])
            ("window--delete" function (:arguments ("window" "dedicated-only" "kill")) nil [172738 173578])
            ("bury-buffer" function
               (:user-visible-flag t
                :arguments ("buffer-or-name"))
                nil [173580 174713])
            ("unbury-buffer" function (:user-visible-flag t) nil [174715 174840])
            ("next-buffer" function (:user-visible-flag t) nil [174842 175144])
            ("previous-buffer" function (:user-visible-flag t) nil [175146 175456])
            ("delete-windows-on" function
               (:user-visible-flag t
                :arguments ("buffer-or-name" "frame"))
                nil [175458 177212])
            ("replace-buffer-in-windows" function
               (:user-visible-flag t
                :arguments ("buffer-or-name"))
                nil [177214 178246])
            ("quit-restore-window" function (:arguments ("window" "bury-or-kill")) nil [178248 183091])
            ("quit-window" function
               (:user-visible-flag t
                :arguments ("kill" "window"))
                nil [183093 183693])
            ("quit-windows-on" function
               (:user-visible-flag t
                :arguments ("buffer-or-name" "kill" "frame"))
                nil [183695 184659])
            ("split-window" function (:arguments ("window" "size" "side" "pixelwise")) nil [184662 196451])
            ("split-window-keep-point" variable (:default-value t) nil [196528 196902])
            ("split-window-below" function
               (:user-visible-flag t
                :arguments ("size"))
                nil [196904 199158])
            ("defalias" code nil nil [199160 199215])
            ("split-window-right" function
               (:user-visible-flag t
                :arguments ("size"))
                nil [199217 200425])
            ("defalias" code nil nil [200427 200484])
            ("balance-windows-2" function (:arguments ("window" "horizontal")) nil [200987 203755])
            ("balance-windows-1" function (:arguments ("window" "horizontal")) nil [203757 204183])
            ("balance-windows" function
               (:user-visible-flag t
                :arguments ("window-or-frame"))
                nil [204185 205442])
            ("window-fixed-size-p" function (:arguments ("window" "direction")) nil [205444 205874])
            ("window-area-factor" variable (:default-value 1) nil [205921 206090])
            ("make-variable-buffer-local" code nil nil [206091 206139])
            ("balance-windows-area-adjust" function (:arguments ("window" "delta" "horizontal" "pixelwise")) nil [206141 206795])
            ("balance-windows-area" function (:user-visible-flag t) nil [206797 211153])
            ("window--state-get-1" function (:arguments ("window" "writable")) nil [211223 214018])
            ("window-state-get" function (:arguments ("window" "writable")) nil [214020 216109])
            ("window-state-put-list" variable nil nil [216111 216189])
            ("window-state-put-stale-windows" variable nil nil [216191 216278])
            ("window--state-put-1" function (:arguments ("state" "window" "ignore" "totals" "pixelwise")) nil [216280 218982])
            ("window--state-put-2" function (:arguments ("ignore" "pixelwise")) nil [218984 222760])
            ("window-state-put" function (:arguments ("state" "window" "ignore")) nil [222762 226878])
            ("display-buffer-record-window" function (:arguments ("type" "window" "buffer")) nil [226881 229398])
            ("display-buffer-function" variable nil nil [229400 229956])
            ("make-obsolete-variable" code nil nil [229958 230039])
            ("pop-up-frame-alist" variable nil nil [230220 230836])
            ("pop-up-frame-function" variable (:default-value (lambda nil (make-frame pop-up-frame-alist))) nil [230838 231167])
            ("special-display-buffer-names" variable nil nil [231169 233759])
            ("make-obsolete-variable" code nil nil [233760 233843])
            ("put" code nil nil [233844 233903])
            ("special-display-regexps" variable nil nil [233905 236547])
            ("make-obsolete-variable" code nil nil [236548 236626])
            ("put" code nil nil [236627 236681])
            ("special-display-p" function (:arguments ("buffer-name")) nil [236683 237578])
            ("special-display-frame-alist" variable (:default-value (quote ((height . 14) (width . 80) (unsplittable . t)))) nil [237580 238198])
            ("make-obsolete-variable" code nil nil [238199 238281])
            ("special-display-popup-frame" function (:arguments ("buffer" "args")) nil [238283 240303])
            ("special-display-function" variable (:default-value (quote special-display-popup-frame)) nil [240305 241103])
            ("make-obsolete-variable" code nil nil [241104 241183])
            ("same-window-buffer-names" variable nil nil [241185 241757])
            ("same-window-regexps" variable nil nil [241759 242347])
            ("same-window-p" function (:arguments ("buffer-name")) nil [242349 243320])
            ("pop-up-frames" variable nil nil [243322 243734])
            ("display-buffer-reuse-frames" variable nil nil [243736 243965])
            ("make-obsolete-variable" code nil nil [243967 244095])
            ("pop-up-windows" variable (:default-value t) nil [244097 244221])
            ("split-window-preferred-function" variable (:default-value (quote split-window-sensibly)) nil [244223 245606])
            ("split-height-threshold" variable (:default-value 80) nil [245608 246134])
            ("split-width-threshold" variable (:default-value 160) nil [246136 246524])
            ("window-splittable-p" function (:arguments ("window" "horizontal")) nil [246526 248846])
            ("split-window-sensibly" function (:arguments ("window")) nil [248848 251233])
            ("window--try-to-split-window" function (:arguments ("window" "alist")) nil [251235 252345])
            ("window--frame-usable-p" function (:arguments ("frame")) nil [252347 253289])
            ("even-window-sizes" variable (:default-value t) nil [253291 253814])
            ("defvaralias" code nil nil [253815 253868])
            ("window--even-window-sizes" function (:arguments ("window")) nil [253870 254875])
            ("window--display-buffer" function (:arguments ("buffer" "window" "type" "alist" "dedicated")) nil [254877 257786])
            ("window--maybe-raise-frame" function (:arguments ("frame")) nil [257788 258212])
            ("display-buffer-mark-dedicated" variable nil nil [258551 258760])
            ("display-buffer--action-function-custom-type" variable
               (:constant-flag t
                :default-value (quote (choice :tag "Function" (const :tag "--" ignore) (const display-buffer-reuse-window) (const display-buffer-pop-up-window) (const display-buffer-same-window) (const display-buffer-pop-up-frame) (const display-buffer-below-selected) (const display-buffer-at-bottom) (const display-buffer-in-previous-window) (const display-buffer-use-some-window) (const display-buffer-use-some-frame) (function :tag "Other function"))))
                nil [258762 259359])
            ("display-buffer--action-custom-type" variable
               (:constant-flag t
                :default-value (\` (cons :tag "Action" (choice :tag "Action functions" (\, display-buffer--action-function-custom-type) (repeat :tag "List of functions" (\, display-buffer--action-function-custom-type))) (alist :tag "Action arguments" :key-type symbol :value-type (sexp :tag "Value")))))
                nil [259361 259736])
            ("display-buffer-overriding-action" variable (:default-value (quote (nil))) nil [259738 260073])
            ("put" code nil nil [260074 260137])
            ("display-buffer-alist" variable nil nil [260139 261150])
            ("display-buffer-base-action" variable (:default-value (quote (nil))) nil [261152 261576])
            ("display-buffer-fallback-action" variable
               (:constant-flag t
                :default-value (quote ((display-buffer--maybe-same-window display-buffer-reuse-window display-buffer--maybe-pop-up-frame-or-window display-buffer-in-previous-window display-buffer-use-some-window display-buffer-pop-up-frame))))
                nil [261578 262162])
            ("put" code nil nil [262163 262224])
            ("display-buffer-assq-regexp" function (:arguments ("buffer-name" "alist" "action")) nil [262226 262649])
            ("display-buffer--same-window-action" variable (:default-value (quote (display-buffer-same-window (inhibit-same-window)))) nil [262651 262823])
            ("put" code nil nil [262824 262889])
            ("display-buffer--other-frame-action" variable (:default-value (quote ((display-buffer-reuse-window display-buffer-pop-up-frame) (reusable-frames . 0) (inhibit-same-window . t)))) nil [262891 263121])
            ("put" code nil nil [263122 263187])
            ("display-buffer" function
               (:user-visible-flag t
                :arguments ("buffer-or-name" "action" "frame"))
                nil [263189 269137])
            ("display-buffer-other-frame" function
               (:user-visible-flag t
                :arguments ("buffer"))
                nil [269139 269472])
            ("display-buffer-use-some-frame" function (:arguments ("buffer" "alist")) nil [269514 271014])
            ("display-buffer-same-window" function (:arguments ("buffer" "alist")) nil [271016 271501])
            ("display-buffer--maybe-same-window" function (:arguments ("buffer" "alist")) nil [271503 271844])
            ("display-buffer-reuse-window" function (:arguments ("buffer" "alist")) nil [271846 273492])
            ("display-buffer--special-action" function (:arguments ("buffer")) nil [273494 274245])
            ("display-buffer-pop-up-frame" function (:arguments ("buffer" "alist")) nil [274247 275267])
            ("display-buffer-pop-up-window" function (:arguments ("buffer" "alist")) nil [275269 276583])
            ("display-buffer--maybe-pop-up-frame-or-window" function (:arguments ("buffer" "alist")) nil [276585 277171])
            ("display-buffer-below-selected" function (:arguments ("buffer" "alist")) nil [277173 278022])
            ("display-buffer-at-bottom" function (:arguments ("buffer" "alist")) nil [278024 279561])
            ("display-buffer-in-previous-window" function (:arguments ("buffer" "alist")) nil [279563 281850])
            ("display-buffer-use-some-window" function (:arguments ("buffer" "alist")) nil [281852 283593])
            ("display-buffer-no-window" function (:arguments ("_buffer" "alist")) nil [283595 284050])
            ("pop-to-buffer" function
               (:user-visible-flag t
                :arguments ("buffer" "action" "norecord"))
                nil [284086 285618])
            ("pop-to-buffer-same-window" function (:arguments ("buffer" "norecord")) nil [285620 286254])
            ("read-buffer-to-switch" function (:arguments ("prompt")) nil [286256 287400])
            ("window-normalize-buffer-to-switch-to" function (:arguments ("buffer-or-name")) nil [287402 287958])
            ("switch-to-buffer-preserve-window-point" variable nil nil [287960 288849])
            ("switch-to-buffer-in-dedicated-window" variable nil nil [288851 289641])
            ("switch-to-buffer" function
               (:user-visible-flag t
                :arguments ("buffer-or-name" "norecord" "force-same-window"))
                nil [289643 293386])
            ("switch-to-buffer-other-window" function
               (:user-visible-flag t
                :arguments ("buffer-or-name" "norecord"))
                nil [293388 294420])
            ("switch-to-buffer-other-frame" function
               (:user-visible-flag t
                :arguments ("buffer-or-name" "norecord"))
                nil [294422 295434])
            ("set-window-text-height" function (:arguments ("window" "height")) nil [295437 296410])
            ("enlarge-window-horizontally" function
               (:user-visible-flag t
                :arguments ("delta"))
                nil [296412 296627])
            ("shrink-window-horizontally" function
               (:user-visible-flag t
                :arguments ("delta"))
                nil [296629 296848])
            ("count-screen-lines" function (:arguments ("beg" "end" "count-final-newline" "window")) nil [296850 298251])
            ("window-buffer-height" function (:arguments ("window")) nil [298253 298731])
            ("fit-window-to-buffer-horizontally" variable nil nil [298796 299190])
            ("fit-frame-to-buffer" variable nil nil [299304 299753])
            ("fit-frame-to-buffer-margins" variable (:default-value (quote (nil nil nil nil))) nil [299755 300969])
            ("fit-frame-to-buffer-sizes" variable (:default-value (quote (nil nil nil nil))) nil [300971 302260])
            ("declare-function" code nil nil [302262 302333])
            ("window--sanitize-margin" function (:arguments ("margin" "left" "right")) nil [302335 302539])
            ("declare-function" code nil nil [302541 302613])
            ("fit-frame-to-buffer" function
               (:user-visible-flag t
                :arguments ("frame" "max-height" "min-height" "max-width" "min-width" "only"))
                nil [302615 311275])
            ("fit-window-to-buffer" function
               (:user-visible-flag t
                :arguments ("window" "max-height" "min-height" "max-width" "min-width" "preserve-size"))
                nil [311277 317764])
            ("window-safely-shrinkable-p" function (:arguments ("window")) nil [317766 318147])
            ("shrink-window-if-larger-than-buffer" function
               (:user-visible-flag t
                :arguments ("window"))
                nil [318149 319257])
            ("kill-buffer-and-window" function (:user-visible-flag t) nil [319260 320082])
            ("window-group-start-function" variable nil nil [320502 320542])
            ("make-variable-buffer-local" code nil nil [320543 320600])
            ("put" code nil nil [320601 320654])
            ("window-group-start" function (:arguments ("window")) nil [320655 321154])
            ("window-group-end-function" variable nil nil [321156 321194])
            ("make-variable-buffer-local" code nil nil [321195 321250])
            ("put" code nil nil [321251 321302])
            ("window-group-end" function (:arguments ("window" "update")) nil [321303 322109])
            ("set-window-group-start-function" variable nil nil [322111 322155])
            ("make-variable-buffer-local" code nil nil [322156 322217])
            ("put" code nil nil [322218 322275])
            ("set-window-group-start" function (:arguments ("window" "pos" "noforce")) nil [322276 322917])
            ("recenter-window-group-function" variable nil nil [322919 322962])
            ("make-variable-buffer-local" code nil nil [322963 323023])
            ("put" code nil nil [323024 323080])
            ("recenter-window-group" function (:arguments ("arg")) nil [323081 324251])
            ("pos-visible-in-window-group-p-function" variable nil nil [324253 324304])
            ("make-variable-buffer-local" code nil nil [324305 324373])
            ("put" code nil nil [324374 324438])
            ("pos-visible-in-window-group-p" function (:arguments ("pos" "window" "partially")) nil [324439 325915])
            ("selected-window-group-function" variable nil nil [325917 325960])
            ("make-variable-buffer-local" code nil nil [325961 326021])
            ("put" code nil nil [326022 326078])
            ("selected-window-group" function nil nil [326079 326429])
            ("move-to-window-group-line-function" variable nil nil [326431 326478])
            ("make-variable-buffer-local" code nil nil [326479 326543])
            ("put" code nil nil [326544 326604])
            ("move-to-window-group-line" function (:arguments ("arg")) nil [326605 327203])
            ("recenter-last-op" variable nil nil [327207 327432])
            ("recenter-positions" variable (:default-value (quote (middle top bottom))) nil [327434 328294])
            ("recenter-top-bottom" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [328296 329443])
            ("define-key" code nil nil [329445 329497])
            ("move-to-window-line-top-bottom" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [329499 330633])
            ("define-key" code nil nil [330635 330698])
            ("scroll-error-top-bottom" variable nil nil [330868 331312])
            ("scroll-up-command" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [331314 332377])
            ("put" code nil nil [332379 332421])
            ("scroll-down-command" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [332423 333490])
            ("put" code nil nil [333492 333536])
            ("scroll-up-line" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [333606 333889])
            ("put" code nil nil [333891 333930])
            ("scroll-down-line" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [333932 334217])
            ("put" code nil nil [334219 334260])
            ("scroll-other-window-down" function
               (:user-visible-flag t
                :arguments ("lines"))
                nil [334264 334659])
            ("beginning-of-buffer-other-window" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [334661 335345])
            ("end-of-buffer-other-window" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [335347 335850])
            ("mouse-autoselect-window-timer" variable nil nil [335853 335943])
            ("mouse-autoselect-window-position-1" variable nil nil [335945 336059])
            ("mouse-autoselect-window-position" variable nil nil [336061 336172])
            ("mouse-autoselect-window-window" variable nil nil [336174 336275])
            ("mouse-autoselect-window-state" variable nil nil [336277 336574])
            ("mouse-autoselect-window-cancel" function (:arguments ("force")) nil [336576 337347])
            ("mouse-autoselect-window-start" function (:arguments ("mouse-position" "window" "suspend")) nil [337349 338177])
            ("mouse-autoselect-window-select" function nil nil [338179 341964])
            ("handle-select-window" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [341966 343505])
            ("truncated-partial-width-window-p" function (:arguments ("window")) nil [343507 344192])
            ("window-adjust-process-window-size-function" variable (:default-value (quote window-adjust-process-window-size-smallest)) nil [344261 345703])
            ("window-adjust-process-window-size" function (:arguments ("reducer" "process" "windows")) nil [345705 346322])
            ("window-adjust-process-window-size-smallest" function (:arguments ("process" "windows")) nil [346324 346622])
            ("window-adjust-process-window-size-largest" function (:arguments ("process" "windows")) nil [346624 346920])
            ("window--process-window-list" function nil nil [346922 348135])
            ("window--adjust-process-windows" function nil nil [348137 348833])
            ("add-hook" code nil nil [348835 348911])
            ("define-key" code nil nil [349002 349043])
            ("define-key" code nil nil [349044 349092])
            ("define-key" code nil nil [349093 349139])
            ("define-key" code nil nil [349140 349186])
            ("define-key" code nil nil [349187 349227])
            ("define-key" code nil nil [349228 349270])
            ("define-key" code nil nil [349271 349326])
            ("define-key" code nil nil [349327 349381])
            ("define-key" code nil nil [349382 349445])
            ("define-key" code nil nil [349446 349489])
            ("define-key" code nil nil [349490 349542]))          
      :file "window.el.gz"
      :pointmax 349568
      :fsize 77609
      :lastmodtime '(22676 23208 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("setq" code nil nil [1131 1167])
            ("command-line-processed" variable nil nil [1169 1254])
            ("initialization" customgroup (:user-visible-flag t) nil [1256 1337])
            ("initial-buffer-choice" variable nil nil [1339 2310])
            ("inhibit-startup-screen" variable nil nil [2312 2565])
            ("defvaralias" code nil nil [2567 2627])
            ("defvaralias" code nil nil [2628 2690])
            ("startup-screen-inhibit-startup-screen" variable nil nil [2692 2742])
            ("inhibit-startup-echo-area-message" variable nil nil [3042 4096])
            ("inhibit-default-init" variable nil nil [4098 4228])
            ("inhibit-startup-buffer-menu" variable nil nil [4230 4394])
            ("command-switch-alist" variable nil nil [4396 4664])
            ("command-line-args-left" variable nil nil [4666 4750])
            ("defvaralias" code nil nil [4752 4987])
            ("internal-make-var-non-special" code nil nil [4988 5025])
            ("argi" variable nil nil [5027 5079])
            ("internal-make-var-non-special" code nil nil [5080 5117])
            ("command-line-functions" variable nil nil [5119 5573])
            ("command-line-default-directory" variable nil nil [5575 5743])
            ("command-line-x-option-alist" variable
               (:constant-flag t
                :default-value (quote (("-bw" 1 x-handle-numeric-switch border-width) ("-d" 1 x-handle-display) ("-display" 1 x-handle-display) ("-name" 1 x-handle-name-switch) ("-title" 1 x-handle-switch title) ("-T" 1 x-handle-switch title) ("-r" 0 x-handle-switch reverse t) ("-rv" 0 x-handle-switch reverse t) ("-reverse" 0 x-handle-switch reverse t) ("-reverse-video" 0 x-handle-switch reverse t) ("-fn" 1 x-handle-switch font) ("-font" 1 x-handle-switch font) ("-fs" 0 x-handle-initial-switch fullscreen fullboth) ("-fw" 0 x-handle-initial-switch fullscreen fullwidth) ("-fh" 0 x-handle-initial-switch fullscreen fullheight) ("-mm" 0 x-handle-initial-switch fullscreen maximized) ("-ib" 1 x-handle-numeric-switch internal-border-width) ("-g" 1 x-handle-geometry) ("-lsp" 1 x-handle-numeric-switch line-spacing) ("-geometry" 1 x-handle-geometry) ("-fg" 1 x-handle-switch foreground-color) ("-foreground" 1 x-handle-switch foreground-color) ("-bg" 1 x-handle-switch background-color) ("-background" 1 x-handle-switch background-color) ("-ms" 1 x-handle-switch mouse-color) ("-nbi" 0 x-handle-switch icon-type nil) ("-iconic" 0 x-handle-iconic) ("-xrm" 1 x-handle-xrm-switch) ("-cr" 1 x-handle-switch cursor-color) ("-vb" 0 x-handle-switch vertical-scroll-bars t) ("-hb" 0 x-handle-switch horizontal-scroll-bars t) ("-bd" 1 x-handle-switch) ("--border-width" 1 x-handle-numeric-switch border-width) ("--display" 1 x-handle-display) ("--name" 1 x-handle-name-switch) ("--title" 1 x-handle-switch title) ("--reverse-video" 0 x-handle-switch reverse t) ("--font" 1 x-handle-switch font) ("--fullscreen" 0 x-handle-initial-switch fullscreen fullboth) ("--fullwidth" 0 x-handle-initial-switch fullscreen fullwidth) ("--fullheight" 0 x-handle-initial-switch fullscreen fullheight) ("--maximized" 0 x-handle-initial-switch fullscreen maximized) ("--internal-border" 1 x-handle-numeric-switch internal-border-width) ("--geometry" 1 x-handle-geometry) ("--foreground-color" 1 x-handle-switch foreground-color) ("--background-color" 1 x-handle-switch background-color) ("--mouse-color" 1 x-handle-switch mouse-color) ("--no-bitmap-icon" 0 x-handle-no-bitmap-icon) ("--iconic" 0 x-handle-iconic) ("--xrm" 1 x-handle-xrm-switch) ("--cursor-color" 1 x-handle-switch cursor-color) ("--vertical-scroll-bars" 0 x-handle-switch vertical-scroll-bars t) ("--line-spacing" 1 x-handle-numeric-switch line-spacing) ("--border-color" 1 x-handle-switch border-color) ("--smid" 1 x-handle-smid) ("--parent-id" 1 x-handle-parent-id))))
                nil [5851 9035])
            ("command-line-ns-option-alist" variable
               (:constant-flag t
                :default-value (quote (("-NSAutoLaunch" 1 ns-ignore-1-arg) ("-NXAutoLaunch" 1 ns-ignore-1-arg) ("-macosx" 0 ignore) ("-NSHost" 1 ns-ignore-1-arg) ("-_NSMachLaunch" 1 ns-ignore-1-arg) ("-MachLaunch" 1 ns-ignore-1-arg) ("-NXOpen" 1 ns-ignore-1-arg) ("-NSOpen" 1 ns-handle-nxopen) ("-NXOpenTemp" 1 ns-ignore-1-arg) ("-NSOpenTemp" 1 ns-handle-nxopentemp) ("-GSFilePath" 1 ns-handle-nxopen) ("-name" 1 x-handle-name-switch) ("-title" 1 x-handle-switch title) ("-T" 1 x-handle-switch title) ("-r" 0 x-handle-switch reverse t) ("-rv" 0 x-handle-switch reverse t) ("-reverse" 0 x-handle-switch reverse t) ("-fn" 1 x-handle-switch font) ("-font" 1 x-handle-switch font) ("-ib" 1 x-handle-numeric-switch internal-border-width) ("-g" 1 x-handle-geometry) ("-geometry" 1 x-handle-geometry) ("-fg" 1 x-handle-switch foreground-color) ("-foreground" 1 x-handle-switch foreground-color) ("-bg" 1 x-handle-switch background-color) ("-background" 1 x-handle-switch background-color) ("-itype" 0 x-handle-switch icon-type t) ("-i" 0 x-handle-switch icon-type t) ("-iconic" 0 x-handle-iconic icon-type t) ("-cr" 1 x-handle-switch cursor-color) ("-vb" 0 x-handle-switch vertical-scroll-bars t) ("-hb" 0 x-handle-switch horizontal-scroll-bars t) ("-bd" 1 x-handle-switch) ("--name" 1 x-handle-name-switch) ("--title" 1 x-handle-switch title) ("--reverse-video" 0 x-handle-switch reverse t) ("--font" 1 x-handle-switch font) ("--internal-border" 1 x-handle-numeric-switch internal-border-width) ("--foreground-color" 1 x-handle-switch foreground-color) ("--background-color" 1 x-handle-switch background-color) ("--mouse-color" 1 x-handle-switch mouse-color) ("--icon-type" 0 x-handle-switch icon-type t) ("--iconic" 0 x-handle-iconic) ("--cursor-color" 1 x-handle-switch cursor-color) ("--vertical-scroll-bars" 0 x-handle-switch vertical-scroll-bars t) ("--border-color" 1 x-handle-switch border-width))))
                nil [9037 11989])
            ("before-init-hook" variable nil nil [11992 12102])
            ("after-init-hook" variable nil nil [12104 12520])
            ("emacs-startup-hook" variable nil nil [12522 12629])
            ("term-setup-hook" variable nil nil [12631 12946])
            ("make-obsolete-variable" code nil nil [12948 13064])
            ("inhibit-startup-hooks" variable nil nil [13066 13265])
            ("keyboard-type" variable nil nil [13267 13488])
            ("window-setup-hook" variable nil nil [13490 13937])
            ("initial-major-mode" variable (:default-value (quote lisp-interaction-mode)) nil [13939 14108])
            ("init-file-user" variable nil nil [14110 14757])
            ("site-run-file" variable (:default-value (purecopy "site-start")) nil [14759 16030])
            ("make-obsolete-variable" code nil nil [16032 16104])
            ("mail-host-address" variable nil nil [16106 16335])
            ("user-mail-address" variable (:default-value (if command-line-processed (or (getenv "EMAIL") (concat (user-login-name) "@" (or mail-host-address (system-name)))) "")) nil [16337 16826])
            ("auto-save-list-file-prefix" variable (:default-value (cond ((eq system-type (quote ms-dos)) (concat user-emacs-directory "auto-save.list/_s")) (t (concat user-emacs-directory "auto-save-list/.saves-")))) nil [16828 17581])
            ("emacs-basic-display" variable nil nil [17583 17615])
            ("init-file-debug" variable nil nil [17617 17645])
            ("init-file-had-error" variable nil nil [17647 17743])
            ("normal-top-level-add-subdirs-inode-list" variable nil nil [17745 17797])
            ("no-blinking-cursor" variable nil nil [17799 17830])
            ("pure-space-overflow" variable nil nil [17832 17917])
            ("pure-space-overflow-message" variable (:default-value (purecopy "Warning Warning!!!  Pure space overflow    !!!Warning Warning
(See the node Pure Storage in the Lisp manual for details.)
")) nil [17919 18095])
            ("tutorial-directory" variable (:default-value (file-name-as-directory (expand-file-name "tutorials" data-directory))) nil [18097 18333])
            ("normal-top-level-add-subdirs-to-load-path" function nil nil [18335 20087])
            ("normal-top-level-add-to-load-path" function (:arguments ("dirs")) nil [20089 20858])
            ("normal-top-level" function nil nil [20860 30646])
            ("tty-long-option-alist" variable
               (:constant-flag t
                :default-value (quote (("--name" . "-name") ("--title" . "-T") ("--reverse-video" . "-reverse") ("--foreground-color" . "-fg") ("--background-color" . "-bg") ("--color" . "-color"))))
                nil [30754 30980])
            ("tool-bar-images-pixel-height" variable
               (:constant-flag t
                :default-value 24)
                nil [30982 31072])
            ("cl-defgeneric" code nil nil [31074 31415])
            ("cl-defmethod" code nil nil [31416 31512])
            ("cl-defgeneric" code nil nil [31514 31852])
            ("tty-handle-args" function (:arguments ("args")) nil [31854 34601])
            ("declare-function" code nil nil [34603 34697])
            ("declare-function" code nil nil [34698 34757])
            ("declare-function" code nil nil [34758 34802])
            ("server-name" variable nil nil [34804 34824])
            ("server-process" variable nil nil [34825 34848])
            ("startup--setup-quote-display" function (:arguments ("style")) nil [34850 37828])
            ("command-line" function nil nil [37830 58918])
            ("x-apply-session-resources" function nil nil [58920 59947])
            ("initial-scratch-message" variable (:default-value (purecopy ";; This buffer is for text that is not saved, and for Lisp evaluation.
;; To create a file, visit it with \\[find-file] and enter text in its buffer.

")) nil [59949 60357])
            ("fancy-startup-text" variable
               (:constant-flag t
                :default-value (\` ((:face (variable-pitch font-lock-comment-face) "Welcome to " :link ("GNU Emacs" (\, (lambda (_button) (browse-url "http://www.gnu.org/software/emacs/"))) "Browse http://www.gnu.org/software/emacs/") ", one component of the " :link (\, (lambda nil (if (eq system-type (quote gnu/linux)) (\` ("GNU/Linux" (\, (lambda (_button) (browse-url "http://www.gnu.org/gnu/linux-and-gnu.html"))) "Browse http://www.gnu.org/gnu/linux-and-gnu.html")) (\` ("GNU" (\, (lambda (_button) (browse-url "http://www.gnu.org/gnu/thegnuproject.html"))) "Browse http://www.gnu.org/gnu/thegnuproject.html"))))) " operating system.

" :face variable-pitch :link ("Emacs Tutorial" (\, (lambda (_button) (help-with-tutorial)))) "	Learn basic keystroke commands" (\, (lambda nil (let* ((en "TUTORIAL") (tut (or (get-language-info current-language-environment (quote tutorial)) en)) (title (with-temp-buffer (insert-file-contents (expand-file-name tut tutorial-directory) nil) (search-forward ".") (buffer-substring (point-min) (1- (point)))))) (if (string= en tut) "" (concat " (" title ")"))))) "
" :link ("Emacs Guided Tour" (\, (lambda (_button) (browse-url "http://www.gnu.org/software/emacs/tour/"))) "Browse http://www.gnu.org/software/emacs/tour/") "	Overview of Emacs features at gnu.org
" :link ("View Emacs Manual" (\, (lambda (_button) (info-emacs-manual)))) "	View the Emacs manual using Info
" :link ("Absence of Warranty" (\, (lambda (_button) (describe-no-warranty)))) "	GNU Emacs comes with " :face (variable-pitch (:slant oblique)) "ABSOLUTELY NO WARRANTY
" :face variable-pitch :link ("Copying Conditions" (\, (lambda (_button) (describe-copying)))) "	Conditions for redistributing and changing Emacs
" :link ("Ordering Manuals" (\, (lambda (_button) (view-order-manuals)))) "	Purchasing printed copies of manuals
" "
"))))
                nil [60532 63308])
            ("fancy-about-text" variable
               (:constant-flag t
                :default-value (\` ((:face (variable-pitch font-lock-comment-face) "This is " :link ("GNU Emacs" (\, (lambda (_button) (browse-url "http://www.gnu.org/software/emacs/"))) "Browse http://www.gnu.org/software/emacs/") ", one component of the " :link (\, (lambda nil (if (eq system-type (quote gnu/linux)) (\` ("GNU/Linux" (\, (lambda (_button) (browse-url "http://www.gnu.org/gnu/linux-and-gnu.html"))) "Browse http://www.gnu.org/gnu/linux-and-gnu.html")) (\` ("GNU" (\, (lambda (_button) (describe-gnu-project))) "Display info on the GNU project."))))) " operating system.
" :face (variable-pitch font-lock-builtin-face) "
" (\, (lambda nil (emacs-version))) "
" :face (variable-pitch (:height 0.8)) (\, (lambda nil emacs-copyright)) "

" :face variable-pitch :link ("Authors" (\, (lambda (_button) (view-file (expand-file-name "AUTHORS" data-directory)) (goto-char (point-min))))) "	Many people have contributed code included in GNU Emacs
" :link ("Contributing" (\, (lambda (_button) (info "(emacs)Contributing")))) "	How to contribute improvements to Emacs
" "
" :link ("GNU and Freedom" (\, (lambda (_button) (describe-gnu-project)))) "	Why we developed GNU Emacs, and the GNU operating system
" :link ("Absence of Warranty" (\, (lambda (_button) (describe-no-warranty)))) "	GNU Emacs comes with " :face (variable-pitch (:slant oblique)) "ABSOLUTELY NO WARRANTY
" :face variable-pitch :link ("Copying Conditions" (\, (lambda (_button) (describe-copying)))) "	Conditions for redistributing and changing Emacs
" :link ("Getting New Versions" (\, (lambda (_button) (describe-distribution)))) "	How to obtain the latest version of Emacs
" :link ("Ordering Manuals" (\, (lambda (_button) (view-order-manuals)))) "	Buying printed manuals from the FSF
" "
" :link ("Emacs Tutorial" (\, (lambda (_button) (help-with-tutorial)))) "	Learn basic Emacs keystroke commands" (\, (lambda nil (let* ((en "TUTORIAL") (tut (or (get-language-info current-language-environment (quote tutorial)) en)) (title (with-temp-buffer (insert-file-contents (expand-file-name tut tutorial-directory) nil) (search-forward ".") (buffer-substring (point-min) (1- (point)))))) (if (string= en tut) "" (concat " (" title ")"))))) "
" :link ("Emacs Guided Tour" (\, (lambda (_button) (browse-url "http://www.gnu.org/software/emacs/tour/"))) "Browse http://www.gnu.org/software/emacs/tour/") "	See an overview of Emacs features at gnu.org"))))
                nil [63310 66462])
            ("fancy-splash-screen" customgroup (:user-visible-flag t) nil [66465 66584])
            ("fancy-splash-image" variable nil nil [66586 66783])
            ("splash-screen-keymap" variable (:default-value (let ((map (make-sparse-keymap))) (suppress-keymap map) (set-keymap-parent map button-buffer-map) (define-key map "" (quote scroll-down-command)) (define-key map [33554464] (quote scroll-down-command)) (define-key map " " (quote scroll-up-command)) (define-key map "q" (quote exit-splash-screen)) map)) nil [66786 67158])
            ("fancy-splash-insert" function (:arguments ("args")) nil [67229 68625])
            ("declare-function" code nil nil [68627 68696])
            ("fancy-splash-image-file" function nil nil [68698 69177])
            ("fancy-splash-head" function nil nil [69179 70195])
            ("fancy-startup-tail" function (:arguments ("concise")) nil [70197 73336])
            ("exit-splash-screen" function (:user-visible-flag t) nil [73338 73447])
            ("fancy-startup-screen" function (:arguments ("concise")) nil [73449 74880])
            ("fancy-about-screen" function nil nil [74882 75640])
            ("fancy-splash-frame" function nil nil [75642 76238])
            ("use-fancy-splash-screens-p" function nil nil [76240 77055])
            ("normal-splash-screen" function (:arguments ("startup" "concise")) nil [77058 79564])
            ("normal-mouse-startup-screen" function nil nil [79566 81372])
            ("normal-no-mouse-startup-screen" function nil nil [81374 85503])
            ("normal-about-screen" function nil nil [85505 86966])
            ("startup-echo-area-message" function nil nil [86968 87165])
            ("display-startup-echo-area-message" function nil nil [87167 88431])
            ("display-startup-screen" function (:arguments ("concise")) nil [88433 88885])
            ("display-about-screen" function (:user-visible-flag t) nil [88887 89133])
            ("defalias" code nil nil [89135 89180])
            ("defalias" code nil nil [89181 89238])
            ("command-line-1" function (:arguments ("args-left")) nil [89240 105981])
            ("command-line-normalize-file-name" function (:arguments ("file")) nil [105983 106715]))          
      :file "startup.el.gz"
      :pointmax 106742
      :fsize 29168
      :lastmodtime '(22676 23208 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("font-lock" include nil nil [3639 3659])
            ("hi-lock" customgroup (:user-visible-flag t) nil [3661 3836])
            ("hi-lock-file-patterns-range" variable (:default-value 10000) nil [3838 4165])
            ("hi-lock-highlight-range" variable (:default-value 200000) nil [4167 4622])
            ("hi-lock-exclude-modes" variable (:default-value (quote (rmail-mode mime/viewer-mode gnus-article-mode))) nil [4624 4880])
            ("hi-lock-file-patterns-policy" variable (:default-value (quote ask)) nil [4882 5438])
            ("put" code nil nil [5473 5532])
            ("hi-lock-auto-select-face" variable nil nil [5534 5771])
            ("hi-lock-faces" customgroup (:user-visible-flag t) nil [5773 5858])
            ("hi-yellow" variable
               (:default-value (quote ((((min-colors 88) (background dark)) (:background "yellow1" :foreground "black")) (((background dark)) (:background "yellow" :foreground "black")) (((min-colors 88)) (:background "yellow1")) (t (:background "yellow"))))
                :type "face")
                nil [5860 6178])
            ("hi-pink" variable
               (:default-value (quote ((((background dark)) (:background "pink" :foreground "black")) (t (:background "pink"))))
                :type "face")
                nil [6180 6345])
            ("hi-green" variable
               (:default-value (quote ((((min-colors 88) (background dark)) (:background "light green" :foreground "black")) (((background dark)) (:background "green" :foreground "black")) (((min-colors 88)) (:background "light green")) (t (:background "green"))))
                :type "face")
                nil [6347 6662])
            ("hi-blue" variable
               (:default-value (quote ((((background dark)) (:background "light blue" :foreground "black")) (t (:background "light blue"))))
                :type "face")
                nil [6664 6841])
            ("hi-black-b" variable
               (:default-value (quote ((t (:weight bold))))
                :type "face")
                nil [6843 6938])
            ("hi-blue-b" variable
               (:default-value (quote ((((min-colors 88)) (:weight bold :foreground "blue1")) (t (:weight bold :foreground "blue"))))
                :type "face")
                nil [6940 7112])
            ("hi-green-b" variable
               (:default-value (quote ((((min-colors 88)) (:weight bold :foreground "green1")) (t (:weight bold :foreground "green"))))
                :type "face")
                nil [7114 7289])
            ("hi-red-b" variable
               (:default-value (quote ((((min-colors 88)) (:weight bold :foreground "red1")) (t (:weight bold :foreground "red"))))
                :type "face")
                nil [7291 7460])
            ("hi-black-hb" variable
               (:default-value (quote ((t (:weight bold :height 1.67 :inherit variable-pitch))))
                :type "face")
                nil [7462 7595])
            ("defvar-local" code nil nil [7597 7701])
            ("put" code nil nil [7702 7749])
            ("defvar-local" code nil nil [7751 7864])
            ("put" code nil nil [7865 7919])
            ("define-obsolete-variable-alias" code nil nil [7921 8037])
            ("hi-lock-face-defaults" variable (:default-value (quote ("hi-yellow" "hi-pink" "hi-green" "hi-blue" "hi-black-b" "hi-blue-b" "hi-red-b" "hi-green-b" "hi-black-hb"))) nil [8038 8236])
            ("define-obsolete-variable-alias" code nil nil [8238 8381])
            ("hi-lock-file-patterns-prefix" variable (:default-value "Hi-lock") nil [8383 8493])
            ("hi-lock-archaic-interface-message-used" variable nil nil [8495 8835])
            ("hi-lock-archaic-interface-deduce" variable nil nil [8837 9063])
            ("hi-lock-menu" variable (:default-value (let ((map (make-sparse-keymap "Hi Lock"))) (define-key-after map [highlight-regexp] (quote (menu-item "Highlight Regexp..." highlight-regexp :help "Highlight text matching PATTERN (a regexp)."))) (define-key-after map [highlight-phrase] (quote (menu-item "Highlight Phrase..." highlight-phrase :help "Highlight text matching PATTERN (a regexp processed to match phrases)."))) (define-key-after map [highlight-lines-matching-regexp] (quote (menu-item "Highlight Lines..." highlight-lines-matching-regexp :help "Highlight lines containing match of PATTERN (a regexp)."))) (define-key-after map [highlight-symbol-at-point] (quote (menu-item "Highlight Symbol at Point" highlight-symbol-at-point :help "Highlight symbol found near point without prompting."))) (define-key-after map [unhighlight-regexp] (quote (menu-item "Remove Highlighting..." unhighlight-regexp :help "Remove previously entered highlighting pattern." :enable hi-lock-interactive-patterns))) (define-key-after map [hi-lock-write-interactive-patterns] (quote (menu-item "Patterns to Buffer" hi-lock-write-interactive-patterns :help "Insert interactively added REGEXPs into buffer at point." :enable hi-lock-interactive-patterns))) (define-key-after map [hi-lock-find-patterns] (quote (menu-item "Patterns from Buffer" hi-lock-find-patterns :help "Use patterns (if any) near top of buffer."))) map)) nil [9065 10581])
            ("hi-lock-map" variable (:default-value (let ((map (make-sparse-keymap "Hi Lock"))) (define-key map "wi" (quote hi-lock-find-patterns)) (define-key map "wl" (quote highlight-lines-matching-regexp)) (define-key map "wp" (quote highlight-phrase)) (define-key map "wh" (quote highlight-regexp)) (define-key map "w." (quote highlight-symbol-at-point)) (define-key map "wr" (quote unhighlight-regexp)) (define-key map "wb" (quote hi-lock-write-interactive-patterns)) map)) nil [10583 11068])
            ("define-minor-mode" code nil nil [11107 15704])
            ("define-globalized-minor-mode" code nil nil [15721 15831])
            ("turn-on-hi-lock-if-enabled" function nil nil [15833 15992])
            ("defalias" code nil nil [16009 16078])
            ("hi-lock-line-face-buffer" function
               (:user-visible-flag t
                :arguments ("regexp" "face"))
                nil [16094 16923])
            ("defalias" code nil nil [16941 16990])
            ("hi-lock-face-buffer" function
               (:user-visible-flag t
                :arguments ("regexp" "face"))
                nil [17006 17635])
            ("defalias" code nil nil [17652 17708])
            ("hi-lock-face-phrase-buffer" function
               (:user-visible-flag t
                :arguments ("regexp" "face"))
                nil [17724 18598])
            ("defalias" code nil nil [18615 18682])
            ("hi-lock-face-symbol-at-point" function (:user-visible-flag t) nil [18698 19385])
            ("hi-lock-keyword->face" function (:arguments ("keyword")) nil [19387 19457])
            ("declare-function" code nil nil [19507 19563])
            ("hi-lock--regexps-at-point" function nil nil [19565 21210])
            ("defvar-local" code nil nil [21212 21392])
            ("defalias" code nil nil [21409 21462])
            ("hi-lock-unface-buffer" function
               (:user-visible-flag t
                :arguments ("regexp"))
                nil [21478 24549])
            ("hi-lock-write-interactive-patterns" function (:user-visible-flag t) nil [24566 25324])
            ("hi-lock-process-phrase" function (:arguments ("phrase")) nil [25355 26150])
            ("hi-lock-regexp-okay" function (:arguments ("regexp")) nil [26152 26499])
            ("hi-lock-read-face-name" function nil nil [26501 27655])
            ("hi-lock-set-pattern" function (:arguments ("regexp" "face")) nil [27657 29067])
            ("hi-lock-set-file-patterns" function (:arguments ("patterns")) nil [29069 29397])
            ("hi-lock-find-patterns" function (:user-visible-flag t) nil [29399 30827])
            ("hi-lock-font-lock-hook" function nil nil [30829 31053])
            ("hi-lock--hashcons-hash" variable (:default-value (make-hash-table :test (quote equal) :weakness t)) nil [31055 31173])
            ("hi-lock--hashcons" function (:arguments ("string")) nil [31175 31351])
            ("hi-lock-unload-function" function nil nil [31353 31485])
            ("hi-lock" package nil nil [31487 31505]))          
      :file "hi-lock.el.gz"
      :pointmax 31532
      :fsize 8726
      :lastmodtime '(22676 23208 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("feature-symbols" function (:arguments ("feature")) nil [1126 1477])
            ("feature-file" function (:arguments ("feature")) nil [1479 1923])
            ("file-loadhist-lookup" function (:arguments ("file")) nil [1925 2479])
            ("file-provides" function (:arguments ("file")) nil [2481 2836])
            ("file-requires" function (:arguments ("file")) nil [2838 3193])
            ("file-set-intersect" function (:arguments ("p" "q")) nil [3195 3350])
            ("file-dependents" function (:arguments ("file")) nil [3352 3790])
            ("read-feature" function (:arguments ("prompt" "loaded-p")) nil [3792 4320])
            ("defvaralias" code nil nil [4322 4390])
            ("unload-feature-special-hooks" variable (:default-value (quote (after-change-functions after-insert-file-functions after-make-frame-functions auto-coding-functions auto-fill-function before-change-functions blink-paren-function buffer-access-fontify-functions choose-completion-string-functions comint-output-filter-functions command-line-functions comment-indent-function compilation-finish-functions delete-frame-functions disabled-command-function fill-nobreak-predicate find-directory-functions find-file-not-found-functions font-lock-fontify-buffer-function font-lock-fontify-region-function font-lock-mark-block-function font-lock-syntactic-face-function font-lock-unfontify-buffer-function font-lock-unfontify-region-function kill-buffer-query-functions kill-emacs-query-functions lisp-indent-function mouse-position-function redisplay-end-trigger-functions suspend-tty-functions temp-buffer-show-function window-scroll-functions window-size-change-functions write-contents-functions write-file-functions write-region-annotate-functions))) nil [4391 5719])
            ("define-obsolete-variable-alias" code nil nil [5721 5818])
            ("unload-function-defs-list" variable nil nil [5819 6028])
            ("unload--set-major-mode" function nil nil [6030 6663])
            ("unload-feature" function
               (:user-visible-flag t
                :arguments ("feature" "force"))
                nil [6680 12030])
            ("loadhist" package nil nil [12032 12051]))          
      :file "loadhist.el.gz"
      :pointmax 12079
      :fsize 4265
      :lastmodtime '(22676 23208 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("font-lock-keywords" variable nil nil [1117 1144])
            ("backup" customgroup (:user-visible-flag t) nil [1146 1217])
            ("find-file" customgroup (:user-visible-flag t) nil [1219 1278])
            ("delete-auto-save-files" variable (:default-value t) nil [1281 1531])
            ("directory-abbrev-alist" variable nil nil [1533 2545])
            ("make-backup-files" variable (:default-value t) nil [2547 3470])
            ("backup-inhibited" variable nil nil [3571 3763])
            ("put" code nil nil [3764 3806])
            ("backup-by-copying" variable nil nil [3808 3986])
            ("backup-by-copying-when-linked" variable nil nil [3988 4281])
            ("backup-by-copying-when-mismatch" variable (:default-value t) nil [4283 4771])
            ("put" code nil nil [4772 4829])
            ("backup-by-copying-when-privileged-mismatch" variable (:default-value 200) nil [4831 5454])
            ("backup-enable-predicate" variable (:default-value (quote normal-backup-enable-predicate)) nil [5456 5675])
            ("buffer-offer-save" variable nil nil [5677 5896])
            ("make-variable-buffer-local" code nil nil [5897 5944])
            ("put" code nil nil [5945 5988])
            ("find-file-existing-other-name" variable (:default-value t) nil [5990 6283])
            ("find-file-visit-truename" variable nil nil [6285 6657])
            ("put" code nil nil [6658 6720])
            ("revert-without-query" variable nil nil [6722 7087])
            ("buffer-file-number" variable nil nil [7089 7358])
            ("make-variable-buffer-local" code nil nil [7359 7407])
            ("put" code nil nil [7408 7452])
            ("buffer-file-numbers-unique" variable (:default-value (not (memq system-type (quote (windows-nt))))) nil [7454 7599])
            ("buffer-file-read-only" variable nil nil [7601 7691])
            ("make-variable-buffer-local" code nil nil [7692 7743])
            ("small-temporary-file-directory" variable (:default-value (if (eq system-type (quote ms-dos)) (getenv "TMPDIR"))) nil [7745 8189])
            ("null-device" variable (:default-value (purecopy "/dev/null")) nil [8257 8326])
            ("declare-function" code nil nil [8328 8378])
            ("declare-function" code nil nil [8379 8428])
            ("declare-function" code nil nil [8429 8515])
            ("declare-function" code nil nil [8516 8583])
            ("declare-function" code nil nil [8584 8656])
            ("declare-function" code nil nil [8657 8713])
            ("declare-function" code nil nil [8714 8773])
            ("file-name-invalid-regexp" variable (:default-value (cond ((and (eq system-type (quote ms-dos)) (not (msdos-long-file-names))) (purecopy (concat "^\\([^A-Z[-`a-z]\\|..+\\)?:\\|" "[+, ;=|<>\"?*]\\|\\[\\|\\]\\|" "[ -]\\|" "\\(/\\.\\.?[^/]\\)\\|" "\\(/[^/.]+\\.[^/.]*\\.\\)"))) ((memq system-type (quote (ms-dos windows-nt cygwin))) (purecopy (concat "^\\([^A-Z[-`a-z]\\|..+\\)?:\\|" "[|<>\"?* -]"))) (t (purecopy "[ ]")))) nil [8775 9448])
            ("file-precious-flag" variable nil nil [9450 10290])
            ("break-hardlink-on-save" variable nil nil [10292 11047])
            ("version-control" variable nil nil [11049 11419])
            ("put" code nil nil [11420 11516])
            ("dired-kept-versions" variable (:default-value 2) nil [11518 11658])
            ("delete-old-versions" variable nil nil [11660 11926])
            ("kept-old-versions" variable (:default-value 2) nil [11928 12067])
            ("put" code nil nil [12068 12123])
            ("kept-new-versions" variable (:default-value 2) nil [12125 12302])
            ("put" code nil nil [12303 12358])
            ("require-final-newline" variable nil nil [12360 13131])
            ("mode-require-final-newline" variable (:default-value t) nil [13133 14268])
            ("auto-save-default" variable (:default-value t) nil [14270 14412])
            ("auto-save-file-name-transforms" variable (:default-value (\` (("\\`/[^/]*:\\([^/]*/\\)*\\([^/]*\\)\\'" (\, (concat temporary-file-directory "\\2")) t)))) nil [14414 15842])
            ("save-abbrevs" variable (:default-value t) nil [15844 16055])
            ("find-file-run-dired" variable (:default-value t) nil [16057 16254])
            ("find-directory-functions" variable (:default-value (quote (cvs-dired-noselect dired-noselect))) nil [16256 16584])
            ("file-name-at-point-functions" variable (:default-value (quote (ffap-guess-file-name-at-point))) nil [16645 16973])
            ("define-obsolete-variable-alias" code nil nil [17081 17182])
            ("find-file-not-found-functions" variable nil nil [17183 17484])
            ("define-obsolete-variable-alias" code nil nil [17582 17654])
            ("find-file-hook" variable nil nil [17655 17932])
            ("define-obsolete-variable-alias" code nil nil [17934 18013])
            ("write-file-functions" variable nil nil [18014 18818])
            ("put" code nil nil [18819 18865])
            ("local-write-file-hooks" variable nil nil [18867 18902])
            ("make-variable-buffer-local" code nil nil [18903 18955])
            ("put" code nil nil [18956 19004])
            ("make-obsolete-variable" code nil nil [19005 19082])
            ("define-obsolete-variable-alias" code nil nil [19084 19175])
            ("write-contents-functions" variable nil nil [19176 19960])
            ("make-variable-buffer-local" code nil nil [19961 20015])
            ("enable-local-variables" variable (:default-value t) nil [20017 21269])
            ("enable-dir-local-variables" variable (:default-value t) nil [21271 21492])
            ("local-enable-local-variables" variable (:default-value t) nil [22855 23240])
            ("enable-local-eval" variable (:default-value (quote maybe)) nil [23242 23633])
            ("view-read-only" variable nil nil [23635 23985])
            ("file-name-history" variable nil nil [23987 24170])
            ("save-silently" variable nil nil [24172 24327])
            ("put" code nil nil [24331 24385])
            ("ange-ftp-completion-hook-function" function (:arguments ("op" "args")) nil [24386 24992])
            ("declare-function" code nil nil [24994 25066])
            ("declare-function" code nil nil [25067 25139])
            ("convert-standard-filename" function (:arguments ("filename")) nil [25141 26394])
            ("read-directory-name" function (:arguments ("prompt" "dir" "default-dirname" "mustmatch" "initial")) nil [26396 27517])
            ("pwd" function
               (:user-visible-flag t
                :arguments ("insert"))
                nil [27521 27789])
            ("cd-path" variable nil nil [27791 27921])
            ("parse-colon-path" function (:arguments ("search-path")) nil [27923 28542])
            ("cd-absolute" function (:arguments ("dir")) nil [28544 29449])
            ("cd" function
               (:user-visible-flag t
                :arguments ("dir"))
                nil [29451 31278])
            ("directory-name-p" function (:arguments ("name")) nil [31280 31597])
            ("directory-files-recursively" function (:arguments ("dir" "regexp" "include-directories")) nil [31599 32994])
            ("module-file-suffix" variable nil nil [32996 33023])
            ("load-file" function
               (:user-visible-flag t
                :arguments ("file"))
                nil [33025 33493])
            ("locate-file" function (:arguments ("filename" "path" "suffixes" "predicate")) nil [33495 34872])
            ("locate-file-completion-table" function (:arguments ("dirs" "suffixes" "string" "pred" "action")) nil [34874 37836])
            ("locate-file-completion" function (:arguments ("string" "path-and-suffixes" "action")) nil [37838 38246])
            ("locate-dominating-stop-dir-regexp" variable (:default-value (purecopy "\\`\\(?:[\\/][\\/][^\\/]+[\\/]\\|/\\(?:net\\|afs\\|\\.\\.\\.\\)/\\)\\'")) nil [38248 38852])
            ("locate-dominating-file" function (:arguments ("file" "name")) nil [40405 42613])
            ("user-emacs-directory-warning" variable (:default-value t) nil [42615 42817])
            ("locate-user-emacs-file" function (:arguments ("new-name" "old-name")) nil [42819 44505])
            ("executable-find" function (:arguments ("command")) nil [44508 44816])
            ("load-library" function
               (:user-visible-flag t
                :arguments ("library"))
                nil [44818 45513])
            ("file-remote-p" function (:arguments ("file" "identification" "connected")) nil [45515 47267])
            ("remote-shell-program" variable (:default-value (purecopy (let ((list (quote ("ssh" "remsh" "rcmd" "rsh")))) (while (and list (not (executable-find (car list))) (setq list (cdr list)))) (or (car list) "ssh")))) nil [47566 48285])
            ("remote-file-name-inhibit-cache" variable (:default-value 10) nil [48287 49506])
            ("file-local-copy" function (:arguments ("file")) nil [49508 49897])
            ("file-truename" function (:arguments ("filename" "counter" "prev-dirs")) nil [49899 54795])
            ("file-chase-links" function (:arguments ("filename" "limit")) nil [54797 56200])
            ("file-size-human-readable" function (:arguments ("file-size" "flavor")) nil [56332 57449])
            ("make-temp-file" function (:arguments ("prefix" "dir-flag" "suffix")) nil [57451 58753])
            ("recode-file-name" function
               (:user-visible-flag t
                :arguments ("file" "coding" "new-coding" "ok-if-already-exists"))
                nil [58755 60992])
            ("confirm-nonexistent-file-or-buffer" variable (:default-value (quote after-completion)) nil [60995 61608])
            ("confirm-nonexistent-file-or-buffer" function nil nil [61610 62051])
            ("minibuffer-with-setup-hook" function (:arguments ("fun" "body")) nil [62053 63296])
            ("find-file-read-args" function (:arguments ("prompt" "mustmatch")) nil [63298 63412])
            ("find-file" function
               (:user-visible-flag t
                :arguments ("filename" "wildcards"))
                nil [63414 64659])
            ("find-file-other-window" function
               (:user-visible-flag t
                :arguments ("filename" "wildcards"))
                nil [64661 65592])
            ("find-file-other-frame" function
               (:user-visible-flag t
                :arguments ("filename" "wildcards"))
                nil [65594 66519])
            ("find-file-existing" function
               (:user-visible-flag t
                :arguments ("filename"))
                nil [66521 66956])
            ("find-file--read-only" function (:arguments ("fun" "filename" "wildcards")) nil [66958 67385])
            ("find-file-read-only" function
               (:user-visible-flag t
                :arguments ("filename" "wildcards"))
                nil [67387 67768])
            ("find-file-read-only-other-window" function
               (:user-visible-flag t
                :arguments ("filename" "wildcards"))
                nil [67770 68221])
            ("find-file-read-only-other-frame" function
               (:user-visible-flag t
                :arguments ("filename" "wildcards"))
                nil [68223 68669])
            ("find-alternate-file-other-window" function
               (:user-visible-flag t
                :arguments ("filename" "wildcards"))
                nil [68671 69620])
            ("kill-buffer-hook" variable nil nil [69681 69921])
            ("find-alternate-file" function
               (:user-visible-flag t
                :arguments ("filename" "wildcards"))
                nil [69923 72976])
            ("create-file-buffer" function (:arguments ("filename")) nil [73101 73781])
            ("generate-new-buffer" function (:arguments ("name")) nil [73783 73988])
            ("automount-dir-prefix" variable (:default-value (purecopy "^/tmp_mnt/")) nil [73990 74142])
            ("make-obsolete-variable" code nil nil [74143 74220])
            ("abbreviated-home-dir" variable nil nil [74222 74396])
            ("abbreviate-file-name" function (:arguments ("filename")) nil [74398 77697])
            ("find-buffer-visiting" function (:arguments ("filename" "predicate")) nil [77699 79626])
            ("find-file-wildcards" variable (:default-value t) nil [79629 79876])
            ("find-file-suppress-same-file-warnings" variable nil nil [79878 80204])
            ("large-file-warning-threshold" variable (:default-value 10000000) nil [80206 80485])
            ("out-of-memory-warning-percentage" variable nil nil [80487 80870])
            ("abort-if-file-too-large" function (:arguments ("size" "op-type" "filename")) nil [80872 81364])
            ("warn-maybe-out-of-memory" function (:arguments ("size")) nil [81366 82204])
            ("files--message" function (:arguments ("format" "args")) nil [82206 82473])
            ("find-file-noselect" function (:arguments ("filename" "nowarn" "rawfile" "wildcards")) nil [82475 89545])
            ("find-file-noselect-1" function (:arguments ("buf" "filename" "nowarn" "rawfile" "truename" "number")) nil [89547 92041])
            ("insert-file-contents-literally" function (:arguments ("filename" "visit" "beg" "end" "replace")) nil [92044 93065])
            ("insert-file-1" function (:arguments ("filename" "insert-func")) nil [93067 93759])
            ("insert-file-literally" function (:arguments ("filename")) nil [93761 94244])
            ("find-file-literally" variable nil nil [94246 94453])
            ("put" code nil nil [94454 94499])
            ("find-file-literally" function
               (:user-visible-flag t
                :arguments ("filename"))
                nil [94501 95595])
            ("after-find-file" function (:arguments ("error" "warn" "noauto" "_after-find-file-from-revert-buffer" "nomodes")) nil [95598 98938])
            ("define-obsolete-function-alias" code nil nil [98940 99015])
            ("normal-mode" function
               (:user-visible-flag t
                :arguments ("find-file"))
                nil [99017 100638])
            ("auto-mode-case-fold" variable (:default-value t) nil [100640 101078])
            ("auto-mode-alist" variable (:default-value (mapcar (lambda (elt) (cons (purecopy (car elt)) (cdr elt))) (\` (("\\.[sx]?html?\\(\\.[a-zA-Z_]+\\)?\\'" . html-mode) ("\\.svgz?\\'" . image-mode) ("\\.svgz?\\'" . xml-mode) ("\\.x[bp]m\\'" . image-mode) ("\\.x[bp]m\\'" . c-mode) ("\\.p[bpgn]m\\'" . image-mode) ("\\.tiff?\\'" . image-mode) ("\\.gif\\'" . image-mode) ("\\.png\\'" . image-mode) ("\\.jpe?g\\'" . image-mode) ("\\.te?xt\\'" . text-mode) ("\\.[tT]e[xX]\\'" . tex-mode) ("\\.ins\\'" . tex-mode) ("\\.ltx\\'" . latex-mode) ("\\.dtx\\'" . doctex-mode) ("\\.org\\'" . org-mode) ("\\.el\\'" . emacs-lisp-mode) ("Project\\.ede\\'" . emacs-lisp-mode) ("\\.\\(scm\\|stk\\|ss\\|sch\\)\\'" . scheme-mode) ("\\.l\\'" . lisp-mode) ("\\.li?sp\\'" . lisp-mode) ("\\.[fF]\\'" . fortran-mode) ("\\.for\\'" . fortran-mode) ("\\.p\\'" . pascal-mode) ("\\.pas\\'" . pascal-mode) ("\\.\\(dpr\\|DPR\\)\\'" . delphi-mode) ("\\.ad[abs]\\'" . ada-mode) ("\\.ad[bs].dg\\'" . ada-mode) ("\\.\\([pP]\\([Llm]\\|erl\\|od\\)\\|al\\)\\'" . perl-mode) ("Imakefile\\'" . makefile-imake-mode) ("Makeppfile\\(?:\\.mk\\)?\\'" . makefile-makepp-mode) ("\\.makepp\\'" . makefile-makepp-mode) (\,@ (if (memq system-type (quote (berkeley-unix darwin))) (quote (("\\.mk\\'" . makefile-bsdmake-mode) ("\\.make\\'" . makefile-bsdmake-mode) ("GNUmakefile\\'" . makefile-gmake-mode) ("[Mm]akefile\\'" . makefile-bsdmake-mode))) (quote (("\\.mk\\'" . makefile-gmake-mode) ("\\.make\\'" . makefile-gmake-mode) ("[Mm]akefile\\'" . makefile-gmake-mode))))) ("\\.am\\'" . makefile-automake-mode) ("\\.texinfo\\'" . texinfo-mode) ("\\.te?xi\\'" . texinfo-mode) ("\\.[sS]\\'" . asm-mode) ("\\.asm\\'" . asm-mode) ("\\.css\\'" . css-mode) ("\\.mixal\\'" . mixal-mode) ("\\.gcov\\'" . compilation-mode) ("/\\.[a-z0-9-]*gdbinit" . gdb-script-mode) ("-gdb\\.gdb" . gdb-script-mode) ("[cC]hange\\.?[lL]og?\\'" . change-log-mode) ("[cC]hange[lL]og[-.][0-9]+\\'" . change-log-mode) ("\\$CHANGE_LOG\\$\\.TXT" . change-log-mode) ("\\.scm\\.[0-9]*\\'" . scheme-mode) ("\\.[ckz]?sh\\'\\|\\.shar\\'\\|/\\.z?profile\\'" . sh-mode) ("\\.bash\\'" . sh-mode) ("\\(/\\|\\`\\)\\.\\(bash_\\(profile\\|history\\|log\\(in\\|out\\)\\)\\|z?log\\(in\\|out\\)\\)\\'" . sh-mode) ("\\(/\\|\\`\\)\\.\\(shrc\\|[kz]shrc\\|bashrc\\|t?cshrc\\|esrc\\)\\'" . sh-mode) ("\\(/\\|\\`\\)\\.\\([kz]shenv\\|xinitrc\\|startxrc\\|xsession\\)\\'" . sh-mode) ("\\.m?spec\\'" . sh-mode) ("\\.m[mes]\\'" . nroff-mode) ("\\.man\\'" . nroff-mode) ("\\.sty\\'" . latex-mode) ("\\.cl[so]\\'" . latex-mode) ("\\.bbl\\'" . latex-mode) ("\\.bib\\'" . bibtex-mode) ("\\.bst\\'" . bibtex-style-mode) ("\\.sql\\'" . sql-mode) ("\\.m[4c]\\'" . m4-mode) ("\\.mf\\'" . metafont-mode) ("\\.mp\\'" . metapost-mode) ("\\.vhdl?\\'" . vhdl-mode) ("\\.article\\'" . text-mode) ("\\.letter\\'" . text-mode) ("\\.i?tcl\\'" . tcl-mode) ("\\.exp\\'" . tcl-mode) ("\\.itk\\'" . tcl-mode) ("\\.icn\\'" . icon-mode) ("\\.sim\\'" . simula-mode) ("\\.mss\\'" . scribe-mode) ("\\.f9[05]\\'" . f90-mode) ("\\.f0[38]\\'" . f90-mode) ("\\.indent\\.pro\\'" . fundamental-mode) ("\\.\\(pro\\|PRO\\)\\'" . idlwave-mode) ("\\.srt\\'" . srecode-template-mode) ("\\.prolog\\'" . prolog-mode) ("\\.tar\\'" . tar-mode) ("\\.\\(arc\\|zip\\|lzh\\|lha\\|zoo\\|[jew]ar\\|xpi\\|rar\\|7z\\|ARC\\|ZIP\\|LZH\\|LHA\\|ZOO\\|[JEW]AR\\|XPI\\|RAR\\|7Z\\)\\'" . archive-mode) ("\\.oxt\\'" . archive-mode) ("\\.\\(deb\\|[oi]pk\\)\\'" . archive-mode) ("\\`/tmp/Re" . text-mode) ("/Message[0-9]*\\'" . text-mode) ("\\`/tmp/fol/" . text-mode) ("\\.oak\\'" . scheme-mode) ("\\.sgml?\\'" . sgml-mode) ("\\.x[ms]l\\'" . xml-mode) ("\\.dbk\\'" . xml-mode) ("\\.dtd\\'" . sgml-mode) ("\\.ds\\(ss\\)?l\\'" . dsssl-mode) ("\\.jsm?\\'" . javascript-mode) ("\\.json\\'" . javascript-mode) ("\\.[ds]?vh?\\'" . verilog-mode) ("\\.by\\'" . bovine-grammar-mode) ("\\.wy\\'" . wisent-grammar-mode) ("[:/\\]\\..*\\(emacs\\|gnus\\|viper\\)\\'" . emacs-lisp-mode) ("\\`\\..*emacs\\'" . emacs-lisp-mode) ("[:/]_emacs\\'" . emacs-lisp-mode) ("/crontab\\.X*[0-9]+\\'" . shell-script-mode) ("\\.ml\\'" . lisp-mode) ("\\.ld[si]?\\'" . ld-script-mode) ("ld\\.?script\\'" . ld-script-mode) ("\\.xs\\'" . c-mode) ("\\.x[abdsru]?[cnw]?\\'" . ld-script-mode) ("\\.zone\\'" . dns-mode) ("\\.soa\\'" . dns-mode) ("\\.asd\\'" . lisp-mode) ("\\.\\(asn\\|mib\\|smi\\)\\'" . snmp-mode) ("\\.\\(as\\|mi\\|sm\\)2\\'" . snmpv2-mode) ("\\.\\(diffs?\\|patch\\|rej\\)\\'" . diff-mode) ("\\.\\(dif\\|pat\\)\\'" . diff-mode) ("\\.[eE]?[pP][sS]\\'" . ps-mode) ("\\.\\(?:PDF\\|DVI\\|OD[FGPST]\\|DOCX?\\|XLSX?\\|PPTX?\\|pdf\\|djvu\\|dvi\\|od[fgpst]\\|docx?\\|xlsx?\\|pptx?\\)\\'" . doc-view-mode-maybe) ("configure\\.\\(ac\\|in\\)\\'" . autoconf-mode) ("\\.s\\(v\\|iv\\|ieve\\)\\'" . sieve-mode) ("BROWSE\\'" . ebrowse-tree-mode) ("\\.ebrowse\\'" . ebrowse-tree-mode) ("#\\*mail\\*" . mail-mode) ("\\.g\\'" . antlr-mode) ("\\.mod\\'" . m2-mode) ("\\.ses\\'" . ses-mode) ("\\.docbook\\'" . sgml-mode) ("\\.com\\'" . dcl-mode) ("/config\\.\\(?:bat\\|log\\)\\'" . fundamental-mode) ("\\.\\(?:[iI][nN][iI]\\|[lL][sS][tT]\\|[rR][eE][gG]\\|[sS][yY][sS]\\)\\'" . conf-mode) ("\\.\\(?:desktop\\|la\\)\\'" . conf-unix-mode) ("\\.ppd\\'" . conf-ppd-mode) ("java.+\\.conf\\'" . conf-javaprop-mode) ("\\.properties\\(?:\\.[a-zA-Z0-9._-]+\\)?\\'" . conf-javaprop-mode) ("\\`/etc/\\(?:DIR_COLORS\\|ethers\\|.?fstab\\|.*hosts\\|lesskey\\|login\\.?de\\(?:fs\\|vperm\\)\\|magic\\|mtab\\|pam\\.d/.*\\|permissions\\(?:\\.d/.+\\)?\\|protocols\\|rpc\\|services\\)\\'" . conf-space-mode) ("\\`/etc/\\(?:acpid?/.+\\|aliases\\(?:\\.d/.+\\)?\\|default/.+\\|group-?\\|hosts\\..+\\|inittab\\|ksysguarddrc\\|opera6rc\\|passwd-?\\|shadow-?\\|sysconfig/.+\\)\\'" . conf-mode) ("[cC]hange[lL]og[-.][-0-9a-z]+\\'" . change-log-mode) ("/\\.?\\(?:gitconfig\\|gnokiirc\\|hgrc\\|kde.*rc\\|mime\\.types\\|wgetrc\\)\\'" . conf-mode) ("/\\.\\(?:enigma\\|gltron\\|gtk\\|hxplayer\\|net\\|neverball\\|qt/.+\\|realplayer\\|scummvm\\|sversion\\|sylpheed/.+\\|xmp\\)rc\\'" . conf-mode) ("/\\.\\(?:gdbtkinit\\|grip\\|orbital/.+txt\\|rhosts\\|tuxracer/options\\)\\'" . conf-mode) ("/\\.?X\\(?:default\\|resource\\|re\\)s\\>" . conf-xdefaults-mode) ("/X11.+app-defaults/\\|\\.ad\\'" . conf-xdefaults-mode) ("/X11.+locale/.+/Compose\\'" . conf-colon-mode) ("/X11.+locale/compose\\.dir\\'" . conf-javaprop-mode) ("\\.~?[0-9]+\\.[0-9][-.0-9]*~?\\'" nil t) ("\\.\\(?:orig\\|in\\|[bB][aA][kK]\\)\\'" nil t) ("[/.]c\\(?:on\\)?f\\(?:i?g\\)?\\(?:\\.[a-zA-Z0-9._-]+\\)?\\'" . conf-mode-maybe) ("\\.[1-9]\\'" . nroff-mode))))) nil [101080 112489])
            ("put" code nil nil [112490 112536])
            ("conf-mode-maybe" function nil nil [112538 112788])
            ("interpreter-mode-alist" variable (:default-value (mapcar (lambda (l) (cons (purecopy (car l)) (cdr l))) (quote (("\\(mini\\)?perl5?" . perl-mode) ("wishx?" . tcl-mode) ("tcl\\(sh\\)?" . tcl-mode) ("expect" . tcl-mode) ("octave" . octave-mode) ("scm" . scheme-mode) ("[acjkwz]sh" . sh-mode) ("r?bash2?" . sh-mode) ("dash" . sh-mode) ("mksh" . sh-mode) ("\\(dt\\|pd\\|w\\)ksh" . sh-mode) ("es" . sh-mode) ("i?tcsh" . sh-mode) ("oash" . sh-mode) ("rc" . sh-mode) ("rpm" . sh-mode) ("sh5?" . sh-mode) ("tail" . text-mode) ("more" . text-mode) ("less" . text-mode) ("pg" . text-mode) ("make" . makefile-gmake-mode) ("guile" . scheme-mode) ("clisp" . lisp-mode) ("emacs" . emacs-lisp-mode))))) nil [112790 114185])
            ("define-obsolete-variable-alias" code nil nil [114187 114300])
            ("inhibit-local-variables-regexps" variable (:default-value (mapcar (quote purecopy) (quote ("\\.tar\\'" "\\.t[bg]z\\'" "\\.arc\\'" "\\.zip\\'" "\\.lzh\\'" "\\.lha\\'" "\\.zoo\\'" "\\.[jew]ar\\'" "\\.xpi\\'" "\\.rar\\'" "\\.7z\\'" "\\.sx[dmicw]\\'" "\\.odt\\'" "\\.diff\\'" "\\.patch\\'" "\\.tiff?\\'" "\\.gif\\'" "\\.png\\'" "\\.jpe?g\\'")))) nil [114499 115359])
            ("define-obsolete-variable-alias" code nil nil [115361 115471])
            ("inhibit-local-variables-suffixes" variable nil nil [115473 115749])
            ("inhibit-local-variables-ignore-case" variable (:default-value t) nil [115821 115927])
            ("inhibit-local-variables-p" function nil nil [115929 116739])
            ("auto-mode-interpreter-regexp" variable (:default-value (purecopy "#![ 	]?\\([^ 	
]*/bin/env[ 	]\\)?\\([^ 	
]+\\)")) nil [116741 117259])
            ("magic-mode-alist" variable nil nil [117261 117795])
            ("put" code nil nil [117796 117843])
            ("magic-fallback-mode-alist" variable (:default-value (purecopy (\` ((image-type-auto-detected-p . image-mode) ("\\(PK00\\)?[P]K" . archive-mode) ((\, (let* ((incomment-re "\\(?:[^-]\\|-[^-]\\)") (comment-re (concat "\\(?:!--" incomment-re "*-->[ 	
]*<\\)"))) (concat "\\(?:<\\?xml[ 	
]+[^>]*>\\)?[ 	
]*<" comment-re "*" "\\(?:!DOCTYPE[ 	
]+[^>]*>[ 	
]*<[ 	
]*" comment-re "*\\)?" "[Hh][Tt][Mm][Ll]"))) . html-mode) ("<!DOCTYPE[ 	
]+[Hh][Tt][Mm][Ll]" . html-mode) ("<\\?xml " . xml-mode) ((\, (let* ((incomment-re "\\(?:[^-]\\|-[^-]\\)") (comment-re (concat "\\(?:!--" incomment-re "*-->[ 	
]*<\\)"))) (concat "[ 	
]*<" comment-re "*!DOCTYPE "))) . sgml-mode) ("%!PS" . ps-mode) ("# xmcd " . conf-unix-mode))))) nil [117845 119386])
            ("put" code nil nil [119387 119443])
            ("magic-mode-regexp-match-limit" variable (:default-value 4000) nil [119445 119587])
            ("set-auto-mode" function (:arguments ("keep-mode-if-same")) nil [119589 126017])
            ("set-auto-mode-0" function (:arguments ("mode" "keep-mode-if-same")) nil [126270 126677])
            ("file-auto-mode-skip" variable (:default-value "^\\(#!\\|'\\\\\"\\)") nil [126679 126945])
            ("set-auto-mode-1" function nil nil [126947 128452])
            ("ignored-local-variables" variable (:default-value (quote (ignored-local-variables safe-local-variable-values file-local-variables-alist dir-local-variables-alist))) nil [128490 128696])
            ("put" code nil nil [128697 128751])
            ("hack-local-variables-hook" variable nil nil [128753 128986])
            ("safe-local-variable-values" variable nil nil [128988 129248])
            ("safe-local-eval-forms" variable (:default-value (quote ((add-hook (quote write-file-hooks) (quote time-stamp)) (add-hook (quote write-file-functions) (quote time-stamp)) (add-hook (quote before-save-hook) (quote time-stamp) nil t) (add-hook (quote before-save-hook) (quote delete-trailing-whitespace) nil t)))) nil [129250 129912])
            ("mapc" code nil nil [129940 130557])
            ("dolist" code nil nil [131199 131887])
            ("put" code nil nil [131889 132003])
            ("put" code nil nil [132005 132051])
            ("file-local-variables-alist" variable nil nil [132053 132408])
            ("make-variable-buffer-local" code nil nil [132409 132465])
            ("put" code nil nil [132466 132518])
            ("dir-local-variables-alist" variable nil nil [132520 132902])
            ("make-variable-buffer-local" code nil nil [132903 132958])
            ("before-hack-local-variables-hook" variable nil nil [132960 133378])
            ("hack-local-variables-confirm" function (:arguments ("all-vars" "unsafe-vars" "risky-vars" "dir-name")) nil [133380 136250])
            ("hack-local-variable-regexp" variable
               (:constant-flag t
                :default-value "[ 	]*\\([^][;\"'?()\\ 	
]+\\)[ 	]*:[ 	]*")
                nil [136252 136339])
            ("hack-local-variables-prop-line" function (:arguments ("mode-only")) nil [136341 138795])
            ("hack-local-variables-filter" function (:arguments ("variables" "dir-name")) nil [138797 141283])
            ("hack-local-variables--warned-lexical" variable nil nil [141344 141393])
            ("hack-local-variables" function (:arguments ("mode-only")) nil [141395 147633])
            ("hack-local-variables-apply" function nil nil [147635 148436])
            ("safe-local-variable-p" function (:arguments ("sym" "val")) nil [148438 149126])
            ("risky-local-variable-p" function (:arguments ("sym" "_ignored")) nil [149128 150031])
            ("hack-one-local-variable-quotep" function (:arguments ("exp")) nil [150033 150137])
            ("hack-one-local-variable-constantp" function (:arguments ("exp")) nil [150139 150327])
            ("hack-one-local-variable-eval-safep" function (:arguments ("exp")) nil [150329 152149])
            ("hack-one-local-variable--obsolete" function (:arguments ("var")) nil [152151 152583])
            ("hack-one-local-variable" function (:arguments ("var" "val")) nil [152585 153498])
            ("dir-locals-class-alist" variable (:default-value (quote nil)) nil [153564 153679])
            ("dir-locals-directory-cache" variable (:default-value (quote nil)) nil [153681 154257])
            ("dir-locals-get-class-variables" function (:arguments ("class")) nil [154259 154392])
            ("dir-locals-collect-mode-variables" function (:arguments ("mode-variables" "variables")) nil [154394 155039])
            ("dir-locals-collect-variables" function (:arguments ("class-variables" "root" "variables")) nil [155041 157133])
            ("dir-locals-set-directory-class" function (:arguments ("directory" "class" "mtime")) nil [157135 157899])
            ("dir-locals-set-class-variables" function (:arguments ("class" "variables")) nil [157901 159276])
            ("dir-locals-file" variable
               (:constant-flag t
                :default-value ".dir-locals.el")
                nil [159278 159460])
            ("dir-locals-find-file" function (:arguments ("file")) nil [159462 162478])
            ("dir-locals-read-from-file" function (:arguments ("file")) nil [162480 163323])
            ("enable-remote-dir-locals" variable nil nil [163325 163491])
            ("hack-dir-local-variables--warned-coding" variable nil nil [163493 163545])
            ("hack-dir-local-variables" function nil nil [163547 165203])
            ("hack-dir-local-variables-non-file-buffer" function nil nil [165205 165511])
            ("change-major-mode-with-file-name" variable (:default-value t) nil [165515 165950])
            ("set-visited-file-name" function
               (:user-visible-flag t
                :arguments ("filename" "no-query" "along-with-file"))
                nil [165952 171041])
            ("write-file" function
               (:user-visible-flag t
                :arguments ("filename" "confirm"))
                nil [171043 173108])
            ("file-extended-attributes" function (:arguments ("filename")) nil [173111 173425])
            ("set-file-extended-attributes" function (:arguments ("filename" "attributes")) nil [173427 174029])
            ("backup-buffer" function nil nil [174032 177655])
            ("backup-buffer-copy" function (:arguments ("from-name" "to-name" "modes" "extended-attributes")) nil [177657 178758])
            ("file-name-version-regexp" variable (:default-value "\\(?:~\\|\\.~[-[:alnum:]:#@^._]+\\(?:~[[:digit:]]+\\)?~\\)") nil [178760 179053])
            ("file-name-sans-versions" function (:arguments ("name" "keep-backup-version")) nil [179055 179754])
            ("file-ownership-preserved-p" function (:arguments ("file" "group")) nil [179756 181623])
            ("file-name-sans-extension" function (:arguments ("filename")) nil [181625 182350])
            ("file-name-extension" function (:arguments ("filename" "period")) nil [182352 183281])
            ("file-name-base" function (:arguments ("filename")) nil [183283 183527])
            ("make-backup-file-name-function" variable (:default-value (function make-backup-file-name--default-function)) nil [183529 184277])
            ("backup-directory-alist" variable nil nil [184279 185316])
            ("normal-backup-enable-predicate" function (:arguments ("name")) nil [185318 186610])
            ("make-backup-file-name" function (:arguments ("file")) nil [186612 186925])
            ("make-backup-file-name--default-function" function (:arguments ("file")) nil [186927 187677])
            ("make-backup-file-name-1" function (:arguments ("file")) nil [187679 189786])
            ("backup-file-name-p" function (:arguments ("file")) nil [189788 190049])
            ("backup-extract-version-start" variable nil nil [190051 190088])
            ("backup-extract-version" function (:arguments ("fn")) nil [190263 190715])
            ("find-backup-file-name" function (:arguments ("fn")) nil [190717 192856])
            ("file-nlinks" function (:arguments ("filename")) nil [192858 192975])
            ("file-relative-name" function (:arguments ("filename" "directory")) nil [194951 197713])
            ("save-buffer" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [197716 200534])
            ("delete-auto-save-file-if-necessary" function (:arguments ("force")) nil [200536 201107])
            ("auto-save-hook" variable nil nil [201109 201181])
            ("before-save-hook" variable nil nil [201183 201381])
            ("after-save-hook" variable nil nil [201383 201602])
            ("save-buffer-coding-system" variable nil nil [201604 201976])
            ("make-variable-buffer-local" code nil nil [201978 202033])
            ("put" code nil nil [202034 202085])
            ("basic-save-buffer" function
               (:user-visible-flag t
                :arguments ("called-interactively"))
                nil [202087 206458])
            ("basic-save-buffer-1" function nil nil [206740 207043])
            ("basic-save-buffer-2" function nil nil [207132 211981])
            ("declare-function" code nil nil [211983 212069])
            ("save-some-buffers-action-alist" variable (:default-value (\` ((18 (\, (lambda (buf) (if (not enable-recursive-minibuffers) (progn (display-buffer buf) (setq other-window-scroll-buffer buf)) (view-buffer buf (lambda (_) (exit-recursive-edit))) (recursive-edit)) nil)) (\, (purecopy "view this buffer"))) (100 (\, (lambda (buf) (if (null (buffer-file-name buf)) (message "Not applicable: no file") (require (quote diff)) (let ((diffbuf (diff-no-select (buffer-file-name buf) buf nil (quote noasync)))) (if (not enable-recursive-minibuffers) (progn (display-buffer diffbuf) (setq other-window-scroll-buffer diffbuf)) (view-buffer diffbuf (lambda (_) (exit-recursive-edit))) (recursive-edit)))) nil)) (\, (purecopy "view changes in this buffer")))))) nil [212071 213237])
            ("put" code nil nil [213238 213299])
            ("buffer-save-without-query" variable nil nil [213301 213417])
            ("make-variable-buffer-local" code nil nil [213418 213473])
            ("save-some-buffers" function
               (:user-visible-flag t
                :arguments ("arg" "pred"))
                nil [213475 217054])
            ("clear-visited-file-modtime" function nil nil [217057 217238])
            ("not-modified" function (:arguments ("arg")) nil [217240 217763])
            ("toggle-read-only" function (:arguments ("arg" "interactive")) nil [217765 218051])
            ("insert-file" function (:arguments ("filename")) nil [218053 218501])
            ("append-to-file" function
               (:user-visible-flag t
                :arguments ("start" "end" "filename"))
                nil [218503 219161])
            ("file-newest-backup" function (:arguments ("filename")) nil [219163 220086])
            ("rename-uniquely" function (:user-visible-flag t) nil [220088 221104])
            ("make-directory" function
               (:user-visible-flag t
                :arguments ("dir" "parents"))
                nil [221106 222678])
            ("directory-files-no-dot-files-regexp" variable
               (:constant-flag t
                :default-value "^\\([^.]\\|\\.\\([^.]\\|\\..\\)\\).*")
                nil [222680 222826])
            ("delete-directory" function
               (:user-visible-flag t
                :arguments ("directory" "recursive" "trash"))
                nil [222828 225326])
            ("file-equal-p" function (:arguments ("file1" "file2")) nil [225328 225888])
            ("file-in-directory-p" function (:arguments ("file" "dir")) nil [225890 227008])
            ("copy-directory" function
               (:user-visible-flag t
                :arguments ("directory" "newname" "keep-time" "parents" "copy-contents"))
                nil [227010 230197])
            ("prune-directory-list" function (:arguments ("dirs" "keep" "reject")) nil [230245 230807])
            ("put" code nil nil [230811 230859])
            ("revert-buffer-function" variable (:default-value (function revert-buffer--default)) nil [230860 231312])
            ("put" code nil nil [231314 231383])
            ("revert-buffer-insert-file-contents-function" variable (:default-value (function revert-buffer-insert-file-contents--default-function)) nil [231384 231856])
            ("buffer-stale--default-function" function (:arguments ("_noconfirm")) nil [231858 232420])
            ("buffer-stale-function" variable (:default-value (function buffer-stale--default-function)) nil [232422 233337])
            ("before-revert-hook" variable nil nil [233339 233542])
            ("after-revert-hook" variable nil nil [233544 233899])
            ("revert-buffer-in-progress-p" variable nil nil [233901 234015])
            ("revert-buffer-internal-hook" variable nil nil [234017 234053])
            ("revert-buffer-preserve-modes" variable nil nil [234243 234280])
            ("revert-buffer" function
               (:user-visible-flag t
                :arguments ("ignore-auto" "noconfirm" "preserve-modes"))
                nil [234282 236494])
            ("revert-buffer--default" function (:arguments ("ignore-auto" "noconfirm")) nil [236496 239851])
            ("revert-buffer-insert-file-contents--default-function" function (:arguments ("file-name" "auto-save-p")) nil [239853 242053])
            ("recover-this-file" function (:user-visible-flag t) nil [242055 242206])
            ("recover-file" function
               (:user-visible-flag t
                :arguments ("file"))
                nil [242208 244291])
            ("recover-session" function (:user-visible-flag t) nil [244293 246025])
            ("recover-session-finish" function (:user-visible-flag t) nil [246027 248430])
            ("kill-buffer-ask" function (:arguments ("buffer")) nil [248432 248683])
            ("kill-some-buffers" function
               (:user-visible-flag t
                :arguments ("list"))
                nil [248685 249288])
            ("kill-matching-buffers" function
               (:user-visible-flag t
                :arguments ("regexp" "internal-too"))
                nil [249290 249818])
            ("rename-auto-save-file" function nil nil [249822 250386])
            ("make-auto-save-file-name" function nil nil [250388 254617])
            ("auto-save-file-name-p" function (:arguments ("filename")) nil [254619 254847])
            ("wildcard-to-regexp" function (:arguments ("wildcard")) nil [254850 257033])
            ("list-directory-brief-switches" variable (:default-value (purecopy "-CF")) nil [257036 257197])
            ("list-directory-verbose-switches" variable (:default-value (purecopy "-l")) nil [257199 257365])
            ("file-expand-wildcards" function (:arguments ("pattern" "full")) nil [257367 259009])
            ("files" package nil nil [259083 259119])
            ("list-directory" function
               (:user-visible-flag t
                :arguments ("dirname" "verbose"))
                nil [259121 260467])
            ("shell-quote-wildcard-pattern" function (:arguments ("pattern")) nil [260469 262307])
            ("insert-directory-program" variable (:default-value (purecopy "ls")) nil [262310 262437])
            ("directory-free-space-program" variable (:default-value (purecopy "df")) nil [262439 262976])
            ("directory-free-space-args" variable (:default-value (purecopy (if (eq system-type (quote darwin)) "-k" "-Pk"))) nil [262978 263165])
            ("get-free-disk-space" function (:arguments ("dir")) nil [263167 264937])
            ("directory-listing-before-filename-regexp" variable (:default-value (let* ((l "\\([A-Za-z]\\|[^ -]\\)") (l-or-quote "\\([A-Za-z']\\|[^ -]\\)") (month (concat l-or-quote l-or-quote "+\\.?")) (s " ") (yyyy "[0-9][0-9][0-9][0-9]") (dd "[ 0-3][0-9]") (HH:MM "[ 0-2][0-9][:.][0-5][0-9]") (seconds "[0-6][0-9]\\([.,][0-9]+\\)?") (zone "[-+][0-2][0-9][0-5][0-9]") (iso-mm-dd "[01][0-9]-[0-3][0-9]") (iso-time (concat HH:MM "\\(:" seconds "\\( ?" zone "\\)?\\)?")) (iso (concat "\\(\\(" yyyy "-\\)?" iso-mm-dd "[ T]" iso-time "\\|" yyyy "-" iso-mm-dd "\\)")) (western (concat "\\(" month s "+" dd "\\|" dd "\\.?" s month "\\)" s "+" "\\(" HH:MM "\\|" yyyy "\\)")) (western-comma (concat month s "+" dd "," s "+" yyyy)) (mm "[ 0-1]?[0-9]") (east-asian (concat "\\(" mm l "?" s dd l "?" s "+" "\\|" dd s mm s "+" "\\)" "\\(" HH:MM "\\|" yyyy l "?" "\\)"))) (purecopy (concat "\\([0-9][BkKMGTPEZY]? " iso "\\|.*[0-9][BkKMGTPEZY]? " "\\(" western "\\|" western-comma "\\|" east-asian "\\)" "\\) +")))) nil [265009 267398])
            ("insert-directory-ls-version" variable (:default-value (quote unknown)) nil [267400 267445])
            ("insert-directory" function (:arguments ("file" "switches" "wildcard" "full-directory-p")) nil [268519 278659])
            ("insert-directory-adj-pos" function (:arguments ("pos" "error-lines")) nil [278661 279227])
            ("insert-directory-safely" function (:arguments ("file" "switches" "wildcard" "full-directory-p")) nil [279229 279713])
            ("kill-emacs-query-functions" variable nil nil [279715 280021])
            ("confirm-kill-emacs" variable nil nil [280023 280463])
            ("save-buffers-kill-emacs" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [280465 282554])
            ("save-buffers-kill-terminal" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [282556 283044])
            ("setq" code nil nil [283154 283275])
            ("file-name-non-special" function (:arguments ("operation" "arguments")) nil [283476 286109])
            ("file-modes-char-to-who" function (:arguments ("char")) nil [286152 286619])
            ("file-modes-char-to-right" function (:arguments ("char" "from")) nil [286621 287470])
            ("file-modes-rights-to-number" function (:arguments ("rights" "who-mask" "from")) nil [287472 288626])
            ("file-modes-symbolic-to-number" function (:arguments ("modes" "from")) nil [288628 289711])
            ("read-file-modes" function (:arguments ("prompt" "orig-file")) nil [289713 290780])
            ("define-obsolete-variable-alias" code nil nil [290782 290864])
            ("trash-directory" variable nil nil [290888 291291])
            ("trash--hexify-table" variable nil nil [291293 291321])
            ("declare-function" code nil nil [291323 291389])
            ("move-file-to-trash" function
               (:user-visible-flag t
                :arguments ("filename"))
                nil [291391 296655])
            ("define-key" code nil nil [296659 296699])
            ("define-key" code nil nil [296700 296750])
            ("define-key" code nil nil [296751 296801])
            ("define-key" code nil nil [296802 296844])
            ("define-key" code nil nil [296845 296890])
            ("define-key" code nil nil [296891 296932])
            ("define-key" code nil nil [296933 296972])
            ("define-key" code nil nil [296973 297011])
            ("define-key" code nil nil [297012 297057])
            ("define-key" code nil nil [297058 297115])
            ("define-key" code nil nil [297116 297161])
            ("define-key" code nil nil [297163 297215])
            ("define-key" code nil nil [297216 297278])
            ("define-key" code nil nil [297279 297334])
            ("define-key" code nil nil [297335 297394])
            ("define-key" code nil nil [297395 297442])
            ("define-key" code nil nil [297444 297502])
            ("define-key" code nil nil [297503 297554])
            ("define-key" code nil nil [297555 297609])
            ("define-key" code nil nil [297610 297671])
            ("define-key" code nil nil [297672 297731]))          
      :file "files.el.gz"
      :pointmax 297756
      :fsize 85939
      :lastmodtime '(22676 23208 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("save-place" customgroup (:user-visible-flag t) nil [1466 1545])
            ("save-place-alist" variable nil nil [1548 1835])
            ("save-place-file" variable (:default-value (locate-user-emacs-file "places" ".emacs-places")) nil [1837 2059])
            ("save-place-version-control" variable nil nil [2061 2560])
            ("save-place-loaded" variable nil nil [2562 2654])
            ("save-place-limit" variable (:default-value 400) nil [2656 2897])
            ("save-place-forget-unreadable-files" variable (:default-value t) nil [2899 3400])
            ("save-place-save-skipped" variable (:default-value t) nil [3402 3684])
            ("save-place-skip-check-regexp" variable (:default-value "\\`/\\(?:cdrom\\|floppy\\|mnt\\|\\(?:[^@/:]*@\\)?[^@/:]*[^@/:.]:\\)") nil [3686 4184])
            ("save-place-ignore-files-regexp" variable (:default-value "\\(?:COMMIT_EDITMSG\\|hg-editor-[[:alnum:]]+\\.txt\\|svn-commit\\.tmp\\|bzr_log\\.[[:alnum:]]+\\)$") nil [4186 4619])
            ("declare-function" code nil nil [4621 4690])
            ("save-place--setup-hooks" function (:arguments ("add")) nil [4692 5552])
            ("define-obsolete-variable-alias" code nil nil [5554 5622])
            ("define-minor-mode" code nil nil [5638 5926])
            ("make-variable-buffer-local" code nil nil [5928 5973])
            ("define-obsolete-function-alias" code nil nil [5975 6059])
            ("define-minor-mode" code nil nil [6075 6886])
            ("declare-function" code nil nil [6888 6974])
            ("save-place-to-alist" function nil nil [6976 8658])
            ("save-place-forget-unreadable-files" function (:user-visible-flag t) nil [8660 9840])
            ("save-place-alist-to-file" function nil nil [9842 10914])
            ("load-save-place-alist-from-file" function nil nil [10916 12714])
            ("save-places-to-alist" function nil nil [12716 13505])
            ("save-place-find-file-hook" function nil nil [13507 13873])
            ("declare-function" code nil nil [13875 13924])
            ("save-place-dired-hook" function nil nil [13926 14745])
            ("save-place-kill-emacs-hook" function nil nil [14747 15036])
            ("saveplace" package nil nil [15038 15058]))          
      :file "saveplace.el.gz"
      :pointmax 15086
      :fsize 4898
      :lastmodtime '(22676 23208 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("dired" include nil nil [4414 4430])
            ("locate-current-filter" variable nil nil [4446 4480])
            ("locate-local-filter" variable nil nil [4481 4513])
            ("locate-local-search" variable nil nil [4514 4546])
            ("locate-local-prompt" variable nil nil [4547 4579])
            ("locate" customgroup (:user-visible-flag t) nil [4581 4678])
            ("locate-command" variable (:default-value "locate") nil [4680 5802])
            ("locate-post-command-hook" variable nil nil [5804 5941])
            ("locate-history-list" variable nil nil [5943 6028])
            ("locate-grep-history-list" variable nil nil [6030 6132])
            ("locate-make-command-line" variable (:default-value (quote locate-default-make-command-line)) nil [6134 6636])
            ("locate-buffer-name" variable (:default-value "*Locate*") nil [6638 6780])
            ("locate-fcodes-file" variable nil nil [6782 7320])
            ("locate-header-face" variable nil nil [7322 7466])
            ("locate-ls-subdir-switches" variable (:default-value (purecopy "-al")) nil [7483 7736])
            ("locate-update-when-revert" variable nil nil [7738 8127])
            ("locate-update-command" variable (:default-value "updatedb") nil [8129 8269])
            ("locate-update-path" variable (:default-value "/") nil [8271 8706])
            ("locate-prompt-for-command" variable nil nil [8708 9042])
            ("locate-mode-hook" variable nil nil [9044 9180])
            ("locate-default-make-command-line" function (:arguments ("search-string")) nil [9196 9290])
            ("locate-word-at-point" function nil nil [9292 9578])
            ("locate-prompt-for-search-string" function nil nil [9629 10398])
            ("locate" function
               (:user-visible-flag t
                :arguments ("search-string" "filter" "arg"))
                nil [10415 12820])
            ("locate-with-filter" function
               (:user-visible-flag t
                :arguments ("search-string" "filter" "arg"))
                nil [12837 13777])
            ("locate-filter-output" function (:arguments ("filter")) nil [13779 13907])
            ("locate-mode-map" variable (:default-value (let ((map (copy-keymap dired-mode-map))) (define-key map [menu-bar Dired] (quote undefined)) (define-key map [menu-bar subdir] (quote undefined)) (define-key map [menu-bar mark executables] (quote undefined)) (define-key map [menu-bar mark directory] (quote undefined)) (define-key map [menu-bar mark directories] (quote undefined)) (define-key map [menu-bar mark symlinks] (quote undefined)) (define-key map [M-mouse-2] (quote locate-mouse-view-file)) (define-key map "" (quote locate-tags)) (define-key map "l" (quote locate-do-redisplay)) (define-key map "U" (quote dired-unmark-all-files)) (define-key map "V" (quote locate-find-directory)) map)) nil [13909 14674])
            ("locate-filename-indentation" variable
               (:constant-flag t
                :default-value 4)
                nil [14761 14846])
            ("locate-get-file-positions" function nil nil [14848 15503])
            ("locate-current-line-number" function nil nil [15522 15697])
            ("locate-get-filename" function nil nil [16066 16279])
            ("locate-main-listing-line-p" function nil nil [16281 16639])
            ("locate-mouse-view-file" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [16641 16954])
            ("define-derived-mode" code nil nil [17095 18914])
            ("put" code nil nil [18915 18966])
            ("locate-do-setup" function (:arguments ("search-string")) nil [18968 19574])
            ("locate-set-properties" function nil nil [19576 19733])
            ("locate-insert-header" function (:arguments ("search-string")) nil [19735 21555])
            ("locate-tags" function (:user-visible-flag t) nil [21557 21882])
            ("locate-update" function (:arguments ("_ignore1" "_ignore2")) nil [21929 22634])
            ("locate-find-directory" function (:user-visible-flag t) nil [22776 23286])
            ("locate-find-directory-other-window" function (:user-visible-flag t) nil [23288 23570])
            ("locate-get-dirname" function nil nil [23939 24901])
            ("locate-in-alternate-database" function
               (:user-visible-flag t
                :arguments ("search-string" "database"))
                nil [24926 25775])
            ("locate-do-redisplay" function
               (:user-visible-flag t
                :arguments ("arg" "test-for-subdir"))
                nil [25777 26143])
            ("locate" package nil nil [26145 26162]))          
      :file "locate.el.gz"
      :pointmax 26188
      :fsize 7981
      :lastmodtime '(22676 23208 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("uniquify-buffer-name-style" variable nil nil [1056 1091])
            ("cua-enable-cua-keys" variable nil nil [1135 1163])
            ("or" code nil nil [1277 1387])
            ("setq" code nil nil [1541 1581])
            ("global-buffers-menu-map" variable (:default-value (make-sparse-keymap "Buffers")) nil [1709 1772])
            ("define-obsolete-variable-alias" code nil nil [1840 1922])
            ("menu-bar-file-menu" variable (:default-value (let ((menu (make-sparse-keymap "File"))) (bindings--define-key menu [exit-emacs] (quote (menu-item "Quit" save-buffers-kill-terminal :help "Save unsaved buffers, then exit"))) (bindings--define-key menu [separator-exit] menu-bar-separator) (bindings--define-key menu [delete-this-frame] (quote (menu-item "Delete Frame" delete-frame :visible (fboundp (quote delete-frame)) :enable (delete-frame-enabled-p) :help "Delete currently selected frame"))) (bindings--define-key menu [make-frame-on-display] (quote (menu-item "New Frame on Display..." make-frame-on-display :visible (fboundp (quote make-frame-on-display)) :help "Open a new frame on another display"))) (bindings--define-key menu [make-frame] (quote (menu-item "New Frame" make-frame-command :visible (fboundp (quote make-frame-command)) :help "Open a new frame"))) (bindings--define-key menu [separator-frame] menu-bar-separator) (bindings--define-key menu [one-window] (quote (menu-item "Remove Other Windows" delete-other-windows :enable (not (one-window-p t nil)) :help "Make selected window fill whole frame"))) (bindings--define-key menu [new-window-on-right] (quote (menu-item "New Window on Right" split-window-right :enable (and (menu-bar-menu-frame-live-and-visible-p) (menu-bar-non-minibuffer-window-p)) :help "Make new window on right of selected one"))) (bindings--define-key menu [new-window-below] (quote (menu-item "New Window Below" split-window-below :enable (and (menu-bar-menu-frame-live-and-visible-p) (menu-bar-non-minibuffer-window-p)) :help "Make new window below selected one"))) (bindings--define-key menu [separator-window] menu-bar-separator) (bindings--define-key menu [ps-print-region] (quote (menu-item "PostScript Print Region (B+W)" ps-print-region :enable mark-active :help "Pretty-print marked region in black and white to PostScript printer"))) (bindings--define-key menu [ps-print-buffer] (quote (menu-item "PostScript Print Buffer (B+W)" ps-print-buffer :enable (menu-bar-menu-frame-live-and-visible-p) :help "Pretty-print current buffer in black and white to PostScript printer"))) (bindings--define-key menu [ps-print-region-faces] (quote (menu-item "PostScript Print Region" ps-print-region-with-faces :enable mark-active :help "Pretty-print marked region to PostScript printer"))) (bindings--define-key menu [ps-print-buffer-faces] (quote (menu-item "PostScript Print Buffer" ps-print-buffer-with-faces :enable (menu-bar-menu-frame-live-and-visible-p) :help "Pretty-print current buffer to PostScript printer"))) (bindings--define-key menu [print-region] (quote (menu-item "Print Region" print-region :enable mark-active :help "Print region between mark and current position"))) (bindings--define-key menu [print-buffer] (quote (menu-item "Print Buffer" print-buffer :enable (menu-bar-menu-frame-live-and-visible-p) :help "Print current buffer with page headings"))) (bindings--define-key menu [separator-print] menu-bar-separator) (bindings--define-key menu [recover-session] (quote (menu-item "Recover Crashed Session" recover-session :enable (and auto-save-list-file-prefix (file-directory-p (file-name-directory auto-save-list-file-prefix)) (directory-files (file-name-directory auto-save-list-file-prefix) nil (concat "\\`" (regexp-quote (file-name-nondirectory auto-save-list-file-prefix))) t)) :help "Recover edits from a crashed session"))) (bindings--define-key menu [revert-buffer] (quote (menu-item "Revert Buffer" revert-buffer :enable (or (not (eq revert-buffer-function (quote revert-buffer--default))) (not (eq revert-buffer-insert-file-contents-function (quote revert-buffer-insert-file-contents--default-function))) (and buffer-file-number (or (buffer-modified-p) (not (verify-visited-file-modtime (current-buffer)))))) :help "Re-read current buffer from its file"))) (bindings--define-key menu [write-file] (quote (menu-item "Save As..." write-file :enable (and (menu-bar-menu-frame-live-and-visible-p) (menu-bar-non-minibuffer-window-p)) :help "Write current buffer to another file"))) (bindings--define-key menu [save-buffer] (quote (menu-item "Save" save-buffer :enable (and (buffer-modified-p) (buffer-file-name) (menu-bar-non-minibuffer-window-p)) :help "Save current buffer to its file"))) (bindings--define-key menu [separator-save] menu-bar-separator) (bindings--define-key menu [kill-buffer] (quote (menu-item "Close" kill-this-buffer :enable (kill-this-buffer-enabled-p) :help "Discard (kill) current buffer"))) (bindings--define-key menu [insert-file] (quote (menu-item "Insert File..." insert-file :enable (menu-bar-non-minibuffer-window-p) :help "Insert another file into current buffer"))) (bindings--define-key menu [dired] (quote (menu-item "Open Directory..." dired :enable (menu-bar-non-minibuffer-window-p) :help "Read a directory, to operate on its files"))) (bindings--define-key menu [open-file] (quote (menu-item "Open File..." menu-find-file-existing :enable (menu-bar-non-minibuffer-window-p) :help "Read an existing file into an Emacs buffer"))) (bindings--define-key menu [new-file] (quote (menu-item "Visit New File..." find-file :enable (menu-bar-non-minibuffer-window-p) :help "Specify a new file's name, to edit the file"))) menu)) nil [1923 8903])
            ("menu-find-file-existing" function (:user-visible-flag t) nil [8905 9235])
            ("menu-bar-last-search-type" variable nil nil [9267 9375])
            ("nonincremental-repeat-search-forward" function (:user-visible-flag t) nil [9377 9770])
            ("nonincremental-repeat-search-backward" function (:user-visible-flag t) nil [9772 10169])
            ("nonincremental-search-forward" function
               (:user-visible-flag t
                :arguments ("string" "backward"))
                nil [10171 10766])
            ("nonincremental-search-backward" function
               (:user-visible-flag t
                :arguments ("string"))
                nil [10768 10988])
            ("nonincremental-re-search-forward" function
               (:user-visible-flag t
                :arguments ("string"))
                nil [10990 11329])
            ("nonincremental-re-search-backward" function
               (:user-visible-flag t
                :arguments ("string"))
                nil [11331 11682])
            ("menu-bar-i-search-menu" variable (:default-value (let ((menu (make-sparse-keymap "Incremental Search"))) (bindings--define-key menu [isearch-backward-regexp] (quote (menu-item "Backward Regexp..." isearch-backward-regexp :help "Search backwards for a regular expression as you type it"))) (bindings--define-key menu [isearch-forward-regexp] (quote (menu-item "Forward Regexp..." isearch-forward-regexp :help "Search forward for a regular expression as you type it"))) (bindings--define-key menu [isearch-backward] (quote (menu-item "Backward String..." isearch-backward :help "Search backwards for a string as you type it"))) (bindings--define-key menu [isearch-forward] (quote (menu-item "Forward String..." isearch-forward :help "Search forward for a string as you type it"))) menu)) nil [11729 12546])
            ("menu-bar-search-menu" variable (:default-value (let ((menu (make-sparse-keymap "Search"))) (bindings--define-key menu [i-search] (\` (menu-item "Incremental Search" (\, menu-bar-i-search-menu)))) (bindings--define-key menu [separator-tag-isearch] menu-bar-separator) (bindings--define-key menu [tags-continue] (quote (menu-item "Continue Tags Search" tags-loop-continue :help "Continue last tags search operation"))) (bindings--define-key menu [tags-srch] (quote (menu-item "Search Tagged Files..." tags-search :help "Search for a regexp in all tagged files"))) (bindings--define-key menu [separator-tag-search] menu-bar-separator) (bindings--define-key menu [repeat-search-back] (quote (menu-item "Repeat Backwards" nonincremental-repeat-search-backward :enable (or (and (eq menu-bar-last-search-type (quote string)) search-ring) (and (eq menu-bar-last-search-type (quote regexp)) regexp-search-ring)) :help "Repeat last search backwards"))) (bindings--define-key menu [repeat-search-fwd] (quote (menu-item "Repeat Forward" nonincremental-repeat-search-forward :enable (or (and (eq menu-bar-last-search-type (quote string)) search-ring) (and (eq menu-bar-last-search-type (quote regexp)) regexp-search-ring)) :help "Repeat last search forward"))) (bindings--define-key menu [separator-repeat-search] menu-bar-separator) (bindings--define-key menu [re-search-backward] (quote (menu-item "Regexp Backwards..." nonincremental-re-search-backward :help "Search backwards for a regular expression"))) (bindings--define-key menu [re-search-forward] (quote (menu-item "Regexp Forward..." nonincremental-re-search-forward :help "Search forward for a regular expression"))) (bindings--define-key menu [search-backward] (quote (menu-item "String Backwards..." nonincremental-search-backward :help "Search backwards for a string"))) (bindings--define-key menu [search-forward] (quote (menu-item "String Forward..." nonincremental-search-forward :help "Search forward for a string"))) menu)) nil [12548 15012])
            ("menu-bar-replace-menu" variable (:default-value (let ((menu (make-sparse-keymap "Replace"))) (bindings--define-key menu [tags-repl-continue] (quote (menu-item "Continue Replace" tags-loop-continue :help "Continue last tags replace operation"))) (bindings--define-key menu [tags-repl] (quote (menu-item "Replace in Tagged Files..." tags-query-replace :help "Interactively replace a regexp in all tagged files"))) (bindings--define-key menu [separator-replace-tags] menu-bar-separator) (bindings--define-key menu [query-replace-regexp] (quote (menu-item "Replace Regexp..." query-replace-regexp :enable (not buffer-read-only) :help "Replace regular expression interactively, ask about each occurrence"))) (bindings--define-key menu [query-replace] (quote (menu-item "Replace String..." query-replace :enable (not buffer-read-only) :help "Replace string interactively, ask about each occurrence"))) menu)) nil [15044 16035])
            ("menu-bar-goto-menu" variable (:default-value (let ((menu (make-sparse-keymap "Go To"))) (bindings--define-key menu [set-tags-name] (quote (menu-item "Set Tags File Name..." visit-tags-table :visible (menu-bar-goto-uses-etags-p) :help "Tell navigation commands which tag table file to use"))) (bindings--define-key menu [separator-tag-file] (quote (menu-item "--" nil :visible (menu-bar-goto-uses-etags-p)))) (bindings--define-key menu [xref-pop] (quote (menu-item "Back" xref-pop-marker-stack :visible (and (featurep (quote xref)) (not (xref-marker-stack-empty-p))) :help "Back to the position of the last search"))) (bindings--define-key menu [xref-apropos] (quote (menu-item "Find Apropos..." xref-find-apropos :help "Find function/variables whose names match regexp"))) (bindings--define-key menu [xref-find-otherw] (quote (menu-item "Find Definition in Other Window..." xref-find-definitions-other-window :help "Find function/variable definition in another window"))) (bindings--define-key menu [xref-find-def] (quote (menu-item "Find Definition..." xref-find-definitions :help "Find definition of function or variable"))) (bindings--define-key menu [separator-xref] menu-bar-separator) (bindings--define-key menu [end-of-buf] (quote (menu-item "Goto End of Buffer" end-of-buffer))) (bindings--define-key menu [beg-of-buf] (quote (menu-item "Goto Beginning of Buffer" beginning-of-buffer))) (bindings--define-key menu [go-to-pos] (quote (menu-item "Goto Buffer Position..." goto-char :help "Read a number N and go to buffer position N"))) (bindings--define-key menu [go-to-line] (quote (menu-item "Goto Line..." goto-line :help "Read a line number and go to that line"))) menu)) nil [16081 18003])
            ("menu-bar-goto-uses-etags-p" function nil nil [18005 18149])
            ("yank-menu" variable (:default-value (cons (purecopy "Select Yank") nil)) nil [18151 18205])
            ("fset" code nil nil [18206 18248])
            ("menu-bar-edit-menu" variable (:default-value (let ((menu (make-sparse-keymap "Edit"))) (bindings--define-key menu [props] (\` (menu-item "Text Properties" facemenu-menu))) (if (featurep (quote ns)) (bindings--define-key menu [spell] (\` (menu-item "Spell" ispell-menu-map)))) (bindings--define-key menu [fill] (\` (menu-item "Fill" fill-region :enable (and mark-active (not buffer-read-only)) :help "Fill text in region to fit between left and right margin"))) (bindings--define-key menu [separator-bookmark] menu-bar-separator) (bindings--define-key menu [bookmark] (\` (menu-item "Bookmarks" menu-bar-bookmark-map))) (bindings--define-key menu [goto] (\` (menu-item "Go To" (\, menu-bar-goto-menu)))) (bindings--define-key menu [replace] (\` (menu-item "Replace" (\, menu-bar-replace-menu)))) (bindings--define-key menu [search] (\` (menu-item "Search" (\, menu-bar-search-menu)))) (bindings--define-key menu [separator-search] menu-bar-separator) (bindings--define-key menu [mark-whole-buffer] (quote (menu-item "Select All" mark-whole-buffer :help "Mark the whole buffer for a subsequent cut/copy"))) (bindings--define-key menu [clear] (quote (menu-item "Clear" delete-region :enable (and mark-active (not buffer-read-only)) :help "Delete the text in region between mark and current position"))) (bindings--define-key menu (if (featurep (quote ns)) [select-paste] [paste-from-menu]) (\` (menu-item (\, (if (featurep (quote ns)) "Select and Paste" "Paste from Kill Menu")) yank-menu :enable (and (cdr yank-menu) (not buffer-read-only)) :help "Choose a string from the kill ring and paste it"))) (bindings--define-key menu [paste] (\` (menu-item "Paste" yank :enable (funcall (quote (\, (lambda nil (and (or (gui-backend-selection-exists-p (quote CLIPBOARD)) (if (featurep (quote ns)) (cdr yank-menu) kill-ring)) (not buffer-read-only)))))) :help "Paste (yank) text most recently cut/copied"))) (bindings--define-key menu [copy] (\` (menu-item "Copy" (\, (if (featurep (quote ns)) (quote ns-copy-including-secondary) (quote kill-ring-save))) :enable mark-active :help "Copy text in region between mark and current position" :keys (\, (if (featurep (quote ns)) "\\[ns-copy-including-secondary]" "\\[kill-ring-save]"))))) (bindings--define-key menu [cut] (quote (menu-item "Cut" kill-region :enable (and mark-active (not buffer-read-only)) :help "Cut (kill) text in region between mark and current position"))) (if (featurep (quote ns)) (bindings--define-key menu [separator-undo] menu-bar-separator)) (bindings--define-key menu [undo] (quote (menu-item "Undo" undo :enable (and (not buffer-read-only) (not (eq t buffer-undo-list)) (if (eq last-command (quote undo)) (listp pending-undo-list) (consp buffer-undo-list))) :help "Undo last operation"))) menu)) nil [18250 22274])
            ("define-obsolete-function-alias" code nil nil [22276 22358])
            ("put" code nil nil [22502 22590])
            ("put" code nil nil [22591 22648])
            ("put" code nil nil [22649 22904])
            ("clipboard-yank" function (:user-visible-flag t) nil [22906 23071])
            ("clipboard-kill-ring-save" function
               (:user-visible-flag t
                :arguments ("beg" "end" "region"))
                nil [23073 23408])
            ("clipboard-kill-region" function
               (:user-visible-flag t
                :arguments ("beg" "end" "region"))
                nil [23410 23733])
            ("menu-bar-enable-clipboard" function (:user-visible-flag t) nil [23735 24358])
            ("menu-bar-custom-menu" variable (:default-value (let ((menu (make-sparse-keymap "Customize"))) (bindings--define-key menu [customize-apropos-faces] (quote (menu-item "Faces Matching..." customize-apropos-faces :help "Browse faces matching a regexp or word list"))) (bindings--define-key menu [customize-apropos-options] (quote (menu-item "Options Matching..." customize-apropos-options :help "Browse options matching a regexp or word list"))) (bindings--define-key menu [customize-apropos] (quote (menu-item "All Settings Matching..." customize-apropos :help "Browse customizable settings matching a regexp or word list"))) (bindings--define-key menu [separator-1] menu-bar-separator) (bindings--define-key menu [customize-group] (quote (menu-item "Specific Group..." customize-group :help "Customize settings of specific group"))) (bindings--define-key menu [customize-face] (quote (menu-item "Specific Face..." customize-face :help "Customize attributes of specific face"))) (bindings--define-key menu [customize-option] (quote (menu-item "Specific Option..." customize-option :help "Customize value of specific option"))) (bindings--define-key menu [separator-2] menu-bar-separator) (bindings--define-key menu [customize-changed-options] (quote (menu-item "New Options..." customize-changed-options :help "Options added or changed in recent Emacs versions"))) (bindings--define-key menu [customize-saved] (quote (menu-item "Saved Options" customize-saved :help "Customize previously saved options"))) (bindings--define-key menu [separator-3] menu-bar-separator) (bindings--define-key menu [customize-browse] (quote (menu-item "Browse Customization Groups" customize-browse :help "Browse all customization groups"))) (bindings--define-key menu [customize] (quote (menu-item "Top-level Customization Group" customize :help "The master group called `Emacs'"))) (bindings--define-key menu [customize-themes] (quote (menu-item "Custom Themes" customize-themes :help "Choose a pre-defined customization theme"))) menu)) nil [24390 26655])
            ("menu-bar-make-mm-toggle" function (:arguments ("fname" "doc" "help" "props")) nil [26728 27179])
            ("menu-bar-make-toggle" function (:arguments ("name" "variable" "doc" "message" "help" "body")) nil [27181 28389])
            ("menu-set-font" function (:user-visible-flag t) nil [28437 28736])
            ("menu-bar-options-save" function (:user-visible-flag t) nil [28738 30843])
            ("menu-bar-window-divider-customize" function (:user-visible-flag t) nil [30952 31106])
            ("menu-bar-bottom-and-right-window-divider" function (:user-visible-flag t) nil [31108 31322])
            ("menu-bar-right-window-divider" function (:user-visible-flag t) nil [31324 31531])
            ("menu-bar-bottom-window-divider" function (:user-visible-flag t) nil [31533 31743])
            ("menu-bar-no-window-divider" function (:user-visible-flag t) nil [31745 31861])
            ("menu-bar-showhide-window-divider-menu" variable (:default-value (let ((menu (make-sparse-keymap "Window Divider"))) (bindings--define-key menu [customize] (quote (menu-item "Customize" menu-bar-window-divider-customize :help "Customize window dividers" :visible (memq (window-system) (quote (x w32)))))) (bindings--define-key menu [bottom-and-right] (quote (menu-item "Bottom and Right" menu-bar-bottom-and-right-window-divider :help "Display window divider on the bottom and right of each window" :visible (memq (window-system) (quote (x w32))) :button (:radio and (window-divider-width-valid-p (cdr (assq (quote bottom-divider-width) (frame-parameters)))) (window-divider-width-valid-p (cdr (assq (quote right-divider-width) (frame-parameters)))))))) (bindings--define-key menu [right-only] (quote (menu-item "Right Only" menu-bar-right-window-divider :help "Display window divider on the right of each window only" :visible (memq (window-system) (quote (x w32))) :button (:radio and (not (window-divider-width-valid-p (cdr (assq (quote bottom-divider-width) (frame-parameters))))) (window-divider-width-valid-p (cdr (assq (quote right-divider-width) (frame-parameters)))))))) (bindings--define-key menu [bottom-only] (quote (menu-item "Bottom Only" menu-bar-bottom-window-divider :help "Display window divider on the bottom of each window only" :visible (memq (window-system) (quote (x w32))) :button (:radio and (window-divider-width-valid-p (cdr (assq (quote bottom-divider-width) (frame-parameters)))) (not (window-divider-width-valid-p (cdr (assq (quote right-divider-width) (frame-parameters))))))))) (bindings--define-key menu [no-divider] (quote (menu-item "None" menu-bar-no-window-divider :help "Do not display window dividers" :visible (memq (window-system) (quote (x w32))) :button (:radio and (not (window-divider-width-valid-p (cdr (assq (quote bottom-divider-width) (frame-parameters))))) (not (window-divider-width-valid-p (cdr (assq (quote right-divider-width) (frame-parameters))))))))) menu)) nil [32145 34587])
            ("menu-bar-showhide-fringe-ind-customize" function (:user-visible-flag t) nil [34589 34769])
            ("menu-bar-showhide-fringe-ind-mixed" function (:user-visible-flag t) nil [34771 34996])
            ("menu-bar-showhide-fringe-ind-box" function (:user-visible-flag t) nil [34998 35209])
            ("menu-bar-showhide-fringe-ind-right" function (:user-visible-flag t) nil [35211 35396])
            ("menu-bar-showhide-fringe-ind-left" function (:user-visible-flag t) nil [35398 35580])
            ("menu-bar-showhide-fringe-ind-none" function (:user-visible-flag t) nil [35582 35752])
            ("menu-bar-showhide-fringe-ind-menu" variable (:default-value (let ((menu (make-sparse-keymap "Buffer boundaries"))) (bindings--define-key menu [customize] (quote (menu-item "Other (Customize)" menu-bar-showhide-fringe-ind-customize :help "Additional choices available through Custom buffer" :visible (display-graphic-p) :button (:radio not (member indicate-buffer-boundaries (quote (nil left right ((top . left) (bottom . right)) ((t . right) (top . left))))))))) (bindings--define-key menu [mixed] (quote (menu-item "Opposite, Arrows Right" menu-bar-showhide-fringe-ind-mixed :help "Show top/bottom indicators in opposite fringes, arrows in right" :visible (display-graphic-p) :button (:radio equal indicate-buffer-boundaries (quote ((t . right) (top . left))))))) (bindings--define-key menu [box] (quote (menu-item "Opposite, No Arrows" menu-bar-showhide-fringe-ind-box :help "Show top/bottom indicators in opposite fringes, no arrows" :visible (display-graphic-p) :button (:radio equal indicate-buffer-boundaries (quote ((top . left) (bottom . right))))))) (bindings--define-key menu [right] (quote (menu-item "In Right Fringe" menu-bar-showhide-fringe-ind-right :help "Show buffer boundaries and arrows in right fringe" :visible (display-graphic-p) :button (:radio eq indicate-buffer-boundaries (quote right))))) (bindings--define-key menu [left] (quote (menu-item "In Left Fringe" menu-bar-showhide-fringe-ind-left :help "Show buffer boundaries and arrows in left fringe" :visible (display-graphic-p) :button (:radio eq indicate-buffer-boundaries (quote left))))) (bindings--define-key menu [none] (quote (menu-item "No Indicators" menu-bar-showhide-fringe-ind-none :help "Hide all buffer boundary indicators and arrows" :visible (display-graphic-p) :button (:radio eq indicate-buffer-boundaries nil)))) menu)) nil [35754 38166])
            ("menu-bar-showhide-fringe-menu-customize" function (:user-visible-flag t) nil [38168 38319])
            ("menu-bar-showhide-fringe-menu-customize-reset" function (:user-visible-flag t) nil [38321 38507])
            ("menu-bar-showhide-fringe-menu-customize-right" function (:user-visible-flag t) nil [38509 38706])
            ("menu-bar-showhide-fringe-menu-customize-left" function (:user-visible-flag t) nil [38708 38903])
            ("menu-bar-showhide-fringe-menu-customize-disable" function (:user-visible-flag t) nil [38905 39076])
            ("menu-bar-showhide-fringe-menu" variable (:default-value (let ((menu (make-sparse-keymap "Fringe"))) (bindings--define-key menu [showhide-fringe-ind] (\` (menu-item "Buffer Boundaries" (\, menu-bar-showhide-fringe-ind-menu) :visible (display-graphic-p) :help "Indicate buffer boundaries in fringe"))) (bindings--define-key menu [indicate-empty-lines] (menu-bar-make-toggle toggle-indicate-empty-lines indicate-empty-lines "Empty Line Indicators" "Indicating of empty lines %s" "Indicate trailing empty lines in fringe, globally")) (bindings--define-key menu [customize] (quote (menu-item "Customize Fringe" menu-bar-showhide-fringe-menu-customize :help "Detailed customization of fringe" :visible (display-graphic-p)))) (bindings--define-key menu [default] (quote (menu-item "Default" menu-bar-showhide-fringe-menu-customize-reset :help "Default width fringe on both left and right side" :visible (display-graphic-p) :button (:radio eq fringe-mode nil)))) (bindings--define-key menu [right] (quote (menu-item "On the Right" menu-bar-showhide-fringe-menu-customize-right :help "Fringe only on the right side" :visible (display-graphic-p) :button (:radio equal fringe-mode (quote (0)))))) (bindings--define-key menu [left] (quote (menu-item "On the Left" menu-bar-showhide-fringe-menu-customize-left :help "Fringe only on the left side" :visible (display-graphic-p) :button (:radio equal fringe-mode (quote (nil . 0)))))) (bindings--define-key menu [none] (quote (menu-item "None" menu-bar-showhide-fringe-menu-customize-disable :help "Turn off fringe" :visible (display-graphic-p) :button (:radio eq fringe-mode 0)))) menu)) nil [39078 41102])
            ("menu-bar-right-scroll-bar" function (:user-visible-flag t) nil [41104 41260])
            ("menu-bar-left-scroll-bar" function (:user-visible-flag t) nil [41262 41415])
            ("menu-bar-no-scroll-bar" function (:user-visible-flag t) nil [41417 41540])
            ("menu-bar-horizontal-scroll-bar" function (:user-visible-flag t) nil [41542 41707])
            ("menu-bar-no-horizontal-scroll-bar" function (:user-visible-flag t) nil [41709 41865])
            ("menu-bar-showhide-scroll-bar-menu" variable (:default-value (let ((menu (make-sparse-keymap "Scroll-bar"))) (bindings--define-key menu [horizontal] (quote (menu-item "Horizontal" menu-bar-horizontal-scroll-bar :help "Horizontal scroll bar" :visible (horizontal-scroll-bars-available-p) :button (:radio cdr (assq (quote horizontal-scroll-bars) (frame-parameters)))))) (bindings--define-key menu [none-horizontal] (quote (menu-item "None-horizontal" menu-bar-no-horizontal-scroll-bar :help "Turn off horizontal scroll bars" :visible (horizontal-scroll-bars-available-p) :button (:radio not (cdr (assq (quote horizontal-scroll-bars) (frame-parameters))))))) (bindings--define-key menu [right] (quote (menu-item "On the Right" menu-bar-right-scroll-bar :help "Scroll-bar on the right side" :visible (display-graphic-p) :button (:radio eq (cdr (assq (quote vertical-scroll-bars) (frame-parameters))) (quote right))))) (bindings--define-key menu [left] (quote (menu-item "On the Left" menu-bar-left-scroll-bar :help "Scroll-bar on the left side" :visible (display-graphic-p) :button (:radio eq (cdr (assq (quote vertical-scroll-bars) (frame-parameters))) (quote left))))) (bindings--define-key menu [none] (quote (menu-item "None" menu-bar-no-scroll-bar :help "Turn off scroll-bar" :visible (display-graphic-p) :button (:radio eq (cdr (assq (quote vertical-scroll-bars) (frame-parameters))) nil)))) menu)) nil [41867 43835])
            ("menu-bar-frame-for-menubar" function nil nil [43837 44020])
            ("menu-bar-positive-p" function (:arguments ("val")) nil [44022 44142])
            ("menu-bar-set-tool-bar-position" function (:arguments ("position")) nil [44144 44292])
            ("menu-bar-showhide-tool-bar-menu-customize-disable" function (:user-visible-flag t) nil [44293 44445])
            ("menu-bar-showhide-tool-bar-menu-customize-enable-left" function (:user-visible-flag t) nil [44446 44607])
            ("menu-bar-showhide-tool-bar-menu-customize-enable-right" function (:user-visible-flag t) nil [44608 44772])
            ("menu-bar-showhide-tool-bar-menu-customize-enable-top" function (:user-visible-flag t) nil [44773 44931])
            ("menu-bar-showhide-tool-bar-menu-customize-enable-bottom" function (:user-visible-flag t) nil [44932 45099])
            ("when" code nil nil [45101 47880])
            ("menu-bar-showhide-menu" variable (:default-value (let ((menu (make-sparse-keymap "Show/Hide"))) (bindings--define-key menu [column-number-mode] (menu-bar-make-mm-toggle column-number-mode "Column Numbers" "Show the current column number in the mode line")) (bindings--define-key menu [line-number-mode] (menu-bar-make-mm-toggle line-number-mode "Line Numbers" "Show the current line number in the mode line")) (bindings--define-key menu [size-indication-mode] (menu-bar-make-mm-toggle size-indication-mode "Size Indication" "Show the size of the buffer in the mode line")) (bindings--define-key menu [linecolumn-separator] menu-bar-separator) (bindings--define-key menu [showhide-battery] (menu-bar-make-mm-toggle display-battery-mode "Battery Status" "Display battery status information in mode line")) (bindings--define-key menu [showhide-date-time] (menu-bar-make-mm-toggle display-time-mode "Time, Load and Mail" "Display time, system load averages and mail status in mode line")) (bindings--define-key menu [datetime-separator] menu-bar-separator) (bindings--define-key menu [showhide-speedbar] (quote (menu-item "Speedbar" speedbar-frame-mode :help "Display a Speedbar quick-navigation frame" :button (:toggle and (boundp (quote speedbar-frame)) (frame-live-p (symbol-value (quote speedbar-frame))) (frame-visible-p (symbol-value (quote speedbar-frame))))))) (bindings--define-key menu [showhide-window-divider] (\` (menu-item "Window Divider" (\, menu-bar-showhide-window-divider-menu) :visible (memq (window-system) (quote (x w32)))))) (bindings--define-key menu [showhide-fringe] (\` (menu-item "Fringe" (\, menu-bar-showhide-fringe-menu) :visible (display-graphic-p)))) (bindings--define-key menu [showhide-scroll-bar] (\` (menu-item "Scroll-bar" (\, menu-bar-showhide-scroll-bar-menu) :visible (display-graphic-p)))) (bindings--define-key menu [showhide-tooltip-mode] (quote (menu-item "Tooltips" tooltip-mode :help "Turn tooltips on/off" :visible (and (display-graphic-p) (fboundp (quote x-show-tip))) :button (:toggle . tooltip-mode)))) (bindings--define-key menu [menu-bar-mode] (quote (menu-item "Menu-bar" toggle-menu-bar-mode-from-frame :help "Turn menu-bar on/off" :button (:toggle menu-bar-positive-p (frame-parameter (menu-bar-frame-for-menubar) (quote menu-bar-lines)))))) (if (and (boundp (quote menu-bar-showhide-tool-bar-menu)) (keymapp menu-bar-showhide-tool-bar-menu)) (bindings--define-key menu [showhide-tool-bar] (\` (menu-item "Tool-bar" (\, menu-bar-showhide-tool-bar-menu) :visible (display-graphic-p)))) (bindings--define-key menu [showhide-tool-bar] (quote (menu-item "Tool-bar" toggle-tool-bar-mode-from-frame :help "Turn tool-bar on/off" :visible (display-graphic-p) :button (:toggle menu-bar-positive-p (frame-parameter (menu-bar-frame-for-menubar) (quote tool-bar-lines))))))) menu)) nil [47882 51722])
            ("menu-bar-line-wrapping-menu" variable (:default-value (let ((menu (make-sparse-keymap "Line Wrapping"))) (bindings--define-key menu [word-wrap] (\` (menu-item "Word Wrap (Visual Line mode)" (\, (lambda nil (interactive) (unless visual-line-mode (visual-line-mode 1)) (message "Visual-Line mode enabled"))) :help "Wrap long lines at word boundaries" :button (:radio and (null truncate-lines) (not (truncated-partial-width-window-p)) word-wrap) :visible (menu-bar-menu-frame-live-and-visible-p)))) (bindings--define-key menu [truncate] (\` (menu-item "Truncate Long Lines" (\, (lambda nil (interactive) (if visual-line-mode (visual-line-mode 0)) (setq word-wrap nil) (toggle-truncate-lines 1))) :help "Truncate long lines at window edge" :button (:radio or truncate-lines (truncated-partial-width-window-p)) :visible (menu-bar-menu-frame-live-and-visible-p) :enable (not (truncated-partial-width-window-p))))) (bindings--define-key menu [window-wrap] (\` (menu-item "Wrap at Window Edge" (\, (lambda nil (interactive) (if visual-line-mode (visual-line-mode 0)) (setq word-wrap nil) (if truncate-lines (toggle-truncate-lines -1)))) :help "Wrap long lines at window edge" :button (:radio and (null truncate-lines) (not (truncated-partial-width-window-p)) (not word-wrap)) :visible (menu-bar-menu-frame-live-and-visible-p) :enable (not (truncated-partial-width-window-p))))) menu)) nil [51724 53821])
            ("menu-bar-search-options-menu" variable (:default-value (let ((menu (make-sparse-keymap "Search Options"))) (dolist (x (quote ((char-fold-to-regexp "Fold Characters" "Character folding") (isearch-symbol-regexp "Whole Symbols" "Whole symbol") (word-search-regexp "Whole Words" "Whole word")))) (bindings--define-key menu (vector (nth 0 x)) (\` (menu-item (\, (nth 1 x)) (lambda nil (interactive) (setq search-default-mode (function (\, (nth 0 x)))) (message (\, (format "%s search enabled" (nth 2 x))))) :help (\, (format "Enable %s search" (downcase (nth 2 x)))) :button (:radio eq search-default-mode (function (\, (nth 0 x)))))))) (bindings--define-key menu [regexp-search] (quote (menu-item "Regular Expression" (lambda nil (interactive) (setq search-default-mode t) (message "Regular-expression search enabled")) :help "Enable regular-expression search" :button (:radio eq search-default-mode t)))) (bindings--define-key menu [regular-search] (quote (menu-item "Literal Search" (lambda nil (interactive) (when search-default-mode (setq search-default-mode nil) (when (symbolp search-default-mode) (message "Literal search enabled")))) :help "Disable special search modes" :button (:radio not search-default-mode)))) (bindings--define-key menu [custom-separator] menu-bar-separator) (bindings--define-key menu [case-fold-search] (menu-bar-make-toggle toggle-case-fold-search case-fold-search "Ignore Case" "Case-Insensitive Search %s" "Ignore letter-case in search commands")) menu)) nil [53823 55769])
            ("menu-bar-options-menu" variable (:default-value (let ((menu (make-sparse-keymap "Options"))) (bindings--define-key menu [customize] (\` (menu-item "Customize Emacs" (\, menu-bar-custom-menu)))) (bindings--define-key menu [package] (quote (menu-item "Manage Emacs Packages" package-list-packages :help "Install or uninstall additional Emacs packages"))) (bindings--define-key menu [save] (quote (menu-item "Save Options" menu-bar-options-save :help "Save options set from the menu above"))) (bindings--define-key menu [custom-separator] menu-bar-separator) (bindings--define-key menu [menu-set-font] (quote (menu-item "Set Default Font..." menu-set-font :visible (display-multi-font-p) :help "Select a default font"))) (if (featurep (quote system-font-setting)) (bindings--define-key menu [menu-system-font] (menu-bar-make-toggle toggle-use-system-font font-use-system-font "Use System Font" "Use system font: %s" "Use the monospaced font defined by the system"))) (bindings--define-key menu [showhide] (\` (menu-item "Show/Hide" (\, menu-bar-showhide-menu)))) (bindings--define-key menu [showhide-separator] menu-bar-separator) (bindings--define-key menu [mule] (\` (menu-item "Multilingual Environment" (\, mule-menu-keymap)))) (bindings--define-key menu [mule-separator] menu-bar-separator) (bindings--define-key menu [debug-on-quit] (menu-bar-make-toggle toggle-debug-on-quit debug-on-quit "Enter Debugger on Quit/C-g" "Debug on Quit %s" "Enter Lisp debugger when C-g is pressed")) (bindings--define-key menu [debug-on-error] (menu-bar-make-toggle toggle-debug-on-error debug-on-error "Enter Debugger on Error" "Debug on Error %s" "Enter Lisp debugger when an error is signaled")) (bindings--define-key menu [debugger-separator] menu-bar-separator) (bindings--define-key menu [blink-cursor-mode] (menu-bar-make-mm-toggle blink-cursor-mode "Blink Cursor" "Whether the cursor blinks (Blink Cursor mode)")) (bindings--define-key menu [cursor-separator] menu-bar-separator) (bindings--define-key menu [save-place] (menu-bar-make-toggle toggle-save-place-globally save-place "Save Place in Files between Sessions" "Saving place in files %s" "Visit files of previous session when restarting Emacs" (require (quote saveplace)) (set-default (quote save-place) (not (symbol-value (quote save-place)))))) (bindings--define-key menu [uniquify] (menu-bar-make-toggle toggle-uniquify-buffer-names uniquify-buffer-name-style "Use Directory Names in Buffer Names" "Directory name in buffer names (uniquify) %s" "Uniquify buffer names by adding parent directory names" (setq uniquify-buffer-name-style (if (not uniquify-buffer-name-style) (quote post-forward-angle-brackets))))) (bindings--define-key menu [edit-options-separator] menu-bar-separator) (bindings--define-key menu [cua-mode] (menu-bar-make-mm-toggle cua-mode "Use CUA Keys (Cut/Paste with C-x/C-c/C-v)" "Use C-z/C-x/C-c/C-v keys for undo/cut/copy/paste" (:visible (or (not (boundp (quote cua-enable-cua-keys))) cua-enable-cua-keys)))) (bindings--define-key menu [cua-emulation-mode] (menu-bar-make-mm-toggle cua-mode "Shift movement mark region (CUA)" "Use shifted movement keys to set and extend the region" (:visible (and (boundp (quote cua-enable-cua-keys)) (not cua-enable-cua-keys))))) (bindings--define-key menu [search-options] (\` (menu-item "Default Search Options" (\, menu-bar-search-options-menu)))) (bindings--define-key menu [line-wrapping] (\` (menu-item "Line Wrapping in This Buffer" (\, menu-bar-line-wrapping-menu)))) (bindings--define-key menu [highlight-separator] menu-bar-separator) (bindings--define-key menu [highlight-paren-mode] (menu-bar-make-mm-toggle show-paren-mode "Highlight Matching Parentheses" "Highlight matching/mismatched parentheses at cursor (Show Paren mode)")) (bindings--define-key menu [transient-mark-mode] (menu-bar-make-mm-toggle transient-mark-mode "Highlight Active Region" "Make text in active region stand out in color (Transient Mark mode)" (:enable (not cua-mode)))) menu)) nil [55771 61090])
            ("menu-bar-games-menu" variable (:default-value (let ((menu (make-sparse-keymap "Games"))) (bindings--define-key menu [zone] (quote (menu-item "Zone Out" zone :help "Play tricks with Emacs display when Emacs is idle"))) (bindings--define-key menu [tetris] (quote (menu-item "Tetris" tetris :help "Falling blocks game"))) (bindings--define-key menu [solitaire] (quote (menu-item "Solitaire" solitaire :help "Get rid of all the stones"))) (bindings--define-key menu [snake] (quote (menu-item "Snake" snake :help "Move snake around avoiding collisions"))) (bindings--define-key menu [pong] (quote (menu-item "Pong" pong :help "Bounce the ball to your opponent"))) (bindings--define-key menu [mult] (quote (menu-item "Multiplication Puzzle" mpuz :help "Exercise brain with multiplication"))) (bindings--define-key menu [life] (quote (menu-item "Life" life :help "Watch how John Conway's cellular automaton evolves"))) (bindings--define-key menu [hanoi] (quote (menu-item "Towers of Hanoi" hanoi :help "Watch Towers-of-Hanoi puzzle solved by Emacs"))) (bindings--define-key menu [gomoku] (quote (menu-item "Gomoku" gomoku :help "Mark 5 contiguous squares (like tic-tac-toe)"))) (bindings--define-key menu [bubbles] (quote (menu-item "Bubbles" bubbles :help "Remove all bubbles using the fewest moves"))) (bindings--define-key menu [black-box] (quote (menu-item "Blackbox" blackbox :help "Find balls in a black box by shooting rays"))) (bindings--define-key menu [adventure] (quote (menu-item "Adventure" dunnet :help "Dunnet, a text Adventure game for Emacs"))) (bindings--define-key menu [5x5] (quote (menu-item "5x5" 5x5 :help "Fill in all the squares on a 5x5 board"))) menu)) nil [61121 63060])
            ("menu-bar-encryption-decryption-menu" variable (:default-value (let ((menu (make-sparse-keymap "Encryption/Decryption"))) (bindings--define-key menu [insert-keys] (quote (menu-item "Insert Keys" epa-insert-keys :help "Insert public keys after the current point"))) (bindings--define-key menu [export-keys] (quote (menu-item "Export Keys" epa-export-keys :help "Export public keys to a file"))) (bindings--define-key menu [import-keys-region] (quote (menu-item "Import Keys from Region" epa-import-keys-region :help "Import public keys from the current region"))) (bindings--define-key menu [import-keys] (quote (menu-item "Import Keys from File..." epa-import-keys :help "Import public keys from a file"))) (bindings--define-key menu [list-keys] (quote (menu-item "List Keys" epa-list-keys :help "Browse your public keyring"))) (bindings--define-key menu [separator-keys] menu-bar-separator) (bindings--define-key menu [sign-region] (quote (menu-item "Sign Region" epa-sign-region :help "Create digital signature of the current region"))) (bindings--define-key menu [verify-region] (quote (menu-item "Verify Region" epa-verify-region :help "Verify digital signature of the current region"))) (bindings--define-key menu [encrypt-region] (quote (menu-item "Encrypt Region" epa-encrypt-region :help "Encrypt the current region"))) (bindings--define-key menu [decrypt-region] (quote (menu-item "Decrypt Region" epa-decrypt-region :help "Decrypt the current region"))) (bindings--define-key menu [separator-file] menu-bar-separator) (bindings--define-key menu [sign-file] (quote (menu-item "Sign File..." epa-sign-file :help "Create digital signature of a file"))) (bindings--define-key menu [verify-file] (quote (menu-item "Verify File..." epa-verify-file :help "Verify digital signature of a file"))) (bindings--define-key menu [encrypt-file] (quote (menu-item "Encrypt File..." epa-encrypt-file :help "Encrypt a file"))) (bindings--define-key menu [decrypt-file] (quote (menu-item "Decrypt File..." epa-decrypt-file :help "Decrypt a file"))) menu)) nil [63062 65403])
            ("menu-bar-read-mail" function (:user-visible-flag t) nil [65405 65532])
            ("menu-bar-tools-menu" variable (:default-value (let ((menu (make-sparse-keymap "Tools"))) (bindings--define-key menu [games] (\` (menu-item "Games" (\, menu-bar-games-menu)))) (bindings--define-key menu [separator-games] menu-bar-separator) (bindings--define-key menu [encryption-decryption] (\` (menu-item "Encryption/Decryption" (\, menu-bar-encryption-decryption-menu)))) (bindings--define-key menu [separator-encryption-decryption] menu-bar-separator) (bindings--define-key menu [simple-calculator] (quote (menu-item "Simple Calculator" calculator :help "Invoke the Emacs built-in quick calculator"))) (bindings--define-key menu [calc] (quote (menu-item "Programmable Calculator" calc :help "Invoke the Emacs built-in full scientific calculator"))) (bindings--define-key menu [calendar] (quote (menu-item "Calendar" calendar :help "Invoke the Emacs built-in calendar"))) (bindings--define-key menu [separator-net] menu-bar-separator) (bindings--define-key menu [browse-web] (quote (menu-item "Browse the Web..." browse-web))) (bindings--define-key menu [directory-search] (quote (menu-item "Directory Search" eudc-tools-menu))) (bindings--define-key menu [compose-mail] (quote (menu-item "Compose New Mail" compose-mail :visible (and mail-user-agent (not (eq mail-user-agent (quote ignore)))) :help "Start writing a new mail message"))) (bindings--define-key menu [rmail] (quote (menu-item "Read Mail" menu-bar-read-mail :visible (and read-mail-command (not (eq read-mail-command (quote ignore)))) :help "Read your mail"))) (bindings--define-key menu [gnus] (quote (menu-item "Read Net News" gnus :help "Read network news groups"))) (bindings--define-key menu [separator-vc] menu-bar-separator) (bindings--define-key menu [vc] nil) (bindings--define-key menu [separator-compare] menu-bar-separator) (bindings--define-key menu [epatch] (quote (menu-item "Apply Patch" menu-bar-epatch-menu))) (bindings--define-key menu [ediff-merge] (quote (menu-item "Merge" menu-bar-ediff-merge-menu))) (bindings--define-key menu [compare] (quote (menu-item "Compare (Ediff)" menu-bar-ediff-menu))) (bindings--define-key menu [separator-spell] menu-bar-separator) (bindings--define-key menu [spell] (quote (menu-item "Spell Checking" ispell-menu-map))) (bindings--define-key menu [separator-prog] menu-bar-separator) (bindings--define-key menu [semantic] (quote (menu-item "Source Code Parsers (Semantic)" semantic-mode :help "Toggle automatic parsing in source code buffers (Semantic mode)" :button (:toggle bound-and-true-p semantic-mode)))) (bindings--define-key menu [ede] (quote (menu-item "Project Support (EDE)" global-ede-mode :help "Toggle the Emacs Development Environment (Global EDE mode)" :button (:toggle bound-and-true-p global-ede-mode)))) (bindings--define-key menu [gdb] (quote (menu-item "Debugger (GDB)..." gdb :help "Debug a program from within Emacs with GDB"))) (bindings--define-key menu [shell-on-region] (quote (menu-item "Shell Command on Region..." shell-command-on-region :enable mark-active :help "Pass marked region to a shell command"))) (bindings--define-key menu [shell] (quote (menu-item "Shell Command..." shell-command :help "Invoke a shell command and catch its output"))) (bindings--define-key menu [compile] (quote (menu-item "Compile..." compile :help "Invoke compiler or Make, view compilation errors"))) (bindings--define-key menu [grep] (quote (menu-item "Search Files (Grep)..." grep :help "Search files for strings or regexps (with Grep)"))) menu)) nil [65534 69595])
            ("menu-bar-describe-menu" variable (:default-value (let ((menu (make-sparse-keymap "Describe"))) (bindings--define-key menu [mule-diag] (quote (menu-item "Show All of Mule Status" mule-diag :visible (default-value (quote enable-multibyte-characters)) :help "Display multilingual environment settings"))) (bindings--define-key menu [describe-coding-system-briefly] (quote (menu-item "Describe Coding System (Briefly)" describe-current-coding-system-briefly :visible (default-value (quote enable-multibyte-characters))))) (bindings--define-key menu [describe-coding-system] (quote (menu-item "Describe Coding System..." describe-coding-system :visible (default-value (quote enable-multibyte-characters))))) (bindings--define-key menu [describe-input-method] (quote (menu-item "Describe Input Method..." describe-input-method :visible (default-value (quote enable-multibyte-characters)) :help "Keyboard layout for specific input method"))) (bindings--define-key menu [describe-language-environment] (\` (menu-item "Describe Language Environment" (\, describe-language-environment-map)))) (bindings--define-key menu [separator-desc-mule] menu-bar-separator) (bindings--define-key menu [list-keybindings] (quote (menu-item "List Key Bindings" describe-bindings :help "Display all current key bindings (keyboard shortcuts)"))) (bindings--define-key menu [describe-current-display-table] (quote (menu-item "Describe Display Table" describe-current-display-table :help "Describe the current display table"))) (bindings--define-key menu [describe-package] (quote (menu-item "Describe Package..." describe-package :help "Display documentation of a Lisp package"))) (bindings--define-key menu [describe-face] (quote (menu-item "Describe Face..." describe-face :help "Display the properties of a face"))) (bindings--define-key menu [describe-variable] (quote (menu-item "Describe Variable..." describe-variable :help "Display documentation of variable/option"))) (bindings--define-key menu [describe-function] (quote (menu-item "Describe Function..." describe-function :help "Display documentation of function/command"))) (bindings--define-key menu [describe-key-1] (quote (menu-item "Describe Key or Mouse Operation..." describe-key :help "Display documentation of command bound to a key, a click, or a menu-item"))) (bindings--define-key menu [describe-mode] (quote (menu-item "Describe Buffer Modes" describe-mode :help "Describe this buffer's major and minor mode"))) menu)) nil [69624 72464])
            ("menu-bar-read-lispref" function (:user-visible-flag t) nil [72466 72589])
            ("menu-bar-read-lispintro" function (:user-visible-flag t) nil [72591 72727])
            ("search-emacs-glossary" function (:user-visible-flag t) nil [72729 72868])
            ("emacs-index-search" function
               (:user-visible-flag t
                :arguments ("topic"))
                nil [72870 73041])
            ("elisp-index-search" function
               (:user-visible-flag t
                :arguments ("topic"))
                nil [73043 73224])
            ("menu-bar-search-documentation-menu" variable (:default-value (let ((menu (make-sparse-keymap "Search Documentation"))) (bindings--define-key menu [search-documentation-strings] (quote (menu-item "Search Documentation Strings..." apropos-documentation :help "Find functions and variables whose doc strings match a regexp"))) (bindings--define-key menu [find-any-object-by-name] (quote (menu-item "Find Any Object by Name..." apropos :help "Find symbols of any kind whose names match a regexp"))) (bindings--define-key menu [find-option-by-value] (quote (menu-item "Find Options by Value..." apropos-value :help "Find variables whose values match a regexp"))) (bindings--define-key menu [find-options-by-name] (quote (menu-item "Find Options by Name..." apropos-user-option :help "Find user options whose names match a regexp"))) (bindings--define-key menu [find-commands-by-name] (quote (menu-item "Find Commands by Name..." apropos-command :help "Find commands whose names match a regexp"))) (bindings--define-key menu [sep1] menu-bar-separator) (bindings--define-key menu [lookup-command-in-manual] (quote (menu-item "Look Up Command in User Manual..." Info-goto-emacs-command-node :help "Display manual section that describes a command"))) (bindings--define-key menu [lookup-key-in-manual] (quote (menu-item "Look Up Key in User Manual..." Info-goto-emacs-key-command-node :help "Display manual section that describes a key"))) (bindings--define-key menu [lookup-subject-in-elisp-manual] (quote (menu-item "Look Up Subject in ELisp Manual..." elisp-index-search :help "Find description of a subject in Emacs Lisp manual"))) (bindings--define-key menu [lookup-subject-in-emacs-manual] (quote (menu-item "Look Up Subject in User Manual..." emacs-index-search :help "Find description of a subject in Emacs User manual"))) (bindings--define-key menu [emacs-terminology] (quote (menu-item "Emacs Terminology" search-emacs-glossary :help "Display the Glossary section of the Emacs manual"))) menu)) nil [73226 75447])
            ("menu-bar-manuals-menu" variable (:default-value (let ((menu (make-sparse-keymap "More Manuals"))) (bindings--define-key menu [man] (quote (menu-item "Read Man Page..." manual-entry :help "Man-page docs for external commands and libraries"))) (bindings--define-key menu [sep2] menu-bar-separator) (bindings--define-key menu [order-emacs-manuals] (quote (menu-item "Ordering Manuals" view-order-manuals :help "How to order manuals from the Free Software Foundation"))) (bindings--define-key menu [lookup-subject-in-all-manuals] (quote (menu-item "Lookup Subject in all Manuals..." info-apropos :help "Find description of a subject in all installed manuals"))) (bindings--define-key menu [other-manuals] (quote (menu-item "All Other Manuals (Info)" Info-directory :help "Read any of the installed manuals"))) (bindings--define-key menu [emacs-lisp-reference] (quote (menu-item "Emacs Lisp Reference" menu-bar-read-lispref :help "Read the Emacs Lisp Reference manual"))) (bindings--define-key menu [emacs-lisp-intro] (quote (menu-item "Introduction to Emacs Lisp" menu-bar-read-lispintro :help "Read the Introduction to Emacs Lisp Programming"))) menu)) nil [75449 76723])
            ("help-with-tutorial-spec-language" function (:user-visible-flag t) nil [76725 76873])
            ("menu-bar-help-menu" variable (:default-value (let ((menu (make-sparse-keymap "Help"))) (bindings--define-key menu [about-gnu-project] (quote (menu-item "About GNU" describe-gnu-project :help "About the GNU System, GNU Project, and GNU/Linux"))) (bindings--define-key menu [about-emacs] (quote (menu-item "About Emacs" about-emacs :help "Display version number, copyright info, and basic help"))) (bindings--define-key menu [sep4] menu-bar-separator) (bindings--define-key menu [describe-no-warranty] (quote (menu-item "(Non)Warranty" describe-no-warranty :help "Explain that Emacs has NO WARRANTY"))) (bindings--define-key menu [describe-copying] (quote (menu-item "Copying Conditions" describe-copying :help "Show the Emacs license (GPL)"))) (bindings--define-key menu [getting-new-versions] (quote (menu-item "Getting New Versions" describe-distribution :help "How to get the latest version of Emacs"))) (bindings--define-key menu [sep2] menu-bar-separator) (bindings--define-key menu [external-packages] (quote (menu-item "Finding Extra Packages" view-external-packages :help "How to get more Lisp packages for use in Emacs"))) (bindings--define-key menu [find-emacs-packages] (quote (menu-item "Search Built-in Packages" finder-by-keyword :help "Find built-in packages and features by keyword"))) (bindings--define-key menu [more-manuals] (\` (menu-item "More Manuals" (\, menu-bar-manuals-menu)))) (bindings--define-key menu [emacs-manual] (quote (menu-item "Read the Emacs Manual" info-emacs-manual :help "Full documentation of Emacs features"))) (bindings--define-key menu [describe] (\` (menu-item "Describe" (\, menu-bar-describe-menu)))) (bindings--define-key menu [search-documentation] (\` (menu-item "Search Documentation" (\, menu-bar-search-documentation-menu)))) (bindings--define-key menu [sep1] menu-bar-separator) (bindings--define-key menu [emacs-psychotherapist] (quote (menu-item "Emacs Psychotherapist" doctor :help "Our doctor will help you feel better"))) (bindings--define-key menu [send-emacs-bug-report] (quote (menu-item "Send Bug Report..." report-emacs-bug :help "Send e-mail to Emacs maintainers"))) (bindings--define-key menu [emacs-manual-bug] (quote (menu-item "How to Report a Bug" info-emacs-bug :help "Read about how to report an Emacs bug"))) (bindings--define-key menu [emacs-known-problems] (quote (menu-item "Emacs Known Problems" view-emacs-problems :help "Read about known problems with Emacs"))) (bindings--define-key menu [emacs-news] (quote (menu-item "Emacs News" view-emacs-news :help "New features of this version"))) (bindings--define-key menu [emacs-faq] (quote (menu-item "Emacs FAQ" view-emacs-FAQ :help "Frequently asked (and answered) questions about Emacs"))) (bindings--define-key menu [emacs-tutorial-language-specific] (quote (menu-item "Emacs Tutorial (choose language)..." help-with-tutorial-spec-language :help "Learn how to use Emacs (choose a language)"))) (bindings--define-key menu [emacs-tutorial] (quote (menu-item "Emacs Tutorial" help-with-tutorial :help "Learn how to use Emacs"))) (and (featurep (quote ns)) (not (eq system-type (quote darwin))) (bindings--define-key menu [info-panel] (quote (menu-item "About Emacs..." ns-do-emacs-info-panel)))) menu)) nil [76875 80623])
            ("bindings--define-key" code nil nil [80625 80712])
            ("bindings--define-key" code nil nil [80713 80807])
            ("bindings--define-key" code nil nil [80808 80901])
            ("bindings--define-key" code nil nil [80902 80986])
            ("bindings--define-key" code nil nil [80987 81071])
            ("bindings--define-key" code nil nil [81072 81172])
            ("menu-bar-menu-frame-live-and-visible-p" function nil nil [81174 81478])
            ("menu-bar-non-minibuffer-window-p" function nil nil [81480 81926])
            ("kill-this-buffer" function (:user-visible-flag t) nil [81928 82472])
            ("kill-this-buffer-enabled-p" function nil nil [82474 82942])
            ("put" code nil nil [82944 83005])
            ("delete-frame-enabled-p" function nil nil [83080 83365])
            ("yank-menu-length" variable (:default-value 20) nil [83367 83478])
            ("menu-bar-update-yank-menu" function (:arguments ("string" "old")) nil [83480 84471])
            ("put" code nil nil [84473 84519])
            ("menu-bar-select-yank" function (:user-visible-flag t) nil [84520 84760])
            ("buffers-menu-max-size" variable (:default-value 10) nil [84782 85126])
            ("buffers-menu-buffer-name-length" variable (:default-value 30) nil [85128 85477])
            ("buffers-menu-show-directories" variable (:default-value (quote unless-uniquify)) nil [85479 86223])
            ("buffers-menu-show-status" variable (:default-value t) nil [86225 86598])
            ("list-buffers-directory" variable nil nil [86600 86709])
            ("make-variable-buffer-local" code nil nil [86710 86762])
            ("menu-bar-select-buffer" function nil nil [86764 86853])
            ("menu-bar-select-frame" function (:arguments ("frame")) nil [86855 86966])
            ("menu-bar-update-buffers-1" function (:arguments ("elt")) nil [86968 87838])
            ("menu-bar-buffers-menu-command-entries" variable nil nil [87907 87957])
            ("menu-bar-select-buffer-function" variable (:default-value (quote switch-to-buffer)) nil [87959 88147])
            ("menu-bar-buffer-vector" function (:arguments ("alist")) nil [88149 88577])
            ("menu-bar-update-buffers" function (:arguments ("force")) nil [88579 92465])
            ("add-hook" code nil nil [92467 92524])
            ("menu-bar-update-buffers" code nil nil [92526 92551])
            ("dolist" code nil nil [93174 93470])
            ("let" code nil nil [93472 93961])
            ("let" code nil nil [93963 95032])
            ("define-minor-mode" code nil nil [95035 96394])
            ("put" code nil nil [96838 96879])
            ("toggle-menu-bar-mode-from-frame" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [96881 97287])
            ("declare-function" code nil nil [97289 97354])
            ("declare-function" code nil nil [97355 97424])
            ("lookup-key-ignore-too-long" function (:arguments ("map" "key")) nil [97426 97640])
            ("popup-menu" function (:arguments ("menu" "position" "prefix" "from-menu-bar")) nil [97642 100652])
            ("popup-menu-normalize-position" function (:arguments ("position")) nil [100654 101402])
            ("tty-menu-open-use-tmm" variable nil nil [101404 101865])
            ("tty-menu--initial-menu-x" variable (:default-value 1) nil [101867 102018])
            ("menu-bar-open" function
               (:user-visible-flag t
                :arguments ("frame"))
                nil [102020 103588])
            ("global-set-key" code nil nil [103590 103627])
            ("buffer-menu-open" function (:user-visible-flag t) nil [103629 103854])
            ("global-set-key" code nil nil [103856 103898])
            ("mouse-buffer-menu-keymap" function nil nil [103900 104227])
            ("tty-menu-navigation-map" variable (:default-value (let ((map (make-sparse-keymap))) (dolist (bind (quote ((keyboard-quit . tty-menu-exit) (keyboard-escape-quit . tty-menu-exit) (forward-char . tty-menu-next-menu) (backward-char . tty-menu-prev-menu) (right-char . tty-menu-next-menu) (left-char . tty-menu-prev-menu) (next-line . tty-menu-next-item) (previous-line . tty-menu-prev-item) (newline . tty-menu-select) (newline-and-indent . tty-menu-select) (menu-bar-open . tty-menu-exit)))) (substitute-key-definition (car bind) (cdr bind) map (current-global-map))) (define-key map [menu-bar t] (quote tty-menu-exit)) (define-key map [18] (quote tty-menu-select)) (define-key map [10] (quote tty-menu-select)) (define-key map [return] (quote tty-menu-select)) (define-key map [linefeed] (quote tty-menu-select)) (define-key map [mouse-1] (quote tty-menu-select)) (define-key map [drag-mouse-1] (quote tty-menu-select)) (define-key map [mouse-2] (quote tty-menu-select)) (define-key map [drag-mouse-2] (quote tty-menu-select)) (define-key map [mouse-3] (quote tty-menu-select)) (define-key map [drag-mouse-3] (quote tty-menu-select)) (define-key map [wheel-down] (quote tty-menu-next-item)) (define-key map [wheel-up] (quote tty-menu-prev-item)) (define-key map [wheel-left] (quote tty-menu-prev-menu)) (define-key map [wheel-right] (quote tty-menu-next-menu)) (define-key map [S-mouse-1] (quote tty-menu-next-item)) (define-key map [S-drag-mouse-1] (quote tty-menu-next-item)) (define-key map [S-mouse-2] (quote tty-menu-prev-item)) (define-key map [S-drag-mouse-2] (quote tty-menu-prev-item)) (define-key map [S-mouse-3] (quote tty-menu-prev-item)) (define-key map [S-drag-mouse-3] (quote tty-menu-prev-item)) (define-key map [header-line mouse-1] (quote tty-menu-select)) (define-key map [header-line drag-mouse-1] (quote tty-menu-select)) (define-key map [mode-line down-mouse-1] (quote tty-menu-ignore)) (define-key map [mode-line down-mouse-2] (quote tty-menu-ignore)) (define-key map [mode-line down-mouse-3] (quote tty-menu-ignore)) (define-key map [mode-line C-down-mouse-1] (quote tty-menu-ignore)) (define-key map [mode-line C-down-mouse-2] (quote tty-menu-ignore)) (define-key map [mode-line C-down-mouse-3] (quote tty-menu-ignore)) (define-key map [down-mouse-1] (quote tty-menu-ignore)) (define-key map [C-down-mouse-1] (quote tty-menu-ignore)) (define-key map [C-down-mouse-2] (quote tty-menu-ignore)) (define-key map [C-down-mouse-3] (quote tty-menu-ignore)) (define-key map [mouse-movement] (quote tty-menu-mouse-movement)) map)) nil [104229 107774])
            ("menu-bar" package nil nil [107776 107795]))          
      :file "menu-bar.el.gz"
      :pointmax 107823
      :fsize 23242
      :lastmodtime '(22776 51906 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("help-macro" include nil nil [1149 1170])
            ("add-hook" code nil nil [1241 1292])
            ("add-hook" code nil nil [1293 1344])
            ("help-window-point-marker" variable (:default-value (make-marker)) nil [1765 1875])
            ("help-window-old-frame" variable nil nil [1877 1973])
            ("help-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map (char-to-string help-char) (quote help-for-help)) (define-key map [help] (quote help-for-help)) (define-key map [f1] (quote help-for-help)) (define-key map "." (quote display-local-help)) (define-key map "?" (quote help-for-help)) (define-key map "" (quote about-emacs)) (define-key map "" (quote describe-copying)) (define-key map "" (quote view-emacs-debugging)) (define-key map "" (quote view-external-packages)) (define-key map "" (quote view-emacs-FAQ)) (define-key map "" (quote view-order-manuals)) (define-key map "" (quote view-emacs-news)) (define-key map "" (quote describe-distribution)) (define-key map "" (quote view-emacs-problems)) (define-key map "" (quote view-emacs-todo)) (define-key map "" (quote describe-no-warranty)) (define-key map "" (quote describe-input-method)) (define-key map "C" (quote describe-coding-system)) (define-key map "F" (quote Info-goto-emacs-command-node)) (define-key map "I" (quote describe-input-method)) (define-key map "K" (quote Info-goto-emacs-key-command-node)) (define-key map "L" (quote describe-language-environment)) (define-key map "S" (quote info-lookup-symbol)) (define-key map "a" (quote apropos-command)) (define-key map "b" (quote describe-bindings)) (define-key map "c" (quote describe-key-briefly)) (define-key map "d" (quote apropos-documentation)) (define-key map "e" (quote view-echo-area-messages)) (define-key map "f" (quote describe-function)) (define-key map "g" (quote describe-gnu-project)) (define-key map "h" (quote view-hello-file)) (define-key map "i" (quote info)) (define-key map "4i" (quote info-other-window)) (define-key map "k" (quote describe-key)) (define-key map "l" (quote view-lossage)) (define-key map "m" (quote describe-mode)) (define-key map "o" (quote describe-symbol)) (define-key map "n" (quote view-emacs-news)) (define-key map "p" (quote finder-by-keyword)) (define-key map "P" (quote describe-package)) (define-key map "r" (quote info-emacs-manual)) (define-key map "s" (quote describe-syntax)) (define-key map "t" (quote help-with-tutorial)) (define-key map "w" (quote where-is)) (define-key map "v" (quote describe-variable)) (define-key map "q" (quote help-quit)) map)) nil [1975 4264])
            ("define-key" code nil nil [4266 4330])
            ("define-key" code nil nil [4331 4375])
            ("define-key" code nil nil [4376 4418])
            ("fset" code nil nil [4419 4448])
            ("help-button-cache" variable nil nil [4517 4547])
            ("help-quit" function (:user-visible-flag t) nil [4551 4645])
            ("help-return-method" variable nil nil [4647 5016])
            ("define-obsolete-function-alias" code nil nil [5018 5111])
            ("help-print-return-message" function (:arguments ("function")) nil [5112 7407])
            ("fset" code nil nil [7467 7528])
            ("defalias" code nil nil [7530 7570])
            ("defalias" code nil nil [7603 7652])
            ("make-help-screen" code nil nil [7698 10812])
            ("function-called-at-point" function nil nil [10817 12549])
            ("view-help-file" function (:arguments ("file" "dir")) nil [12580 12735])
            ("describe-distribution" function (:user-visible-flag t) nil [12737 12881])
            ("describe-copying" function (:user-visible-flag t) nil [12883 13021])
            ("describe-gnu-project" function (:user-visible-flag t) nil [13069 13225])
            ("define-obsolete-function-alias" code nil nil [13227 13306])
            ("describe-no-warranty" function (:user-visible-flag t) nil [13308 13554])
            ("describe-prefix-bindings" function (:user-visible-flag t) nil [13556 14062])
            ("setq" code nil nil [14153 14205])
            ("view-emacs-news" function
               (:user-visible-flag t
                :arguments ("version"))
                nil [14207 16617])
            ("view-emacs-todo" function
               (:user-visible-flag t
                :arguments ("_arg"))
                nil [16619 16738])
            ("define-obsolete-function-alias" code nil nil [16740 16807])
            ("view-echo-area-messages" function (:user-visible-flag t) nil [16810 17135])
            ("view-order-manuals" function (:user-visible-flag t) nil [17137 17315])
            ("view-emacs-FAQ" function (:user-visible-flag t) nil [17317 17504])
            ("view-emacs-problems" function (:user-visible-flag t) nil [17506 17654])
            ("view-emacs-debugging" function (:user-visible-flag t) nil [17656 17779])
            ("view-external-packages" function (:user-visible-flag t) nil [17848 18005])
            ("view-lossage" function (:user-visible-flag t) nil [18007 18976])
            ("describe-bindings" function
               (:user-visible-flag t
                :arguments ("prefix" "buffer"))
                nil [18997 19833])
            ("describe-bindings-internal" function (:arguments ("menus" "prefix")) nil [19876 20610])
            ("where-is" function
               (:user-visible-flag t
                :arguments ("definition" "insert"))
                nil [20612 22774])
            ("help-key-description" function (:arguments ("key" "untranslated")) nil [22776 23136])
            ("describe-key-briefly" function
               (:user-visible-flag t
                :arguments ("key" "insert" "untranslated"))
                nil [23138 26260])
            ("help--key-binding-keymap" function (:arguments ("key" "accept-default" "no-remap" "position")) nil [26262 27324])
            ("help--binding-locus" function (:arguments ("key" "position")) nil [27326 29031])
            ("describe-key" function
               (:user-visible-flag t
                :arguments ("key" "untranslated" "up-event"))
                nil [29033 35379])
            ("describe-mode" function
               (:user-visible-flag t
                :arguments ("buffer"))
                nil [35382 39247])
            ("describe-minor-mode" function
               (:user-visible-flag t
                :arguments ("minor-mode"))
                nil [39250 40137])
            ("describe-minor-mode-completion-table-for-symbol" function nil nil [40149 40363])
            ("describe-minor-mode-from-symbol" function
               (:user-visible-flag t
                :arguments ("symbol"))
                nil [40365 40709])
            ("describe-minor-mode-completion-table-for-indicator" function nil nil [40724 41041])
            ("describe-minor-mode-from-indicator" function
               (:user-visible-flag t
                :arguments ("indicator"))
                nil [41043 41592])
            ("lookup-minor-mode-from-indicator" function (:arguments ("indicator")) nil [41594 42384])
            ("temp-buffer-max-height" variable (:default-value (lambda (buffer) (if (and (display-graphic-p) (eq (selected-window) (frame-root-window))) (/ (x-display-pixel-height) (frame-char-height) 2) (/ (- (frame-height) 2) 2)))) nil [42432 43201])
            ("temp-buffer-max-width" variable (:default-value (lambda (buffer) (if (and (display-graphic-p) (eq (selected-window) (frame-root-window))) (/ (x-display-pixel-width) (frame-char-width) 2) (/ (- (frame-width) 2) 2)))) nil [43203 43967])
            ("define-minor-mode" code nil nil [43969 45125])
            ("resize-temp-buffer-window" function (:arguments ("window")) nil [45127 46884])
            ("help-window-select" variable nil nil [46904 47872])
            ("help-enable-auto-load" variable (:default-value t) nil [47874 48261])
            ("help-window-display-message" function (:arguments ("quit-part" "window" "scroll")) nil [48263 49181])
            ("help-window-setup" function (:arguments ("window" "value")) nil [49183 51984])
            ("with-help-window" function (:arguments ("buffer-name" "body")) nil [52556 53665])
            ("help-form-show" function nil nil [53793 53983])
            ("help--docstring-quote" function (:arguments ("string")) nil [53987 54209])
            ("help-split-fundoc" function (:arguments ("docstring" "def")) nil [54433 55446])
            ("help-add-fundoc-usage" function (:arguments ("docstring" "arglist")) nil [55448 56298])
            ("help-function-arglist" function (:arguments ("def" "preserve-names")) nil [56300 58859])
            ("help--make-usage" function (:arguments ("function" "arglist")) nil [58861 59299])
            ("define-obsolete-function-alias" code nil nil [59301 59375])
            ("help--make-usage-docstring" function (:arguments ("fn" "arglist")) nil [59377 59532])
            ("help" package nil nil [59536 59551]))          
      :file "help.el.gz"
      :pointmax 59575
      :fsize 17070
      :lastmodtime '(22676 23208 0 0)
      :unmatched-syntax '((close-paren 1170 . 1171) (symbol 1131 . 1148) (open-paren 1130 . 1131))))
  :file "!usr!local!Cellar!emacs-plus!25.2!share!emacs!25.2!lisp!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
