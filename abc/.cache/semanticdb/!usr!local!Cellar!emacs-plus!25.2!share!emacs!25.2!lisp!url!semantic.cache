;; Object semanticdb-project-database-file
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file"
  :tables
  (list
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("url-parse" include nil nil [929 949])
            ("mm-decode" include nil nil [992 1012])
            ("url-expand-file-name" function (:prototype-flag t) nil [1177 1283])
            ("mm-dissect-buffer" function (:prototype-flag t) nil [1284 1389])
            ("url-scheme-get-property" function (:prototype-flag t) nil [1390 1471])
            ("declare-function" code nil nil [1542 1607])
            ("declare-function" code nil nil [1608 1665])
            ("declare-function" code nil nil [1696 1760])
            ("declare-function" code nil nil [1792 1860])
            ("url-handler-regexp" variable nil nil [3521 3548])
            ("define-minor-mode" code nil nil [3620 4174])
            ("url-handler-regexp" variable (:default-value "\\`\\(https?\\|ftp\\|file\\|nfs\\|ssh\\|scp\\|rsync\\|telnet\\)://") nil [4176 4878])
            ("url-run-real-handler" function (:arguments ("operation" "args")) nil [4880 5150])
            ("url-file-handler-load-in-progress" variable nil nil [5152 5228])
            ("url-file-handler" function (:arguments ("operation" "args")) nil [5245 6752])
            ("url-file-handler-identity" function (:arguments ("args")) nil [6754 6836])
            ("put" code nil nil [6888 6948])
            ("put" code nil nil [6949 7025])
            ("put" code nil nil [7026 7099])
            ("put" code nil nil [7100 7172])
            ("put" code nil nil [7173 7251])
            ("put" code nil nil [7252 7350])
            ("put" code nil nil [7351 7417])
            ("put" code nil nil [7567 7616])
            ("put" code nil nil [7617 7665])
            ("put" code nil nil [7813 7860])
            ("url-handler-expand-file-name" function (:arguments ("file" "base")) nil [7862 8356])
            ("url-handler-directory-file-name" function (:arguments ("dir")) nil [8754 8973])
            ("url-handler-unhandled-file-name-directory" function (:arguments ("filename")) nil [8975 9540])
            ("url-handler-file-remote-p" function (:arguments ("filename" "identification" "_connected")) nil [9542 10399])
            ("url-copy-file" function (:arguments ("url" "newname" "ok-if-already-exists" "_keep-time" "_preserve-uid-gid")) nil [10445 11536])
            ("put" code nil nil [11537 11587])
            ("url-file-local-copy" function (:arguments ("url" "ignored")) nil [11604 11891])
            ("put" code nil nil [11892 11954])
            ("url-insert" function (:arguments ("buffer" "beg" "end")) nil [11956 13110])
            ("url-http-codes" variable nil nil [13112 13135])
            ("url-insert-buffer-contents" function (:arguments ("buffer" "url" "visit" "beg" "end" "replace")) nil [13152 14224])
            ("url-insert-file-contents" function (:arguments ("url" "visit" "beg" "end" "replace")) nil [14241 15479])
            ("put" code nil nil [15481 15553])
            ("url-file-name-completion" function (:arguments ("url" "_directory" "_predicate")) nil [15555 15777])
            ("put" code nil nil [15778 15850])
            ("url-file-name-all-completions" function (:arguments ("_file" "_directory")) nil [15852 16060])
            ("put" code nil nil [16061 16148])
            ("url-handlers-create-wrapper" function (:arguments ("method" "args")) nil [16208 16817])
            ("url-handlers-create-wrapper" code nil nil [16819 16868])
            ("url-handlers-create-wrapper" code nil nil [16869 16940])
            ("url-handlers-create-wrapper" code nil nil [16941 16991])
            ("url-handlers-create-wrapper" code nil nil [16992 17043])
            ("url-handlers-create-wrapper" code nil nil [17044 17096])
            ("url-handlers-create-wrapper" code nil nil [17097 17150])
            ("url-handlers-create-wrapper" code nil nil [17151 17230])
            ("url-handlers-create-wrapper" code nil nil [17231 17308])
            ("add-hook" code nil nil [17310 17366])
            ("url-handlers-set-buffer-mode" function nil nil [17368 17598])
            ("url-handlers" package nil nil [17600 17623]))          
      :file "url-handlers.el.gz"
      :pointmax 17655
      :fsize 6006
      :lastmodtime '(22676 23208 0 0)
      :unmatched-syntax '((close-paren 1012 . 1013) (symbol 974 . 991) (open-paren 973 . 974)))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("url-vars" include nil nil [914 933])
            ("socks-open-network-stream" function (:prototype-flag t) nil [1006 1051])
            ("url-gateway" customgroup (:user-visible-flag t) nil [1053 1120])
            ("url-gateway-local-host-regexp" variable nil nil [1122 1288])
            ("url-gateway-prompt-pattern" variable (:default-value "^[^#$%>;]*[#$%>;] *") nil [1290 1463])
            ("url-gateway-rlogin-host" variable nil nil [1465 1626])
            ("url-gateway-rlogin-user-name" variable nil nil [1628 1799])
            ("url-gateway-rlogin-parameters" variable (:default-value (quote ("telnet" "-8"))) nil [1801 2002])
            ("url-gateway-telnet-host" variable nil nil [2004 2164])
            ("url-gateway-telnet-parameters" variable (:default-value (quote ("exec" "telnet" "-8"))) nil [2166 2384])
            ("url-gateway-telnet-login-prompt" variable (:default-value "^*.?login:") nil [2386 2561])
            ("url-gateway-telnet-password-prompt" variable (:default-value "^*.?password:") nil [2563 2744])
            ("url-gateway-telnet-user-name" variable nil nil [2746 2890])
            ("url-gateway-telnet-password" variable nil nil [2892 3041])
            ("url-gateway-broken-resolution" variable nil nil [3043 3356])
            ("url-gateway-nslookup-program" variable (:default-value "nslookup") nil [3358 3541])
            ("url-gateway-nslookup-host" function
               (:user-visible-flag t
                :arguments ("host"))
                nil [3582 4263])
            ("url-wait-for-string" function (:arguments ("regexp" "proc")) nil [4297 4610])
            ("url-open-rlogin" function (:arguments ("name" "buffer" "host" "service")) nil [4644 5380])
            ("url-open-telnet" function (:arguments ("name" "buffer" "host" "service")) nil [5414 6893])
            ("url-open-stream" function (:arguments ("name" "buffer" "host" "service" "gateway-method")) nil [6910 8907])
            ("url-gw" package nil nil [8909 8926]))          
      :file "url-gw.el.gz"
      :pointmax 8952
      :fsize 2913
      :lastmodtime '(22676 23208 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [928 945])
            ("subr-x" include nil nil [967 984])
            ("url-callback-arguments" variable nil nil [987 1018])
            ("url-callback-function" variable nil nil [1019 1049])
            ("url-current-object" variable nil nil [1050 1077])
            ("url-http-after-change-function" variable nil nil [1078 1117])
            ("url-http-chunked-counter" variable nil nil [1118 1151])
            ("url-http-chunked-length" variable nil nil [1152 1184])
            ("url-http-chunked-start" variable nil nil [1185 1216])
            ("url-http-connection-opened" variable nil nil [1217 1252])
            ("url-http-content-length" variable nil nil [1253 1285])
            ("url-http-content-type" variable nil nil [1286 1316])
            ("url-http-data" variable nil nil [1317 1339])
            ("url-http-end-of-headers" variable nil nil [1340 1372])
            ("url-http-extra-headers" variable nil nil [1373 1404])
            ("url-http-noninteractive" variable nil nil [1405 1437])
            ("url-http-method" variable nil nil [1438 1462])
            ("url-http-no-retry" variable nil nil [1463 1489])
            ("url-http-process" variable nil nil [1490 1515])
            ("url-http-proxy" variable nil nil [1516 1539])
            ("url-http-response-status" variable nil nil [1540 1573])
            ("url-http-response-version" variable nil nil [1574 1608])
            ("url-http-target-url" variable nil nil [1609 1637])
            ("url-http-transfer-encoding" variable nil nil [1638 1673])
            ("url-show-status" variable nil nil [1674 1698])
            ("url-gw" include nil nil [1700 1717])
            ("url-parse" include nil nil [1718 1738])
            ("url-cookie" include nil nil [1739 1760])
            ("mail-parse" include nil nil [1761 1782])
            ("url-auth" include nil nil [1783 1802])
            ("url" include nil nil [1803 1817])
            ("url-cache-create-filename" function (:prototype-flag t) nil [1818 1867])
            ("url-http-default-port" variable
               (:constant-flag t
                :default-value 80)
                nil [1869 1925])
            ("url-http-asynchronous-p" variable
               (:constant-flag t
                :default-value t)
                nil [1926 1998])
            ("defalias" code nil nil [1999 2058])
            ("url-http-real-basic-auth-storage" variable nil nil [2060 2105])
            ("url-http-proxy-basic-auth-storage" variable nil nil [2106 2152])
            ("url-http-open-connections" variable (:default-value (make-hash-table :test (quote equal) :size 17)) nil [2154 2287])
            ("url-http-version" variable (:default-value "1.1") nil [2289 2564])
            ("url-http-attempt-keepalives" variable (:default-value t) nil [2566 2814])
            ("url-http-codes" variable
               (:constant-flag t
                :default-value (quote ((100 continue "Continue with request") (101 switching-protocols "Switching protocols") (102 processing "Processing (Added by DAV)") (200 OK "OK") (201 created "Created") (202 accepted "Accepted") (203 non-authoritative "Non-authoritative information") (204 no-content "No content") (205 reset-content "Reset content") (206 partial-content "Partial content") (207 multi-status "Multi-status (Added by DAV)") (300 multiple-choices "Multiple choices") (301 moved-permanently "Moved permanently") (302 found "Found") (303 see-other "See other") (304 not-modified "Not modified") (305 use-proxy "Use proxy") (307 temporary-redirect "Temporary redirect") (400 bad-request "Bad Request") (401 unauthorized "Unauthorized") (402 payment-required "Payment required") (403 forbidden "Forbidden") (404 not-found "Not found") (405 method-not-allowed "Method not allowed") (406 not-acceptable "Not acceptable") (407 proxy-authentication-required "Proxy authentication required") (408 request-timeout "Request time-out") (409 conflict "Conflict") (410 gone "Gone") (411 length-required "Length required") (412 precondition-failed "Precondition failed") (413 request-entity-too-large "Request entity too large") (414 request-uri-too-large "Request-URI too large") (415 unsupported-media-type "Unsupported media type") (416 requested-range-not-satisfiable "Requested range not satisfiable") (417 expectation-failed "Expectation failed") (422 unprocessable-entity "Unprocessable Entity (Added by DAV)") (423 locked "Locked") (424 failed-Dependency "Failed Dependency") (500 internal-server-error "Internal server error") (501 not-implemented "Not implemented") (502 bad-gateway "Bad gateway") (503 service-unavailable "Service unavailable") (504 gateway-timeout "Gateway time-out") (505 http-version-not-supported "HTTP version not supported") (507 insufficient-storage "Insufficient storage"))))
                nil [2816 5698])
            ("url-http-debug" function (:arguments ("args")) nil [5963 6346])
            ("url-http-mark-connection-as-busy" function (:arguments ("host" "port" "proc")) nil [6348 6661])
            ("url-http-mark-connection-as-free" function (:arguments ("host" "port" "proc")) nil [6663 7127])
            ("url-http-find-free-connection" function (:arguments ("host" "port" "gateway-method")) nil [7129 8645])
            ("url-http-user-agent-string" function nil nil [8675 8931])
            ("url-http-create-request" function (:arguments ("ref-url")) nil [8933 14777])
            ("url-http--encode-string" function (:arguments ("s")) nil [14779 14891])
            ("url-http-clean-headers" function nil nil [14913 15287])
            ("url-http-handle-authentication" function (:arguments ("proxy")) nil [15289 17633])
            ("url-http-parse-response" function nil nil [17655 18235])
            ("url-http-handle-cookies" function nil nil [18237 18901])
            ("declare-function" code nil nil [18903 18958])
            ("url-http-parse-headers" function nil nil [18960 36805])
            ("declare-function" code nil nil [36807 36875])
            ("url-handle-content-transfer-encoding" function nil nil [36877 37254])
            ("url-http-activate-callback" function nil nil [37273 37683])
            ("url-http-idle-sentinel" function (:arguments ("proc" "why")) nil [37754 38017])
            ("url-http-end-of-document-sentinel" function (:arguments ("proc" "why")) nil [38019 39217])
            ("url-http-simple-after-change-function" function (:arguments ("st" "nd" "length")) nil [39219 39476])
            ("url-http-content-length-after-change-function" function (:arguments ("st" "nd" "length")) nil [39478 40802])
            ("url-http-chunked-encoding-after-change-function" function (:arguments ("st" "nd" "length")) nil [40804 44279])
            ("url-http-wait-for-headers-change-function" function (:arguments ("st" "nd" "length")) nil [44281 49402])
            ("url-http" function (:arguments ("url" "callback" "cbargs" "retry-buffer" "gateway-method")) nil [49404 53187])
            ("url-http-async-sentinel" function (:arguments ("proc" "why")) nil [53189 54102])
            ("url-http-generic-filter" function (:arguments ("proc" "data")) nil [54521 55136])
            ("defalias" code nil nil [55343 55719])
            ("url-http-head" function (:arguments ("url")) nil [55721 55847])
            ("url-http-file-exists-p" function (:arguments ("url")) nil [55849 56220])
            ("defalias" code nil nil [56222 56282])
            ("url-http-head-file-attributes" function (:arguments ("url" "id-format")) nil [56284 56961])
            ("declare-function" code nil nil [56963 57041])
            ("url-http-file-attributes" function (:arguments ("url" "id-format")) nil [57043 57230])
            ("url-http-options" function (:arguments ("url")) nil [57232 59443])
            ("tls" include nil nil [59572 59586])
            ("url-https-default-port" variable
               (:constant-flag t
                :default-value 443)
                nil [59588 59647])
            ("url-https-asynchronous-p" variable
               (:constant-flag t
                :default-value t)
                nil [59648 59722])
            ("defalias" code nil nil [59978 60038])
            ("url-https-create-secure-wrapper" function (:arguments ("method" "args")) nil [60040 60403])
            ("url-https-create-secure-wrapper" code nil nil [60453 60512])
            ("url-https-create-secure-wrapper" code nil nil [60575 60628])
            ("url-https-create-secure-wrapper" code nil nil [60693 60748])
            ("url-https-create-secure-wrapper" code nil nil [60813 60888])
            ("url-http" package nil nil [60890 60909]))          
      :file "url-http.el.gz"
      :pointmax 60937
      :fsize 16826
      :lastmodtime '(22676 23208 0 0)
      :unmatched-syntax '((close-paren 984 . 985) (symbol 947 . 964) (open-paren 946 . 947)))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("url-version" variable
               (:constant-flag t
                :default-value "Emacs")
                nil [874 939])
            ("url" customgroup (:user-visible-flag t) nil [941 1107])
            ("url-file" customgroup (:user-visible-flag t) nil [1109 1180])
            ("url-cache" customgroup (:user-visible-flag t) nil [1182 1275])
            ("url-mime" customgroup (:user-visible-flag t) nil [1277 1356])
            ("url-hairy" customgroup (:user-visible-flag t) nil [1358 1439])
            ("url-current-object" variable nil nil [1442 1521])
            ("url-current-mime-headers" variable nil nil [1523 1629])
            ("mapc" code nil nil [1631 1723])
            ("url-honor-refresh-requests" variable (:default-value t) nil [1725 2192])
            ("url-automatic-caching" variable nil nil [2194 2346])
            ("define-obsolete-variable-alias" code nil nil [2348 2432])
            ("url-personal-mail-address" variable nil nil [2434 2649])
            ("url-directory-index-file" variable (:default-value "index.html") nil [2651 2900])
            ("url-privacy-level" variable (:default-value (quote (email))) nil [2902 4747])
            ("url-inhibit-uncompression" variable nil nil [4749 4825])
            ("url-uncompressor-alist" variable (:default-value (quote ((".z" . "x-gzip") (".gz" . "x-gzip") (".uue" . "x-uuencoded") (".hqx" . "x-hqx") (".Z" . "x-compress") (".bz2" . "x-bzip2") (".xz" . "x-xz")))) nil [4827 5257])
            ("url-mail-command" variable (:default-value (quote compose-mail)) nil [5259 5593])
            ("url-proxy-services" variable nil nil [5595 5923])
            ("url-standalone-mode" variable nil nil [5925 6027])
            ("url-mime-separator-chars" variable (:default-value (mapcar (quote identity) (concat "ABCDEFGHIJKLMNOPQRSTUVWXYZ" "abcdefghijklmnopqrstuvwxyz" "0123456789'()+_,-./=?"))) nil [6029 6245])
            ("url-bad-port-list" variable (:default-value (quote ("25" "119" "19"))) nil [6247 6561])
            ("url-mime-content-type-charset-regexp" variable (:default-value ";[ 	]*charset=\"?\\([^\"]+\\)\"?") nil [6563 6714])
            ("url-request-data" variable nil nil [6716 6787])
            ("url-request-extra-headers" variable nil nil [6789 6931])
            ("url-request-noninteractive" variable nil nil [6933 7037])
            ("url-request-method" variable nil nil [7039 7112])
            ("url-mime-encoding-string" variable (:default-value (and (fboundp (quote zlib-available-p)) (zlib-available-p) "gzip")) nil [7114 7294])
            ("mm-mime-mule-charset-alist" variable nil nil [7296 7331])
            ("declare-function" code nil nil [7332 7384])
            ("url-mime-charset-string" function nil nil [7591 8114])
            ("url-mime-charset-string" variable nil nil [8116 8342])
            ("url-set-mime-charset-string" function nil nil [8344 8441])
            ("add-hook" code nil nil [8493 8563])
            ("url-mime-language-string" variable nil nil [8596 9311])
            ("url-mime-accept-string" variable nil nil [9313 9420])
            ("url-package-version" variable nil nil [9422 9495])
            ("url-package-name" variable nil nil [9497 9555])
            ("url-system-type" variable nil nil [9557 9620])
            ("url-os-type" variable nil nil [9621 9668])
            ("url-max-password-attempts" variable (:default-value 5) nil [9670 9860])
            ("url-temporary-directory" variable (:default-value (or (getenv "TMPDIR") "/tmp")) nil [9862 9995])
            ("make-obsolete-variable" code nil nil [9996 10081])
            ("url-show-status" variable (:default-value t) nil [10083 10302])
            ("url-using-proxy" variable nil nil [10304 10417])
            ("url-news-server" variable nil nil [10419 10722])
            ("url-nonrelative-link" variable (:default-value "\\`\\([a-zA-Z][-a-zA-Z0-9+.]*:\\)") nil [10916 11041])
            ("url-max-redirections" variable (:default-value 30) nil [11043 11265])
            ("url-confirmation-func" variable (:default-value (quote y-or-n-p)) nil [11267 11690])
            ("url-gateway-method" variable (:default-value (quote native)) nil [11692 12491])
            ("url-user-agent" variable (:default-value (format "User-Agent: %sURL/%s
" (if url-package-name (concat url-package-name "/" url-package-version " ") "") url-version)) nil [12493 12986])
            ("url-setup-done" variable nil nil [12988 13052])
            ("url-weekday-alist" variable
               (:constant-flag t
                :default-value (quote (("Sunday" . 0) ("Monday" . 1) ("Tuesday" . 2) ("Wednesday" . 3) ("Thursday" . 4) ("Friday" . 5) ("Saturday" . 6) ("Tues" . 2) ("Thurs" . 4) ("Sun" . 0) ("Mon" . 1) ("Tue" . 2) ("Wed" . 3) ("Thu" . 4) ("Fri" . 5) ("Sat" . 6))))
                nil [13054 13327])
            ("url-monthabbrev-alist" variable
               (:constant-flag t
                :default-value (quote (("Jan" . 1) ("Feb" . 2) ("Mar" . 3) ("Apr" . 4) ("May" . 5) ("Jun" . 6) ("Jul" . 7) ("Aug" . 8) ("Sep" . 9) ("Oct" . 10) ("Nov" . 11) ("Dec" . 12))))
                nil [13329 13521])
            ("url-lazy-message-time" variable nil nil [13523 13555])
            ("url-extensions-header" variable (:default-value "Security/Digest Security/SSL") nil [13598 13659])
            ("url-parse-syntax-table" variable (:default-value (copy-syntax-table emacs-lisp-mode-syntax-table)) nil [13661 13780])
            ("modify-syntax-entry" code nil nil [13782 13834])
            ("modify-syntax-entry" code nil nil [13835 13887])
            ("modify-syntax-entry" code nil nil [13888 13940])
            ("modify-syntax-entry" code nil nil [13941 13993])
            ("modify-syntax-entry" code nil nil [13994 14045])
            ("url-load-hook" variable nil nil [14047 14153])
            ("url-working-buffer" variable
               (:constant-flag t
                :default-value " *url-work")
                nil [14281 14323])
            ("url-gateway-unplugged" variable nil nil [14325 14506])
            ("url-vars" package nil nil [14508 14527]))          
      :file "url-vars.el.gz"
      :pointmax 14555
      :fsize 5554
      :lastmodtime '(22676 23208 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [939 956])
            ("xml" include nil nil [959 973])
            ("url-util" include nil nil [974 993])
            ("url-handlers" include nil nil [994 1017])
            ("url-http" include nil nil [1018 1037])
            ("url-dav-supported-protocols" variable (:default-value (quote (1 2))) nil [1039 1118])
            ("url-http-content-type" variable nil nil [1142 1172])
            ("url-http-response-status" variable nil nil [1173 1206])
            ("url-http-end-of-headers" variable nil nil [1207 1239])
            ("url-intersection" function (:arguments ("l1" "l2")) nil [1241 1516])
            ("url-dav-supported-p" function (:arguments ("url")) nil [1533 1754])
            ("url-dav-node-text" function (:arguments ("node")) nil [1756 1937])
            ("url-dav-datatype-attribute" variable
               (:constant-flag t
                :default-value (quote urn:uuid:c2f41010-65b3-11d1-a29f-00aa00c14882/dt))
                nil [2187 2276])
            ("url-dav-process-integer-property" function (:arguments ("node")) nil [2278 2382])
            ("url-dav-process-number-property" function (:arguments ("node")) nil [2384 2476])
            ("url-dav-iso8601-regexp" variable
               (:constant-flag t
                :default-value (let* ((dash "-?") (colon ":?") (4digit "\\([0-9][0-9][0-9][0-9]\\)") (2digit "\\([0-9][0-9]\\)") (date-fullyear 4digit) (date-month 2digit) (date-mday 2digit) (time-hour 2digit) (time-minute 2digit) (time-second 2digit) (time-secfrac "\\(\\.[0-9]+\\)?") (time-numoffset (concat "[-+]\\(" time-hour "\\):" time-minute)) (time-offset (concat "Z" time-numoffset)) (partial-time (concat time-hour colon time-minute colon time-second time-secfrac)) (full-date (concat date-fullyear dash date-month dash date-mday)) (full-time (concat partial-time time-offset)) (date-time (concat full-date "T" full-time))) (list (concat "^" full-date) (concat "T" partial-time) (concat "Z" time-numoffset))))
                nil [2478 3462])
            ("url-dav-process-date-property" function (:arguments ("node")) nil [3464 5191])
            ("url-dav-process-boolean-property" function (:arguments ("node")) nil [5193 5293])
            ("url-dav-process-uri-property" function (:arguments ("node")) nil [5295 5440])
            ("url-dav-find-parser" function (:arguments ("node")) nil [5442 5757])
            ("url-dav-dispatch-node" function (:arguments ("node")) nil [5759 5845])
            ("url-dav-process-DAV:prop" function (:arguments ("node")) nil [5847 7668])
            ("url-dav-process-DAV:supportedlock" function (:arguments ("node")) nil [7670 8498])
            ("url-dav-process-subnode-property" function (:arguments ("node")) nil [8500 8645])
            ("defalias" code nil nil [8647 8718])
            ("defalias" code nil nil [8719 8797])
            ("defalias" code nil nil [8798 8872])
            ("defalias" code nil nil [8873 8948])
            ("defalias" code nil nil [8949 9031])
            ("defalias" code nil nil [9032 9110])
            ("defalias" code nil nil [9111 9186])
            ("defalias" code nil nil [9187 9265])
            ("defalias" code nil nil [9266 9340])
            ("url-dav-process-DAV:locktoken" function (:arguments ("node")) nil [9342 9572])
            ("url-dav-process-DAV:owner" function (:arguments ("node")) nil [9574 9778])
            ("url-dav-process-DAV:activelock" function (:arguments ("node")) nil [9780 10270])
            ("url-dav-process-DAV:lockdiscovery" function (:arguments ("node")) nil [10272 10739])
            ("url-dav-process-DAV:status" function (:arguments ("node")) nil [10741 11068])
            ("url-dav-process-DAV:propstat" function (:arguments ("node")) nil [11070 11647])
            ("url-dav-process-DAV:response" function (:arguments ("node")) nil [11649 12399])
            ("url-dav-process-DAV:multistatus" function (:arguments ("node")) nil [12401 12638])
            ("url-dav-process-response" function (:arguments ("buffer" "url")) nil [12689 14233])
            ("url-dav-request" function (:arguments ("url" "method" "tag" "body" "depth" "headers" "namespaces")) nil [14250 15923])
            ("url-dav-get-properties" function (:arguments ("url" "attributes" "depth" "namespaces")) nil [15925 16487])
            ("define-inline" code nil nil [16489 16654])
            ("url-dav-lock-identifier" variable (:default-value (concat "mailto:" user-mail-address)) nil [16678 17083])
            ("url-dav-lock-resource" function (:arguments ("url" "exclusive" "depth")) nil [17085 18754])
            ("url-dav-active-locks" function (:arguments ("url" "depth")) nil [18756 19934])
            ("url-dav-unlock-resource" function (:arguments ("url" "lock-token")) nil [19936 20479])
            ("url-dav-file-attributes-mode-string" function (:arguments ("properties")) nil [20511 21659])
            ("url-dav-file-attributes" function (:arguments ("url" "id-format")) nil [21661 23362])
            ("url-dav-save-resource" function (:arguments ("url" "obj" "content-type" "lock-token")) nil [23364 24383])
            ("url-dav-delete-something" function (:arguments ("url" "lock-token" "error-checking")) nil [24406 24857])
            ("url-dav-delete-directory" function (:arguments ("url" "recursive" "lock-token")) nil [24861 25656])
            ("url-dav-delete-file" function (:arguments ("url" "lock-token")) nil [25658 26281])
            ("url-dav-directory-files" function (:arguments ("url" "full" "match" "nosort" "files-only")) nil [26283 28075])
            ("url-dav-file-directory-p" function (:arguments ("url")) nil [28077 28333])
            ("url-dav-make-directory" function (:arguments ("url" "parents")) nil [28335 29087])
            ("url-dav-rename-file" function (:arguments ("oldname" "newname" "overwrite")) nil [29089 30344])
            ("url-dav-file-name-all-completions" function (:arguments ("file" "url")) nil [30346 30575])
            ("url-dav-file-name-completion" function (:arguments ("file" "url")) nil [30577 31703])
            ("url-dav-register-handler" function (:arguments ("op")) nil [31705 31811])
            ("mapc" code nil nil [31813 32187])
            ("url-dav-vc-registered" function (:arguments ("url")) nil [32306 32486])
            ("url-dav" package nil nil [32516 32534]))          
      :file "url-dav.el.gz"
      :pointmax 32561
      :fsize 9868
      :lastmodtime '(22676 23208 0 0)
      :unmatched-syntax '((close-paren 24857 . 24858) (symbol 24386 . 24403) (open-paren 24385 . 24386) (close-paren 956 . 957) (symbol 921 . 938) (open-paren 920 . 921)))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("mailcap" include nil nil [1060 1078])
            ("mm-view" include nil nil [1124 1142])
            ("mm-decode" include nil nil [1101 1121])
            ("url-vars" include nil nil [1145 1164])
            ("url-cookie" include nil nil [1165 1186])
            ("url-history" include nil nil [1187 1209])
            ("url-expand" include nil nil [1210 1231])
            ("url-privacy" include nil nil [1232 1254])
            ("url-methods" include nil nil [1255 1277])
            ("url-proxy" include nil nil [1278 1298])
            ("url-parse" include nil nil [1299 1319])
            ("url-util" include nil nil [1320 1339])
            ("url-configuration-directory" variable (:default-value (locate-user-emacs-file "url/" ".url/")) nil [1342 1521])
            ("url-do-setup" function nil nil [1523 3113])
            ("url-redirect-buffer" variable nil nil [3300 3603])
            ("url-retrieve-number-of-calls" variable nil nil [3605 3644])
            ("url-cache-prune-cache" function (:prototype-flag t) nil [3645 3690])
            ("url-retrieve" function (:arguments ("url" "callback" "cbargs" "silent" "inhibit-cookies")) nil [3707 5844])
            ("url-retrieve-internal" function (:arguments ("url" "callback" "cbargs" "silent" "inhibit-cookies")) nil [5846 7878])
            ("url-retrieve-synchronously" function (:arguments ("url" "silent" "inhibit-cookies")) nil [7895 11616])
            ("declare-function" code nil nil [11683 11778])
            ("declare-function" code nil nil [11779 11865])
            ("url-mm-callback" function (:arguments ("ignored")) nil [11867 12616])
            ("url-mm-url" function (:arguments ("url")) nil [12618 13059])
            ("url-dead-buffer-list" variable nil nil [13239 13272])
            ("url-mark-buffer-as-dead" function (:arguments ("buff")) nil [13274 13347])
            ("url-gc-dead-buffers" function nil nil [13349 13501])
            ("cond" code nil nil [13503 13987])
            ("url" package nil nil [13989 14003]))          
      :file "url.el.gz"
      :pointmax 14026
      :fsize 5165
      :lastmodtime '(22676 23208 0 0)
      :unmatched-syntax '((close-paren 1142 . 1143) (symbol 1081 . 1098) (open-paren 1080 . 1081)))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("url-util" include nil nil [861 880])
            ("url-parse" include nil nil [881 901])
            ("url-domsuf" include nil nil [902 923])
            ("cl-lib" include nil nil [944 961])
            ("url-cookie" customgroup (:user-visible-flag t) nil [964 1061])
            ("cl-defstruct" code nil nil [1181 1370])
            ("url-cookie-storage" variable nil nil [1372 1439])
            ("url-cookie-secure-storage" variable nil nil [1440 1514])
            ("url-cookie-file" variable nil nil [1515 1686])
            ("url-cookie-confirmation" variable nil nil [1688 1842])
            ("url-cookie-multiple-line" variable nil nil [1844 2153])
            ("url-cookies-changed-since-last-save" variable nil nil [2155 2275])
            ("url-cookie-parse-file" function (:arguments ("fname")) nil [2277 2474])
            ("url-cookie-clean-up" function (:arguments ("secure")) nil [2476 2990])
            ("url-cookie-write-file" function (:arguments ("fname")) nil [2992 4065])
            ("url-cookie-store" function (:arguments ("name" "value" "expires" "domain" "localpart" "secure")) nil [4067 6124])
            ("url-cookie-expired-p" function (:arguments ("cookie")) nil [6126 6370])
            ("url-cookie-retrieve" function (:arguments ("host" "localpart" "secure")) nil [6372 7497])
            ("url-cookie-generate-header-lines" function (:arguments ("host" "localpart" "secure")) nil [7499 8262])
            ("url-cookie-trusted-urls" variable nil nil [8264 8428])
            ("url-cookie-untrusted-urls" variable nil nil [8430 8595])
            ("url-cookie-host-can-set-p" function (:arguments ("host" "domain")) nil [8597 9125])
            ("url-cookie-handle-set-cookie" function (:arguments ("str")) nil [9127 12649])
            ("url-cookie-timer" variable nil nil [12651 12680])
            ("url-cookie-save-interval" variable (:default-value 3600) nil [12682 13157])
            ("url-cookie-setup-save-timer" function (:user-visible-flag t) nil [13159 13491])
            ("url-cookie-list" function (:user-visible-flag t) nil [13536 14895])
            ("url-cookie-delete" function (:user-visible-flag t) nil [14897 15679])
            ("url-cookie-quit" function (:user-visible-flag t) nil [15681 15785])
            ("url-cookie-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (suppress-keymap map) (define-key map "q" (quote url-cookie-quit)) (define-key map [delete] (quote url-cookie-delete)) (define-key map [(control k)] (quote url-cookie-delete)) map)) nil [15787 16031])
            ("define-derived-mode" code nil nil [16033 16212])
            ("url-cookie" package nil nil [16214 16235]))          
      :file "url-cookie.el.gz"
      :pointmax 16265
      :fsize 5216
      :lastmodtime '(22676 23208 0 0)
      :unmatched-syntax '((close-paren 961 . 962) (symbol 926 . 943) (open-paren 925 . 926)))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("url-vars" include nil nil [861 880])
            ("auth-source" include nil nil [881 903])
            ("cl-lib" include nil nil [923 940])
            ("url-scheme-get-property" function (:prototype-flag t) nil [943 992])
            ("cl-defstruct" code nil nil [994 1360])
            ("url-port" function (:arguments ("urlobj")) nil [1362 1769])
            ("url-path-and-query" function (:arguments ("urlobj")) nil [1771 2276])
            ("url-port-if-non-default" function (:arguments ("urlobj")) nil [2278 2630])
            ("url-recreate-url" function (:arguments ("urlobj")) nil [2647 3375])
            ("url-recreate-url-attributes" function (:arguments ("urlobj")) nil [3377 3786])
            ("url-generic-parse-url" function (:arguments ("url")) nil [3803 8160])
            ("url-bit-for-url" function (:arguments ("method" "lookfor" "url")) nil [8162 8766])
            ("url-user-for-url" function (:arguments ("url")) nil [8768 8896])
            ("url-password-for-url" function (:arguments ("url")) nil [8898 9040])
            ("url-parse" package nil nil [9042 9062]))          
      :file "url-parse.el.gz"
      :pointmax 9091
      :fsize 3390
      :lastmodtime '(22676 23208 0 0)
      :unmatched-syntax '((close-paren 940 . 941) (symbol 905 . 922) (open-paren 904 . 905)))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("url-vars" include nil nil [864 883])
            ("url-device-type" function (:arguments ("device")) nil [885 1034])
            ("url-setup-privacy-info" function (:user-visible-flag t) nil [1051 2315])
            ("url-privacy" package nil nil [2317 2339]))          
      :file "url-privacy.el.gz"
      :pointmax 2370
      :fsize 1080
      :lastmodtime '(22676 23208 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("url-vars" include nil nil [932 951])
            ("url-parse" include nil nil [952 972])
            ("url-irc-default-port" variable
               (:constant-flag t
                :default-value 6667)
                nil [974 1046])
            ("url-irc-function" variable (:default-value (quote url-irc-rcirc)) nil [1048 1624])
            ("declare-function" code nil nil [1639 1696])
            ("declare-function" code nil nil [1697 1748])
            ("url-irc-zenirc" function (:arguments ("host" "port" "channel" "user" "password")) nil [1750 2134])
            ("url-irc-rcirc" function (:arguments ("host" "port" "channel" "user" "password")) nil [2136 2375])
            ("url-irc-erc" function (:arguments ("host" "port" "channel" "user" "password")) nil [2377 2485])
            ("url-irc" function (:arguments ("url")) nil [2502 2914])
            ("url-irc" package nil nil [2916 2934]))          
      :file "url-irc.el.gz"
      :pointmax 2961
      :fsize 1332
      :lastmodtime '(22676 23208 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("url-vars" include nil nil [873 892])
            ("url-parse" include nil nil [893 913])
            ("url-util" include nil nil [914 933])
            ("url-mail" function (:arguments ("args")) nil [950 1115])
            ("url-mail-goto-field" function (:arguments ("field")) nil [1117 1700])
            ("declare-function" code nil nil [1702 1750])
            ("url-mailto" function (:arguments ("url")) nil [1767 4650])
            ("url-mailto" package nil nil [4652 4673]))          
      :file "url-mailto.el.gz"
      :pointmax 4703
      :fsize 1870
      :lastmodtime '(22676 23208 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("url-parse" include nil nil [958 978])
            ("url-vars" include nil nil [979 998])
            ("timezone-parse-date" function (:prototype-flag t) nil [999 1041])
            ("timezone-make-date-arpa-standard" function (:prototype-flag t) nil [1042 1097])
            ("mail-header-extract" function (:prototype-flag t) nil [1098 1142])
            ("url-parse-args-syntax-table" variable (:default-value (copy-syntax-table emacs-lisp-mode-syntax-table)) nil [1144 1279])
            ("modify-syntax-entry" code nil nil [1281 1338])
            ("modify-syntax-entry" code nil nil [1339 1396])
            ("modify-syntax-entry" code nil nil [1397 1453])
            ("modify-syntax-entry" code nil nil [1454 1510])
            ("url-debug" variable nil nil [1527 2161])
            ("url-debug" function (:arguments ("tag" "args")) nil [2178 2559])
            ("url-parse-args" function (:arguments ("str" "nodowncase")) nil [2576 4190])
            ("url-insert-entities-in-string" function (:arguments ("string")) nil [4207 5053])
            ("url-normalize-url" function (:arguments ("url")) nil [5070 5579])
            ("url-lazy-message" function (:arguments ("args")) nil [5596 6014])
            ("url-get-normalized-date" function (:arguments ("specified-time")) nil [6031 6248])
            ("url-eat-trailing-space" function (:arguments ("x")) nil [6265 6513])
            ("url-strip-leading-spaces" function (:arguments ("x")) nil [6530 6781])
            ("define-obsolete-function-alias" code nil nil [6784 6870])
            ("url-display-percentage" function (:arguments ("fmt" "perc" "args")) nil [6887 7258])
            ("url-percentage" function (:arguments ("x" "y")) nil [7275 7385])
            ("defalias" code nil nil [7402 7446])
            ("url-file-directory" function (:arguments ("file")) nil [7463 7748])
            ("url-file-nondirectory" function (:arguments ("file")) nil [7765 8075])
            ("url-parse-query-string" function (:arguments ("query" "downcase" "allow-newlines")) nil [8092 8900])
            ("url-build-query-string" function (:arguments ("query" "semicolons" "keep-empty")) nil [8917 10206])
            ("url-unhex" function (:arguments ("x")) nil [10208 10315])
            ("url-unhex-string" function (:arguments ("str" "allow-newlines")) nil [11059 11872])
            ("url-unreserved-chars" variable
               (:constant-flag t
                :default-value (quote (97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 48 49 50 51 52 53 54 55 56 57 45 95 46 126)))
                nil [11874 12223])
            ("url-encoding-table" variable
               (:constant-flag t
                :default-value (let ((vec (make-vector 256 nil))) (dotimes (byte 256) (aset vec byte (format "%%%02X" byte))) vec))
                nil [12225 12592])
            ("url--allowed-chars" function (:arguments ("char-list")) nil [12594 12937])
            ("url-hexify-string" function (:arguments ("string" "allowed-chars")) nil [12954 13876])
            ("url-host-allowed-chars" variable
               (:constant-flag t
                :default-value (url--allowed-chars (append (quote (37 33 36 38 39 40 41 42 43 44 59 61)) url-unreserved-chars)))
                nil [13878 14189])
            ("url-path-allowed-chars" variable
               (:constant-flag t
                :default-value (let ((vec (copy-sequence url-host-allowed-chars))) (aset vec 47 t) (aset vec 58 t) (aset vec 64 t) vec))
                nil [14191 14466])
            ("url-query-allowed-chars" variable
               (:constant-flag t
                :default-value (let ((vec (copy-sequence url-path-allowed-chars))) (aset vec 63 t) vec))
                nil [14468 14705])
            ("url-encode-url" function (:arguments ("url")) nil [14722 16006])
            ("url-file-extension" function (:arguments ("fname" "x")) nil [16023 16646])
            ("url-truncate-url-for-viewing" function (:arguments ("url" "width")) nil [16663 17798])
            ("url-view-url" function
               (:user-visible-flag t
                :arguments ("no-show"))
                nil [17815 18211])
            ("url-get-url-filename-chars" variable (:default-value "-%.?@a-zA-Z0-9()_/:~=&") nil [18213 18304])
            ("url-get-url-at-point" function (:arguments ("pt")) nil [18306 19674])
            ("url-generate-unique-filename" function (:arguments ("fmt")) nil [19676 20580])
            ("url-extract-mime-headers" function nil nil [20582 20842])
            ("url-make-private-file" function (:arguments ("file")) nil [20844 21467])
            ("url-util" package nil nil [21469 21488]))          
      :file "url-util.el.gz"
      :pointmax 21516
      :fsize 7337
      :lastmodtime '(22676 23208 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("url-parse" include nil nil [937 957])
            ("url-do-setup" function (:prototype-flag t) nil [958 988])
            ("url-history" customgroup (:user-visible-flag t) nil [990 1096])
            ("url-history-track" variable nil nil [1098 1603])
            ("url-history-file" variable nil nil [1605 1893])
            ("url-history-save-interval" variable (:default-value 3600) nil [1895 2383])
            ("url-history-timer" variable nil nil [2385 2415])
            ("url-history-changed-since-last-save" variable nil nil [2417 2537])
            ("url-history-hash-table" variable (:default-value (make-hash-table :size 31 :test (quote equal))) nil [2539 2656])
            ("url-history-setup-save-timer" function (:user-visible-flag t) nil [2739 3140])
            ("url-history-parse-history" function (:arguments ("fname")) nil [3142 3710])
            ("url-history-update-url" function (:arguments ("url" "time")) nil [3712 3897])
            ("url-make-private-file" function (:prototype-flag t) nil [3899 3943])
            ("url-history-save-history" function
               (:user-visible-flag t
                :arguments ("fname"))
                nil [3945 5781])
            ("url-have-visited-url" function (:arguments ("url")) nil [5783 5877])
            ("url-completion-function" function (:arguments ("string" "predicate" "function")) nil [5879 6744])
            ("url-history" package nil nil [6746 6768]))          
      :file "url-history.el.gz"
      :pointmax 6799
      :fsize 2484
      :lastmodtime '(22676 23208 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("url-parse" include nil nil [862 882])
            ("url-util" include nil nil [883 902])
            ("url" include nil nil [903 917])
            ("url-cache-directory" variable (:default-value (expand-file-name "cache" url-configuration-directory)) nil [981 1161])
            ("url-cache-expire-time" variable (:default-value 3600) nil [1163 1361])
            ("url-cache-file-writable-p" function (:arguments ("file")) nil [1380 1658])
            ("url-cache-prepare" function (:arguments ("file")) nil [1660 2380])
            ("url-store-in-cache" function (:arguments ("buff")) nil [2397 2767])
            ("url-fetch-from-cache" function (:arguments ("url")) nil [2769 2999])
            ("url-is-cached" function (:arguments ("url")) nil [3016 3390])
            ("url-cache-create-filename-human-readable" function (:arguments ("url")) nil [3417 4953])
            ("url-cache-create-filename-using-md5" function (:arguments ("url")) nil [4955 5668])
            ("url-cache-creation-function" variable (:default-value (quote url-cache-create-filename-using-md5)) nil [5670 6081])
            ("url-cache-create-filename" function (:arguments ("url")) nil [6083 6475])
            ("url-cache-extract" function (:arguments ("fnam")) nil [6492 6654])
            ("url-cache-expired" function (:arguments ("url" "expire-time")) nil [6656 7193])
            ("url-cache-prune-cache" function (:arguments ("directory")) nil [7195 8097])
            ("url-cache" package nil nil [8099 8119]))          
      :file "url-cache.el.gz"
      :pointmax 8148
      :fsize 2859
      :lastmodtime '(22676 23208 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("url-gw" include nil nil [872 889])
            ("isPlainHostName" function (:arguments ("host")) nil [906 970])
            ("dnsDomainIs" function (:arguments ("host" "dom")) nil [987 1071])
            ("dnsResolve" function (:arguments ("host")) nil [1088 1148])
            ("isResolvable" function (:arguments ("host")) nil [1165 1297])
            ("isInNet" function (:arguments ("ip" "net" "mask")) nil [1314 2031])
            ("url-ns-user-prefs" variable nil nil [2072 2128])
            ("url-ns-prefs" function (:arguments ("file")) nil [2145 2942])
            ("url-ns-set-user-pref" function (:arguments ("key" "val")) nil [2944 3020])
            ("url-ns-user-pref" function (:arguments ("key" "default")) nil [3037 3127])
            ("url-ns" package nil nil [3129 3146]))          
      :file "url-ns.el.gz"
      :pointmax 3172
      :fsize 1332
      :lastmodtime '(22676 23208 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("url-methods" include nil nil [832 854])
            ("url-util" include nil nil [855 874])
            ("url-parse" include nil nil [875 895])
            ("url-expander-remove-relative-links" function (:arguments ("name")) nil [897 2122])
            ("url-expand-file-name" function (:arguments ("url" "default")) nil [2124 3944])
            ("url-identity-expander" function (:arguments ("urlobj" "defobj")) nil [3946 4059])
            ("url-default-expander" function (:arguments ("urlobj" "defobj")) nil [4061 5794])
            ("url-expand" package nil nil [5796 5817]))          
      :file "url-expand.el.gz"
      :pointmax 5847
      :fsize 2223
      :lastmodtime '(22676 23208 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("url-parse" include nil nil [838 858])
            ("url-warn" function (:prototype-flag t) nil [859 885])
            ("url-default-find-proxy-for-url" function (:arguments ("urlobj" "host")) nil [887 1330])
            ("url-proxy-locator" variable (:default-value (quote url-default-find-proxy-for-url)) nil [1332 1390])
            ("url-find-proxy-for-url" function (:arguments ("url" "host")) nil [1392 2127])
            ("url-http" function (:prototype-flag t) nil [2129 2160])
            ("url-proxy" function (:arguments ("url" "callback" "cbargs")) nil [2162 2546])
            ("url-proxy" package nil nil [2548 2568]))          
      :file "url-proxy.el.gz"
      :pointmax 2597
      :fsize 1185
      :lastmodtime '(22676 23208 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("url-parse" include nil nil [940 960])
            ("tramp" include nil nil [961 977])
            ("password-cache" include nil nil [978 1003])
            ("url-tramp-protocols" variable (:default-value (quote ("ftp" "ssh" "scp" "rsync" "telnet"))) nil [1020 1263])
            ("url-tramp-convert-url-to-tramp" function (:arguments ("url")) nil [1265 1756])
            ("url-tramp-convert-tramp-to-url" function (:arguments ("file")) nil [1758 2241])
            ("url-tramp-file-handler" function (:arguments ("operation" "args")) nil [2258 2673])
            ("url-tramp" package nil nil [2675 2695]))          
      :file "url-tramp.el.gz"
      :pointmax 2724
      :fsize 1242
      :lastmodtime '(22676 23208 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("url-parse" include nil nil [990 1010])
            ("url-scheme-registry" variable (:default-value (make-hash-table :size 7 :test (quote equal))) nil [1012 1079])
            ("url-scheme-methods" variable
               (:constant-flag t
                :default-value (quote ((default-port . variable) (asynchronous-p . variable) (expand-file-name . function) (file-exists-p . function) (file-attributes . function) (parse-url . function) (file-symlink-p . function) (file-writable-p . function) (file-directory-p . function) (file-executable-p . function) (directory-files . function) (file-truename . function))))
                nil [1081 1591])
            ("url-scheme-default-properties" variable
               (:constant-flag t
                :default-value (list (quote name) "unknown" (quote loader) (quote url-scheme-default-loader) (quote default-port) 0 (quote expand-file-name) (quote url-identity-expander) (quote parse-url) (quote url-generic-parse-url) (quote asynchronous-p) nil (quote file-directory-p) (quote ignore) (quote file-truename) (lambda (&rest args) (url-recreate-url (car args))) (quote file-exists-p) (quote ignore) (quote file-attributes) (quote ignore)))
                nil [1593 1958])
            ("url-scheme-default-loader" function (:arguments ("url" "callback" "cbargs")) nil [1960 2122])
            ("url-scheme--registering-proxy" variable nil nil [2124 2166])
            ("url-scheme-register-proxy" function (:arguments ("scheme")) nil [2168 3993])
            ("url-scheme-get-property" function (:arguments ("scheme" "property")) nil [3995 5477])
            ("url-methods" package nil nil [5479 5501]))          
      :file "url-methods.el.gz"
      :pointmax 5532
      :fsize 2214
      :lastmodtime '(22676 23208 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("url-vars" include nil nil [863 882])
            ("url-parse" include nil nil [883 903])
            ("Info-goto-node" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [904 942])
            ("man" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [943 970])
            ("url-man" function (:arguments ("url")) nil [987 1075])
            ("url-info" function (:arguments ("url")) nil [1092 1395])
            ("url-do-terminal-emulator" function (:arguments ("type" "server" "port" "user")) nil [1397 1925])
            ("url-generic-emulator-loader" function (:arguments ("url")) nil [1942 2188])
            ("defalias" code nil nil [2205 2256])
            ("defalias" code nil nil [2272 2323])
            ("defalias" code nil nil [2339 2390])
            ("url-data" function (:arguments ("url")) nil [2419 3417])
            ("url-misc" package nil nil [3419 3438]))          
      :file "url-misc.el.gz"
      :pointmax 3466
      :fsize 1489
      :lastmodtime '(22676 23208 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("mailcap" include nil nil [848 866])
            ("url-vars" include nil nil [867 886])
            ("url-parse" include nil nil [887 907])
            ("url-dired" include nil nil [908 928])
            ("url-file-default-port" variable
               (:constant-flag t
                :default-value 21)
                nil [930 985])
            ("url-file-asynchronous-p" variable
               (:constant-flag t
                :default-value t)
                nil [986 1056])
            ("defalias" code nil nil [1057 1116])
            ("url-file-find-possibly-compressed-file" function (:arguments ("fname" "args")) nil [1118 1777])
            ("url-file-host-is-local-p" function (:arguments ("host")) nil [1779 2279])
            ("url-file-asynch-callback" function (:arguments ("x" "y" "name" "buff" "func" "args" "efs")) nil [2281 2905])
            ("declare-function" code nil nil [2907 2975])
            ("declare-function" code nil nil [2976 3120])
            ("url-file-build-filename" function (:arguments ("url")) nil [3122 5449])
            ("url-file" function (:arguments ("url" "callback" "cbargs")) nil [5466 8145])
            ("url-file-create-wrapper" function (:arguments ("method" "args")) nil [8147 8491])
            ("url-file-create-wrapper" code nil nil [8493 8538])
            ("url-file-create-wrapper" code nil nil [8539 8606])
            ("url-file-create-wrapper" code nil nil [8607 8653])
            ("url-file-create-wrapper" code nil nil [8654 8701])
            ("url-file-create-wrapper" code nil nil [8702 8749])
            ("url-file-create-wrapper" code nil nil [8750 8799])
            ("url-file-create-wrapper" code nil nil [8800 8875])
            ("url-file-create-wrapper" code nil nil [8876 8949])
            ("url-file" package nil nil [8951 8970]))          
      :file "url-file.el.gz"
      :pointmax 8998
      :fsize 3223
      :lastmodtime '(22676 23208 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("url-domsuf-domains" variable nil nil [1030 1061])
            ("url-domsuf-parse-file" function nil nil [1063 2062])
            ("url-domsuf-cookie-allowed-p" function (:arguments ("domain")) nil [2064 2803])
            ("url-domsuf" package nil nil [3235 3256]))          
      :file "url-domsuf.el.gz"
      :pointmax 3286
      :fsize 1360
      :lastmodtime '(22676 23208 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("url-vars" include nil nil [854 873])
            ("url-util" include nil nil [874 893])
            ("url-parse" include nil nil [894 914])
            ("nntp" include nil nil [915 930])
            ("url-warn" function (:prototype-flag t) nil [931 957])
            ("gnus-group-read-ephemeral-group" function (:prototype-flag t) nil [958 1014])
            ("url-news-open-host" function (:arguments ("host" "port" "user" "pass")) nil [1104 1545])
            ("url-news-fetch-message-id" function (:arguments ("host" "message-id")) nil [1547 2465])
            ("gnus-group-buffer" variable nil nil [2467 2493])
            ("url-news-fetch-newsgroup" function (:arguments ("newsgroup" "host")) nil [2495 3298])
            ("url-news" function (:arguments ("url")) nil [3315 3875])
            ("url-snews" function (:arguments ("url")) nil [3892 4068])
            ("url-news" package nil nil [4070 4089]))          
      :file "url-news.el.gz"
      :pointmax 4117
      :fsize 1779
      :lastmodtime '(22676 23208 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("url-vars" include nil nil [868 887])
            ("url-parse" include nil nil [888 908])
            ("url-warn" function (:prototype-flag t) nil [909 935])
            ("auth-source-search" function (:prototype-flag t) nil [936 980])
            ("url-auth-user-prompt" function (:arguments ("url" "realm")) nil [982 1215])
            ("url-basic-auth-storage" variable (:default-value (quote url-http-real-basic-auth-storage)) nil [1704 2117])
            ("url-basic-auth" function (:arguments ("url" "prompt" "overwrite" "realm" "args")) nil [2119 4924])
            ("url-digest-auth-storage" variable nil nil [5372 5649])
            ("url-digest-auth-create-key" function (:arguments ("username" "password" "realm" "method" "uri")) nil [5651 5973])
            ("url-digest-auth" function (:arguments ("url" "prompt" "overwrite" "realm" "args")) nil [5975 9313])
            ("url-registered-auth-schemes" variable nil nil [9315 9463])
            ("url-do-auth-source-search" function (:arguments ("server" "type" "parameter")) nil [9465 9757])
            ("url-get-authentication" function (:arguments ("url" "realm" "type" "prompt" "args")) nil [9774 12188])
            ("url-register-auth-scheme" function (:arguments ("type" "function" "rating")) nil [12205 13575])
            ("url-auth-registered" function (:arguments ("scheme")) nil [13577 13718])
            ("url-auth" package nil nil [13720 13739]))          
      :file "url-auth.el.gz"
      :pointmax 13767
      :fsize 4197
      :lastmodtime '(22676 23208 0 0)
      :unmatched-syntax nil))
  :file "!usr!local!Cellar!emacs-plus!25.2!share!emacs!25.2!lisp!url!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
