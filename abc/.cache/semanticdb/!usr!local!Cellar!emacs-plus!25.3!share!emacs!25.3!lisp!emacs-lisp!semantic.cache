;; Object semanticdb-project-database-file
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file"
  :tables
  (list
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("defalias" code nil nil [1120 1570])
            ("function-put" code nil nil [1571 1613])
            ("function-put" code nil nil [1614 1662])
            ("macro-declaration-function" variable (:default-value (function macro-declaration-function)) nil [1783 2115])
            ("defalias" code nil nil [2117 3259])
            ("defun-declarations-alist" variable (:default-value (list (list (quote advertised-calling-convention) (function (lambda (f _args arglist when) (list (quote set-advertised-calling-convention) (list (quote quote) f) (list (quote quote) arglist) (list (quote quote) when))))) (list (quote obsolete) (function (lambda (f _args new-name when) (list (quote make-obsolete) (list (quote quote) f) (list (quote quote) new-name) (list (quote quote) when))))) (list (quote interactive-only) (function (lambda (f _args instead) (list (quote function-put) (list (quote quote) f) (quote (quote interactive-only)) (list (quote quote) instead))))) (list (quote pure) (function (lambda (f _args val) (list (quote function-put) (list (quote quote) f) (quote (quote pure)) (list (quote quote) val)))) "If non-nil, the compiler can replace calls with their return value.
This may shift errors from run-time to compile-time.") (list (quote side-effect-free) (function (lambda (f _args val) (list (quote function-put) (list (quote quote) f) (quote (quote side-effect-free)) (list (quote quote) val)))) "If non-nil, calls can be ignored if their value is unused.
If `error-free', drop calls even if `byte-compile-delete-errors' is nil.") (list (quote compiler-macro) (function (lambda (f args compiler-function) (if (not (eq (car-safe compiler-function) (quote lambda))) (\` (eval-and-compile (function-put (quote (\, f)) (quote compiler-macro) (function (\, compiler-function))))) (let ((cfname (intern (concat (symbol-name f) "--anon-cmacro")))) (\` (progn (eval-and-compile (function-put (quote (\, f)) (quote compiler-macro) (function (\, cfname)))) :autoload-end (eval-and-compile (defun (\, cfname) ((\,@ (cadr compiler-function)) (\,@ args)) (\,@ (cddr compiler-function))))))))))) (list (quote doc-string) (function (lambda (f _args pos) (list (quote function-put) (list (quote quote) f) (quote (quote doc-string-elt)) (list (quote quote) pos))))) (list (quote indent) (function (lambda (f _args val) (list (quote function-put) (list (quote quote) f) (quote (quote lisp-indent-function)) (list (quote quote) val))))))) nil [3515 6459])
            ("macro-declarations-alist" variable (:default-value (cons (list (quote debug) (function (lambda (name _args spec) (list (quote progn) :autoload-end (list (quote put) (list (quote quote) name) (quote (quote edebug-form-spec)) (list (quote quote) spec)))))) (cons (list (quote no-font-lock-keyword) (function (lambda (name _args val) (list (quote function-put) (list (quote quote) name) (quote (quote no-font-lock-keyword)) (list (quote quote) val))))) defun-declarations-alist))) nil [6461 7236])
            ("defalias" code nil nil [7238 9491])
            ("defun" function (:arguments ("name" "arglist" "docstring" "body")) nil [9540 11919])
            ("fset" code nil nil [12026 12047])
            ("defsubst" function (:arguments ("name" "arglist" "body")) nil [13058 13529])
            ("advertised-signature-table" variable (:default-value (make-hash-table :test (quote eq) :weakness (quote key))) nil [13531 13609])
            ("set-advertised-calling-convention" function (:arguments ("function" "signature" "_when")) nil [13611 13981])
            ("make-obsolete" function (:arguments ("obsolete-name" "current-name" "when")) nil [13983 14876])
            ("define-obsolete-function-alias" function (:arguments ("obsolete-name" "current-name" "when" "docstring")) nil [14878 15845])
            ("make-obsolete-variable" function (:arguments ("obsolete-name" "current-name" "when" "access-type")) nil [15847 16678])
            ("define-obsolete-variable-alias" function (:arguments ("obsolete-name" "current-name" "when" "docstring")) nil [16681 18522])
            ("define-obsolete-face-alias" function (:arguments ("obsolete-face" "current-face" "when")) nil [18852 19288])
            ("dont-compile" function (:arguments ("body")) nil [19290 19599])
            ("eval-when-compile" function (:arguments ("body")) nil [19842 20335])
            ("eval-and-compile" function (:arguments ("body")) nil [20337 20908])
            ("with-no-warnings" function (:arguments ("body")) nil [20910 21118])
            ("make-obsolete-variable" code nil nil [22413 22522])
            ("make-obsolete" code nil nil [22523 22614]))          
      :file "byte-run.el.gz"
      :pointmax 22642
      :fsize 6648
      :lastmodtime '(22966 58805 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("subr-x" include nil nil [6315 6332])
            ("cl-lib" include nil nil [6353 6370])
            ("epg" include nil nil [6391 6405])
            ("seq" include nil nil [6433 6447])
            ("tabulated-list" include nil nil [6449 6474])
            ("macroexp" include nil nil [6475 6494])
            ("package" customgroup (:user-visible-flag t) nil [6496 6596])
            ("package-enable-at-startup" variable (:default-value t) nil [6641 7066])
            ("package-load-list" variable (:default-value (quote (all))) nil [7068 8164])
            ("package-archives" variable (:default-value (quote (("gnu" . "http://elpa.gnu.org/packages/")))) nil [8166 8899])
            ("package-menu-hide-low-priority" variable (:default-value (quote archive)) nil [8901 9883])
            ("package-archive-priorities" variable nil nil [9885 10505])
            ("package-pinned-packages" variable nil nil [10507 11618])
            ("package-user-dir" variable (:default-value (locate-user-emacs-file "elpa")) nil [11620 11922])
            ("package-directory-list" variable (:default-value (let (result) (dolist (f load-path) (and (stringp f) (equal (file-name-nondirectory f) "site-lisp") (push (expand-file-name "elpa" f) result))) (nreverse result))) nil [11924 12515])
            ("declare-function" code nil nil [12517 12616])
            ("package-check-signature" variable (:default-value (if (and (require (quote epg-config)) (epg-find-configuration (quote OpenPGP))) (quote allow-unsigned))) nil [12618 13175])
            ("package-unsigned-archives" variable nil nil [13177 13361])
            ("package-selected-packages" variable nil nil [13363 13920])
            ("package-menu-async" variable (:default-value t) nil [13922 14196])
            ("package--default-summary" variable (:default-value "No description available.") nil [14591 14652])
            ("cl-defstruct" code nil nil [14654 17422])
            ("package--from-builtin" function (:arguments ("bi-desc")) nil [17424 17678])
            ("package-version-join" function (:arguments ("vlist")) nil [17698 18830])
            ("package-desc-full-name" function (:arguments ("pkg-desc")) nil [18832 18996])
            ("package-desc-suffix" function (:arguments ("pkg-desc")) nil [18998 19178])
            ("package-desc--keywords" function (:arguments ("pkg-desc")) nil [19180 19378])
            ("package-desc-priority" function (:arguments ("p")) nil [19380 19532])
            ("cl-defstruct" code nil nil [19608 19767])
            ("package--builtins" variable nil nil [20085 20431])
            ("put" code nil nil [20432 20480])
            ("package-alist" variable nil nil [20482 20915])
            ("put" code nil nil [20916 20960])
            ("package-activated-list" variable nil nil [20962 21117])
            ("put" code nil nil [21118 21171])
            ("package-process-define-package" function (:arguments ("exp")) nil [21368 22231])
            ("package-load-descriptor" function (:arguments ("pkg-dir")) nil [22233 22994])
            ("package-load-all-descriptors" function nil nil [22996 23749])
            ("define-package" function (:arguments ("_name-string" "_version-string" "_docstring" "_requirements" "_extra-properties")) nil [23751 24399])
            ("package-disabled-p" function (:arguments ("pkg-name" "version")) nil [24490 25219])
            ("package-built-in-p" function (:arguments ("package" "min-version")) nil [25221 25825])
            ("package--autoloads-file-name" function (:arguments ("pkg-desc")) nil [25827 26087])
            ("package--activate-autoloads-and-load-path" function (:arguments ("pkg-desc")) nil [26089 26779])
            ("Info-directory-list" variable nil nil [26781 26809])
            ("declare-function" code nil nil [26810 26854])
            ("package--load-files-for-activation" function (:arguments ("pkg-desc" "reload")) nil [26856 28063])
            ("package-activate-1" function (:arguments ("pkg-desc" "reload" "deps")) nil [28065 29426])
            ("declare-function" code nil nil [29428 29486])
            ("package--list-loaded-files" function (:arguments ("dir")) nil [29488 31238])
            ("package-activate" function (:arguments ("package" "force")) nil [31434 32442])
            ("tar-parse-info" variable nil nil [32713 32736])
            ("declare-function" code nil nil [32737 32786])
            ("declare-function" code nil nil [32787 32847])
            ("declare-function" code nil nil [32848 32913])
            ("package-untar-buffer" function (:arguments ("dir")) nil [32915 33797])
            ("package--alist-to-plist-args" function (:arguments ("alist")) nil [33799 33973])
            ("package-unpack" function (:arguments ("pkg-desc")) nil [33974 36484])
            ("package-generate-description-file" function (:arguments ("pkg-desc" "pkg-file")) nil [36486 37553])
            ("package-autoload-ensure-default-file" function (:arguments ("file")) nil [37624 38426])
            ("generated-autoload-file" variable nil nil [38428 38460])
            ("version-control" variable nil nil [38461 38485])
            ("package-generate-autoloads" function (:arguments ("name" "pkg-dir")) nil [38487 39096])
            ("package--make-autoloads-and-stuff" function (:arguments ("pkg-desc" "pkg-dir")) nil [39098 39590])
            ("warning-minimum-level" variable nil nil [39609 39639])
            ("package--compile" function (:arguments ("pkg-desc")) nil [39640 39977])
            ("package-read-from-string" function (:arguments ("str")) nil [40022 40563])
            ("package--prepare-dependencies" function (:arguments ("deps")) nil [40565 41257])
            ("declare-function" code nil nil [41259 41307])
            ("declare-function" code nil nil [41308 41366])
            ("declare-function" code nil nil [41367 41427])
            ("declare-function" code nil nil [41428 41485])
            ("package-buffer-info" function nil nil [41487 43162])
            ("package--read-pkg-desc" function (:arguments ("kind")) nil [43164 43683])
            ("declare-function" code nil nil [43685 43745])
            ("declare-function" code nil nil [43746 43801])
            ("package-tar-file-info" function nil nil [43803 44522])
            ("package-dir-info" function nil nil [44524 45398])
            ("package--write-file-no-coding" function (:arguments ("file-name")) nil [45523 45690])
            ("declare-function" code nil nil [45692 45750])
            ("package--archive-file-exists-p" function (:arguments ("location" "file")) nil [45752 46033])
            ("declare-function" code nil nil [46035 46284])
            ("declare-function" code nil nil [46285 46420])
            ("declare-function" code nil nil [46421 46483])
            ("declare-function" code nil nil [46484 46543])
            ("declare-function" code nil nil [46544 46604])
            ("package--display-verify-error" function (:arguments ("context" "sig-file")) nil [46606 47251])
            ("package--with-work-buffer" function (:arguments ("location" "file" "body")) nil [47253 48203])
            ("cl-defmacro" code nil nil [48205 51669])
            ("define-error" code nil nil [51671 51729])
            ("package--check-signature-content" function (:arguments ("content" "string" "sig-file")) nil [51731 53169])
            ("package--check-signature" function (:arguments ("location" "file" "string" "async" "callback" "unwind")) nil [53171 55022])
            ("package-archive-version" variable
               (:constant-flag t
                :default-value 1)
                nil [55414 55586])
            ("package-archive-contents" variable nil nil [55651 55847])
            ("put" code nil nil [55848 55903])
            ("package--compatibility-table" variable nil nil [55905 56456])
            ("package--build-compatibility-table" function nil nil [56458 56782])
            ("package--add-to-compatibility-table" function (:arguments ("pkg")) nil [56784 57396])
            ("cl-defstruct" code nil nil [57560 57773])
            ("package--append-to-alist" function (:arguments ("pkg-desc" "alist")) nil [57775 58729])
            ("package--add-to-archive-contents" function (:arguments ("package" "archive")) nil [58731 59925])
            ("package--read-archive-file" function (:arguments ("file")) nil [59927 60610])
            ("package-read-archive-contents" function (:arguments ("archive")) nil [60612 61151])
            ("package--old-archive-priorities" variable nil nil [61153 61451])
            ("package-read-all-archive-contents" function nil nil [61453 61784])
            ("package--initialized" variable nil nil [61968 62001])
            ("package--init-file-ensured" variable nil nil [62003 62100])
            ("package-initialize" function
               (:user-visible-flag t
                :arguments ("no-activate"))
                nil [62117 63459])
            ("package--downloads-in-progress" variable nil nil [63636 63727])
            ("declare-function" code nil nil [63729 63794])
            ("package-import-keyring" function
               (:user-visible-flag t
                :arguments ("file"))
                nil [63811 64347])
            ("package--post-download-archives-hook" variable nil nil [64349 64559])
            ("put" code nil nil [64560 64627])
            ("package--update-downloads-in-progress" function (:arguments ("entry")) nil [64629 65291])
            ("package--download-one-archive" function (:arguments ("archive" "file" "async")) nil [65293 67059])
            ("package--download-and-read-archives" function (:arguments ("async")) nil [67061 67760])
            ("package-refresh-contents" function
               (:user-visible-flag t
                :arguments ("async"))
                nil [67777 68685])
            ("package-compute-transaction" function (:arguments ("packages" "requirements" "seen")) nil [68944 73155])
            ("package--find-non-dependencies" function nil nil [73157 73719])
            ("package--save-selected-packages" function (:arguments ("value")) nil [73721 74113])
            ("package--user-selected-p" function (:arguments ("pkg")) nil [74115 74484])
            ("package--get-deps" function (:arguments ("pkg" "only")) nil [74486 75223])
            ("package--removable-packages" function nil nil [75225 75785])
            ("package--used-elsewhere-p" function (:arguments ("pkg-desc" "pkg-list" "all")) nil [75787 76661])
            ("package--sort-deps-in-alist" function (:arguments ("package" "only")) nil [76663 77319])
            ("package--sort-by-dependence" function (:arguments ("package-list")) nil [77321 78171])
            ("package-archive-base" function (:arguments ("desc")) nil [78565 78713])
            ("package-install-from-archive" function (:arguments ("pkg-desc")) nil [78715 80932])
            ("package-installed-p" function (:arguments ("package" "min-version")) nil [80934 81714])
            ("package-download-transaction" function (:arguments ("packages")) nil [81716 82057])
            ("package--ensure-init-file" function nil nil [82059 84719])
            ("package-install" function
               (:user-visible-flag t
                :arguments ("pkg" "dont-select"))
                nil [84736 86560])
            ("package-strip-rcs-id" function (:arguments ("str")) nil [86562 86911])
            ("declare-function" code nil nil [86913 86971])
            ("package-install-from-buffer" function (:user-visible-flag t) nil [86988 88487])
            ("package-install-file" function
               (:user-visible-flag t
                :arguments ("file"))
                nil [88504 88951])
            ("package-install-selected-packages" function (:user-visible-flag t) nil [88968 90244])
            ("package--newest-p" function (:arguments ("pkg")) nil [90269 90432])
            ("package-delete" function
               (:user-visible-flag t
                :arguments ("pkg-desc" "force" "nosave"))
                nil [90434 93657])
            ("package-reinstall" function
               (:user-visible-flag t
                :arguments ("pkg"))
                nil [93674 94168])
            ("package-autoremove" function (:user-visible-flag t) nil [94185 95188])
            ("describe-package" function
               (:user-visible-flag t
                :arguments ("package"))
                nil [95241 96680])
            ("package-help-section-name" variable
               (:default-value (quote ((t :inherit (bold font-lock-function-name-face))))
                :type "face")
                nil [96682 96852])
            ("package--print-help-section" function (:arguments ("name" "strings")) nil [96854 97301])
            ("declare-function" code nil nil [97303 97363])
            ("describe-package-1" function (:arguments ("pkg")) nil [97365 106375])
            ("package-install-button-action" function (:arguments ("button")) nil [106377 106707])
            ("package-delete-button-action" function (:arguments ("button")) nil [106709 107032])
            ("package-keyword-button-action" function (:arguments ("button")) nil [107034 107194])
            ("package-make-button" function (:arguments ("text" "props")) nil [107196 107665])
            ("package-menu-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map tabulated-list-mode-map) (define-key map "" (quote package-menu-describe-package)) (define-key map "u" (quote package-menu-mark-unmark)) (define-key map "" (quote package-menu-backup-unmark)) (define-key map "d" (quote package-menu-mark-delete)) (define-key map "i" (quote package-menu-mark-install)) (define-key map "U" (quote package-menu-mark-upgrades)) (define-key map "r" (quote package-menu-refresh)) (define-key map "f" (quote package-menu-filter)) (define-key map "~" (quote package-menu-mark-obsolete-for-deletion)) (define-key map "x" (quote package-menu-execute)) (define-key map "h" (quote package-menu-quick-help)) (define-key map "H" (function package-menu-hide-package)) (define-key map "?" (quote package-menu-describe-package)) (define-key map "(" (function package-menu-toggle-hiding)) map)) nil [107694 108612])
            ("easy-menu-define" code nil nil [108614 110426])
            ("package-menu--new-package-list" variable nil nil [110428 110547])
            ("package-menu--transaction-status" variable nil nil [110549 110647])
            ("define-derived-mode" code nil nil [110649 111581])
            ("package--push" function (:arguments ("pkg-desc" "status" "listname")) nil [111583 111951])
            ("package-list-unversioned" variable nil nil [111953 112067])
            ("package-list-unsigned" variable nil nil [112069 112184])
            ("package--emacs-version-list" variable (:default-value (version-to-list emacs-version)) nil [112186 112286])
            ("package--incompatible-p" function (:arguments ("pkg" "shallow")) nil [112288 113456])
            ("package-desc-status" function (:arguments ("pkg-desc")) nil [113458 115120])
            ("package-menu--hide-packages" variable (:default-value t) nil [115122 115346])
            ("package-menu-toggle-hiding" function (:user-visible-flag t) nil [115348 115837])
            ("package--remove-hidden" function (:arguments ("pkg-list")) nil [115839 117813])
            ("package-hidden-regexps" variable nil nil [117815 118243])
            ("package-menu--refresh" function (:arguments ("packages" "keywords")) nil [118245 120407])
            ("package-all-keywords" function nil nil [120409 120672])
            ("package--mapc" function (:arguments ("function" "packages")) nil [120674 121933])
            ("package--has-keyword-p" function (:arguments ("desc" "keywords")) nil [121935 122525])
            ("package-menu--generate" function (:arguments ("remember-pos" "packages" "keywords")) nil [122527 123327])
            ("package-menu--print-info" function (:arguments ("pkg")) nil [123329 123562])
            ("make-obsolete" code nil nil [123563 123659])
            ("package-name" variable
               (:default-value (quote ((t :inherit link)))
                :type "face")
                nil [123686 123801])
            ("package-description" variable
               (:default-value (quote ((t :inherit default)))
                :type "face")
                nil [123803 123944])
            ("package-status-built-in" variable
               (:default-value (quote ((t :inherit font-lock-builtin-face)))
                :type "face")
                nil [124022 124176])
            ("package-status-external" variable
               (:default-value (quote ((t :inherit package-status-built-in)))
                :type "face")
                nil [124178 124333])
            ("package-status-available" variable
               (:default-value (quote ((t :inherit default)))
                :type "face")
                nil [124335 124476])
            ("package-status-new" variable
               (:default-value (quote ((t :inherit (bold package-status-available))))
                :type "face")
                nil [124478 124631])
            ("package-status-held" variable
               (:default-value (quote ((t :inherit font-lock-constant-face)))
                :type "face")
                nil [124633 124780])
            ("package-status-disabled" variable
               (:default-value (quote ((t :inherit font-lock-warning-face)))
                :type "face")
                nil [124782 124936])
            ("package-status-installed" variable
               (:default-value (quote ((t :inherit font-lock-comment-face)))
                :type "face")
                nil [124938 125094])
            ("package-status-dependency" variable
               (:default-value (quote ((t :inherit package-status-installed)))
                :type "face")
                nil [125096 125256])
            ("package-status-unsigned" variable
               (:default-value (quote ((t :inherit font-lock-warning-face)))
                :type "face")
                nil [125258 125412])
            ("package-status-incompat" variable
               (:default-value (quote ((t :inherit font-lock-comment-face)))
                :type "face")
                nil [125414 125568])
            ("package-status-avail-obso" variable
               (:default-value (quote ((t :inherit package-status-incompat)))
                :type "face")
                nil [125570 125729])
            ("package-menu--print-info-simple" function (:arguments ("pkg")) nil [125759 127455])
            ("package-menu--old-archive-contents" variable nil nil [127457 127562])
            ("package-menu-refresh" function (:user-visible-flag t) nil [127564 128036])
            ("package-menu-hide-package" function (:user-visible-flag t) nil [128038 129200])
            ("package-menu-describe-package" function
               (:user-visible-flag t
                :arguments ("button"))
                nil [129202 129578])
            ("package-menu-mark-delete" function
               (:user-visible-flag t
                :arguments ("_num"))
                nil [129606 129896])
            ("package-menu-mark-install" function
               (:user-visible-flag t
                :arguments ("_num"))
                nil [129898 130176])
            ("package-menu-mark-unmark" function
               (:user-visible-flag t
                :arguments ("_num"))
                nil [130178 130340])
            ("package-menu-backup-unmark" function (:user-visible-flag t) nil [130342 130504])
            ("package-menu-mark-obsolete-for-deletion" function (:user-visible-flag t) nil [130506 130811])
            ("package--quick-help-keys" variable (:default-value (quote (("install," "delete," "unmark," ("execute" . 1)) ("next," "previous") ("Hide-package," "(-toggle-hidden") ("refresh-contents," "g-redisplay," "filter," "help")))) nil [130813 131023])
            ("package--prettify-quick-help-key" function (:arguments ("desc")) nil [131025 131526])
            ("package-menu-quick-help" function (:user-visible-flag t) nil [131528 131806])
            ("define-obsolete-function-alias" code nil nil [131808 131910])
            ("package-menu-get-status" function nil nil [131912 132100])
            ("package-archive-priority" function (:arguments ("archive")) nil [132102 132363])
            ("package-desc-priority-version" function (:arguments ("pkg-desc")) nil [132365 132703])
            ("package-menu--find-upgrades" function nil nil [132705 133706])
            ("package-menu--mark-upgrades-pending" variable nil nil [133708 133818])
            ("package-menu--mark-upgrades-1" function nil nil [133820 134818])
            ("package-menu-mark-upgrades" function (:user-visible-flag t) nil [134820 135472])
            ("package-menu--list-to-prompt" function (:arguments ("packages")) nil [135474 136056])
            ("package-menu--prompt-transaction-p" function (:arguments ("delete" "install" "upgrade")) nil [136058 136648])
            ("package-menu--partition-transaction" function (:arguments ("install" "delete")) nil [136650 137353])
            ("package-menu--perform-transaction" function (:arguments ("install-list" "delete-list")) nil [137355 138455])
            ("package--update-selected-packages" function (:arguments ("add" "remove")) nil [138457 139125])
            ("package-menu-execute" function
               (:user-visible-flag t
                :arguments ("noquery"))
                nil [139127 141471])
            ("package-menu--version-predicate" function (:arguments ("A" "B")) nil [141473 141707])
            ("package-menu--status-predicate" function (:arguments ("A" "B")) nil [141709 142808])
            ("package-menu--description-predicate" function (:arguments ("A" "B")) nil [142810 143013])
            ("package-menu--name-predicate" function (:arguments ("A" "B")) nil [143015 143164])
            ("package-menu--archive-predicate" function (:arguments ("A" "B")) nil [143166 143312])
            ("package-menu--populate-new-package-list" function nil nil [143314 143778])
            ("package-menu--find-and-notify-upgrades" function nil nil [143780 144189])
            ("package-menu--post-refresh" function nil nil [144191 144919])
            ("package-menu--mark-or-notify-upgrades" function nil nil [144921 145542])
            ("list-packages" function
               (:user-visible-flag t
                :arguments ("no-fetch"))
                nil [145559 146741])
            ("defalias" code nil nil [146758 146806])
            ("package-show-package-list" function
               (:user-visible-flag t
                :arguments ("packages" "keywords"))
                nil [146829 147500])
            ("package-menu-filter" function
               (:user-visible-flag t
                :arguments ("keyword"))
                nil [147615 148241])
            ("package-list-packages-no-fetch" function (:user-visible-flag t) nil [148243 148469])
            ("package" package nil nil [148471 148489]))          
      :file "package.el.gz"
      :pointmax 148516
      :fsize 37935
      :lastmodtime '(22966 58805 0 0)
      :unmatched-syntax '((close-paren 6405 . 6406) (symbol 6373 . 6390) (open-paren 6372 . 6373) (close-paren 6370 . 6371) (symbol 6335 . 6352) (open-paren 6334 . 6335) (close-paren 6332 . 6333) (symbol 6297 . 6314) (open-paren 6296 . 6297)))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [1047 1064])
            ("macroexp" include nil nil [1065 1084])
            ("gv" include nil nil [1085 1098])
            ("cl-unload-function" function nil nil [3594 3752])
            ("dolist" code nil nil [3789 4502])
            ("dolist" code nil nil [4504 9695])
            ("cl--wrap-in-nil-block" function (:arguments ("fun" "args")) nil [9697 9779])
            ("advice-add" code nil nil [9780 9832])
            ("advice-add" code nil nil [9833 9886])
            ("cl--pass-args-to-cl-declare" function (:arguments ("specs")) nil [9888 9976])
            ("advice-add" code nil nil [9977 10035])
            ("cl-closure-vars" variable nil nil [10195 10223])
            ("cl--function-convert-cache" variable nil nil [10224 10263])
            ("cl--function-convert" function (:arguments ("f")) nil [10265 12377])
            ("lexical-let" function (:arguments ("bindings" "body")) nil [12379 14390])
            ("lexical-let*" function (:arguments ("bindings" "body")) nil [14392 14922])
            ("flet" function (:arguments ("bindings" "body")) nil [15001 16755])
            ("labels" function (:arguments ("bindings" "body")) nil [16757 17701])
            ("cl--gv-adapt" function (:arguments ("cl-gv" "do")) nil [17897 18787])
            ("define-setf-expander" function (:arguments ("name" "arglist" "body")) nil [18789 19692])
            ("defsetf" function (:arguments ("name" "arg1" "args")) nil [19694 21312])
            ("make-obsolete" code nil nil [23226 23278])
            ("declare-function" code nil nil [23280 23332])
            ("define-modify-macro" function (:arguments ("name" "arglist" "func" "doc")) nil [23334 24156])
            ("define-obsolete-function-alias" code nil nil [24258 24326])
            ("define-obsolete-variable-alias" code nil nil [24327 24419])
            ("define-obsolete-function-alias" code nil nil [24420 24496])
            ("cl-not-hash-table" function (:arguments ("x" "y" "_z")) nil [24634 24783])
            ("cl-builtin-gethash" variable (:default-value (symbol-function (quote gethash))) nil [24785 24839])
            ("make-obsolete-variable" code nil nil [24840 24895])
            ("cl-builtin-remhash" variable (:default-value (symbol-function (quote remhash))) nil [24896 24950])
            ("make-obsolete-variable" code nil nil [24951 25006])
            ("cl-builtin-clrhash" variable (:default-value (symbol-function (quote clrhash))) nil [25007 25061])
            ("make-obsolete-variable" code nil nil [25062 25117])
            ("cl-builtin-maphash" variable (:default-value (symbol-function (quote maphash))) nil [25118 25172])
            ("make-obsolete-variable" code nil nil [25174 25229])
            ("define-obsolete-function-alias" code nil nil [25230 25296])
            ("define-obsolete-function-alias" code nil nil [25297 25361])
            ("define-obsolete-function-alias" code nil nil [25362 25422])
            ("define-obsolete-function-alias" code nil nil [25423 25483])
            ("define-obsolete-function-alias" code nil nil [25484 25544])
            ("define-obsolete-function-alias" code nil nil [25545 25605])
            ("define-obsolete-function-alias" code nil nil [25606 25666])
            ("define-obsolete-function-alias" code nil nil [25667 25743])
            ("define-obsolete-function-alias" code nil nil [25744 25814])
            ("define-obsolete-function-alias" code nil nil [25815 25893])
            ("define-obsolete-function-alias" code nil nil [25895 25991])
            ("define-obsolete-function-alias" code nil nil [25992 26068])
            ("define-obsolete-function-alias" code nil nil [26069 26142])
            ("define-obsolete-function-alias" code nil nil [26143 26209])
            ("cl-maclisp-member" function (:arguments ("item" "list")) nil [26211 26366])
            ("cl-struct-setf-expander" function (:arguments ("x" "name" "accessor" "pred-form" "pos")) nil [26417 27351])
            ("cl" package nil nil [27353 27366])
            ("run-hooks" code nil nil [27368 27393]))          
      :file "cl.el.gz"
      :pointmax 27415
      :fsize 7980
      :lastmodtime '(22966 58805 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("copyright" customgroup (:user-visible-flag t) nil [1143 1234])
            ("copyright-limit" variable (:default-value 2000) nil [1236 1476])
            ("copyright-at-end-flag" variable nil nil [1478 1681])
            ("copyright-regexp" variable (:default-value "\\(©\\|@copyright{}\\|[Cc]opyright\\s *:?\\s *\\(?:(C)\\)?\\|[Cc]opyright\\s *:?\\s *©\\)\\s *\\(?:[^0-9
]*\\s *\\)?\\([1-9]\\([-0-9, ';/*%#
	]\\|\\s<\\|\\s>\\)*[0-9]+\\)") nil [1757 2098])
            ("copyright-names-regexp" variable nil nil [2100 2433])
            ("copyright-years-regexp" variable (:default-value "\\(\\s *\\)\\([1-9]\\([-0-9, ';/*%#
	]\\|\\s<\\|\\s>\\)*[0-9]+\\)") nil [2702 2939])
            ("copyright-year-ranges" variable nil nil [3091 3461])
            ("copyright-query" variable (:default-value (quote function)) nil [3538 3830])
            ("copyright-current-gpl-version" variable
               (:constant-flag t
                :default-value "3")
                nil [3908 4015])
            ("copyright-update" variable (:default-value t) nil [4017 4122])
            ("copyright-current-year" variable (:default-value (format-time-string "%Y")) nil [4225 4324])
            ("copyright-limit" function nil nil [4326 4512])
            ("copyright-re-search" function (:arguments ("regexp" "bound" "noerror" "count")) nil [4514 4786])
            ("copyright-start-point" function nil nil [4788 4956])
            ("copyright-offset-too-large-p" function nil nil [4958 5216])
            ("copyright-find-copyright" function nil nil [5218 6035])
            ("copyright-find-end" function nil nil [6037 6793])
            ("copyright-update-year" function (:arguments ("replace" "noquery")) nil [6795 8418])
            ("copyright-update" function
               (:user-visible-flag t
                :arguments ("arg" "interactivep"))
                nil [8435 10357])
            ("copyright-fix-years" function (:user-visible-flag t) nil [10446 13046])
            ("define-skeleton" code nil nil [13063 13426])
            ("copyright-update-directory" function
               (:user-visible-flag t
                :arguments ("directory" "match" "fix"))
                nil [13482 14171])
            ("copyright" package nil nil [14173 14193]))          
      :file "copyright.el.gz"
      :pointmax 14222
      :fsize 5047
      :lastmodtime '(22966 58805 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("crm-default-separator" variable
               (:constant-flag t
                :default-value "[ 	]*,[ 	]*")
                nil [3469 3555])
            ("crm-separator" variable (:default-value crm-default-separator) nil [3557 3804])
            ("crm-local-completion-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map minibuffer-local-completion-map) (define-key map [remap minibuffer-complete] (function crm-complete)) (define-key map [remap minibuffer-complete-word] (function crm-complete-word)) (define-key map [remap minibuffer-completion-help] (function crm-completion-help)) map)) nil [3806 4269])
            ("crm-local-must-match-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map minibuffer-local-must-match-map) (define-key map [remap minibuffer-complete] (function crm-complete)) (define-key map [remap minibuffer-complete-word] (function crm-complete-word)) (define-key map [remap minibuffer-completion-help] (function crm-completion-help)) (define-key map [remap minibuffer-complete-and-exit] (function crm-complete-and-exit)) map)) nil [4271 4894])
            ("crm-completion-table" variable nil nil [4896 5087])
            ("crm--collection-fn" function (:arguments ("string" "predicate" "flag")) nil [5147 6131])
            ("crm--current-element" function nil nil [6133 6608])
            ("crm--completion-command" function (:arguments ("beg" "end" "body")) nil [6610 6935])
            ("crm-completion-help" function (:user-visible-flag t) nil [6937 7144])
            ("crm-complete" function (:user-visible-flag t) nil [7146 7554])
            ("crm-complete-word" function (:user-visible-flag t) nil [7556 7873])
            ("crm-complete-and-exit" function (:user-visible-flag t) nil [7875 8775])
            ("crm--choose-completion-string" function (:arguments ("choice" "buffer" "base-position" "ignored")) nil [8777 9265])
            ("completing-read-multiple" function (:arguments ("prompt" "table" "predicate" "require-match" "initial-input" "hist" "def" "inherit-input-method")) nil [9468 11379])
            ("define-obsolete-function-alias" code nil nil [11381 11459])
            ("define-obsolete-function-alias" code nil nil [11460 11554])
            ("define-obsolete-function-alias" code nil nil [11555 11653])
            ("crm" package nil nil [12450 12464]))          
      :file "crm.el.gz"
      :pointmax 12487
      :fsize 4232
      :lastmodtime '(22966 58805 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl" include nil nil [1280 1293])
            ("lisp-indent" customgroup (:user-visible-flag t) nil [1296 1362])
            ("lisp-indent-maximum-backtracking" variable (:default-value 3) nil [1365 1634])
            ("lisp-tag-indentation" variable (:default-value 1) nil [1636 1823])
            ("lisp-tag-body-indentation" variable (:default-value 3) nil [1825 2383])
            ("lisp-backquote-indentation" variable (:default-value t) nil [2385 2585])
            ("lisp-loop-keyword-indentation" variable (:default-value 3) nil [2588 2727])
            ("lisp-loop-forms-indentation" variable (:default-value 5) nil [2730 2859])
            ("lisp-simple-loop-indentation" variable (:default-value 3) nil [2862 2990])
            ("lisp-lambda-list-keyword-alignment" variable nil nil [2992 3531])
            ("lisp-lambda-list-keyword-parameter-indentation" variable (:default-value 2) nil [3533 3774])
            ("lisp-lambda-list-keyword-parameter-alignment" variable nil nil [3776 4404])
            ("lisp-indent-backquote-substitution-mode" variable (:default-value t) nil [4406 4963])
            ("lisp-indent-defun-method" variable (:default-value (quote (4 &lambda &body))) nil [4967 5147])
            ("lisp-extended-loop-p" function (:arguments ("loop-start")) nil [5150 5406])
            ("lisp-indent-find-method" function (:arguments ("symbol" "no-compat")) nil [5408 5849])
            ("common-lisp-loop-part-indentation" function (:arguments ("indent-point" "state")) nil [5851 6981])
            ("common-lisp-indent-function" function (:arguments ("indent-point" "state")) nil [7040 11304])
            ("common-lisp-indent-function-1" function (:arguments ("indent-point" "state")) nil [11307 19595])
            ("common-lisp-indent-call-method" function (:arguments ("function" "method" "path" "state" "indent-point" "sexp-column" "normal-indent")) nil [19598 19953])
            ("lisp-indent-error-function" variable nil nil [20011 20046])
            ("lisp-indent-report-bad-format" function (:arguments ("m")) nil [20048 20256])
            ("lisp-indent-lambda-list-keywords-regexp" variable (:default-value "&\\(optional\\|rest\\|key\\|allow-other-keys\\|aux\\|whole\\|body\\|environment\\)\\([ 	]\\|$\\)") nil [20490 20698])
            ("lisp-indent-lambda-list" function (:arguments ("indent-point" "sexp-column" "containing-form-start")) nil [20700 22381])
            ("lisp-indent-259" function (:arguments ("method" "path" "state" "indent-point" "sexp-column" "normal-indent")) nil [22458 26948])
            ("lisp-indent-tagbody" function (:arguments ("path" "state" "indent-point" "sexp-column" "normal-indent")) nil [26951 28036])
            ("lisp-indent-do" function (:arguments ("path" "state" "indent-point" "sexp-column" "normal-indent")) nil [28038 28599])
            ("lisp-indent-defmethod" function (:arguments ("path" "state" "indent-point" "sexp-column" "normal-indent")) nil [28744 29297])
            ("lisp-indent-function-lambda-hack" function (:arguments ("path" "state" "indent-point" "sexp-column" "normal-indent")) nil [29300 30076])
            ("let" code nil nil [30081 33601])
            ("put" code nil nil [33685 33735])
            ("put" code nil nil [33736 33805])
            ("cl-indent" package nil nil [35187 35207]))          
      :file "cl-indent.el.gz"
      :pointmax 35236
      :fsize 8949
      :lastmodtime '(22966 58805 0 0)
      :unmatched-syntax '((close-paren 1293 . 1294) (symbol 1262 . 1279) (open-paren 1261 . 1262)))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("macroexp" include nil nil [3158 3177])
            ("define-error" code nil nil [3419 3488])
            ("gv-get" function (:arguments ("place" "do")) nil [3505 5368])
            ("gv-setter" function (:arguments ("name")) nil [5370 5806])
            ("gv-letplace" function (:arguments ("vars" "place" "body")) nil [5823 6474])
            ("gv-define-expander" function (:arguments ("name" "handler")) nil [6544 7234])
            ("gv--defun-declaration" function (:arguments ("symbol" "name" "args" "handler" "fix")) nil [7251 8083])
            ("or" code nil nil [8100 8331])
            ("or" code nil nil [8347 8500])
            ("gv--defsetter" function (:arguments ("name" "setter" "do" "args" "vars")) nil [9021 9704])
            ("gv-define-setter" function (:arguments ("name" "arglist" "body")) nil [9721 10556])
            ("gv-define-simple-setter" function (:arguments ("name" "setter" "fix-return")) nil [10573 11537])
            ("setf" function (:arguments ("args")) nil [11604 12406])
            ("put" code nil nil [13628 13680])
            ("put" code nil nil [13786 13985])
            ("gv-define-simple-setter" code nil nil [14026 14061])
            ("gv-define-simple-setter" code nil nil [14062 14098])
            ("gv-define-simple-setter" code nil nil [14099 14135])
            ("gv-define-setter" code nil nil [14186 14241])
            ("gv-define-setter" code nil nil [14242 14297])
            ("gv-define-setter" code nil nil [14298 14353])
            ("gv-define-setter" code nil nil [14354 14409])
            ("gv-define-setter" code nil nil [14410 14527])
            ("gv-define-simple-setter" code nil nil [14528 14561])
            ("gv-define-setter" code nil nil [14562 14633])
            ("put" code nil nil [14708 14870])
            ("gv-define-simple-setter" code nil nil [14871 14917])
            ("gv-define-simple-setter" code nil nil [14918 14965])
            ("gv-define-simple-setter" code nil nil [14966 15008])
            ("put" code nil nil [15010 15328])
            ("gv-define-simple-setter" code nil nil [15373 15424])
            ("gv-define-simple-setter" code nil nil [15425 15491])
            ("gv-define-simple-setter" code nil nil [15492 15559])
            ("gv-define-simple-setter" code nil nil [15560 15617])
            ("gv-define-simple-setter" code nil nil [15618 15674])
            ("gv-define-simple-setter" code nil nil [15675 15724])
            ("gv-define-setter" code nil nil [15725 15830])
            ("gv-define-setter" code nil nil [15831 15936])
            ("gv-define-simple-setter" code nil nil [15937 15996])
            ("gv-define-simple-setter" code nil nil [15997 16056])
            ("gv-define-simple-setter" code nil nil [16057 16120])
            ("gv-define-simple-setter" code nil nil [16121 16170])
            ("gv-define-simple-setter" code nil nil [16171 16234])
            ("gv-define-setter" code nil nil [16235 16351])
            ("gv-define-setter" code nil nil [16352 16482])
            ("gv-define-setter" code nil nil [16483 16570])
            ("gv-define-setter" code nil nil [16571 16648])
            ("gv-define-setter" code nil nil [16649 16722])
            ("gv-define-setter" code nil nil [16723 16796])
            ("gv-define-setter" code nil nil [16798 16945])
            ("gv-define-expander" code nil nil [16947 18266])
            ("put" code nil nil [18498 18716])
            ("let" code nil nil [18718 19050])
            ("put" code nil nil [19052 20093])
            ("put" code nil nil [20095 21773])
            ("gv-synthetic-place" function (:arguments ("getter" "setter")) nil [21775 22144])
            ("gv-delay-error" function (:arguments ("place")) nil [22146 22752])
            ("put" code nil nil [22791 23152])
            ("put" code nil nil [23154 23601])
            ("gv-ref" function (:arguments ("place")) nil [23634 24542])
            ("gv-deref" function (:arguments ("ref")) nil [24544 24747])
            ("gv-define-setter" code nil nil [24991 25051])
            ("gv" package nil nil [25413 25426]))          
      :file "gv.el.gz"
      :pointmax 25447
      :fsize 7643
      :lastmodtime '(22966 58805 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("eieio-version" variable (:default-value "1.4") nil [1797 1855])
            ("eieio-version" function (:user-visible-flag t) nil [1857 1965])
            ("eieio-core" include nil nil [1967 1988])
            ("defclass" function (:arguments ("name" "superclasses" "slots" "options-and-doc")) nil [2020 11652])
            ("oref" function (:arguments ("obj" "slot")) nil [11690 11948])
            ("defalias" code nil nil [11950 11984])
            ("defalias" code nil nil [11985 12023])
            ("make-obsolete" code nil nil [12024 12102])
            ("oref-default" function (:arguments ("obj" "slot")) nil [12104 12444])
            ("with-slots" function (:arguments ("spec-list" "object" "body")) nil [12471 13690])
            ("eieio-pcase-slot-index-table" function (:arguments ("obj")) nil [13803 13998])
            ("eieio-pcase-slot-index-from-index-table" function (:arguments ("index-table" "slot")) nil [14000 14291])
            ("pcase-defmacro" code nil nil [14293 15582])
            ("define-obsolete-function-alias" code nil nil [15691 15772])
            ("cl-defgeneric" code nil nil [15774 15903])
            ("eieio-object-name" function (:arguments ("obj" "extra")) nil [15905 16207])
            ("define-obsolete-function-alias" code nil nil [16208 16280])
            ("eieio--object-names" variable
               (:constant-flag t
                :default-value (make-hash-table :test (function eq) :weakness (quote key)))
                nil [16282 16356])
            ("cl-defmethod" code nil nil [16608 16739])
            ("define-obsolete-function-alias" code nil nil [16740 16828])
            ("cl-defmethod" code nil nil [16830 17044])
            ("define-obsolete-function-alias" code nil nil [17045 17140])
            ("eieio-object-class" function (:arguments ("obj")) nil [17142 17371])
            ("define-obsolete-function-alias" code nil nil [17372 17446])
            ("define-obsolete-function-alias" code nil nil [17468 17538])
            ("eieio-object-class-name" function (:arguments ("obj")) nil [17540 17711])
            ("define-obsolete-function-alias" code nil nil [17712 17797])
            ("eieio-class-parents" function (:arguments ("class")) nil [17799 18024])
            ("define-obsolete-function-alias" code nil nil [18026 18102])
            ("eieio-class-children" function (:arguments ("class")) nil [18104 18327])
            ("define-obsolete-function-alias" code nil nil [18328 18408])
            ("define-obsolete-function-alias" code nil nil [18438 18528])
            ("define-obsolete-function-alias" code nil nil [18529 18618])
            ("eieio-class-parent" function (:arguments ("class")) nil [18620 18760])
            ("define-obsolete-function-alias" code nil nil [18761 18834])
            ("same-class-p" function (:arguments ("obj" "class")) nil [18836 19066])
            ("object-of-class-p" function (:arguments ("obj" "class")) nil [19068 19307])
            ("defalias" code nil nil [19335 19380])
            ("child-of-class-p" function (:arguments ("child" "class")) nil [19382 19994])
            ("eieio-slot-descriptor-name" function (:arguments ("slot")) nil [19996 20071])
            ("eieio-class-slots" function (:arguments ("class")) nil [20073 20384])
            ("object-slots" function (:arguments ("obj")) nil [20386 20630])
            ("eieio--class-slot-initarg" function (:arguments ("class" "slot")) nil [20632 20937])
            ("oset" function (:arguments ("obj" "slot" "value")) nil [20964 21253])
            ("oset-default" function (:arguments ("class" "slot" "value")) nil [21255 21606])
            ("slot-boundp" function (:arguments ("object" "slot")) nil [21651 22236])
            ("slot-makeunbound" function (:arguments ("object" "slot")) nil [22238 22351])
            ("slot-exists-p" function (:arguments ("object-or-class" "slot")) nil [22353 23037])
            ("find-class" function (:arguments ("symbol" "errorp")) nil [23039 23397])
            ("object-assoc" function (:arguments ("key" "slot" "list")) nil [23458 23996])
            ("object-assoc-list" function (:arguments ("slot" "list")) nil [23998 24456])
            ("object-assoc-list-safe" function (:arguments ("slot" "list")) nil [24458 24997])
            ("object-add-to-list" function (:arguments ("object" "slot" "item" "append")) nil [24999 25804])
            ("object-remove-from-list" function (:arguments ("object" "slot" "item")) nil [25806 26156])
            ("gv-define-simple-setter" code nil nil [26436 26483])
            ("eieio-default-superclass" type (:type "class") nil [26868 27135])
            ("setq" code nil nil [27137 27211])
            ("defalias" code nil nil [27213 27265])
            ("cl-defgeneric" code nil nil [27267 27562])
            ("define-obsolete-function-alias" code nil nil [27564 27632])
            ("cl-defmethod" code nil nil [27634 28626])
            ("cl-defgeneric" code nil nil [28674 28825])
            ("cl-defmethod" code nil nil [28827 29314])
            ("cl-defgeneric" code nil nil [29362 29470])
            ("cl-defmethod" code nil nil [29472 31028])
            ("cl-defgeneric" code nil nil [31030 31176])
            ("cl-defmethod" code nil nil [31178 31708])
            ("cl-defgeneric" code nil nil [31710 31842])
            ("cl-defmethod" code nil nil [31844 32650])
            ("cl-defgeneric" code nil nil [32652 32915])
            ("cl-defmethod" code nil nil [32917 33292])
            ("cl-defgeneric" code nil nil [33294 33404])
            ("cl-defmethod" code nil nil [33406 33659])
            ("cl-defgeneric" code nil nil [33661 33961])
            ("cl-defmethod" code nil nil [33963 34581])
            ("eieio-print-depth" variable nil nil [34583 34675])
            ("cl-defgeneric" code nil nil [34677 34846])
            ("cl-defmethod" code nil nil [34848 37173])
            ("eieio-override-prin1" function (:arguments ("thing")) nil [37175 37468])
            ("eieio-list-prin1" function (:arguments ("list")) nil [37470 37987])
            ("change-class" function (:arguments ("_obj" "_class")) nil [38032 38239])
            ("add-hook" code nil nil [38459 38531])
            ("eieio-edebug-prin1-to-string" function (:arguments ("print-function" "object" "noescape")) nil [38564 39269])
            ("advice-add" code nil nil [39271 39358])
            ("customize-object" function (:prototype-flag t) nil [39549 39727])
            ("eieio-browse" function
               (:prototype-flag t
                :user-visible-flag t)
                nil [39866 40097])
            ("define-obsolete-function-alias" code nil nil [40099 40176])
            ("eieio-help-constructor" function (:prototype-flag t) nil [40178 40290])
            ("eieio" package nil nil [40348 40364]))          
      :file "eieio.el.gz"
      :pointmax 40386
      :fsize 12341
      :lastmodtime '(22966 58805 0 0)
      :unmatched-syntax nil))
  :file "!usr!local!Cellar!emacs-plus!25.3!share!emacs!25.3!lisp!emacs-lisp!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
