;; Object semanticdb-project-database-file
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file"
  :tables
  (list
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [1154 1171])
            ("tool-bar" include nil nil [1173 1192])
            ("comint" include nil nil [1193 1210])
            ("compilation" customgroup (:user-visible-flag t) nil [1212 1335])
            ("compilation-mode-hook" variable nil nil [1353 1480])
            ("compilation-start-hook" variable nil nil [1497 1678])
            ("compilation-window-height" variable nil nil [1695 1886])
            ("compilation-filter-hook" variable nil nil [1888 2265])
            ("compilation-filter-start" variable nil nil [2267 2432])
            ("compilation-first-column" variable (:default-value 1) nil [2434 2721])
            ("compilation-parse-errors-filename-function" variable nil nil [2723 2988])
            ("compilation-process-setup-function" variable nil nil [3005 3310])
            ("compilation-buffer-name-function" variable nil nil [3327 3624])
            ("compilation-finish-function" variable nil nil [3641 3846])
            ("make-obsolete-variable" code nil nil [3848 3985])
            ("compilation-finish-functions" variable nil nil [4002 4220])
            ("compilation-in-progress" variable nil nil [4222 4305])
            ("or" code nil nil [4306 4456])
            ("compilation-error" variable (:default-value "error") nil [4458 4548])
            ("compilation-arguments" variable nil nil [4550 4638])
            ("compilation-num-errors-found" variable nil nil [4640 4677])
            ("compilation-error-regexp-alist-alist" variable (:default-value (\` ((absoft "^\\(?:[Ee]rror on \\|[Ww]arning on\\( \\)\\)?[Ll]ine[ 	]+\\([0-9]+\\)[ 	]+of[ 	]+\"?\\([a-zA-Z]?:?[^\":
]+\\)\"?:" 3 2 nil (1)) (ada "\\(warning: .*\\)? at \\([^ 
]+\\):\\([0-9]+\\)$" 2 3 nil (1)) (aix " in line \\([0-9]+\\) of file \\([^ 
]+[^. 
]\\)\\.? " 2 1) (ant "^[ 	]*\\[[^] 
]+\\][ 	]*\\(\\(?:[A-Za-z]:\\\\\\)?[^: 
]+\\):\\([0-9]+\\):\\(?:\\([0-9]+\\):\\([0-9]+\\):\\([0-9]+\\):\\)?\\( warning\\)?" 1 (2 . 4) (3 . 5) (6)) (bash "^\\([^: 
	]+\\): line \\([0-9]+\\):" 1 2) (borland "^\\(?:Error\\|Warnin\\(g\\)\\) \\(?:[FEW][0-9]+ \\)?\\([a-zA-Z]?:?[^:( 	
]+\\) \\([0-9]+\\)\\(?:[) 	]\\|:[^0-9
]\\)" 2 3 nil (1)) (python-tracebacks-and-caml "^[ 	]*File \\(\"?\\)\\([^,\" 
	<>]+\\)\\1, lines? \\([0-9]+\\)-?\\([0-9]+\\)?\\(?:$\\|,\\(?: characters? \\([0-9]+\\)-?\\([0-9]+\\)?:\\)?\\([ 
]Warning\\(?: [0-9]+\\)?:\\)?\\)" 2 (3 . 4) (5 . 6) (7)) (comma "^\"\\([^,\" 
	]+\\)\", line \\([0-9]+\\)\\(?:[(. pos]+\\([0-9]+\\))?\\)?[:.,; (-]\\( warning:\\|[-0-9 ]*(W)\\)?" 1 2 3 (4)) (cucumber "\\(?:^cucumber\\(?: -p [^[:space:]]+\\)?\\|#\\)\\(?: \\)\\([^(].*\\):\\([1-9][0-9]*\\)" 1 2) (msft "^ *\\([0-9]+>\\)?\\(\\(?:[a-zA-Z]:\\)?[^:(	
]+\\)(\\([0-9]+\\)) ?: \\(?:see declaration\\|\\(?:warnin\\(g\\)\\|[a-z ]+\\) C[0-9]+:\\)" 2 3 nil (4)) (edg-1 "^\\([^ 
]+\\)(\\([0-9]+\\)): \\(?:error\\|warnin\\(g\\)\\|remar\\(k\\)\\)" 1 2 nil (3 . 4)) (edg-2 "at line \\([0-9]+\\) of \"\\([^ 
]+\\)\"$" 2 1 nil 0) (epc "^Error [0-9]+ at (\\([0-9]+\\):\\([^)
]+\\))" 2 1) (ftnchek "\\(^Warning .*\\)? line[ 
]\\([0-9]+\\)[ 
]\\(?:col \\([0-9]+\\)[ 
]\\)?file \\([^ :;
]+\\)" 4 2 3 (1)) (iar "^\"\\(.*\\)\",\\([0-9]+\\)\\s-+\\(?:Error\\|Warnin\\(g\\)\\)\\[[0-9]+\\]:" 1 2 nil (3)) (ibm "^\\([^( 
	]+\\)(\\([0-9]+\\):\\([0-9]+\\)) : \\(?:warnin\\(g\\)\\|informationa\\(l\\)\\)?" 1 2 3 (4 . 5)) (irix "^[-[:alnum:]_/ ]+: \\(?:\\(?:[sS]evere\\|[eE]rror\\|[wW]arnin\\(g\\)\\|[iI]nf\\(o\\)\\)[0-9 ]*: \\)?\\([^,\" 
	]+\\)\\(?:, line\\|:\\) \\([0-9]+\\):" 3 4 nil (1 . 2)) (java "^\\(?:[ 	]+at \\|==[0-9]+== +\\(?:at\\|b\\(y\\)\\)\\).+(\\([^()
]+\\):\\([0-9]+\\))$" 2 3 nil (1)) (jikes-file "^\\(?:Found\\|Issued\\) .* compiling \"\\(.+\\)\":$" 1 nil nil 0) (maven "\\(\\[WARNING\\] *\\)?\\([^ 
]\\(?:[^
 :]\\| [^-/
]\\|:[^ 
]\\)*?\\):\\[\\([0-9]+\\),\\([0-9]+\\)\\] " 2 3 4 (1)) (jikes-line "^ *\\([0-9]+\\)\\.[ 	]+.*
 +\\(<-*>
\\*\\*\\* \\(?:Error\\|Warnin\\(g\\)\\)\\)" nil 1 nil 2 0 (2 (compilation-face (quote (3))))) (gcc-include "^\\(?:In file included \\|                 \\|	\\)from \\([0-9]*[^0-9
]\\(?:[^
 :]\\| [^-/
]\\|:[^ 
]\\)*?\\):\\([0-9]+\\)\\(?::\\([0-9]+\\)\\)?\\(?:\\(:\\)\\|\\(,\\|$\\)\\)?" 1 2 3 (4 . 5)) (ruby-Test::Unit "^[	 ]*\\[\\([^(].*\\):\\([1-9][0-9]*\\)\\(\\]\\)?:in " 1 2) (gnu (\, (rx bol (32 (| (regexp "[[:alpha:]][-[:alnum:].]+: ?") (regexp "[ 	]+\\(?:in \\|from\\)"))) (group-n 1 (: (regexp "[0-9]*[^0-9
]") (*\? (| (regexp "[^
 :]") (regexp " [^-/
]") (regexp ":[^ 
]"))))) (regexp ": ?") (group-n 2 (regexp "[0-9]+")) (32 (| (: "-" (group-n 4 (regexp "[0-9]+")) (32 "." (group-n 5 (regexp "[0-9]+")))) (: (in ".:") (group-n 3 (regexp "[0-9]+")) (32 "-" (32 (group-n 4 (regexp "[0-9]+")) ".") (group-n 5 (regexp "[0-9]+")))))) ":" (| (: (* " ") (group-n 6 (| "FutureWarning" "RuntimeWarning" "Warning" "warning" "W:"))) (: (* " ") (group-n 7 (| (regexp "[Ii]nfo\\(?:\\>\\|rmationa?l?\\)") "I:" (: "[ skipping " (+ ".") " ]") "instantiated from" "required from" (regexp "[Nn]ote")))) (: (* " ") (regexp "[Ee]rror")) (: (regexp "[0-9]?") (| (regexp "[^0-9
]") eol)) (regexp "[0-9][0-9][0-9]")))) 1 (2 . 4) (3 . 5) (6 . 7)) (lcc "^\\(?:E\\|\\(W\\)\\), \\([^(
]+\\)(\\([0-9]+\\),[ 	]*\\([0-9]+\\)" 2 3 4 (1)) (makepp "^makepp\\(?:\\(?:: warning\\(:\\).*?\\|\\(: Scanning\\|: [LR]e?l?oading makefile\\|: Imported\\|log:.*?\\) \\|: .*?\\)`\\(\\(\\S +?\\)\\(?::\\([0-9]+\\)\\)?\\)['(]\\)" 4 5 nil (1 . 2) 3 (0 (progn (save-match-data (compilation-parse-errors (match-end 0) (line-end-position) (\` ("`\\(\\(\\S +?\\)\\(?::\\([0-9]+\\)\\)?\\)['(]" 2 3 nil (\, (cond ((match-end 1) 1) ((match-end 2) 0) (t 2))) 1)))) (end-of-line) nil))) (mips-1 " (\\([0-9]+\\)) in \\([^ 
]+\\)" 2 1) (mips-2 " in \\([^()
 ]+\\)(\\([0-9]+\\))$" 1 2) (msft "^ *\\([0-9]+>\\)?\\(\\(?:[a-zA-Z]:\\)?[^:(	
]+\\)(\\([0-9]+\\)) : \\(?:see declaration\\|\\(?:warnin\\(g\\)\\|[a-z ]+\\) C[0-9]+:\\)" 2 3 nil (4)) (omake "omake: file \\(.*\\) changed" 1 nil nil nil nil (0 (progn (compilation--flush-file-structure (match-string 1)) nil))) (oracle "^\\(?:Semantic error\\|Error\\|PCC-[0-9]+:\\).* line \\([0-9]+\\)\\(?:\\(?:,\\| at\\)? column \\([0-9]+\\)\\)?\\(?:,\\| in\\| of\\)? file \\(.*?\\):?$" 3 1 2) (perl " at \\([^ 
]+\\) line \\([0-9]+\\)\\(?:[,.]\\|$\\| during global destruction\\.$\\)" 1 2) (php "\\(?:Parse\\|Fatal\\) error: \\(.*\\) in \\(.*\\) on line \\([0-9]+\\)" 2 3 nil nil) (rxp "^\\(?:Error\\|Warnin\\(g\\)\\):.*
.* line \\([0-9]+\\) char \\([0-9]+\\) of file://\\(.+\\)" 4 2 3 (1)) (sparc-pascal-file "^\\w\\w\\w \\w\\w\\w +[0-3]?[0-9] +[0-2][0-9]:[0-5][0-9]:[0-5][0-9] [12][09][0-9][0-9] +\\(.*\\):$" 1 nil nil 0) (sparc-pascal-line "^\\(\\(?:E\\|\\(w\\)\\) +[0-9]+\\) line \\([0-9]+\\) -  " nil 3 nil (2) nil (1 (compilation-face (quote (2))))) (sparc-pascal-example "^ +\\([0-9]+\\) +.*
\\(\\(?:e\\|\\(w\\)\\) [0-9]+\\)-+" nil 1 nil (3) nil (2 (compilation-face (quote (3))))) (sun ": \\(?:ERROR\\|WARNIN\\(G\\)\\|REMAR\\(K\\)\\) \\(?:[[:alnum:] ]+, \\)?File = \\(.+\\), Line = \\([0-9]+\\)\\(?:, Column = \\([0-9]+\\)\\)?" 3 4 5 (1 . 2)) (sun-ada "^\\([^, 
	]+\\), line \\([0-9]+\\), char \\([0-9]+\\)[:., (-]" 1 2 3) (watcom "^[ 	]*\\(\\(?:[a-zA-Z]:\\)?[^:(	
]+\\)(\\([0-9]+\\)): ?\\(?:\\(Error! E[0-9]+\\)\\|\\(Warning! W[0-9]+\\)\\):" 1 2 nil (4)) (4bsd "\\(?:^\\|::  \\|\\S ( \\)\\(/[^ 
	()]+\\)(\\([0-9]+\\))\\(?:: \\(warning:\\)?\\|$\\| ),\\)" 1 2 nil (3)) (gcov-file "^ *-: *\\(0\\):Source:\\(.+\\)$" 2 1 nil 0 nil) (gcov-header "^ *-: *\\(0\\):\\(?:Object\\|Graph\\|Data\\|Runs\\|Programs\\):.+$" nil 1 nil 0 nil) (gcov-nomark "^ *-: *\\([1-9]\\|[0-9]\\{2,\\}\\):.*$" nil 1 nil 0 nil (0 (quote default)) (1 compilation-line-face)) (gcov-called-line "^ *\\([0-9]+\\): *\\([0-9]+\\):.*$" nil 2 nil 0 nil (0 (quote default)) (1 compilation-info-face) (2 compilation-line-face)) (gcov-never-called "^ *\\(#####\\): *\\([0-9]+\\):.*$" nil 2 nil 2 nil (0 (quote default)) (1 compilation-error-face) (2 compilation-line-face)) (perl--Pod::Checker "^\\*\\*\\* \\(?:ERROR\\|\\(WARNING\\)\\).* \\(?:at\\|on\\) line \\([0-9]+\\) \\(?:.* \\)?in file \\([^ 	
]+\\)" 3 2 nil (1)) (perl--Test "^# Failed test [0-9]+ in \\([^ 	
]+\\) at line \\([0-9]+\\)" 1 2) (perl--Test2 "^\\(.*NOK.*\\)?# Test [0-9]+ got:.* (\\([^ 	
]+\\) at line \\([0-9]+\\)\\( fail #[0-9]+\\)?)" 2 3) (perl--Test::Harness "^.*NOK.* \\([^ 	
]+\\) at line \\([0-9]+\\)" 1 2) (weblint "^\\([^ 	
(]+\\) (\\([0-9]+\\):\\([0-9]+\\)) " 1 2 3) (guile-file "^In \\(.+\\..+\\):
" 1 nil nil 0) (guile-line "^ *\\([0-9]+\\): *\\([0-9]+\\)" nil 1 2)))) nil [4885 18918])
            ("compilation-error-regexp-alist" variable (:default-value (mapcar (quote car) compilation-error-regexp-alist-alist)) nil [18920 21732])
            ("compilation-directory" variable nil nil [21807 21893])
            ("compilation-directory-matcher" variable (:default-value (quote ("\\(?:Entering\\|Leavin\\(g\\)\\) directory [`']\\(.+\\)'$" (2 . 1)))) nil [21895 22736])
            ("compilation-page-delimiter" variable (:default-value "^\\(?:\\|.*\\(?:Entering\\|Leaving\\) directory [`'].+'
\\)+") nil [22738 22892])
            ("compilation-mode-font-lock-keywords" variable (:default-value (quote (("^[Cc]hecking \\(?:[Ff]or \\|[Ii]f \\|[Ww]hether \\(?:to \\)?\\)?\\(.+\\)\\.\\.\\. *\\(?:(cached) *\\)?\\(\\(yes\\(?: .+\\)?\\)\\|no\\|\\(.*\\)\\)$" (1 font-lock-variable-name-face) (2 (compilation-face (quote (4 . 3))))) ("^\\([[:alnum:]_/.+-]+\\)\\(\\[\\([0-9]+\\)\\]\\)?[ 	]*:" (1 font-lock-function-name-face) (3 compilation-line-face nil t)) (" --?o\\(?:utfile\\|utput\\)?[= ]\\(\\S +\\)" . 1) ("^Compilation \\(finished\\).*" (0 (quote (face nil compilation-message nil help-echo nil mouse-face nil)) t) (1 compilation-info-face)) ("^Compilation \\(exited abnormally\\|interrupt\\|killed\\|terminated\\|segmentation fault\\)\\(?:.*with code \\([0-9]+\\)\\)?.*" (0 (quote (face nil compilation-message nil help-echo nil mouse-face nil)) t) (1 compilation-error-face) (2 compilation-error-face nil t))))) nil [22894 24009])
            ("compilation-highlight-regexp" variable (:default-value t) nil [24011 24190])
            ("compilation-highlight-overlay" variable nil nil [24192 24297])
            ("compilation-error-screen-columns" variable (:default-value t) nil [24299 24924])
            ("compilation-read-command" variable (:default-value t) nil [24926 25378])
            ("compilation-ask-about-save" variable (:default-value t) nil [25395 25606])
            ("compilation-save-buffers-predicate" variable nil nil [25608 26209])
            ("compilation-search-path" variable (:default-value (quote (nil))) nil [26226 26581])
            ("compile-command" variable (:default-value (purecopy "make -k ")) nil [26598 27286])
            ("compilation-disable-input" variable nil nil [27463 27765])
            ("compilation-locs" variable nil nil [27991 28019])
            ("compilation-debug" variable nil nil [28021 28252])
            ("compilation-exit-message-function" variable nil nil [28254 28597])
            ("compilation-environment" variable nil nil [28599 28981])
            ("compile-history" variable nil nil [29015 29043])
            ("compilation-error" variable
               (:default-value (quote ((t :inherit error)))
                :type "face")
                nil [29045 29180])
            ("compilation-warning" variable
               (:default-value (quote ((t :inherit warning)))
                :type "face")
                nil [29182 29323])
            ("compilation-info" variable
               (:default-value (quote ((t :inherit success)))
                :type "face")
                nil [29325 29466])
            ("compilation-mode-line-fail" variable
               (:default-value (quote ((default :inherit compilation-error) (((class color) (min-colors 16)) (:foreground "Red1" :weight bold)) (((class color) (min-colors 8)) (:foreground "red")) (t (:inverse-video t :weight bold))))
                :type "face")
                nil [29578 29928])
            ("compilation-mode-line-run" variable
               (:default-value (quote ((t :inherit compilation-warning)))
                :type "face")
                nil [29930 30108])
            ("compilation-mode-line-exit" variable
               (:default-value (quote ((default :inherit compilation-info) (((class color) (min-colors 16)) (:foreground "ForestGreen" :weight bold)) (((class color)) (:foreground "green" :weight bold)) (t (:weight bold))))
                :type "face")
                nil [30110 30453])
            ("compilation-line-number" variable
               (:default-value (quote ((t :inherit font-lock-keyword-face)))
                :type "face")
                nil [30455 30628])
            ("compilation-column-number" variable
               (:default-value (quote ((t :inherit font-lock-doc-face)))
                :type "face")
                nil [30630 30803])
            ("compilation-message-face" variable (:default-value (quote underline)) nil [30805 31126])
            ("compilation-error-face" variable (:default-value (quote compilation-error)) nil [31128 31232])
            ("compilation-warning-face" variable (:default-value (quote compilation-warning)) nil [31234 31344])
            ("compilation-info-face" variable (:default-value (quote compilation-info)) nil [31346 31456])
            ("compilation-line-face" variable (:default-value (quote compilation-line-number)) nil [31458 31573])
            ("compilation-column-face" variable (:default-value (quote compilation-column-number)) nil [31575 31696])
            ("compilation-enter-directory-face" variable (:default-value (quote font-lock-function-name-face)) nil [31726 31851])
            ("compilation-leave-directory-face" variable (:default-value (quote font-lock-builtin-face)) nil [31853 31971])
            ("compilation-parse-errors-function" variable nil nil [32024 32070])
            ("make-obsolete-variable" code nil nil [32071 32172])
            ("compilation-auto-jump-to-first-error" variable nil nil [32174 32357])
            ("compilation-auto-jump-to-next" variable nil nil [32359 32467])
            ("make-variable-buffer-local" code nil nil [32468 32527])
            ("compilation-skip-to-next-location" variable (:default-value t) nil [32709 32828])
            ("compilation-skip-threshold" variable (:default-value 1) nil [32830 33310])
            ("compilation-set-skip-threshold" function
               (:user-visible-flag t
                :arguments ("level"))
                nil [33312 33789])
            ("compilation-skip-visited" variable nil nil [33791 34139])
            ("compilation-face" function (:arguments ("type")) nil [34141 34341])
            ("compilation--make-cdrloc" function (:arguments ("line" "file-struct" "marker")) nil [35753 35855])
            ("compilation--loc->col" function (:arguments ("loc")) nil [35856 35906])
            ("compilation--loc->line" function (:arguments ("loc")) nil [35907 35959])
            ("compilation--loc->file-struct" function (:arguments ("loc")) nil [35960 36020])
            ("compilation--loc->marker" function (:arguments ("loc")) nil [36021 36076])
            ("compilation--loc->visited" function (:arguments ("loc")) nil [36139 36198])
            ("compilation--make-file-struct" function (:arguments ("file-spec" "formats" "loc-tree")) nil [36888 37014])
            ("compilation--file-struct->file-spec" function (:arguments ("fs")) nil [37015 37077])
            ("compilation--file-struct->formats" function (:arguments ("fs")) nil [37078 37139])
            ("compilation--file-struct->loc-tree" function (:arguments ("fs")) nil [37203 37264])
            ("cl-defstruct" code nil nil [37713 38010])
            ("compilation--previous-directory-cache" variable nil nil [38012 38326])
            ("make-variable-buffer-local" code nil nil [38327 38394])
            ("compilation--flush-directory-cache" function (:arguments ("start" "_end")) nil [38396 38891])
            ("compilation--previous-directory" function (:arguments ("pos")) nil [38893 40533])
            ("compilation-directory-properties" function (:arguments ("idx" "leave")) nil [40813 41896])
            ("compilation-assq" function (:arguments ("key" "alist")) nil [42451 42758])
            ("compilation-auto-jump" function (:arguments ("buffer" "pos")) nil [42761 43011])
            ("compilation-error-properties" function (:arguments ("file" "line" "end-line" "col" "end-col" "type" "fmt")) nil [43235 46062])
            ("compilation-beginning-of-line" function (:arguments ("n")) nil [46064 46401])
            ("compilation-move-to-column" function (:arguments ("col" "screen")) nil [46403 46924])
            ("compilation-internal-error-properties" function (:arguments ("file" "line" "end-line" "col" "end-col" "type" "fmts")) nil [46926 51790])
            ("compilation--put-prop" function (:arguments ("matchnum" "prop" "val")) nil [51792 51994])
            ("compilation--remove-properties" function (:arguments ("start" "end")) nil [51996 53198])
            ("compilation--parse-region" function (:arguments ("start" "end")) nil [53200 54909])
            ("compilation-parse-errors" function (:arguments ("start" "end" "rules")) nil [54911 60000])
            ("compilation--parsed" variable (:default-value -1) nil [60002 60033])
            ("make-variable-buffer-local" code nil nil [60034 60083])
            ("compilation--ensure-parse" function (:arguments ("limit")) nil [60085 61095])
            ("compilation--flush-parse" function (:arguments ("start" "_end")) nil [61097 61309])
            ("compilation-mode-font-lock-keywords" function nil nil [61311 61498])
            ("compilation-read-command" function (:arguments ("command")) nil [61500 61748])
            ("compile" function
               (:user-visible-flag t
                :arguments ("command" "comint"))
                nil [61767 63494])
            ("recompile" function
               (:user-visible-flag t
                :arguments ("edit-command"))
                nil [63541 64361])
            ("compilation-scroll-output" variable nil nil [64363 64971])
            ("compilation-buffer-name" function (:arguments ("name-of-mode" "mode-command" "name-function")) nil [64974 65678])
            ("compilation-always-kill" variable nil nil [65680 65879])
            ("compilation-start" function (:arguments ("command" "mode" "name-function" "highlight-regexp")) nil [65896 76296])
            ("compilation-set-window-height" function (:arguments ("window")) nil [76298 76893])
            ("compilation-menu-map" variable (:default-value (let ((map (make-sparse-keymap "Errors")) (opt-map (make-sparse-keymap "Skip"))) (define-key map [stop-subjob] (quote (menu-item "Stop Compilation" kill-compilation :help "Kill the process made by the M-x compile or M-x grep commands"))) (define-key map [compilation-mode-separator3] (quote ("----"))) (define-key map [compilation-next-error-follow-minor-mode] (quote (menu-item "Auto Error Display" next-error-follow-minor-mode :help "Display the error under cursor when moving the cursor" :button (:toggle . next-error-follow-minor-mode)))) (define-key map [compilation-skip] (cons "Skip Less Important Messages" opt-map)) (define-key opt-map [compilation-skip-none] (quote (menu-item "Don't Skip Any Messages" (lambda nil (interactive) (customize-set-variable (quote compilation-skip-threshold) 0)) :help "Do not skip any type of messages" :button (:radio eq compilation-skip-threshold 0)))) (define-key opt-map [compilation-skip-info] (quote (menu-item "Skip Info" (lambda nil (interactive) (customize-set-variable (quote compilation-skip-threshold) 1)) :help "Skip anything less than warning" :button (:radio eq compilation-skip-threshold 1)))) (define-key opt-map [compilation-skip-warning-and-info] (quote (menu-item "Skip Warnings and Info" (lambda nil (interactive) (customize-set-variable (quote compilation-skip-threshold) 2)) :help "Skip over Warnings and Info, stop for errors" :button (:radio eq compilation-skip-threshold 2)))) (define-key map [compilation-mode-separator2] (quote ("----"))) (define-key map [compilation-first-error] (quote (menu-item "First Error" first-error :help "Restart at the first error, visit corresponding source code"))) (define-key map [compilation-previous-error] (quote (menu-item "Previous Error" previous-error :help "Visit previous `next-error' message and corresponding source code"))) (define-key map [compilation-next-error] (quote (menu-item "Next Error" next-error :help "Visit next `next-error' message and corresponding source code"))) map)) nil [76895 79059])
            ("compilation-minor-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map special-mode-map) (define-key map [mouse-2] (quote compile-goto-error)) (define-key map [follow-link] (quote mouse-face)) (define-key map "" (quote compile-goto-error)) (define-key map "" (quote compile-goto-error)) (define-key map "" (quote compilation-display-error)) (define-key map "" (quote kill-compilation)) (define-key map "\356" (quote compilation-next-error)) (define-key map "\360" (quote compilation-previous-error)) (define-key map "\373" (quote compilation-previous-file)) (define-key map "\375" (quote compilation-next-file)) (define-key map "g" (quote recompile)) (define-key map [menu-bar compilation] (cons "Errors" compilation-menu-map)) map)) nil [79061 79903])
            ("compilation-shell-minor-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map "\215" (quote compile-goto-error)) (define-key map "\216" (quote compilation-next-error)) (define-key map "\220" (quote compilation-previous-error)) (define-key map "\373" (quote compilation-previous-file)) (define-key map "\375" (quote compilation-next-file)) (define-key map [menu-bar compilation] (cons "Errors" compilation-menu-map)) map)) nil [79905 80423])
            ("compilation-button-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [mouse-2] (quote compile-goto-error)) (define-key map [follow-link] (quote mouse-face)) (define-key map "" (quote compile-goto-error)) map)) nil [80425 80691])
            ("fset" code nil nil [80692 80745])
            ("compilation-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map special-mode-map) (define-key map [mouse-2] (quote compile-goto-error)) (define-key map [follow-link] (quote mouse-face)) (define-key map "" (quote compile-goto-error)) (define-key map "" (quote compile-goto-error)) (define-key map "" (quote compilation-display-error)) (define-key map "" (quote kill-compilation)) (define-key map "\356" (quote compilation-next-error)) (define-key map "\360" (quote compilation-previous-error)) (define-key map "\373" (quote compilation-previous-file)) (define-key map "\375" (quote compilation-next-file)) (define-key map "	" (quote compilation-next-error)) (define-key map [backtab] (quote compilation-previous-error)) (define-key map "g" (quote recompile)) (define-key map "" (quote next-error-follow-minor-mode)) (let ((submap (make-sparse-keymap "Compile"))) (define-key map [menu-bar compilation] (cons "Compile" submap)) (set-keymap-parent submap compilation-menu-map)) (define-key map [menu-bar compilation compilation-separator2] (quote ("----"))) (define-key map [menu-bar compilation compilation-grep] (quote (menu-item "Search Files (grep)..." grep :help "Run grep, with user-specified args, and collect output in a buffer"))) (define-key map [menu-bar compilation compilation-recompile] (quote (menu-item "Recompile" recompile :help "Re-compile the program including the current buffer"))) (define-key map [menu-bar compilation compilation-compile] (quote (menu-item "Compile..." compile :help "Compile the program including the current buffer.  Default: run `make'"))) map)) nil [80747 82681])
            ("compilation-mode-tool-bar-map" variable (:default-value (when (keymapp tool-bar-map) (let ((map (copy-keymap tool-bar-map))) (define-key map [undo] nil) (define-key map [separator-2] nil) (define-key-after map [separator-compile] menu-bar-separator) (tool-bar-local-item "left-arrow" (quote previous-error-no-select) (quote previous-error-no-select) map :rtl "right-arrow" :help "Goto previous error") (tool-bar-local-item "right-arrow" (quote next-error-no-select) (quote next-error-no-select) map :rtl "left-arrow" :help "Goto next error") (tool-bar-local-item "cancel" (quote kill-compilation) (quote kill-compilation) map :enable (quote (let ((buffer (compilation-find-buffer))) (get-buffer-process buffer))) :help "Stop compilation") (tool-bar-local-item "refresh" (quote recompile) (quote recompile) map :help "Restart compilation") map))) nil [82683 83680])
            ("put" code nil nil [83682 83726])
            ("compilation-mode" function
               (:user-visible-flag t
                :arguments ("name-of-mode"))
                nil [83743 85100])
            ("put" code nil nil [85117 85165])
            ("define-compilation-mode" function (:arguments ("mode" "name" "doc" "body")) nil [85167 86752])
            ("compilation-revert-buffer" function (:arguments ("ignore-auto" "noconfirm")) nil [86754 87032])
            ("compilation-current-error" variable nil nil [87034 87207])
            ("compilation-messages-start" variable nil nil [87209 87351])
            ("compilation-setup" function (:arguments ("minor")) nil [87353 89040])
            ("compilation--unsetup" function nil nil [89042 89340])
            ("define-minor-mode" code nil nil [89357 89956])
            ("define-minor-mode" code nil nil [89973 90484])
            ("compilation-handle-exit" function (:arguments ("process-status" "exit-status" "msg")) nil [90486 92154])
            ("compilation-sentinel" function (:arguments ("proc" "msg")) nil [92206 92951])
            ("compilation-filter" function (:arguments ("proc" "string")) nil [92953 94578])
            ("compilation-buffer-internal-p" function nil nil [94655 94778])
            ("compilation-buffer-p" function (:arguments ("buffer")) nil [94862 95013])
            ("compilation-loop" function (:arguments ("<" "property-change" "1+" "error" "limit")) nil [95015 96403])
            ("compilation-next-single-property-change" function (:arguments ("position" "prop" "object" "limit")) nil [96405 97194])
            ("compilation-next-error" function
               (:user-visible-flag t
                :arguments ("n" "different-file" "pt"))
                nil [97196 99327])
            ("compilation-previous-error" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [99329 99627])
            ("compilation-next-file" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [99629 99868])
            ("compilation-previous-file" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [99870 100118])
            ("compilation-display-error" function (:user-visible-flag t) nil [100120 100302])
            ("kill-compilation" function (:user-visible-flag t) nil [100304 100612])
            ("defalias" code nil nil [100614 100670])
            ("compile-goto-error" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [100672 101252])
            ("compilation-find-buffer" function (:arguments ("avoid-current")) nil [101367 101782])
            ("compilation-next-error-function" function
               (:user-visible-flag t
                :arguments ("n" "reset"))
                nil [101799 105917])
            ("compilation-gcpro" variable nil nil [105919 106013])
            ("make-variable-buffer-local" code nil nil [106014 106061])
            ("compilation-fake-loc" function (:arguments ("marker" "file" "line" "col")) nil [106063 107566])
            ("compilation-context-lines" variable nil nil [107568 108036])
            ("compilation-set-window" function (:arguments ("w" "mk")) nil [108038 108589])
            ("next-error-highlight-timer" variable nil nil [108591 108626])
            ("compilation-goto-locus" function (:arguments ("msg" "mk" "end-mk")) nil [108628 112465])
            ("compilation-goto-locus-delete-o" function nil nil [112467 112788])
            ("compilation-find-file" function (:arguments ("marker" "filename" "directory" "formats")) nil [112791 117194])
            ("compilation-get-file-structure" function (:arguments ("file" "fmt")) nil [117196 119569])
            ("compilation--flush-file-structure" function (:arguments ("file")) nil [119571 120005])
            ("defvaralias" code nil nil [120051 120113])
            ("compilation-parsing-end" variable (:default-value (make-marker)) nil [120114 120160])
            ("compilation-error-list" variable nil nil [120161 120196])
            ("compilation-old-error-list" variable nil nil [120197 120236])
            ("compilation--compat-error-properties" function (:arguments ("err")) nil [120238 121109])
            ("compilation--compat-parse-errors" function (:arguments ("limit")) nil [121111 123057])
            ("compilation-forget-errors" function nil nil [123139 124951])
            ("compile" package nil nil [124953 124971]))          
      :file "compile.el.gz"
      :pointmax 124998
      :fsize 35232
      :lastmodtime '(22966 58805 0 0)
      :unmatched-syntax '((close-paren 42758 . 42759) (symbol 42387 . 42404) (open-paren 42386 . 42387) (close-paren 1171 . 1172) (symbol 1136 . 1153) (open-paren 1135 . 1136))))
  :file "!usr!local!Cellar!emacs-plus!25.3!share!emacs!25.3!lisp!progmodes!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
