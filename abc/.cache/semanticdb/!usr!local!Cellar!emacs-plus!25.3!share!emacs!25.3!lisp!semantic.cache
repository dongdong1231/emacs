;; Object semanticdb-project-database-file
;; SEMANTICDB Tags save file
(semanticdb-project-database-file "semanticdb-project-database-file"
  :tables
  (list
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [1051 1068])
            ("declare-function" code nil nil [1071 1133])
            ("declare-function" code nil nil [1134 1174])
            ("compilation-current-error" variable nil nil [1196 1230])
            ("compilation-context-lines" variable nil nil [1231 1265])
            ("idle-update-delay" variable (:default-value 0.5) nil [1267 1564])
            ("killing" customgroup (:user-visible-flag t) nil [1566 1640])
            ("paren-matching" customgroup (:user-visible-flag t) nil [1642 1744])
            ("next-error" customgroup (:user-visible-flag t) nil [1781 1882])
            ("next-error" variable
               (:default-value (quote ((t (:inherit region))))
                :type "face")
                nil [1884 2015])
            ("next-error-highlight" variable (:default-value 0.5) nil [2017 2772])
            ("next-error-highlight-no-select" variable (:default-value 0.5) nil [2774 3467])
            ("next-error-recenter" variable nil nil [3469 3831])
            ("next-error-hook" variable nil nil [3833 3974])
            ("next-error-highlight-timer" variable nil nil [3976 4015])
            ("next-error-overlay-arrow-position" variable nil nil [4017 4063])
            ("put" code nil nil [4064 4142])
            ("add-to-list" code nil nil [4143 4220])
            ("next-error-last-buffer" variable nil nil [4222 4449])
            ("next-error-function" variable nil nil [4451 4909])
            ("make-variable-buffer-local" code nil nil [4910 4959])
            ("next-error-move-function" variable nil nil [4961 5274])
            ("make-variable-buffer-local" code nil nil [5275 5329])
            ("next-error-buffer-p" function (:arguments ("buffer" "avoid-current" "extra-test-inclusive" "extra-test-exclusive")) nil [5331 6413])
            ("next-error-find-buffer" function (:arguments ("avoid-current" "extra-test-inclusive" "extra-test-exclusive")) nil [6415 8697])
            ("next-error" function
               (:user-visible-flag t
                :arguments ("arg" "reset"))
                nil [8699 10468])
            ("next-error-internal" function nil nil [10470 10891])
            ("defalias" code nil nil [10893 10932])
            ("defalias" code nil nil [10933 10967])
            ("previous-error" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [10969 11286])
            ("first-error" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [11288 11556])
            ("next-error-no-select" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [11558 12010])
            ("previous-error-no-select" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [12012 12390])
            ("next-error-follow-last-line" variable nil nil [12461 12501])
            ("define-minor-mode" code nil nil [12503 13211])
            ("next-error-follow-mode-post-command-hook" function nil nil [13327 13660])
            ("fundamental-mode" function (:user-visible-flag t) nil [13669 13878])
            ("special-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (suppress-keymap map) (define-key map "q" (quote quit-window)) (define-key map " " (quote scroll-up-command)) (define-key map [33554464] (quote scroll-down-command)) (define-key map "" (quote scroll-down-command)) (define-key map "?" (quote describe-mode)) (define-key map "h" (quote describe-mode)) (define-key map ">" (quote end-of-buffer)) (define-key map "<" (quote beginning-of-buffer)) (define-key map "g" (quote revert-buffer)) map)) nil [13956 14440])
            ("put" code nil nil [14442 14482])
            ("define-derived-mode" code nil nil [14483 14628])
            ("self-insert-uses-region-functions" variable nil nil [14661 15034])
            ("hard-newline" variable (:default-value (propertize "
" (quote hard) t (quote rear-nonsticky) (quote (hard)))) nil [15036 15169])
            ("newline" function
               (:user-visible-flag t
                :arguments ("arg" "interactive"))
                nil [15171 18496])
            ("set-hard-newline-properties" function (:arguments ("from" "to")) nil [18498 18846])
            ("open-line" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [18848 19625])
            ("split-line" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [19627 20428])
            ("delete-indentation" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [20430 21143])
            ("defalias" code nil nil [21145 21187])
            ("delete-blank-lines" function (:user-visible-flag t) nil [21206 22633])
            ("delete-trailing-lines" variable (:default-value t) nil [22635 22921])
            ("delete-trailing-whitespace" function
               (:user-visible-flag t
                :arguments ("start" "end"))
                nil [22923 24729])
            ("newline-and-indent" function (:user-visible-flag t) nil [24731 25164])
            ("reindent-then-newline-and-indent" function (:user-visible-flag t) nil [25166 26392])
            ("read-quoted-char-radix" variable (:default-value 8) nil [26394 26615])
            ("read-quoted-char" function (:arguments ("prompt")) nil [26617 29466])
            ("quoted-insert" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [29468 31497])
            ("forward-to-indentation" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [31499 31692])
            ("backward-to-indentation" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [31694 31893])
            ("back-to-indentation" function (:user-visible-flag t) nil [31895 32185])
            ("fixup-whitespace" function (:user-visible-flag t) nil [32187 32526])
            ("delete-horizontal-space" function
               (:user-visible-flag t
                :arguments ("backward-only"))
                nil [32528 32966])
            ("just-one-space" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [32968 33228])
            ("cycle-spacing--context" variable nil nil [33230 33485])
            ("cycle-spacing" function
               (:user-visible-flag t
                :arguments ("n" "preserve-nl-back" "mode"))
                nil [33487 35936])
            ("beginning-of-buffer" function (:arguments ("arg")) nil [35939 36862])
            ("end-of-buffer" function (:arguments ("arg")) nil [36864 38111])
            ("delete-active-region" variable (:default-value t) nil [38113 38650])
            ("region-extract-function" variable (:default-value (lambda (delete) (when (region-beginning) (cond ((eq delete (quote bounds)) (list (cons (region-beginning) (region-end)))) ((eq delete (quote delete-only)) (delete-region (region-beginning) (region-end))) (t (filter-buffer-substring (region-beginning) (region-end) delete)))))) nil [38652 39474])
            ("region-insert-function" variable (:default-value (lambda (lines) (let ((first t)) (while lines (or first (insert 10)) (insert-for-yank (car lines)) (setq lines (cdr lines) first nil))))) nil [39476 39822])
            ("delete-backward-char" function (:arguments ("n" "killflag")) nil [39824 41461])
            ("delete-forward-char" function (:arguments ("n" "killflag")) nil [41463 42606])
            ("mark-whole-buffer" function nil nil [42608 43045])
            ("goto-line" function (:arguments ("line" "buffer")) nil [43089 45366])
            ("count-words-region" function
               (:user-visible-flag t
                :arguments ("start" "end" "arg"))
                nil [45368 46050])
            ("count-words" function
               (:user-visible-flag t
                :arguments ("start" "end"))
                nil [46052 46845])
            ("count-words--buffer-message" function nil nil [46847 47000])
            ("count-words--message" function (:arguments ("str" "start" "end")) nil [47002 47327])
            ("define-obsolete-function-alias" code nil nil [47329 47408])
            ("what-line" function (:user-visible-flag t) nil [47410 47761])
            ("count-lines" function (:arguments ("start" "end")) nil [47763 48600])
            ("line-number-at-pos" function (:arguments ("pos")) nil [48602 49062])
            ("what-cursor-position" function
               (:user-visible-flag t
                :arguments ("detail"))
                nil [49064 53567])
            ("read-expression-map" variable (:default-value (let ((m (make-sparse-keymap))) (define-key m "\211" (quote completion-at-point)) (define-key m "	" (quote completion-at-point)) (set-keymap-parent m minibuffer-local-map) m)) nil [53632 53947])
            ("read-minibuffer" function (:arguments ("prompt" "initial-contents")) nil [53949 54472])
            ("eval-minibuffer" function (:arguments ("prompt" "initial-contents")) nil [54474 54931])
            ("minibuffer-completing-symbol" variable nil nil [54933 55036])
            ("make-obsolete-variable" code nil nil [55037 55107])
            ("minibuffer-default" variable nil nil [55109 55302])
            ("eval-expression-print-level" variable (:default-value 4) nil [55304 55534])
            ("eval-expression-print-length" variable (:default-value 12) nil [55536 55769])
            ("eval-expression-debug-on-error" variable (:default-value t) nil [55771 55980])
            ("eval-expression-print-format" function (:arguments ("value")) nil [55982 56674])
            ("eval-expression-minibuffer-setup-hook" variable nil nil [56676 56790])
            ("read--expression" function (:arguments ("prompt" "initial-contents")) nil [56792 57451])
            ("eval-expression" function
               (:user-visible-flag t
                :arguments ("exp" "insert-value"))
                nil [57581 59870])
            ("edit-and-eval-command" function (:arguments ("prompt" "command")) nil [59872 60799])
            ("repeat-complex-command" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [60801 62469])
            ("extended-command-history" variable nil nil [62472 62509])
            ("execute-extended-command--last-typed" variable nil nil [62510 62559])
            ("read-extended-command" function nil nil [62561 64745])
            ("suggest-key-bindings" variable (:default-value t) nil [64747 65113])
            ("execute-extended-command--shorter-1" function (:arguments ("name" "length")) nil [65115 65577])
            ("execute-extended-command--shorter" function (:arguments ("name" "typed")) nil [65579 66489])
            ("execute-extended-command" function (:arguments ("prefixarg" "command-name" "typed")) nil [66491 70056])
            ("command-execute" function (:arguments ("cmd" "record-flag" "keys" "special")) nil [70058 72667])
            ("minibuffer-history" variable nil nil [72670 72923])
            ("minibuffer-history-sexp-flag" variable nil nil [72924 73239])
            ("setq" code nil nil [73240 73294])
            ("setq" code nil nil [73295 73333])
            ("minibuffer-history-search-history" variable nil nil [73359 73405])
            ("minibuffer-text-before-history" variable nil nil [73407 73607])
            ("add-hook" code nil nil [73609 73673])
            ("minibuffer-history-initialize" function nil nil [73675 73759])
            ("minibuffer-avoid-prompt" function (:arguments ("_new" "_old")) nil [73761 73976])
            ("minibuffer-history-case-insensitive-variables" variable nil nil [73978 74368])
            ("previous-matching-history-element" function
               (:user-visible-flag t
                :arguments ("regexp" "n"))
                nil [74370 77214])
            ("next-matching-history-element" function
               (:user-visible-flag t
                :arguments ("regexp" "n"))
                nil [77216 78270])
            ("minibuffer-temporary-goal-position" variable nil nil [78272 78319])
            ("minibuffer-default-add-function" variable (:default-value (quote minibuffer-default-add-completions)) nil [78321 78961])
            ("minibuffer-default-add-done" variable nil nil [78963 79286])
            ("make-variable-buffer-local" code nil nil [79288 79345])
            ("minibuffer-default-add-completions" function nil nil [79347 79801])
            ("goto-history-element" function
               (:user-visible-flag t
                :arguments ("nabs"))
                nil [79803 82091])
            ("next-history-element" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [82093 82344])
            ("previous-history-element" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [82346 82604])
            ("next-line-or-history-element" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [82606 84088])
            ("previous-line-or-history-element" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [84090 86129])
            ("next-complete-history-element" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [86131 86787])
            ("previous-complete-history-element" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [86789 87074])
            ("minibuffer-prompt-width" function nil nil [87133 87422])
            ("add-hook" code nil nil [87455 87522])
            ("minibuffer-history-isearch-message-overlay" variable nil nil [87524 87575])
            ("make-variable-buffer-local" code nil nil [87576 87648])
            ("minibuffer-history-isearch-setup" function nil nil [87650 88290])
            ("minibuffer-history-isearch-end" function nil nil [88292 88522])
            ("minibuffer-history-isearch-search" function nil nil [88524 90429])
            ("minibuffer-history-isearch-message" function (:arguments ("c-q-hack" "ellipsis")) nil [90431 91828])
            ("minibuffer-history-isearch-wrap" function nil nil [91830 92447])
            ("minibuffer-history-isearch-push-state" function nil nil [92449 92780])
            ("minibuffer-history-isearch-pop-state" function (:arguments ("_cmd" "hist-pos")) nil [92782 92994])
            ("define-obsolete-function-alias" code nil nil [93072 93134])
            ("undo-equiv-table" variable
               (:constant-flag t
                :default-value (make-hash-table :test (quote eq) :weakness t))
                nil [93136 93379])
            ("undo-in-region" variable nil nil [93381 93485])
            ("undo-no-redo" variable nil nil [93487 93562])
            ("pending-undo-list" variable nil nil [93564 93715])
            ("undo" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [93717 98338])
            ("buffer-disable-undo" function
               (:user-visible-flag t
                :arguments ("buffer"))
                nil [98340 98621])
            ("undo-only" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [98623 98885])
            ("undo-in-progress" variable nil nil [98887 99018])
            ("undo-more" function (:arguments ("n")) nil [99020 99715])
            ("primitive-undo" function (:arguments ("n" "list")) nil [99717 106117])
            ("undo-copy-list" function (:arguments ("list")) nil [106142 106240])
            ("undo-copy-list-1" function (:arguments ("elt")) nil [106242 106351])
            ("undo-start" function (:arguments ("beg" "end")) nil [106353 106941])
            ("undo-make-selective-list" function (:arguments ("start" "end")) nil [109939 112225])
            ("undo-elt-in-region" function (:arguments ("undo-elt" "start" "end")) nil [112227 113266])
            ("undo-elt-crosses-region" function (:arguments ("undo-elt" "start" "end")) nil [113268 113810])
            ("undo-adjust-elt" function (:arguments ("elt" "deltas")) nil [113812 114577])
            ("undo-adjust-beg-end" function (:arguments ("beg" "end" "deltas")) nil [115468 115773])
            ("undo-adjust-pos" function (:arguments ("pos" "deltas" "use-<")) nil [115775 116247])
            ("undo-delta" function (:arguments ("undo-elt")) nil [116418 116751])
            ("defvar-local" code nil nil [116947 117668])
            ("undo-auto-current-boundary-timer" variable nil nil [117670 117845])
            ("undo-auto--this-command-amalgamating" variable nil nil [117847 118043])
            ("undo-auto--needs-boundary-p" function nil nil [118045 118185])
            ("undo-auto--last-boundary-amalgamating-number" function nil nil [118187 118491])
            ("undo-auto--ensure-boundary" function (:arguments ("cause")) nil [118493 119121])
            ("undo-auto--boundaries" function (:arguments ("cause")) nil [119123 119557])
            ("undo-auto--boundary-timer" function nil nil [119559 119728])
            ("undo-auto--boundary-ensure-timer" function nil nil [119730 119975])
            ("undo-auto--undoably-changed-buffers" variable nil nil [119977 120214])
            ("undo-auto--add-boundary" function nil nil [120216 120495])
            ("undo-auto-amalgamate" function nil nil [120497 121826])
            ("undo-auto--undoable-change-no-timer" function nil nil [122050 122206])
            ("undo-auto--undoable-change" function nil nil [122208 122369])
            ("undo-ask-before-discard" variable nil nil [122400 123166])
            ("undo-extra-outer-limit" variable nil nil [123168 123444])
            ("make-variable-buffer-local" code nil nil [123445 123497])
            ("setq" code nil nil [123782 123841])
            ("undo-outer-limit-truncate" function (:arguments ("size")) nil [123842 125633])
            ("password-word-equivalents" variable (:default-value (quote ("password" "passcode" "passphrase" "pass phrase" "\354\225\224\355\230\270" "\343\203\221\343\202\271\343\203\257\343\203\274\343\203\211" "\340\254\252\340\255\215\340\254\260\340\254\254\340\255\207\340\254\266 \340\254\270\340\254\231\340\255\215\340\254\225\340\255\207\340\254\244" "\341\236\226\341\236\266\341\236\200\341\237\222\341\236\231\341\236\237\341\236\230\341\237\222\341\236\204\341\236\266\341\236\217\341\237\213" "adgangskode" "contrase\303\261a" "contrasenya" "geslo" "has\305\202o" "heslo" "iphasiwedi" "jelsz\303\263" "l\303\266senord" "lozinka" "m\341\272\255t kh\341\272\251u" "mot de passe" "parola" "pasahitza" "passord" "passwort" "pasvorto" "salasana" "senha" "slapta\305\276odis" "wachtwoordnil [125636 127025])
            ("shell-command-history" variable nil nil [127027 127217])
            ("shell-command-switch" variable (:default-value (purecopy "-c")) nil [127219 127333])
            ("shell-command-default-error-buffer" variable nil nil [127335 127650])
            ("declare-function" code nil nil [127652 127718])
            ("declare-function" code nil nil [127719 127805])
            ("minibuffer-default-add-shell-commands" function (:user-visible-flag t) nil [127807 128511])
            ("declare-function" code nil nil [128513 128564])
            ("minibuffer-local-shell-command-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map minibuffer-local-map) (define-key map "	" (quote completion-at-point)) map)) nil [128566 128811])
            ("read-shell-command" function (:arguments ("prompt" "initial-contents" "hist" "args")) nil [128813 129442])
            ("async-shell-command-buffer" variable (:default-value (quote confirm-new-buffer)) nil [129444 130697])
            ("async-shell-command" function
               (:user-visible-flag t
                :arguments ("command" "output-buffer" "error-buffer"))
                nil [130699 132004])
            ("shell-command" function
               (:user-visible-flag t
                :arguments ("command" "output-buffer" "error-buffer"))
                nil [132006 140155])
            ("display-message-or-buffer" function (:arguments ("message" "buffer-name" "action" "frame")) nil [140157 142553])
            ("shell-command-sentinel" function (:arguments ("process" "signal")) nil [142649 142860])
            ("shell-command-on-region" function
               (:user-visible-flag t
                :arguments ("start" "end" "command" "output-buffer" "replace" "error-buffer" "display-error-buffer" "region-noncontiguous-p"))
                nil [142862 152418])
            ("shell-command-to-string" function (:arguments ("command")) nil [152420 152680])
            ("process-file" function (:arguments ("program" "infile" "buffer" "display" "args")) nil [152682 154132])
            ("process-file-side-effects" variable (:default-value t) nil [154134 154556])
            ("start-file-process" function (:arguments ("name" "buffer" "program" "program-args")) nil [154558 155443])
            ("tabulated-list-format" variable nil nil [155465 155495])
            ("tabulated-list-entries" variable nil nil [155496 155527])
            ("tabulated-list-sort-key" variable nil nil [155528 155560])
            ("declare-function" code nil nil [155561 155627])
            ("declare-function" code nil nil [155628 155734])
            ("process-menu-query-only" variable nil nil [155736 155772])
            ("process-menu-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [100] (quote process-menu-delete-process)) map)) nil [155774 155904])
            ("define-derived-mode" code nil nil [155906 156402])
            ("process-menu-delete-process" function (:user-visible-flag t) nil [156404 156575])
            ("list-processes--refresh" function nil nil [156577 158224])
            ("process-menu-visit-buffer" function (:arguments ("button")) nil [158226 158323])
            ("list-processes" function
               (:user-visible-flag t
                :arguments ("query-only" "buffer"))
                nil [158325 159288])
            ("setq" code nil nil [159313 159352])
            ("setq" code nil nil [159353 159389])
            ("internal-echo-keystrokes-prefix" function nil nil [159391 159996])
            ("prefix-command-echo-keystrokes-functions" variable nil nil [159998 160204])
            ("prefix-command-update" function nil nil [160206 160373])
            ("prefix-command-preserve-state-hook" variable nil nil [160375 160487])
            ("prefix-command-preserve-state" function nil nil [160489 160982])
            ("reset-this-command-lengths" function nil nil [160984 161087])
            ("add-hook" code nil nil [161183 161279])
            ("universal-argument--description" function nil nil [161280 161739])
            ("add-hook" code nil nil [161741 161828])
            ("universal-argument--preserve" function nil nil [161829 161907])
            ("universal-argument-map" variable (:default-value (let ((map (make-sparse-keymap)) (universal-argument-minus (\` (menu-item "" negative-argument :filter (\, (lambda (cmd) (if (integerp prefix-arg) nil cmd))))))) (define-key map [switch-frame] (lambda (e) (interactive "e") (handle-switch-frame e) (universal-argument--mode))) (define-key map [21] (quote universal-argument-more)) (define-key map [45] universal-argument-minus) (define-key map [48] (quote digit-argument)) (define-key map [49] (quote digit-argument)) (define-key map [50] (quote digit-argument)) (define-key map [51] (quote digit-argument)) (define-key map [52] (quote digit-argument)) (define-key map [53] (quote digit-argument)) (define-key map [54] (quote digit-argument)) (define-key map [55] (quote digit-argument)) (define-key map [56] (quote digit-argument)) (define-key map [57] (quote digit-argument)) (define-key map [kp-0] (quote digit-argument)) (define-key map [kp-1] (quote digit-argument)) (define-key map [kp-2] (quote digit-argument)) (define-key map [kp-3] (quote digit-argument)) (define-key map [kp-4] (quote digit-argument)) (define-key map [kp-5] (quote digit-argument)) (define-key map [kp-6] (quote digit-argument)) (define-key map [kp-7] (quote digit-argument)) (define-key map [kp-8] (quote digit-argument)) (define-key map [kp-9] (quote digit-argument)) (define-key map [kp-subtract] universal-argument-minus) map)) nil [161909 163525])
            ("universal-argument--mode" function nil nil [163527 163637])
            ("universal-argument" function (:user-visible-flag t) nil [163639 164382])
            ("universal-argument-more" function (:arguments ("arg")) nil [164384 164856])
            ("negative-argument" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [164858 165232])
            ("digit-argument" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [165234 166002])
            ("filter-buffer-substring-functions" variable nil nil [166006 166183])
            ("make-obsolete-variable" code nil nil [166184 166308])
            ("filter-buffer-substring-function" variable (:default-value (function buffer-substring--filter)) nil [166310 166716])
            ("buffer-substring-filters" variable nil nil [166718 167199])
            ("make-obsolete-variable" code nil nil [167200 167315])
            ("filter-buffer-substring" function (:arguments ("beg" "end" "delete")) nil [167317 168173])
            ("buffer-substring--filter" function (:arguments ("beg" "end" "delete")) nil [168175 169072])
            ("interprogram-cut-function" variable (:default-value (function gui-select-text)) nil [169116 169667])
            ("interprogram-paste-function" variable (:default-value (function gui-selection-value)) nil [169669 171108])
            ("kill-ring" variable nil nil [171149 171604])
            ("kill-ring-max" variable (:default-value 60) nil [171606 171741])
            ("kill-ring-yank-pointer" variable nil nil [171743 171844])
            ("save-interprogram-paste-before-kill" variable nil nil [171846 172348])
            ("kill-do-not-save-duplicates" variable nil nil [172350 172579])
            ("kill-new" function (:arguments ("string" "replace")) nil [172581 174607])
            ("kill-append-merge-undo" variable nil nil [174766 174956])
            ("kill-append" function (:arguments ("string" "before-p")) nil [174958 175814])
            ("yank-pop-change-selection" variable nil nil [175816 176164])
            ("current-kill" function (:arguments ("n" "do-not-move")) nil [176166 177824])
            ("kill-read-only-ok" variable nil nil [177875 178011])
            ("kill-region" function
               (:user-visible-flag t
                :arguments ("beg" "end" "region"))
                nil [178013 180889])
            ("copy-region-as-kill" function
               (:user-visible-flag t
                :arguments ("beg" "end" "region"))
                nil [181083 182216])
            ("kill-ring-save" function
               (:user-visible-flag t
                :arguments ("beg" "end" "region"))
                nil [182218 183507])
            ("indicate-copied-region" function (:arguments ("message-len")) nil [183509 185091])
            ("append-next-kill" function
               (:user-visible-flag t
                :arguments ("interactive"))
                nil [185093 185913])
            ("bidi-directional-controls-chars" variable (:default-value "\342\200\252-\342\200\256\342\201\246-\342\201\251") nil [185915 186060])
            ("bidi-directional-non-controls-chars" variable (:default-value "^\342\200\252-\342\200\256\342\201\246-\342\201\251") nil [186062 186212])
            ("squeeze-bidi-context-1" function (:arguments ("from" "to" "category" "replacement")) nil [186214 187320])
            ("squeeze-bidi-context" function (:arguments ("from" "to")) nil [187322 188423])
            ("line-substring-with-bidi-context" function (:arguments ("start" "end" "no-properties")) nil [188425 190351])
            ("buffer-substring-with-bidi-context" function (:arguments ("start" "end" "no-properties")) nil [190353 191656])
            ("yank-handled-properties" variable (:default-value (quote ((font-lock-face . yank-handle-font-lock-face-property) (category . yank-handle-category-property)))) nil [191672 192497])
            ("yank-excluded-properties" variable (:default-value (quote (category field follow-link fontified font-lock-face help-echo intangible invisible keymap local-map mouse-face read-only yank-handler))) nil [192570 193033])
            ("yank-window-start" variable nil nil [193035 193065])
            ("yank-undo-function" variable nil nil [193066 193397])
            ("yank-pop" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [193399 195115])
            ("yank" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [195117 197865])
            ("rotate-yank-pointer" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [197867 198057])
            ("kill-forward-chars" function (:arguments ("arg")) nil [198122 198267])
            ("kill-backward-chars" function (:arguments ("arg")) nil [198316 198462])
            ("backward-delete-char-untabify-method" variable (:default-value (quote untabify)) nil [198464 198939])
            ("backward-delete-char-untabify" function
               (:user-visible-flag t
                :arguments ("arg" "killp"))
                nil [198941 200293])
            ("zap-to-char" function
               (:user-visible-flag t
                :arguments ("arg" "char"))
                nil [200295 200912])
            ("kill-whole-line" variable nil nil [200949 201094])
            ("kill-line" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [201096 203310])
            ("kill-whole-line" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [203312 204941])
            ("forward-visible-line" function (:arguments ("arg")) nil [204943 207433])
            ("end-of-visible-line" function nil nil [207435 208201])
            ("insert-buffer" function (:arguments ("buffer")) nil [208204 208757])
            ("append-to-buffer" function
               (:user-visible-flag t
                :arguments ("buffer" "start" "end"))
                nil [208759 209659])
            ("prepend-to-buffer" function
               (:user-visible-flag t
                :arguments ("buffer" "start" "end"))
                nil [209661 210203])
            ("copy-to-buffer" function
               (:user-visible-flag t
                :arguments ("buffer" "start" "end"))
                nil [210205 210774])
            ("define-error" code nil nil [210777 210846])
            ("activate-mark-hook" variable nil nil [210848 211037])
            ("deactivate-mark-hook" variable nil nil [211039 211117])
            ("mark" function (:arguments ("force")) nil [211119 211743])
            ("deactivate-mark" function (:arguments ("force")) nil [211778 213868])
            ("activate-mark" function (:arguments ("no-tmm")) nil [213870 214261])
            ("set-mark" function (:arguments ("pos")) nil [214263 215487])
            ("save-mark-and-excursion--save" function nil nil [215489 215638])
            ("save-mark-and-excursion--restore" function (:arguments ("saved-mark-info")) nil [215640 216590])
            ("save-mark-and-excursion" function (:arguments ("body")) nil [216592 217014])
            ("use-empty-active-region" variable nil nil [217016 217515])
            ("use-region-p" function nil nil [217517 218123])
            ("region-active-p" function nil nil [218125 218814])
            ("region-noncontiguous-p" function nil nil [218816 219065])
            ("redisplay-unhighlight-region-function" variable (:default-value (lambda (rol) (when (overlayp rol) (delete-overlay rol)))) nil [219067 219173])
            ("redisplay-highlight-region-function" variable (:default-value (lambda (start end window rol) (if (not (overlayp rol)) (let ((nrol (make-overlay start end))) (funcall redisplay-unhighlight-region-function rol) (overlay-put nrol (quote window) window) (overlay-put nrol (quote face) (quote region)) (overlay-put nrol (quote priority) (quote (nil . 100))) nrol) (unless (and (eq (overlay-buffer rol) (current-buffer)) (eq (overlay-start rol) start) (eq (overlay-end rol) end)) (move-overlay rol start end (current-buffer))) rol))) nil [219175 220046])
            ("redisplay--update-region-highlight" function (:arguments ("window")) nil [220048 220884])
            ("pre-redisplay-functions" variable (:default-value (list (function redisplay--update-region-highlight))) nil [220886 221202])
            ("redisplay--pre-redisplay-functions" function (:arguments ("windows")) nil [221204 221669])
            ("add-function" code nil nil [221671 221767])
            ("defvar-local" code nil nil [221770 221869])
            ("put" code nil nil [221870 221905])
            ("mark-ring-max" variable (:default-value 16) nil [221907 222052])
            ("global-mark-ring" variable nil nil [222054 222138])
            ("global-mark-ring-max" variable (:default-value 16) nil [222140 222301])
            ("pop-to-mark-command" function (:user-visible-flag t) nil [222303 222616])
            ("push-mark-command" function
               (:user-visible-flag t
                :arguments ("arg" "nomsg"))
                nil [222618 223029])
            ("set-mark-command-repeat-pop" variable nil nil [223031 223490])
            ("set-mark-command" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [223492 225811])
            ("push-mark" function (:arguments ("location" "nomsg" "activate")) nil [225813 227367])
            ("pop-mark" function nil nil [227369 227788])
            ("define-obsolete-function-alias" code nil nil [227790 227879])
            ("exchange-point-and-mark" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [227880 228775])
            ("shift-select-mode" variable (:default-value t) nil [228777 229349])
            ("handle-shift-selection" function nil nil [229351 230676])
            ("define-minor-mode" code nil nil [230678 232038])
            ("widen-automatically" variable (:default-value t) nil [232040 232374])
            ("non-essential" variable nil nil [232376 232774])
            ("pop-global-mark" function (:user-visible-flag t) nil [232776 233591])
            ("next-line-add-newlines" variable nil nil [233594 233768])
            ("next-line" function (:arguments ("arg" "try-vscroll")) nil [233770 235967])
            ("previous-line" function (:arguments ("arg" "try-vscroll")) nil [235969 237675])
            ("track-eol" variable nil nil [237677 238015])
            ("goal-column" variable nil nil [238017 238284])
            ("make-variable-buffer-local" code nil nil [238285 238326])
            ("temporary-goal-column" variable nil nil [238328 238845])
            ("line-move-ignore-invisible" variable (:default-value t) nil [238847 239505])
            ("line-move-visual" variable (:default-value t) nil [239507 240083])
            ("declare-function" code nil nil [240120 240180])
            ("default-font-height" function nil nil [240182 240816])
            ("default-font-width" function nil nil [240818 241539])
            ("default-line-height" function nil nil [241541 242003])
            ("window-screen-lines" function nil nil [242005 242575])
            ("line-move-partial" function (:arguments ("arg" "noerror" "to-end")) nil [242622 246395])
            ("line-move" function (:arguments ("arg" "noerror" "to-end" "try-vscroll")) nil [246719 248696])
            ("line-move-visual" function (:arguments ("arg" "noerror")) nil [248844 251434])
            ("line-move-1" function (:arguments ("arg" "noerror" "_to-end")) nil [251588 256261])
            ("line-move-finish" function (:arguments ("column" "opoint" "forward")) nil [256263 259401])
            ("line-move-to-column" function (:arguments ("col")) nil [259403 260985])
            ("move-end-of-line" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [260987 262342])
            ("move-beginning-of-line" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [262344 263876])
            ("put" code nil nil [264006 264040])
            ("set-goal-column" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [264042 265075])
            ("end-of-visual-line" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [265143 265707])
            ("beginning-of-visual-line" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [265709 266300])
            ("kill-visual-line" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [266302 267717])
            ("next-logical-line" function
               (:user-visible-flag t
                :arguments ("arg" "try-vscroll"))
                nil [267719 268088])
            ("previous-logical-line" function
               (:user-visible-flag t
                :arguments ("arg" "try-vscroll"))
                nil [268090 268469])
            ("visual-line" customgroup (:user-visible-flag t) nil [268471 268572])
            ("visual-line-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [remap kill-line] (quote kill-visual-line)) (define-key map [remap move-beginning-of-line] (quote beginning-of-visual-line)) (define-key map [remap move-end-of-line] (quote end-of-visual-line)) map)) nil [268574 269062])
            ("visual-line-fringe-indicators" variable (:default-value (quote (nil nil))) nil [269064 270251])
            ("visual-line--saved-state" variable nil nil [270253 270290])
            ("define-minor-mode" code nil nil [270292 271933])
            ("turn-on-visual-line-mode" function nil nil [271935 271993])
            ("define-globalized-minor-mode" code nil nil [271995 272093])
            ("transpose-chars" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [272097 272611])
            ("transpose-words" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [272613 273057])
            ("transpose-sexps" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [273059 274813])
            ("transpose-lines" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [274815 275422])
            ("transpose-subr" function (:arguments ("mover" "arg" "special")) nil [275573 276830])
            ("transpose-subr-1" function (:arguments ("pos1" "pos2")) nil [276832 277836])
            ("backward-word" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [277839 278389])
            ("mark-word" function
               (:user-visible-flag t
                :arguments ("arg" "allow-extend"))
                nil [278391 279143])
            ("kill-word" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [279145 279357])
            ("backward-kill-word" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [279359 279550])
            ("current-word" function (:arguments ("strict" "really-word")) nil [279552 281160])
            ("fill-prefix" variable nil nil [281163 281329])
            ("make-variable-buffer-local" code nil nil [281330 281371])
            ("put" code nil nil [281372 281429])
            ("auto-fill-inhibit-regexp" variable nil nil [281431 281597])
            ("do-auto-fill" function nil nil [281599 284899])
            ("comment-line-break-function" variable (:default-value (quote comment-indent-new-line)) nil [284901 285227])
            ("default-indent-new-line" function
               (:user-visible-flag t
                :arguments ("soft"))
                nil [285229 286336])
            ("normal-auto-fill-function" variable (:default-value (quote do-auto-fill)) nil [286338 286494])
            ("put" code nil nil [286496 286558])
            ("put" code nil nil [286732 286784])
            ("define-minor-mode" code nil nil [286786 287529])
            ("auto-fill-function" function nil nil [287596 287703])
            ("turn-on-auto-fill" function nil nil [287705 287798])
            ("turn-off-auto-fill" function nil nil [287800 287896])
            ("custom-add-option" code nil nil [287898 287952])
            ("set-fill-column" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [287954 288792])
            ("set-selective-display" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [288795 289585])
            ("defvaralias" code nil nil [289587 289645])
            ("toggle-truncate-lines" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [289647 290427])
            ("toggle-word-wrap" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [290429 290973])
            ("overwrite-mode-textual" variable (:default-value (purecopy " Ovwrt")) nil [290975 291092])
            ("overwrite-mode-binary" variable (:default-value (purecopy " Bin Ovwrt")) nil [291093 291220])
            ("define-minor-mode" code nil nil [291222 291955])
            ("define-minor-mode" code nil nil [291957 292885])
            ("define-minor-mode" code nil nil [292887 293363])
            ("define-minor-mode" code nil nil [293365 293669])
            ("define-minor-mode" code nil nil [293671 293979])
            ("define-minor-mode" code nil nil [293981 294977])
            ("paren-blinking" customgroup (:user-visible-flag t) nil [294980 295111])
            ("blink-matching-paren" variable (:default-value t) nil [295113 295711])
            ("blink-matching-paren-on-screen" variable (:default-value t) nil [295713 296129])
            ("blink-matching-paren-distance" variable (:default-value (* 100 1024)) nil [296131 296456])
            ("blink-matching-delay" variable (:default-value 1) nil [296458 296594])
            ("blink-matching-paren-dont-ignore-comments" variable nil nil [296596 296864])
            ("blink-matching-check-mismatch" function (:arguments ("start" "end")) nil [296866 297851])
            ("blink-matching-check-function" variable (:default-value (function blink-matching-check-mismatch)) nil [297853 298219])
            ("blink-matching--overlay" variable (:default-value (let ((ol (make-overlay (point) (point) nil t))) (overlay-put ol (quote face) (quote show-paren-match)) (delete-overlay ol) ol)) nil [298221 298431])
            ("blink-matching-open" function (:user-visible-flag t) nil [298433 302997])
            ("blink-paren-function" variable (:default-value (quote blink-matching-open)) nil [302999 303188])
            ("blink-paren-post-self-insert-function" function nil nil [303190 303837])
            ("put" code nil nil [303839 303897])
            ("add-hook" code nil nil [303899 304278])
            ("keyboard-quit" function (:user-visible-flag t) nil [304456 305174])
            ("buffer-quit-function" variable nil nil [305176 305426])
            ("keyboard-escape-quit" function (:user-visible-flag t) nil [305428 306254])
            ("play-sound-file" function
               (:user-visible-flag t
                :arguments ("file" "volume" "device"))
                nil [306256 306651])
            ("read-mail-command" variable (:default-value (quote rmail)) nil [306655 307172])
            ("mail-user-agent" variable (:default-value (quote message-user-agent)) nil [307174 308718])
            ("compose-mail-user-agent-warnings" variable (:default-value t) nil [308720 309045])
            ("rfc822-goto-eoh" function nil nil [309047 309451])
            ("mail-encode-mml" variable nil nil [309493 309632])
            ("compose-mail" function
               (:user-visible-flag t
                :arguments ("to" "subject" "other-headers" "continue" "switch-function" "yank-action" "send-actions" "return-action"))
                nil [309634 312328])
            ("compose-mail-other-window" function
               (:user-visible-flag t
                :arguments ("to" "subject" "other-headers" "continue" "yank-action" "send-actions" "return-action"))
                nil [312330 312721])
            ("compose-mail-other-frame" function
               (:user-visible-flag t
                :arguments ("to" "subject" "other-headers" "continue" "yank-action" "send-actions" "return-action"))
                nil [312723 313111])
            ("set-variable-value-history" variable nil nil [313115 313300])
            ("set-variable" function
               (:user-visible-flag t
                :arguments ("variable" "value" "make-local"))
                nil [313302 316398])
            ("completion-list-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [mouse-2] (quote choose-completion)) (define-key map [follow-link] (quote mouse-face)) (define-key map [down-mouse-2] nil) (define-key map "" (quote choose-completion)) (define-key map "" (quote delete-completion-window)) (define-key map [left] (quote previous-completion)) (define-key map [right] (quote next-completion)) (define-key map [9] (quote next-completion)) (define-key map [backtab] (quote previous-completion)) (define-key map "q" (quote quit-window)) (define-key map "z" (quote kill-this-buffer)) map)) nil [316453 317086])
            ("put" code nil nil [317154 317202])
            ("completion-reference-buffer" variable nil nil [317204 317433])
            ("completion-no-auto-exit" variable nil nil [317435 317616])
            ("completion-base-position" variable nil nil [317618 317988])
            ("completion-list-insert-choice-function" variable (:default-value (function completion--replace)) nil [317990 318289])
            ("completion-base-size" variable nil nil [318291 318746])
            ("make-obsolete-variable" code nil nil [318747 318826])
            ("delete-completion-window" function (:user-visible-flag t) nil [318828 319202])
            ("previous-completion" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [319204 319335])
            ("next-completion" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [319337 320587])
            ("choose-completion" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [320589 322548])
            ("choose-completion-guess-base-position" function (:arguments ("string")) nil [322632 323470])
            ("choose-completion-delete-max-match" function (:arguments ("string")) nil [323472 323664])
            ("choose-completion-string-functions" variable nil nil [323666 324305])
            ("choose-completion-string" function (:arguments ("choice" "buffer" "base-position" "insert-function")) nil [324307 327717])
            ("define-derived-mode" code nil nil [327719 328091])
            ("completion-list-mode-finish" function nil nil [328093 328289])
            ("add-hook" code nil nil [328291 328353])
            ("completion-show-help" variable (:default-value t) nil [328417 328568])
            ("completion-setup-function" function nil nil [328699 330681])
            ("add-hook" code nil nil [330683 330743])
            ("define-key" code nil nil [330745 330820])
            ("define-key" code nil nil [330821 330896])
            ("switch-to-completions" function (:user-visible-flag t) nil [330898 331439])
            ("event-apply-alt-modifier" function (:arguments ("_ignore-prompt")) nil [331601 331844])
            ("event-apply-super-modifier" function (:arguments ("_ignore-prompt")) nil [331845 332098])
            ("event-apply-hyper-modifier" function (:arguments ("_ignore-prompt")) nil [332099 332352])
            ("event-apply-shift-modifier" function (:arguments ("_ignore-prompt")) nil [332353 332606])
            ("event-apply-control-modifier" function (:arguments ("_ignore-prompt")) nil [332607 332864])
            ("event-apply-meta-modifier" function (:arguments ("_ignore-prompt")) nil [332865 333113])
            ("event-apply-modifier" function (:arguments ("event" "symbol" "lshiftby" "prefix")) nil [333115 334179])
            ("define-key" code nil nil [334181 334252])
            ("define-key" code nil nil [334253 334324])
            ("define-key" code nil nil [334325 334395])
            ("define-key" code nil nil [334396 334465])
            ("define-key" code nil nil [334466 334537])
            ("define-key" code nil nil [334538 334611])
            ("mapc" code nil nil [334901 335496])
            ("clone-buffer-hook" variable nil nil [335548 335649])
            ("clone-indirect-buffer-hook" variable nil nil [335651 335770])
            ("clone-process" function (:arguments ("process" "newname")) nil [335772 337281])
            ("clone-buffer" function
               (:user-visible-flag t
                :arguments ("newname" "display-flag"))
                nil [337384 340347])
            ("clone-indirect-buffer" function
               (:user-visible-flag t
                :arguments ("newname" "display-flag" "norecord"))
                nil [340350 341986])
            ("clone-indirect-buffer-other-window" function
               (:user-visible-flag t
                :arguments ("newname" "display-flag" "norecord"))
                nil [341989 342472])
            ("normal-erase-is-backspace" variable (:default-value (quote maybe)) nil [342520 344061])
            ("normal-erase-is-backspace-setup-frame" function (:arguments ("frame")) nil [344063 345138])
            ("define-minor-mode" code nil nil [345140 348635])
            ("vis-mode-saved-buffer-invisibility-spec" variable nil nil [348638 348761])
            ("define-minor-mode" code nil nil [348763 349916])
            ("define-minor-mode" code nil nil [349918 350688])
            ("messages-buffer-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map special-mode-map) (define-key map "g" nil) map)) nil [350691 350874])
            ("define-derived-mode" code nil nil [350876 350992])
            ("messages-buffer" function nil nil [350994 351281])
            ("bad-packages-alist" variable
               (:constant-flag t
                :default-value (quote ((semantic semantic-version "\\`2\\.0pre[1-3]\\'" "The version of `semantic' loaded does not work in Emacs 22.
It can cause constant high CPU load.
Upgrade to at least Semantic 2.0pre4 (distributed with CEDET 1.0pre4).") (CUA-mode t nil "CUA-mode is now part of the standard GNU Emacs distribution,
so you can now enable CUA via the Options menu or by customizing `cua-mode'.

You have loaded an older version of CUA-mode which does not work
correctly with this version of Emacs.  You should remove the old
version and use the one distributed with Emacs."))))
                nil [352240 353666])
            ("bad-package-check" function (:arguments ("package")) nil [353668 354173])
            ("dolist" code nil nil [354175 354297])
            ("define-alternatives" function (:arguments ("command" "customizations")) nil [354950 357574])
            ("upcase-dwim" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [357640 358009])
            ("downcase-dwim" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [358011 358398])
            ("capitalize-dwim" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [358400 358801])
            ("simple" package nil nil [358806 358823]))          
      :file "simple.el.gz"
      :pointmax 358849
      :fsize 97606
      :lastmodtime '(22966 58805 0 0)
      :unmatched-syntax '((close-paren 1068 . 1069) (symbol 1033 . 1050) (open-paren 1032 . 1033)))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("widget" include nil nil [1248 1265])
            ("custom-define-hook" variable nil nil [1267 1416])
            ("custom-dont-initialize" variable nil nil [1418 1601])
            ("custom-current-group-alist" variable nil nil [1603 1716])
            ("custom-initialize-default" function (:arguments ("symbol" "exp")) nil [1746 2209])
            ("custom-initialize-set" function (:arguments ("symbol" "exp")) nil [2211 2786])
            ("custom-initialize-reset" function (:arguments ("symbol" "exp")) nil [2788 3555])
            ("custom-initialize-changed" function (:arguments ("symbol" "exp")) nil [3557 4335])
            ("custom-delayed-init-variables" variable nil nil [4337 4434])
            ("custom-initialize-delay" function (:arguments ("symbol" "_value")) nil [4436 5560])
            ("custom-declare-variable" function (:arguments ("symbol" "default" "doc" "args")) nil [5562 8227])
            ("defcustom" function (:arguments ("symbol" "standard" "doc" "args")) nil [8229 14423])
            ("defface" function (:arguments ("face" "spec" "doc" "args")) nil [14451 17391])
            ("custom-current-group" function nil nil [17420 17509])
            ("custom-declare-group" function (:arguments ("symbol" "members" "doc" "args")) nil [17511 18556])
            ("defgroup" function (:arguments ("symbol" "members" "doc" "args")) nil [18558 19721])
            ("custom-add-to-group" function (:arguments ("group" "option" "widget")) nil [19723 20069])
            ("custom-group-of-mode" function (:arguments ("mode")) nil [20071 20473])
            ("custom-handle-all-keywords" function (:arguments ("symbol" "args" "type")) nil [20492 21082])
            ("custom-handle-keyword" function (:arguments ("symbol" "keyword" "value" "type")) nil [21084 21795])
            ("custom-add-dependencies" function (:arguments ("symbol" "value")) nil [21797 22550])
            ("custom-add-option" function (:arguments ("symbol" "option")) nil [22552 23003])
            ("defalias" code nil nil [23004 23060])
            ("custom-add-link" function (:arguments ("symbol" "widget")) nil [23062 23298])
            ("custom-add-version" function (:arguments ("symbol" "version")) nil [23300 23450])
            ("custom-add-package-version" function (:arguments ("symbol" "version")) nil [23452 23626])
            ("custom-add-load" function (:arguments ("symbol" "load")) nil [23628 23924])
            ("custom-autoload" function (:arguments ("symbol" "load" "noset")) nil [23926 24212])
            ("custom-variable-p" function (:arguments ("variable")) nil [24214 24647])
            ("define-obsolete-function-alias" code nil nil [24649 24724])
            ("custom-note-var-changed" function (:arguments ("variable")) nil [24726 25021])
            ("custom-load-recursion" variable nil nil [25164 25240])
            ("custom-load-symbol" function (:arguments ("symbol")) nil [25242 26501])
            ("custom-local-buffer" variable nil nil [26504 26824])
            ("put" code nil nil [26825 26870])
            ("custom-set-default" function (:arguments ("variable" "value")) nil [26872 27253])
            ("custom-set-minor-mode" function (:arguments ("variable" "value")) nil [27255 27679])
            ("custom-quote" function (:arguments ("sexp")) nil [27681 28019])
            ("customize-mark-to-save" function (:arguments ("symbol")) nil [28021 29184])
            ("customize-mark-as-set" function (:arguments ("symbol")) nil [29186 30341])
            ("custom-reevaluate-setting" function (:arguments ("symbol")) nil [30343 30815])
            ("custom-known-themes" variable (:default-value (quote (user changed))) nil [32642 33030])
            ("custom-theme-p" function (:arguments ("theme")) nil [33032 33141])
            ("custom-check-theme" function (:arguments ("theme")) nil [33143 33321])
            ("custom-push-theme" function (:arguments ("prop" "symbol" "theme" "mode" "value")) nil [33323 35519])
            ("custom-fix-face-spec" function (:arguments ("spec")) nil [35521 36291])
            ("custom-set-variables" function (:arguments ("args")) nil [36294 36905])
            ("custom-theme-set-variables" function (:arguments ("theme" "args")) nil [36907 39582])
            ("custom--sort-vars-table" variable nil nil [39584 39616])
            ("custom--sort-vars-result" variable nil nil [39617 39650])
            ("custom--sort-vars" function (:arguments ("vars")) nil [39652 41184])
            ("custom--sort-vars-1" function (:arguments ("sym" "_ignored")) nil [41186 41770])
            ("deftheme" function (:arguments ("theme" "doc" "ignored")) nil [42366 42987])
            ("custom-declare-theme" function (:arguments ("theme" "feature" "doc" "ignored")) nil [42989 43477])
            ("custom-make-theme-feature" function (:arguments ("theme")) nil [43479 43984])
            ("custom-theme-directory" variable (:default-value user-emacs-directory) nil [44008 44355])
            ("custom-theme-load-path" variable (:default-value (list (quote custom-theme-directory) t)) nil [44357 45115])
            ("custom--inhibit-theme-enable" variable nil nil [45117 45403])
            ("provide-theme" function (:arguments ("theme")) nil [45405 45803])
            ("custom-safe-themes" variable (:default-value (quote (default))) nil [45805 46425])
            ("load-theme" function
               (:user-visible-flag t
                :arguments ("theme" "no-confirm" "no-enable"))
                nil [46427 49351])
            ("custom-theme-load-confirm" function (:arguments ("hash")) nil [49353 50103])
            ("custom-theme-name-valid-p" function (:arguments ("name")) nil [50105 50370])
            ("custom-available-themes" function nil nil [50372 51252])
            ("custom-theme--load-path" function nil nil [51254 51573])
            ("enable-theme" function
               (:user-visible-flag t
                :arguments ("theme"))
                nil [51620 52856])
            ("custom-enabled-themes" variable nil nil [52858 54168])
            ("custom-theme-enabled-p" function (:arguments ("theme")) nil [54170 54288])
            ("disable-theme" function
               (:user-visible-flag t
                :arguments ("theme"))
                nil [54290 55889])
            ("declare-function" code nil nil [55931 56025])
            ("custom--frame-color-default" function (:arguments ("frame" "attribute" "resource-attr" "resource-class" "tty-default" "x-default")) nil [56027 56387])
            ("custom-variable-theme-value" function (:arguments ("variable")) nil [56389 56782])
            ("custom-theme-recalc-variable" function (:arguments ("variable")) nil [56784 57239])
            ("custom-theme-recalc-face" function (:arguments ("face")) nil [57241 57661])
            ("custom-theme-reset-variables" function (:arguments ("theme" "args")) nil [57878 58249])
            ("custom-reset-variables" function (:arguments ("args")) nil [58251 58592])
            ("custom" package nil nil [58608 58625]))          
      :file "custom.el.gz"
      :pointmax 58651
      :fsize 17191
      :lastmodtime '(22966 58805 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("define-widget-keywords" function (:arguments ("_keys")) nil [1380 1834])
            ("put" code nil nil [3028 3066])
            ("define-widget" function (:arguments ("name" "class" "doc" "args")) nil [3106 3771])
            ("defalias" code nil nil [3832 3877])
            ("widget" package nil nil [3893 3910]))          
      :file "widget.el.gz"
      :pointmax 3936
      :fsize 1847
      :lastmodtime '(22966 58805 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("declare-function" function (:arguments ("_fn" "_file" "_arglist" "_fileonly")) nil [1096 2616])
            ("defalias" code nil nil [2645 2666])
            ("noreturn" function (:arguments ("form")) nil [2668 2872])
            ("1value" function (:arguments ("form")) nil [2874 3112])
            ("def-edebug-spec" function (:arguments ("symbol" "spec")) nil [3114 3574])
            ("lambda" function (:arguments ("cdr")) nil [3576 4734])
            ("setq-local" function (:arguments ("var" "val")) nil [4736 4948])
            ("defvar-local" function (:arguments ("var" "val" "docstring")) nil [4950 5391])
            ("apply-partially" function (:arguments ("fun" "args")) nil [5393 5770])
            ("push" function (:arguments ("newelt" "place")) nil [5772 6366])
            ("pop" function (:arguments ("place")) nil [6368 7225])
            ("when" function (:arguments ("cond" "body")) nil [7227 7515])
            ("unless" function (:arguments ("cond" "body")) nil [7517 7803])
            ("dolist" function (:arguments ("spec" "body")) nil [7805 9084])
            ("dotimes" function (:arguments ("spec" "body")) nil [9086 10551])
            ("declare" function (:arguments ("_specs")) nil [10553 11128])
            ("ignore-errors" function (:arguments ("body")) nil [11130 11437])
            ("ignore" function
               (:user-visible-flag t
                :arguments ("_ignore"))
                nil [11468 11616])
            ("error" function (:arguments ("args")) nil [11673 12189])
            ("user-error" function (:arguments ("format" "args")) nil [12191 12851])
            ("define-error" function (:arguments ("name" "message" "parent")) nil [12853 13766])
            ("frame-configuration-p" function (:arguments ("object")) nil [13880 14135])
            ("internal--compiler-macro-cXXr" function (:arguments ("form" "x")) nil [14329 14909])
            ("caar" function (:arguments ("x")) nil [14911 15038])
            ("cadr" function (:arguments ("x")) nil [15040 15167])
            ("cdar" function (:arguments ("x")) nil [15169 15296])
            ("cddr" function (:arguments ("x")) nil [15298 15425])
            ("last" function (:arguments ("list" "n")) nil [15427 15844])
            ("butlast" function (:arguments ("list" "n")) nil [15846 16074])
            ("nbutlast" function (:arguments ("list" "n")) nil [16076 16353])
            ("zerop" function (:arguments ("number")) nil [16355 16585])
            ("delete-dups" function (:arguments ("list")) nil [16587 17374])
            ("delete-consecutive-dups" function (:arguments ("list" "circular")) nil [17451 17909])
            ("number-sequence" function (:arguments ("from" "to" "inc")) nil [17911 19918])
            ("copy-tree" function (:arguments ("tree" "vecp")) nil [19920 20669])
            ("assoc-default" function (:arguments ("key" "alist" "test" "default")) nil [20709 21509])
            ("assoc-ignore-case" function (:arguments ("key" "alist")) nil [21511 21833])
            ("assoc-ignore-representation" function (:arguments ("key" "alist")) nil [21835 22103])
            ("member-ignore-case" function (:arguments ("elt" "list")) nil [22105 22540])
            ("assq-delete-all" function (:arguments ("key" "alist")) nil [22542 23026])
            ("rassq-delete-all" function (:arguments ("value" "alist")) nil [23028 23521])
            ("alist-get" function (:arguments ("key" "alist" "default" "remove")) nil [23523 23983])
            ("remove" function (:arguments ("elt" "seq")) nil [23985 24338])
            ("remq" function (:arguments ("elt" "list")) nil [24340 24671])
            ("kbd" function (:arguments ("keys")) nil [24696 25076])
            ("put" code nil nil [25077 25095])
            ("undefined" function (:user-visible-flag t) nil [25097 25552])
            ("put" code nil nil [25647 25682])
            ("suppress-keymap" function (:arguments ("map" "nodigits")) nil [25684 26248])
            ("make-composed-keymap" function (:arguments ("maps" "parent")) nil [26250 26902])
            ("define-key-after" function (:arguments ("keymap" "key" "definition" "after")) nil [26904 28965])
            ("map-keymap-sorted" function (:arguments ("function" "keymap")) nil [28967 29647])
            ("keymap--menu-item-binding" function (:arguments ("val")) nil [29649 30119])
            ("keymap--menu-item-with-binding" function (:arguments ("item" "binding")) nil [30173 30773])
            ("keymap--merge-bindings" function (:arguments ("val1" "val2")) nil [30775 31241])
            ("keymap-canonicalize" function (:arguments ("map")) nil [31243 33112])
            ("put" code nil nil [33114 33171])
            ("keyboard-translate" function (:arguments ("from" "to")) nil [33173 33548])
            ("global-set-key" function
               (:user-visible-flag t
                :arguments ("key" "command"))
                nil [33579 34325])
            ("local-set-key" function
               (:user-visible-flag t
                :arguments ("key" "command"))
                nil [34327 35131])
            ("global-unset-key" function
               (:user-visible-flag t
                :arguments ("key"))
                nil [35133 35329])
            ("local-unset-key" function
               (:user-visible-flag t
                :arguments ("key"))
                nil [35331 35560])
            ("key-substitution-in-progress" variable nil nil [35616 35709])
            ("substitute-key-definition" function (:arguments ("olddef" "newdef" "keymap" "oldmap" "prefix")) nil [35711 37093])
            ("substitute-key-definition-key" function (:arguments ("defn" "olddef" "newdef" "prefix" "keymap")) nil [37095 38758])
            ("global-map" variable nil nil [38907 39081])
            ("esc-map" variable nil nil [39083 39223])
            ("ctl-x-map" variable nil nil [39225 39360])
            ("ctl-x-4-map" variable (:default-value (make-sparse-keymap)) nil [39362 39440])
            ("defalias" code nil nil [39441 39479])
            ("define-key" code nil nil [39480 39522])
            ("ctl-x-5-map" variable (:default-value (make-sparse-keymap)) nil [39524 39596])
            ("defalias" code nil nil [39597 39635])
            ("define-key" code nil nil [39636 39678])
            ("listify-key-sequence-1" variable
               (:constant-flag t
                :default-value (logior 128 134217728))
                nil [39718 39773])
            ("listify-key-sequence" function (:arguments ("key")) nil [39775 40013])
            ("eventp" function (:arguments ("obj")) nil [40015 40216])
            ("event-modifiers" function (:arguments ("event")) nil [40218 41512])
            ("event-basic-type" function (:arguments ("event")) nil [41514 42282])
            ("mouse-movement-p" function (:arguments ("object")) nil [42284 42417])
            ("mouse-event-p" function (:arguments ("object")) nil [42419 42637])
            ("event-start" function (:arguments ("event")) nil [42639 43799])
            ("event-end" function (:arguments ("event")) nil [43801 44119])
            ("event-click-count" function (:arguments ("event")) nil [44121 44331])
            ("posnp" function (:arguments ("obj")) nil [44388 45036])
            ("posn-window" function (:arguments ("position")) nil [45070 45252])
            ("posn-area" function (:arguments ("position")) nil [45254 45578])
            ("posn-point" function (:arguments ("position")) nil [45580 46046])
            ("posn-set-point" function (:arguments ("position")) nil [46048 46368])
            ("posn-x-y" function (:arguments ("position")) nil [46370 46623])
            ("declare-function" code nil nil [46625 46691])
            ("posn-col-row" function (:arguments ("position")) nil [46693 48511])
            ("posn-actual-col-row" function (:arguments ("position")) nil [48513 49101])
            ("posn-timestamp" function (:arguments ("position")) nil [49103 49291])
            ("posn-string" function (:arguments ("position")) nil [49293 49652])
            ("posn-image" function (:arguments ("position")) nil [49654 49894])
            ("posn-object" function (:arguments ("position")) nil [49896 50265])
            ("posn-object-x-y" function (:arguments ("position")) nil [50267 50554])
            ("posn-object-width-height" function (:arguments ("position")) nil [50556 50816])
            ("define-obsolete-function-alias" code nil nil [50859 50924])
            ("define-obsolete-function-alias" code nil nil [50925 50998])
            ("define-obsolete-function-alias" code nil nil [50999 51063])
            ("define-obsolete-function-alias" code nil nil [51064 51135])
            ("define-obsolete-function-alias" code nil nil [51136 51209])
            ("define-obsolete-function-alias" code nil nil [51210 51282])
            ("make-obsolete" code nil nil [51284 51350])
            ("make-obsolete" code nil nil [51351 51400])
            ("insert-string" function (:arguments ("args")) nil [51402 51720])
            ("makehash" function (:arguments ("test")) nil [51722 51842])
            ("log10" function (:arguments ("x")) nil [51844 51953])
            ("defalias" code nil nil [52001 52035])
            ("make-obsolete" code nil nil [52036 52090])
            ("defalias" code nil nil [52091 52127])
            ("make-obsolete" code nil nil [52128 52184])
            ("make-obsolete" code nil nil [52185 52292])
            ("set-advertised-calling-convention" code nil nil [52293 52394])
            ("set-advertised-calling-convention" code nil nil [52395 52463])
            ("set-advertised-calling-convention" code nil nil [52464 52535])
            ("set-advertised-calling-convention" code nil nil [52536 52621])
            ("set-advertised-calling-convention" code nil nil [52622 52691])
            ("set-advertised-calling-convention" code nil nil [52692 52761])
            ("make-obsolete-variable" code nil nil [53166 53353])
            ("make-obsolete-variable" code nil nil [53354 53433])
            ("make-obsolete-variable" code nil nil [53434 53501])
            ("make-obsolete-variable" code nil nil [53502 53567])
            ("make-obsolete-variable" code nil nil [53568 53629])
            ("make-obsolete-variable" code nil nil [53630 53701])
            ("make-obsolete-variable" code nil nil [53702 53767])
            ("make-obsolete-variable" code nil nil [53768 53829])
            ("make-obsolete-variable" code nil nil [53830 53905])
            ("make-obsolete-variable" code nil nil [53906 53983])
            ("make-obsolete-variable" code nil nil [53984 54063])
            ("make-obsolete-variable" code nil nil [54064 54141])
            ("make-obsolete-variable" code nil nil [54142 54221])
            ("make-obsolete-variable" code nil nil [54222 54311])
            ("make-obsolete-variable" code nil nil [54312 54387])
            ("make-obsolete-variable" code nil nil [54388 54469])
            ("make-obsolete-variable" code nil nil [54470 54553])
            ("make-obsolete-variable" code nil nil [54554 54649])
            ("make-obsolete-variable" code nil nil [54650 54737])
            ("make-obsolete-variable" code nil nil [54738 54819])
            ("make-obsolete-variable" code nil nil [54820 54907])
            ("make-obsolete-variable" code nil nil [54908 54999])
            ("make-obsolete-variable" code nil nil [55000 55065])
            ("make-obsolete-variable" code nil nil [55066 55131])
            ("make-obsolete-variable" code nil nil [55132 55235])
            ("make-obsolete-variable" code nil nil [55236 55329])
            ("make-obsolete-variable" code nil nil [55330 55393])
            ("make-obsolete-variable" code nil nil [55394 55534])
            ("make-obsolete-variable" code nil nil [55536 55600])
            ("make-obsolete-variable" code nil nil [55601 55684])
            ("make-obsolete-variable" code nil nil [55685 55757])
            ("make-obsolete-variable" code nil nil [55758 55834])
            ("make-obsolete-variable" code nil nil [55835 55892])
            ("make-obsolete" code nil nil [55893 55949])
            ("make-obsolete" code nil nil [55950 56010])
            ("make-obsolete" code nil nil [56012 56066])
            ("make-obsolete" code nil nil [56067 56123])
            ("make-obsolete-variable" code nil nil [56125 56249])
            ("define-obsolete-variable-alias" code nil nil [56288 56375])
            ("define-obsolete-variable-alias" code nil nil [56377 56470])
            ("define-obsolete-variable-alias" code nil nil [56471 56564])
            ("make-obsolete-variable" code nil nil [56810 56874])
            ("defvaralias" code nil nil [56876 56933])
            ("defalias" code nil nil [57006 57050])
            ("defalias" code nil nil [57051 57095])
            ("defalias" code nil nil [57096 57129])
            ("defalias" code nil nil [57130 57163])
            ("defalias" code nil nil [57164 57200])
            ("defalias" code nil nil [57201 57236])
            ("defalias" code nil nil [57237 57263])
            ("defalias" code nil nil [57264 57290])
            ("defalias" code nil nil [57291 57313])
            ("defalias" code nil nil [57339 57378])
            ("defalias" code nil nil [57379 57433])
            ("defalias" code nil nil [57434 57504])
            ("defalias" code nil nil [57505 57577])
            ("defalias" code nil nil [57578 57621])
            ("defalias" code nil nil [57622 57666])
            ("defalias" code nil nil [57667 57700])
            ("defalias" code nil nil [57701 57734])
            ("defalias" code nil nil [57766 57809])
            ("defalias" code nil nil [57810 57859])
            ("defalias" code nil nil [57861 57914])
            ("add-hook" function (:arguments ("hook" "function" "append" "local")) nil [57953 60082])
            ("remove-hook" function (:arguments ("hook" "function" "local")) nil [60084 61752])
            ("letrec" function (:arguments ("binders" "body")) nil [61754 62383])
            ("with-wrapper-hook" function (:arguments ("hook" "args" "body")) nil [62385 65438])
            ("add-to-list" function (:arguments ("list-var" "element" "append" "compare-fn")) nil [65440 68809])
            ("add-to-ordered-list" function (:arguments ("list-var" "element" "order")) nil [68812 70131])
            ("add-to-history" function (:arguments ("history-var" "newelt" "maxelt" "keep-all")) nil [70133 71345])
            ("delay-mode-hooks" variable nil nil [71367 71461])
            ("delayed-mode-hooks" variable nil nil [71462 71543])
            ("make-variable-buffer-local" code nil nil [71544 71592])
            ("put" code nil nil [71593 71635])
            ("change-major-mode-after-body-hook" variable nil nil [71637 71751])
            ("after-change-major-mode-hook" variable nil nil [71753 71855])
            ("run-mode-hooks" function (:arguments ("hooks")) nil [71857 72740])
            ("delay-mode-hooks" function (:arguments ("body")) nil [72742 73141])
            ("derived-mode-p" function (:arguments ("modes")) nil [73202 73515])
            ("minor-mode-list" variable (:default-value (quote (auto-save-mode auto-fill-mode abbrev-mode overwrite-mode view-mode hs-minor-mode))) nil [73706 73899])
            ("add-minor-mode" function (:arguments ("toggle" "name" "keymap" "after" "toggle-fun")) nil [73901 76586])
            ("autoloadp" function (:arguments ("object")) nil [76608 76710])
            ("symbol-file" function (:arguments ("symbol" "type")) nil [77194 78401])
            ("locate-library" function
               (:user-visible-flag t
                :arguments ("library" "nosuffix" "path" "interactive-call"))
                nil [78403 79809])
            ("start-process" function (:arguments ("name" "buffer" "program" "program-args")) nil [79834 81177])
            ("process-lines" function (:arguments ("program" "args")) nil [81179 81784])
            ("process-live-p" function (:arguments ("process")) nil [81786 82099])
            ("process-kill-without-query" function (:arguments ("process" "_flag")) nil [82119 82589])
            ("process-kill-buffer-query-function" function nil nil [82591 83010])
            ("add-hook" code nil nil [83012 83087])
            ("process-get" function (:arguments ("process" "propname")) nil [83118 83330])
            ("process-put" function (:arguments ("process" "propname" "value")) nil [83332 83571])
            ("read-key-empty-map" variable
               (:constant-flag t
                :default-value (make-sparse-keymap))
                nil [83611 83661])
            ("read-key-delay" variable (:default-value 0.01) nil [83663 83691])
            ("read-key" function (:arguments ("prompt")) nil [83740 86964])
            ("read-passwd-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map minibuffer-local-map) (define-key map "" (function delete-minibuffer-contents)) map)) nil [86966 87303])
            ("read-passwd" function (:arguments ("prompt" "confirm" "default")) nil [87305 90017])
            ("read-number" function (:arguments ("prompt" "default")) nil [90019 91089])
            ("read-char-choice" function (:arguments ("prompt" "chars" "inhibit-keyboard-quit")) nil [91091 92830])
            ("sit-for" function (:arguments ("seconds" "nodisp" "obsolete")) nil [92832 96191])
            ("declare-function" code nil nil [96231 96310])
            ("y-or-n-p" function (:arguments ("prompt")) nil [96312 99873])
            ("atomic-change-group" function (:arguments ("body")) nil [99904 101110])
            ("prepare-change-group" function (:arguments ("buffer")) nil [101112 102588])
            ("activate-change-group" function (:arguments ("handle")) nil [102590 102828])
            ("accept-change-group" function (:arguments ("handle")) nil [102830 103121])
            ("cancel-change-group" function (:arguments ("handle")) nil [103123 104294])
            ("define-obsolete-function-alias" code nil nil [104352 104434])
            ("momentary-string-display" function (:arguments ("string" "pos" "exit-char" "message")) nil [104436 105988])
            ("copy-overlay" function (:arguments ("o")) nil [106017 106591])
            ("remove-overlays" function (:arguments ("beg" "end" "name" "val")) nil [106593 107601])
            ("suspend-hook" variable nil nil [107623 107707])
            ("suspend-resume-hook" variable nil nil [107709 107807])
            ("temp-buffer-show-hook" variable nil nil [107809 108025])
            ("temp-buffer-setup-hook" variable nil nil [108027 108258])
            ("user-emacs-directory" variable
               (:constant-flag t
                :default-value (if (eq system-type (quote ms-dos)) "~/_emacs.d/" "~/.emacs.d/"))
                nil [108260 108635])
            ("buffer-narrowed-p" function nil nil [108668 108802])
            ("find-tag-default-bounds" function nil nil [108804 109058])
            ("find-tag-default" function nil nil [109060 109326])
            ("find-tag-default-as-regexp" function nil nil [109328 109763])
            ("find-tag-default-as-symbol-regexp" function nil nil [109765 110324])
            ("play-sound" function (:arguments ("sound")) nil [110326 111145])
            ("declare-function" code nil nil [111147 111203])
            ("shell-quote-argument" function (:arguments ("argument")) nil [111205 113539])
            ("string-or-null-p" function (:arguments ("object")) nil [113541 113678])
            ("booleanp" function (:arguments ("object")) nil [113680 113838])
            ("special-form-p" function (:arguments ("object")) nil [113840 114083])
            ("macrop" function (:arguments ("object")) nil [114085 114315])
            ("field-at-pos" function (:arguments ("pos")) nil [114317 114587])
            ("sha1" function (:arguments ("object" "start" "end" "binary")) nil [114589 114952])
            ("function-get" function (:arguments ("f" "prop" "autoload")) nil [114954 115764])
            ("yank-handled-properties" variable nil nil [115871 115903])
            ("yank-excluded-properties" variable nil nil [115904 115937])
            ("remove-yank-excluded-properties" function (:arguments ("start" "end")) nil [115939 116850])
            ("yank-undo-function" variable nil nil [116852 116879])
            ("insert-for-yank" function (:arguments ("string")) nil [116881 117362])
            ("insert-for-yank-1" function (:arguments ("string")) nil [117364 118396])
            ("insert-buffer-substring-no-properties" function (:arguments ("buffer" "start" "end")) nil [118398 118883])
            ("insert-buffer-substring-as-yank" function (:arguments ("buffer" "start" "end")) nil [118885 119571])
            ("yank-handle-font-lock-face-property" function (:arguments ("face" "start" "end")) nil [119573 119885])
            ("yank-handle-category-property" function (:arguments ("category" "start" "end")) nil [120024 120462])
            ("start-process-shell-command" function (:arguments ("name" "buffer" "args")) nil [120500 121484])
            ("start-file-process-shell-command" function (:arguments ("name" "buffer" "args")) nil [121486 121978])
            ("call-process-shell-command" function (:arguments ("command" "infile" "buffer" "display" "args")) nil [121980 123621])
            ("process-file-shell-command" function (:arguments ("command" "infile" "buffer" "display" "args")) nil [123623 124172])
            ("track-mouse" function (:arguments ("body")) nil [124227 124533])
            ("with-current-buffer" function (:arguments ("buffer-or-name" "body")) nil [124535 124923])
            ("internal--before-with-selected-window" function (:arguments ("window")) nil [124925 125445])
            ("internal--after-with-selected-window" function (:arguments ("state")) nil [125447 126007])
            ("with-selected-window" function (:arguments ("window" "body")) nil [126009 127147])
            ("with-selected-frame" function (:arguments ("frame" "body")) nil [127149 127890])
            ("save-window-excursion" function (:arguments ("body")) nil [127892 128711])
            ("internal-temp-output-buffer-show" function (:arguments ("buffer")) nil [128713 130108])
            ("with-output-to-temp-buffer" function (:arguments ("bufname" "body")) nil [130161 132614])
            ("with-temp-file" function (:arguments ("file" "body")) nil [132616 133311])
            ("with-temp-message" function (:arguments ("message" "body")) nil [133313 134240])
            ("with-temp-buffer" function (:arguments ("body")) nil [134242 134801])
            ("with-silent-modifications" function (:arguments ("body")) nil [134803 135793])
            ("with-output-to-string" function (:arguments ("body")) nil [135795 136240])
            ("with-local-quit" function (:arguments ("body")) nil [136242 136997])
            ("while-no-input" function (:arguments ("body")) nil [136999 137499])
            ("condition-case-unless-debug" function (:arguments ("var" "bodyform" "handlers")) nil [137501 138054])
            ("define-obsolete-function-alias" code nil nil [138056 138151])
            ("with-demoted-errors" function (:arguments ("format" "body")) nil [138153 139090])
            ("combine-after-change-calls" function (:arguments ("body")) nil [139092 139787])
            ("with-case-table" function (:arguments ("table" "body")) nil [139789 140310])
            ("with-file-modes" function (:arguments ("modes" "body")) nil [140312 140737])
            ("save-match-data-internal" variable nil nil [140771 140804])
            ("save-match-data" function (:arguments ("body")) nil [141062 141742])
            ("match-string" function (:arguments ("num" "string")) nil [141744 142389])
            ("match-string-no-properties" function (:arguments ("num" "string")) nil [142391 143115])
            ("match-substitute-replacement" function (:arguments ("replacement" "fixedcase" "literal" "string" "subexp")) nil [143118 143767])
            ("looking-back" function (:arguments ("regexp" "limit" "greedy")) nil [143770 145041])
            ("looking-at-p" function (:arguments ("regexp")) nil [145043 145221])
            ("string-match-p" function (:arguments ("regexp" "string" "start")) nil [145223 145443])
            ("subregexp-context-p" function (:arguments ("regexp" "pos" "start")) nil [145445 147355])
            ("split-string-default-separators" variable
               (:constant-flag t
                :default-value "[ 	
]+")
                nil [147377 147730])
            ("split-string" function (:arguments ("string" "separators" "omit-nulls" "trim")) nil [147992 151108])
            ("combine-and-quote-strings" function (:arguments ("strings" "separator")) nil [151110 151790])
            ("split-string-and-unquote" function (:arguments ("string" "separator")) nil [151792 152428])
            ("subst-char-in-string" function (:arguments ("fromchar" "tochar" "string" "inplace")) nil [152462 152866])
            ("replace-regexp-in-string" function (:arguments ("regexp" "rep" "string" "fixedcase" "literal" "subexp" "start")) nil [152868 155549])
            ("string-prefix-p" function (:arguments ("prefix" "string" "ignore-case")) nil [155552 155947])
            ("string-suffix-p" function (:arguments ("suffix" "string" "ignore-case")) nil [155949 156358])
            ("bidi-string-mark-left-to-right" function (:arguments ("str")) nil [156360 157143])
            ("string-greaterp" function (:arguments ("string1" "string2")) nil [157145 157380])
            ("load-history-regexp" function (:arguments ("file")) nil [157421 158057])
            ("load-history-filename-element" function (:arguments ("file-regexp")) nil [158059 158495])
            ("put" code nil nil [158497 158543])
            ("eval-after-load" function (:arguments ("file" "form")) nil [158544 162426])
            ("with-eval-after-load" function (:arguments ("file" "body")) nil [162428 162803])
            ("after-load-functions" variable nil nil [162805 162978])
            ("do-after-load-evaluation" function (:arguments ("abs-file")) nil [162980 164549])
            ("eval-next-after-load" function (:arguments ("file")) nil [164551 164851])
            ("display-delayed-warnings" function nil nil [164855 165122])
            ("collapse-delayed-warnings" function nil nil [165124 165803])
            ("delayed-warnings-hook" variable (:default-value (quote (collapse-delayed-warnings display-delayed-warnings))) nil [165933 166273])
            ("delay-warning" function (:arguments ("type" "message" "level" "buffer-name")) nil [166275 166530])
            ("add-to-invisibility-spec" function (:arguments ("element")) nil [166559 166902])
            ("remove-from-invisibility-spec" function (:arguments ("element")) nil [166904 167149])
            ("with-syntax-table" function (:arguments ("table" "body")) nil [167173 167809])
            ("make-syntax-table" function (:arguments ("oldtable")) nil [167811 168131])
            ("syntax-after" function (:arguments ("pos")) nil [168133 168506])
            ("syntax-class" function (:arguments ("syntax")) nil [168508 168860])
            ("word-move-empty-char-table" variable nil nil [168891 169061])
            ("forward-word-strictly" function (:arguments ("arg")) nil [169063 169836])
            ("backward-word-strictly" function (:arguments ("arg")) nil [169838 170455])
            ("forward-whitespace" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [170473 171056])
            ("forward-symbol" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [171071 171620])
            ("forward-same-syntax" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [171641 172123])
            ("text-clone--maintaining" variable nil nil [172145 172181])
            ("text-clone--maintain" function (:arguments ("ol1" "after" "beg" "end" "_len")) nil [172183 174249])
            ("text-clone-create" function (:arguments ("start" "end" "spreadp" "syntax")) nil [174251 176499])
            ("define-mail-user-agent" function (:arguments ("symbol" "composefunc" "sendfunc" "abortfunc" "hookvar")) nil [176607 178185])
            ("called-interactively-p-functions" variable nil nil [178188 178605])
            ("internal--funcall-interactively" variable
               (:constant-flag t
                :default-value (symbol-function (quote funcall-interactively)))
                nil [178607 178692])
            ("called-interactively-p" function (:arguments ("kind")) nil [178694 182875])
            ("interactive-p" function nil nil [182877 183887])
            ("internal-push-keymap" function (:arguments ("keymap" "symbol")) nil [183889 184234])
            ("internal-pop-keymap" function (:arguments ("keymap" "symbol")) nil [184236 184544])
            ("define-obsolete-function-alias" code nil nil [184546 184633])
            ("set-transient-map" function (:arguments ("map" "keep-pred" "on-exit")) nil [184635 187328])
            ("progress-reporter-update" function (:arguments ("reporter" "value")) nil [187911 188678])
            ("make-progress-reporter" function (:arguments ("message" "min-value" "max-value" "current-value" "min-change" "min-time")) nil [188680 190525])
            ("progress-reporter-force-update" function (:arguments ("reporter" "value" "new-message")) nil [190527 191026])
            ("progress-reporter--pulse-characters" variable (:default-value ["-" "\\" "|" "/"]) nil [191028 191145])
            ("progress-reporter-do-update" function (:arguments ("reporter" "value")) nil [191147 192823])
            ("progress-reporter-done" function (:arguments ("reporter")) nil [192825 192980])
            ("dotimes-with-progress-reporter" function (:arguments ("spec" "message" "body")) nil [192982 194086])
            ("version-separator" variable
               (:constant-flag t
                :default-value ".")
                nil [194123 194282])
            ("version-regexp-alist" variable
               (:constant-flag t
                :default-value (quote (("^[-._+ ]?snapshot$" . -4) ("^[-._+]$" . -4) ("^[-._+ ]?\\(cvs\\|git\\|bzr\\|svn\\|hg\\|darcs\\)$" . -4) ("^[-._+ ]?alpha$" . -3) ("^[-._+ ]?beta$" . -2) ("^[-._+ ]?\\(pre\\|rc\\)$" . -1))))
                nil [194285 195819])
            ("version-to-list" function (:arguments ("ver")) nil [195822 198605])
            ("version-list-<" function (:arguments ("l1" "l2")) nil [198607 199438])
            ("version-list-=" function (:arguments ("l1" "l2")) nil [199441 200240])
            ("version-list-<=" function (:arguments ("l1" "l2")) nil [200243 201028])
            ("version-list-not-zero" function (:arguments ("lst")) nil [201030 201340])
            ("version<" function (:arguments ("v1" "v2")) nil [201343 201847])
            ("version<=" function (:arguments ("v1" "v2")) nil [201849 202367])
            ("version=" function (:arguments ("v1" "v2")) nil [202369 202863])
            ("package--builtin-versions" variable (:default-value (purecopy (\` ((emacs \, (version-to-list emacs-version)))))) nil [202865 203242])
            ("package--description-file" function (:arguments ("dir")) nil [203244 203575])
            ("menu-bar-separator" variable
               (:constant-flag t
                :default-value (quote ("--")))
                nil [203589 203651])
            ("when" code nil nil [203813 203938])
            ("unmsys--file-name" function (:arguments ("file")) nil [204071 204558]))          
      :file "subr.el.gz"
      :pointmax 204583
      :fsize 61007
      :lastmodtime '(22966 58805 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("defalias" code nil nil [2941 2987])
            ("defalias" code nil nil [3003 3053])
            ("defalias" code nil nil [3069 3107])
            ("defalias" code nil nil [3123 3183])
            ("comment" customgroup (:user-visible-flag t) nil [3185 3300])
            ("comment-use-syntax" variable (:default-value (quote undecided)) nil [3387 3715])
            ("comment-fill-column" variable nil nil [3717 3884])
            ("comment-column" variable (:default-value 32) nil [3901 4298])
            ("make-variable-buffer-local" code nil nil [4299 4343])
            ("put" code nil nil [4359 4411])
            ("comment-start" variable nil nil [4428 4528])
            ("put" code nil nil [4544 4603])
            ("comment-start-skip" variable nil nil [4620 4889])
            ("put" code nil nil [4905 4960])
            ("comment-end-skip" variable nil nil [4977 5081])
            ("put" code nil nil [5097 5150])
            ("comment-end" variable (:default-value (purecopy "")) nil [5167 5313])
            ("put" code nil nil [5329 5377])
            ("comment-indent-function" variable (:default-value (quote comment-indent-default)) nil [5394 5750])
            ("comment-insert-comment-function" variable nil nil [5767 6017])
            ("comment-region-function" variable (:default-value (quote comment-region-default)) nil [6019 6370])
            ("uncomment-region-function" variable (:default-value (quote uncomment-region-default)) nil [6372 6731])
            ("block-comment-start" variable nil nil [6749 6781])
            ("block-comment-end" variable nil nil [6782 6812])
            ("comment-quote-nested" variable (:default-value t) nil [6814 6951])
            ("comment-quote-nested-function" variable (:default-value (function comment-quote-nested-default)) nil [6953 7196])
            ("comment-continue" variable nil nil [7198 7673])
            ("comment-add" variable nil nil [7675 8033])
            ("comment-styles" variable
               (:constant-flag t
                :default-value (quote ((plain nil nil nil nil "Start in column 0 (do not indent), as in Emacs-20") (indent-or-triple nil nil nil multi-char "Start in column 0, but only for single-char starters") (indent nil nil nil t "Full comment per line, ends not aligned") (aligned nil t nil t "Full comment per line, ends aligned") (box nil t t t "Full comment per line, ends aligned, + top and bottom") (extra-line t nil t t "One comment for all lines, end on a line by itself") (multi-line t nil nil t "One comment for all lines, end on last commented line") (box-multi t t t t "One comment for all lines, + top and bottom"))))
                nil [8050 10253])
            ("comment-style" variable (:default-value (quote indent)) nil [10270 10696])
            ("comment-padding" variable (:default-value (purecopy " ")) nil [10713 11137])
            ("comment-inline-offset" variable (:default-value 1) nil [11139 11588])
            ("comment-multi-line" variable nil nil [11605 12022])
            ("comment-empty-lines" variable nil nil [12024 12408])
            ("comment-string-strip" function (:arguments ("str" "beforep" "afterp")) nil [12434 12687])
            ("comment-string-reverse" function (:arguments ("s")) nil [12689 12862])
            ("comment-normalize-vars" function (:arguments ("noerror")) nil [12879 16112])
            ("comment-quote-re" function (:arguments ("str" "unp")) nil [16114 16257])
            ("comment-quote-nested" function (:arguments ("cs" "ce" "unp")) nil [16259 16586])
            ("comment-quote-nested-default" function (:arguments ("cs" "ce" "unp")) nil [16588 17927])
            ("comment-use-global-state" variable (:default-value t) nil [17956 18410])
            ("make-obsolete-variable" code nil nil [18412 18489])
            ("comment-search-forward" function (:arguments ("limit" "noerror")) nil [18491 20079])
            ("comment-search-backward" function (:arguments ("limit" "noerror")) nil [20081 21293])
            ("comment-beginning" function nil nil [21295 23181])
            ("comment-forward" function (:arguments ("n")) nil [23183 23686])
            ("comment-enter-backward" function nil nil [23688 25252])
            ("comment-indent-default" function nil nil [25294 25641])
            ("comment-choose-indent" function (:arguments ("indent")) nil [25643 28227])
            ("comment-indent" function
               (:user-visible-flag t
                :arguments ("continue"))
                nil [28244 31210])
            ("comment-set-column" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [31227 32058])
            ("comment-kill" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [32075 32642])
            ("comment-padright" function (:arguments ("str" "n")) nil [32644 34389])
            ("comment-padleft" function (:arguments ("str" "n")) nil [34416 36103])
            ("uncomment-region" function
               (:user-visible-flag t
                :arguments ("beg" "end" "arg"))
                nil [36120 36732])
            ("uncomment-region-default" function (:arguments ("beg" "end" "arg")) nil [36734 40632])
            ("comment-make-bol-ws" function (:arguments ("len")) nil [40634 40955])
            ("comment-make-extra-lines" function (:arguments ("cs" "ce" "ccs" "cce" "min-indent" "max-indent" "block")) nil [40957 42483])
            ("comment-with-narrowing" function (:arguments ("beg" "end" "body")) nil [42485 43541])
            ("comment-add" function (:arguments ("arg")) nil [43543 43942])
            ("comment-region-internal" function (:arguments ("beg" "end" "cs" "ce" "ccs" "cce" "block" "lines" "indent")) nil [43944 47335])
            ("comment-region" function
               (:user-visible-flag t
                :arguments ("beg" "end" "arg"))
                nil [47352 48352])
            ("comment-region-default" function (:arguments ("beg" "end" "arg")) nil [48354 50853])
            ("comment-box" function
               (:user-visible-flag t
                :arguments ("beg" "end" "arg"))
                nil [50870 51332])
            ("comment-only-p" function (:arguments ("beg" "end")) nil [51334 51528])
            ("comment-or-uncomment-region" function
               (:user-visible-flag t
                :arguments ("beg" "end" "arg"))
                nil [51545 51937])
            ("comment-dwim" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [51954 53556])
            ("comment-auto-fill-only-comments" variable nil nil [53573 53773])
            ("comment-valid-prefix-p" function (:arguments ("prefix" "compos")) nil [53775 55867])
            ("comment-indent-new-line" function
               (:user-visible-flag t
                :arguments ("soft"))
                nil [55885 60802])
            ("comment-line" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [60819 61916])
            ("newcomment" package nil nil [61918 61939]))          
      :file "newcomment.el.gz"
      :pointmax 61969
      :fsize 17358
      :lastmodtime '(22966 58805 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("ring" include nil nil [4857 4872])
            ("ansi-color" include nil nil [4873 4894])
            ("regexp-opt" include nil nil [4895 4916])
            ("comint" customgroup (:user-visible-flag t) nil [6628 6720])
            ("comint-completion" customgroup (:user-visible-flag t) nil [6722 6808])
            ("comint-prompt-regexp" variable (:default-value "^") nil [6945 7467])
            ("comint-prompt-read-only" variable nil nil [7469 8512])
            ("comint-delimiter-argument-list" variable nil nil [8514 8944])
            ("comint-input-autoexpand" variable nil nil [8946 9499])
            ("comint-highlight-input" variable
               (:default-value (quote ((t (:weight bold))))
                :type "face")
                nil [9501 9613])
            ("comint-highlight-prompt" variable
               (:default-value (quote ((t :inherit minibuffer-prompt)))
                :type "face")
                nil [9615 9739])
            ("comint-input-ignoredups" variable nil nil [9741 9959])
            ("comint-input-ring-file-name" variable nil nil [9961 10335])
            ("comint-scroll-to-bottom-on-input" variable nil nil [10337 10771])
            ("comint-move-point-for-output" variable nil nil [10773 11498])
            ("defvaralias" code nil nil [11500 11578])
            ("comint-scroll-show-maximum-output" variable (:default-value t) nil [11580 12243])
            ("comint-buffer-maximum-size" variable (:default-value 1024) nil [12245 12530])
            ("comint-input-ring-size" variable (:default-value 500) nil [12532 12675])
            ("comint-input-ring-separator" variable (:default-value "
") nil [12677 12770])
            ("comint-input-history-ignore" variable (:default-value "^#") nil [12772 12892])
            ("comint-process-echoes" variable nil nil [12894 13150])
            ("comint-password-prompt-regexp" variable (:default-value (concat "\\(^ *\\|" (regexp-opt (quote ("Enter" "enter" "Enter same" "enter same" "Enter the" "enter the" "Old" "old" "New" "new" "'s" "login" "Kerberos" "CVS" "UNIX" " SMB" "LDAP" "[sudo]" "Repeat" "Bad")) t) " +\\)" "\\(?:" (regexp-opt password-word-equivalents) "\\|Response\\)" "\\(?:\\(?:, try\\)? *again\\| (empty for no passphrase)\\| (again)\\)?\\(?: for [^:\357\274\232\341\237\226]+\\)?[:\357\274\232\341\237\226]\\s *\\'")) nil [13742 14371])
            ("comint-get-old-input" variable (:default-value (function comint-get-old-input-default)) nil [14412 14896])
            ("comint-dynamic-complete-functions" variable (:default-value (quote (comint-c-a-p-replace-by-expanded-history comint-filename-completion))) nil [14898 15185])
            ("comint-input-filter" variable (:default-value (function (lambda (str) (not (string-match "\\`\\s *\\'" str))))) nil [15187 15488])
            ("comint-input-filter-functions" variable (:default-value (quote nil)) nil [15490 15663])
            ("comint-output-filter-functions" variable (:default-value (quote (ansi-color-process-output comint-postoutput-scroll-to-bottom comint-watch-for-password-prompt))) nil [15680 16348])
            ("comint-input-sender-no-newline" variable nil nil [16350 16471])
            ("comint-input-sender" variable (:default-value (function comint-simple-send)) nil [16473 16918])
            ("comint-eol-on-send" variable (:default-value t) nil [16920 17077])
            ("define-obsolete-variable-alias" code nil nil [17079 17190])
            ("comint-use-prompt-regexp" variable nil nil [17366 17750])
            ("comint-mode-hook" variable nil nil [17752 17903])
            ("comint-exec-hook" variable (:default-value (quote nil)) nil [17905 18303])
            ("comint-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map "p" (quote comint-previous-input)) (define-key map "n" (quote comint-next-input)) (define-key map [C-up] (quote comint-previous-input)) (define-key map [C-down] (quote comint-next-input)) (define-key map "r" (quote comint-history-isearch-backward-regexp)) (define-key map [3 134217842] (quote comint-previous-matching-input-from-input)) (define-key map [3 134217843] (quote comint-next-matching-input-from-input)) (define-key map "" (quote comint-show-output)) (define-key map "" (quote comint-send-input)) (define-key map "" (quote comint-delchar-or-maybe-eof)) (define-key map [delete] (quote delete-forward-char)) (define-key map [kp-delete] (quote delete-forward-char)) (define-key map " " (quote comint-accumulate)) (define-key map "" (quote comint-get-next-from-history)) (define-key map "" (quote comint-bol-or-process-mark)) (define-key map "" (quote comint-kill-input)) (define-key map "" (quote backward-kill-word)) (define-key map "" (quote comint-interrupt-subjob)) (define-key map "" (quote comint-stop-subjob)) (define-key map "" (quote comint-quit-subjob)) (define-key map "" (quote comint-copy-old-input)) (define-key map "" (quote comint-delete-output)) (define-key map "\357" (quote comint-clear-buffer)) (define-key map "" (quote comint-show-output)) (define-key map "" (quote comint-show-maximum-output)) (define-key map "" (quote comint-dynamic-list-input-ring)) (define-key map "" (quote comint-next-prompt)) (define-key map "" (quote comint-previous-prompt)) (define-key map "" (quote comint-send-eof)) (define-key map "" (quote comint-write-output)) (define-key map "." (quote comint-insert-previous-argument)) (define-key map [mouse-2] (quote comint-insert-input)) (define-key map [menu-bar completion] (cons "Complete" (make-sparse-keymap "Complete"))) (define-key map [menu-bar completion complete-expand] (quote ("Expand File Name" . comint-replace-by-expanded-filename))) (define-key map [menu-bar completion complete-listing] (quote ("File Completion Listing" . comint-dynamic-list-filename-completions))) (define-key map [menu-bar completion complete-file] (quote ("Complete File Name" . comint-dynamic-complete-filename))) (define-key map [menu-bar completion complete] (quote ("Complete at Point" . completion-at-point))) (define-key map [menu-bar inout] (cons "In/Out" (make-sparse-keymap "In/Out"))) (define-key map [menu-bar inout delete-output] (quote ("Delete Current Output Group" . comint-delete-output))) (define-key map [menu-bar inout append-output-to-file] (quote ("Append Current Output Group to File" . comint-append-output-to-file))) (define-key map [menu-bar inout write-output] (quote ("Write Current Output Group to File" . comint-write-output))) (define-key map [menu-bar inout next-prompt] (quote ("Forward Output Group" . comint-next-prompt))) (define-key map [menu-bar inout previous-prompt] (quote ("Backward Output Group" . comint-previous-prompt))) (define-key map [menu-bar inout show-maximum-output] (quote ("Show Maximum Output" . comint-show-maximum-output))) (define-key map [menu-bar inout show-output] (quote ("Show Current Output Group" . comint-show-output))) (define-key map [menu-bar inout kill-input] (quote ("Kill Current Input" . comint-kill-input))) (define-key map [menu-bar inout copy-input] (quote ("Copy Old Input" . comint-copy-old-input))) (define-key map [menu-bar inout history-isearch-backward-regexp] (quote ("Isearch Input Regexp Backward..." . comint-history-isearch-backward-regexp))) (define-key map [menu-bar inout history-isearch-backward] (quote ("Isearch Input String Backward..." . comint-history-isearch-backward))) (define-key map [menu-bar inout forward-matching-history] (quote ("Forward Matching Input..." . comint-forward-matching-input))) (define-key map [menu-bar inout backward-matching-history] (quote ("Backward Matching Input..." . comint-backward-matching-input))) (define-key map [menu-bar inout next-matching-history] (quote ("Next Matching Input..." . comint-next-matching-input))) (define-key map [menu-bar inout previous-matching-history] (quote ("Previous Matching Input..." . comint-previous-matching-input))) (define-key map [menu-bar inout next-matching-history-from-input] (quote ("Next Matching Current Input" . comint-next-matching-input-from-input))) (define-key map [menu-bar inout previous-matching-history-from-input] (quote ("Previous Matching Current Input" . comint-previous-matching-input-from-input))) (define-key map [menu-bar inout next-history] (quote ("Next Input" . comint-next-input))) (define-key map [menu-bar inout previous-history] (quote ("Previous Input" . comint-previous-input))) (define-key map [menu-bar inout list-history] (quote ("List Input History" . comint-dynamic-list-input-ring))) (define-key map [menu-bar inout expand-history] (quote ("Expand History Before Point" . comint-replace-by-expanded-history))) (let ((signals-map (make-sparse-keymap "Signals"))) (define-key map [menu-bar signals] (cons "Signals" signals-map)) (define-key signals-map [eof] (quote ("EOF" . comint-send-eof))) (define-key signals-map [kill] (quote ("KILL" . comint-kill-subjob))) (define-key signals-map [quit] (quote ("QUIT" . comint-quit-subjob))) (define-key signals-map [cont] (quote ("CONT" . comint-continue-subjob))) (define-key signals-map [stop] (quote ("STOP" . comint-stop-subjob))) (define-key signals-map [break] (quote ("BREAK" . comint-interrupt-subjob)))) (setq menu-bar-final-items (append (quote (completion inout signals)) menu-bar-final-items)) map)) nil [18305 24418])
            ("comint-ptyp" variable (:default-value t) nil [24454 24605])
            ("comint-input-ring" variable nil nil [24607 24637])
            ("comint-last-input-start" variable nil nil [24638 24674])
            ("comint-last-input-end" variable nil nil [24675 24709])
            ("comint-last-output-start" variable nil nil [24710 24747])
            ("comint-input-ring-index" variable nil nil [24748 24827])
            ("comint-matching-input-from-input-string" variable nil nil [24828 24929])
            ("comint-save-input-ring-index" variable nil nil [24930 25080])
            ("comint-accum-marker" variable nil nil [25082 25234])
            ("comint-stored-incomplete-input" variable nil nil [25236 25317])
            ("put" code nil nil [25319 25398])
            ("put" code nil nil [25399 25442])
            ("put" code nil nil [25443 25492])
            ("put" code nil nil [25493 25547])
            ("put" code nil nil [25548 25597])
            ("put" code nil nil [25598 25653])
            ("put" code nil nil [25654 25710])
            ("put" code nil nil [25711 25770])
            ("put" code nil nil [25771 25829])
            ("put" code nil nil [25830 25884])
            ("put" code nil nil [25885 25944])
            ("put" code nil nil [25945 25982])
            ("put" code nil nil [25984 26023])
            ("define-derived-mode" code nil nil [26025 30775])
            ("comint-check-proc" function (:arguments ("buffer")) nil [30777 31096])
            ("make-comint-in-buffer" function (:arguments ("name" "buffer" "program" "startfile" "switches")) nil [31113 32438])
            ("make-comint" function (:arguments ("name" "program" "startfile" "switches")) nil [32455 33237])
            ("comint-run" function (:arguments ("program")) nil [33254 33808])
            ("comint-exec" function (:arguments ("buffer" "name" "command" "startfile" "switches")) nil [33810 35674])
            ("comint-exec-1" function (:arguments ("name" "buffer" "command" "switches")) nil [35777 37757])
            ("comint-insert-input" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [37759 39563])
            ("comint-read-input-ring" function (:arguments ("silent")) nil [40695 43396])
            ("comint-write-input-ring" function nil nil [43398 44634])
            ("comint-dynamic-list-input-ring-window-conf" variable nil nil [44637 44688])
            ("comint-dynamic-list-input-ring-select" function (:user-visible-flag t) nil [44690 45475])
            ("comint-dynamic-list-input-ring" function (:user-visible-flag t) nil [45477 46806])
            ("comint-regexp-arg" function (:arguments ("prompt")) nil [46809 47370])
            ("comint-search-arg" function (:arguments ("arg")) nil [47372 47794])
            ("comint-restore-input" function (:user-visible-flag t) nil [47796 48107])
            ("comint-search-start" function (:arguments ("arg")) nil [48109 48590])
            ("comint-previous-input-string" function (:arguments ("arg")) nil [48624 48921])
            ("comint-previous-input" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [48923 49410])
            ("comint-next-input" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [49412 49540])
            ("comint-previous-matching-input-string" function (:arguments ("regexp" "arg")) nil [49542 49839])
            ("comint-previous-matching-input-string-position" function (:arguments ("regexp" "arg" "start")) nil [49841 51041])
            ("comint-delete-input" function nil nil [51043 51328])
            ("comint-previous-matching-input" function
               (:user-visible-flag t
                :arguments ("regexp" "n"))
                nil [51330 52292])
            ("comint-next-matching-input" function
               (:user-visible-flag t
                :arguments ("regexp" "n"))
                nil [52294 52687])
            ("comint-previous-matching-input-from-input" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [52689 53552])
            ("comint-next-matching-input-from-input" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [53554 53922])
            ("comint-replace-by-expanded-history" function
               (:user-visible-flag t
                :arguments ("silent" "start"))
                nil [53925 54941])
            ("comint-c-a-p-replace-by-expanded-history" function (:arguments ("silent" "start")) nil [54943 55960])
            ("comint-replace-by-expanded-history-before-point" function (:arguments ("silent" "start" "dry-run")) nil [55963 60195])
            ("comint-magic-space" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [60198 60465])
            ("comint-history-isearch" variable nil nil [60504 61206])
            ("comint-history-isearch-backward" function (:user-visible-flag t) nil [61208 61397])
            ("comint-history-isearch-backward-regexp" function (:user-visible-flag t) nil [61399 61614])
            ("defvar-local" code nil nil [61616 61673])
            ("comint-history-isearch-setup" function nil nil [61675 62477])
            ("comint-history-isearch-end" function nil nil [62479 62973])
            ("comint-goto-input" function (:arguments ("pos")) nil [62975 63560])
            ("comint-history-isearch-search" function nil nil [63562 65915])
            ("comint-history-isearch-message" function (:arguments ("c-q-hack" "ellipsis")) nil [65917 67669])
            ("comint-history-isearch-wrap" function nil nil [67671 68260])
            ("comint-history-isearch-push-state" function nil nil [68262 68576])
            ("comint-history-isearch-pop-state" function (:arguments ("_cmd" "hist-pos")) nil [68578 68778])
            ("comint-within-quotes" function (:arguments ("beg" "end")) nil [68782 69108])
            ("comint-how-many-region" function (:arguments ("regexp" "beg" "end")) nil [69110 69375])
            ("comint-args" function (:arguments ("string" "begin" "end")) nil [69377 70152])
            ("comint-delim-arg" function (:arguments ("arg")) nil [70154 71170])
            ("comint-arguments" function (:arguments ("string" "nth" "mth")) nil [71172 73633])
            ("comint-add-to-input-history" function (:arguments ("cmd")) nil [73668 74338])
            ("comint-send-input" function
               (:user-visible-flag t
                :arguments ("no-newline" "artificial"))
                nil [74340 82758])
            ("comint-preoutput-filter-functions" variable nil nil [82760 83408])
            ("comint-inhibit-carriage-motion" variable nil nil [83410 83570])
            ("comint-last-prompt" variable nil nil [83572 83768])
            ("comint-snapshot-last-prompt" function nil nil [83770 84313])
            ("comint-carriage-motion" function (:arguments ("start" "end")) nil [84315 86565])
            ("comint-output-filter" function (:arguments ("process" "string")) nil [86708 90846])
            ("comint-preinput-scroll-to-bottom" function nil nil [90848 91949])
            ("follow-mode" variable nil nil [91951 91971])
            ("declare-function" code nil nil [91972 92049])
            ("comint-postoutput-scroll-to-bottom" function (:arguments ("_string")) nil [92051 93001])
            ("comint-adjust-window-point" function (:arguments ("window" "process")) nil [93004 93675])
            ("comint-adjust-point" function (:arguments ("selected")) nil [93711 94347])
            ("comint-truncate-buffer" function
               (:user-visible-flag t
                :arguments ("_string"))
                nil [94349 94788])
            ("comint-strip-ctrl-m" function
               (:user-visible-flag t
                :arguments ("_string"))
                nil [94790 95319])
            ("defalias" code nil nil [95320 95371])
            ("comint-show-maximum-output" function (:user-visible-flag t) nil [95373 95545])
            ("comint-get-old-input-default" function nil nil [95547 96329])
            ("comint-copy-old-input" function (:user-visible-flag t) nil [96331 96725])
            ("comint-skip-prompt" function nil nil [96727 97011])
            ("comint-after-pmark-p" function nil nil [97013 97214])
            ("comint-simple-send" function (:arguments ("proc" "string")) nil [97216 97791])
            ("comint-line-beginning-position" function nil nil [97793 98880])
            ("comint-bol" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [98882 99411])
            ("comint-read-noecho" function (:arguments ("prompt" "_ignore")) nil [99435 99511])
            ("send-invisible" function
               (:user-visible-flag t
                :arguments ("prompt"))
                nil [99703 100548])
            ("comint-watch-for-password-prompt" function (:arguments ("string")) nil [100550 101132])
            ("comint-send-string" function (:arguments ("process" "string")) nil [101171 101530])
            ("comint-send-region" function (:arguments ("process" "start" "end")) nil [101532 101897])
            ("comint-delete-output" function (:user-visible-flag t) nil [101926 102570])
            ("comint-write-output" function
               (:user-visible-flag t
                :arguments ("filename" "append" "mustbenew"))
                nil [102572 103673])
            ("comint-append-output-to-file" function
               (:user-visible-flag t
                :arguments ("filename"))
                nil [103810 104052])
            ("comint-show-output" function (:user-visible-flag t) nil [104054 104568])
            ("comint-clear-buffer" function (:user-visible-flag t) nil [104570 104715])
            ("comint-interrupt-subjob" function (:user-visible-flag t) nil [104717 104978])
            ("comint-kill-subjob" function (:user-visible-flag t) nil [104980 105202])
            ("comint-quit-subjob" function (:user-visible-flag t) nil [105204 105426])
            ("comint-stop-subjob" function (:user-visible-flag t) nil [105428 105905])
            ("comint-continue-subjob" function (:user-visible-flag t) nil [105907 106107])
            ("comint-skip-input" function nil nil [106109 106602])
            ("comint-kill-input" function (:user-visible-flag t) nil [106604 106859])
            ("comint-delchar-or-maybe-eof" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [106861 107239])
            ("comint-send-eof" function (:user-visible-flag t) nil [107241 107379])
            ("comint-backward-matching-input" function
               (:user-visible-flag t
                :arguments ("regexp" "n"))
                nil [107382 108464])
            ("comint-forward-matching-input" function
               (:user-visible-flag t
                :arguments ("regexp" "n"))
                nil [108467 108940])
            ("comint-next-prompt" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [108943 110118])
            ("comint-previous-prompt" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [110121 110441])
            ("defvar-local" code nil nil [110508 110573])
            ("defvar-local" code nil nil [110574 110635])
            ("comint-insert-previous-argument" function
               (:user-visible-flag t
                :arguments ("index"))
                nil [110721 112760])
            ("comint-update-fence" function nil nil [112825 114242])
            ("comint-kill-whole-line" function
               (:user-visible-flag t
                :arguments ("count"))
                nil [114244 114916])
            ("comint-kill-region" function
               (:user-visible-flag t
                :arguments ("beg" "end"))
                nil [114918 116498])
            ("comint-source-default" function (:arguments ("previous-dir/file" "source-modes")) nil [117982 119697])
            ("comint-check-source" function (:arguments ("fname")) nil [119700 120319])
            ("comint-extract-string" function nil nil [120321 120631])
            ("comint-get-source" function (:arguments ("prompt" "prev-dir/file" "source-modes" "mustmatch-p")) nil [120633 122134])
            ("comint-proc-query" function (:arguments ("proc" "str")) nil [123257 124293])
            ("comint-completion-autolist" variable nil nil [125287 125490])
            ("comint-completion-addsuffix" variable (:default-value t) nil [125492 126035])
            ("comint-completion-recexact" variable nil nil [126037 126314])
            ("comint-completion-fignore" variable nil nil [126316 126610])
            ("comint-file-name-prefix" variable (:default-value (purecopy "")) nil [126627 126847])
            ("comint-file-name-chars" variable (:default-value (if (memq system-type (quote (ms-dos windows-nt cygwin))) "~/A-Za-z0-9_^$!#%&{}@`'.,:()-" "[]~/A-Za-z0-9+@:_.$#%,={}-")) nil [126849 127206])
            ("comint-file-name-quote-list" variable nil nil [127208 127355])
            ("comint-directory" function (:arguments ("directory")) nil [127358 127592])
            ("comint-word" function (:arguments ("word-chars")) nil [127595 128638])
            ("comint-substitute-in-file-name" function (:arguments ("filename")) nil [128640 129262])
            ("comint--match-partial-filename" function nil nil [129264 129428])
            ("comint--unquote&requote-argument" function (:arguments ("qstr" "upos")) nil [129430 130723])
            ("comint--unquote-argument" function (:arguments ("str")) nil [130725 130810])
            ("define-obsolete-function-alias" code nil nil [130811 130912])
            ("comint-match-partial-filename" function nil nil [130914 131199])
            ("comint-quote-filename" function (:arguments ("filename")) nil [131201 131669])
            ("comint-unquote-filename" function (:arguments ("filename")) nil [131671 131943])
            ("comint--requote-argument" function (:arguments ("upos" "qstr")) nil [131945 132127])
            ("comint-completion-at-point" function nil nil [132129 132238])
            ("define-obsolete-function-alias" code nil nil [132240 132329])
            ("comint-dynamic-complete-filename" function (:user-visible-flag t) nil [132331 133262])
            ("comint-filename-completion" function nil nil [133264 133439])
            ("comint-completion-file-name-table" function (:arguments ("string" "pred" "action")) nil [133441 134150])
            ("comint-unquote-function" variable (:default-value (function comint--unquote-argument)) nil [134152 134329])
            ("comint-requote-function" variable (:default-value (function comint--requote-argument)) nil [134330 134507])
            ("comint--complete-file-name-data" function nil nil [134509 135807])
            ("comint-dynamic-complete-as-filename" function nil nil [135809 136144])
            ("comint-replace-by-expanded-filename" function (:user-visible-flag t) nil [136146 136749])
            ("comint-dynamic-simple-complete" function (:arguments ("stub" "candidates")) nil [136752 139020])
            ("comint-dynamic-list-filename-completions" function (:user-visible-flag t) nil [139022 139519])
            ("comint-displayed-dynamic-completions" variable nil nil [139731 139780])
            ("comint-dynamic-list-completions-config" variable nil nil [139782 139833])
            ("comint-dynamic-list-completions" function (:arguments ("completions" "common-substring")) nil [139835 142906])
            ("comint-get-next-from-history" function (:user-visible-flag t) nil [142909 143358])
            ("comint-accumulate" function (:user-visible-flag t) nil [143360 143876])
            ("comint-goto-process-mark" function (:user-visible-flag t) nil [143878 144308])
            ("comint-bol-or-process-mark" function (:user-visible-flag t) nil [144310 145065])
            ("comint-set-process-mark" function (:user-visible-flag t) nil [145067 145339])
            ("comint-redirect-verbose" variable nil nil [147587 147788])
            ("comint-redirect-filter-functions" variable nil nil [147849 148492])
            ("comint-redirect-output-buffer" variable nil nil [148517 148613])
            ("comint-redirect-finished-regexp" variable nil nil [148615 148876])
            ("comint-redirect-insert-matching-regexp" variable nil nil [148878 149195])
            ("comint-redirect-echo-input" variable nil nil [149197 149312])
            ("comint-redirect-completed" variable nil nil [149314 149416])
            ("comint-redirect-original-mode-line-process" variable nil nil [149418 149520])
            ("comint-redirect-perform-sanity-check" variable (:default-value t) nil [149522 150023])
            ("comint-redirect-subvert-readonly" variable nil nil [150025 150331])
            ("comint-redirect-previous-input-string" variable nil nil [150333 150532])
            ("comint-redirect-setup" function (:arguments ("output-buffer" "comint-buffer" "finished-regexp" "echo-input")) nil [150670 151837])
            ("comint-redirect-cleanup" function (:user-visible-flag t) nil [151839 152360])
            ("defalias" code nil nil [152461 152532])
            ("comint-redirect-filter" function (:arguments ("orig-filter" "process" "input-string")) nil [152534 153203])
            ("comint-redirect-preoutput-filter" function (:arguments ("input-string")) nil [153206 155765])
            ("comint-redirect-send-command" function
               (:user-visible-flag t
                :arguments ("command" "output-buffer" "echo" "no-display"))
                nil [155782 156327])
            ("comint-redirect-send-command-to-process" function
               (:user-visible-flag t
                :arguments ("command" "output-buffer" "process" "echo" "no-display"))
                nil [156344 157841])
            ("comint-redirect-results-list" function (:arguments ("command" "regexp" "regexp-group")) nil [157858 158205])
            ("comint-redirect-results-list-from-process" function (:arguments ("process" "command" "regexp" "regexp-group")) nil [158222 159320])
            ("comint" package nil nil [162849 162866]))          
      :file "comint.el.gz"
      :pointmax 162892
      :fsize 44241
      :lastmodtime '(22966 58805 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [4229 4246])
            ("completion-boundaries" function (:arguments ("string" "collection" "pred" "suffix")) nil [4319 5365])
            ("completion-metadata" function (:arguments ("string" "table" "pred")) nil [5367 6377])
            ("completion--field-metadata" function (:arguments ("field-start")) nil [6379 6610])
            ("completion-metadata-get" function (:arguments ("metadata" "prop")) nil [6612 6688])
            ("completion--some" function (:arguments ("fun" "xs")) nil [6690 7123])
            ("complete-with-action" function (:arguments ("action" "table" "string" "pred")) nil [7125 7651])
            ("completion-table-dynamic" function (:arguments ("fun" "switch-buffer")) nil [7653 9033])
            ("completion-table-with-cache" function (:arguments ("fun" "ignore-case")) nil [9035 9921])
            ("lazy-completion-table" function (:arguments ("var" "fun")) nil [9923 10762])
            ("completion-table-case-fold" function (:arguments ("table" "dont-fold")) nil [10764 11106])
            ("completion-table-subvert" function (:arguments ("table" "s1" "s2")) nil [11108 12674])
            ("completion-table-with-context" function (:arguments ("prefix" "table" "string" "pred" "action")) nil [12676 13960])
            ("completion-table-with-terminator" function (:arguments ("terminator" "table" "string" "pred" "action")) nil [13962 17214])
            ("completion-table-with-predicate" function (:arguments ("table" "pred1" "strict" "string" "pred2" "action")) nil [17216 18698])
            ("completion-table-in-turn" function (:arguments ("tables")) nil [18700 19199])
            ("completion-table-merge" function (:arguments ("tables")) nil [19201 20218])
            ("completion-table-with-quoting" function (:arguments ("table" "unquote" "requote")) nil [20220 27749])
            ("completion--twq-try" function (:arguments ("string" "ustring" "completion" "point" "unquote" "requote")) nil [27751 28997])
            ("completion--string-equal-p" function (:arguments ("s1" "s2")) nil [28999 29103])
            ("completion--twq-all" function (:arguments ("string" "ustring" "completions" "boundary" "_unquote" "requote")) nil [29105 32733])
            ("define-obsolete-function-alias" code nil nil [32884 32969])
            ("define-obsolete-function-alias" code nil nil [32970 33063])
            ("minibuffer" customgroup (:user-visible-flag t) nil [33092 33232])
            ("minibuffer-message" function (:arguments ("message" "args")) nil [33234 35295])
            ("minibuffer-completion-contents" function nil nil [35297 35553])
            ("delete-minibuffer-contents" function (:user-visible-flag t) nil [35555 35912])
            ("completion-show-inline-help" variable (:default-value t) nil [35914 36017])
            ("completion-auto-help" variable (:default-value t) nil [36019 36401])
            ("completion-styles-alist" variable
               (:constant-flag t
                :default-value (quote ((emacs21 completion-emacs21-try-completion completion-emacs21-all-completions "Simple prefix-based completion.
I.e. when completing \"foo_bar\" (where _ is the position of point),
it will consider all completions candidates matching the glob
pattern \"foobar*\".") (emacs22 completion-emacs22-try-completion completion-emacs22-all-completions "Prefix completion that only operates on the text before point.
I.e. when completing \"foo_bar\" (where _ is the position of point),
it will consider all completions candidates matching the glob
pattern \"foo*\" and will add back \"bar\" to the end of it.") (basic completion-basic-try-completion completion-basic-all-completions "Completion of the prefix before point and the suffix after point.
I.e. when completing \"foo_bar\" (where _ is the position of point),
it will consider all completions candidates matching the glob
pattern \"foo*bar*\".") (partial-completion completion-pcm-try-completion completion-pcm-all-completions "Completion of multiple words, each one taken as a prefix.
I.e. when completing \"l-co_h\" (where _ is the position of point),
it will consider all completions candidates matching the glob
pattern \"l*-co*h*\".
Furthermore, for completions that are done step by step in subfields,
the method is applied to all the preceding fields that do not yet match.
E.g. C-x C-f /u/mo/s TAB could complete to /usr/monnier/src.
Additionally the user can use the char \"*\" as a glob pattern.") (substring completion-substring-try-completion completion-substring-all-completions "Completion of the string taken as a substring.
I.e. when completing \"foo_bar\" (where _ is the position of point),
it will consider all completions candidates matching the glob
pattern \"*foo*bar*\".") (initials completion-initials-try-completion completion-initials-all-completions "Completion of acronyms and initialisms.
E.g. can complete M-x lch to list-command-history
and C-x C-f ~/sew to ~/src/emacs/work."))))
                nil [36403 38984])
            ("completion--styles-type" variable
               (:constant-flag t
                :default-value (\` (repeat :tag "insert a new menu to add more styles" (choice (\,@ (mapcar (lambda (x) (list (quote const) (car x))) completion-styles-alist))))))
                nil [38986 39195])
            ("completion--cycling-threshold-type" variable
               (:constant-flag t
                :default-value (quote (choice (const :tag "No cycling" nil) (const :tag "Always cycle" t) (integer :tag "Threshold"))))
                nil [39196 39362])
            ("completion-styles" variable (:default-value (quote (basic partial-completion emacs22))) nil [39364 40268])
            ("completion-category-defaults" variable (:default-value (quote ((buffer (styles basic substring)) (unicode-name (styles basic substring)) (project-file (styles basic substring))))) nil [40270 40869])
            ("completion-category-overrides" variable nil nil [40871 42023])
            ("completion--category-override" function (:arguments ("category" "tag")) nil [42025 42215])
            ("completion--styles" function (:arguments ("metadata")) nil [42217 42491])
            ("completion--nth-completion" function (:arguments ("n" "string" "table" "pred" "point" "metadata")) nil [42493 44215])
            ("completion-try-completion" function (:arguments ("string" "table" "pred" "point" "metadata")) nil [44217 44774])
            ("completion-all-completions" function (:arguments ("string" "table" "pred" "point" "metadata")) nil [44776 45313])
            ("minibuffer--bitset" function (:arguments ("modified" "completions" "exact")) nil [45315 45464])
            ("completion--replace" function (:arguments ("beg" "end" "newtext")) nil [45466 47169])
            ("completion-cycle-threshold" variable nil nil [47171 47601])
            ("completion--cycle-threshold" function (:arguments ("metadata")) nil [47603 47822])
            ("defvar-local" code nil nil [47824 47876])
            ("defvar-local" code nil nil [47877 47939])
            ("completion-cycling" variable nil nil [47940 47971])
            ("completion-fail-discreetly" variable nil nil [47973 48064])
            ("completion--message" function (:arguments ("msg")) nil [48066 48165])
            ("completion--do-completion" function (:arguments ("beg" "end" "try-completion-function" "expect-exact")) nil [48167 54728])
            ("minibuffer-complete" function (:user-visible-flag t) nil [54730 55283])
            ("completion--in-region-1" function (:arguments ("beg" "end")) nil [55285 56468])
            ("completion--cache-all-sorted-completions" function (:arguments ("beg" "end" "comps")) nil [56470 56784])
            ("completion--flush-all-sorted-completions" function (:arguments ("start" "end" "_len")) nil [56786 57231])
            ("completion--metadata" function (:arguments ("string" "base" "md-at-point" "table" "pred")) nil [57233 57679])
            ("completion-all-sorted-completions" function (:arguments ("start" "end")) nil [57681 59834])
            ("minibuffer-force-complete-and-exit" function (:user-visible-flag t) nil [59836 60272])
            ("minibuffer-force-complete" function
               (:user-visible-flag t
                :arguments ("start" "end"))
                nil [60274 63026])
            ("minibuffer-confirm-exit-commands" variable (:default-value (quote (completion-at-point minibuffer-complete minibuffer-complete-word PC-complete PC-complete-word))) nil [63028 63294])
            ("minibuffer-complete-and-exit" function (:user-visible-flag t) nil [63296 64047])
            ("completion-complete-and-exit" function (:arguments ("beg" "end" "exit-function")) nil [64049 64584])
            ("completion--complete-and-exit" function (:arguments ("beg" "end" "exit-function" "completion-function")) nil [64586 67190])
            ("completion--try-word-completion" function (:arguments ("string" "table" "predicate" "point" "md")) nil [67192 72197])
            ("minibuffer-complete-word" function (:user-visible-flag t) nil [72200 72628])
            ("completion-in-region--single-word" function (:arguments ("beg" "end" "collection" "predicate")) nil [72630 73013])
            ("completions-annotations" variable
               (:default-value (quote ((t :inherit italic)))
                :type "face")
                nil [73015 73132])
            ("completions-format" variable (:default-value (quote horizontal)) nil [73134 73530])
            ("completion--insert-strings" function (:arguments ("strings")) nil [73532 77103])
            ("completion-common-substring" variable nil nil [77105 77145])
            ("make-obsolete-variable" code nil nil [77146 77210])
            ("completion-setup-hook" variable nil nil [77212 77549])
            ("completions-first-difference" variable
               (:default-value (quote ((t (:inherit bold))))
                :type "face")
                nil [77551 77717])
            ("completions-common-part" variable
               (:default-value (quote ((t nil)))
                :type "face")
                nil [77719 78022])
            ("completion-hilit-commonality" function (:arguments ("completions" "prefix-len" "base-size")) nil [78024 79902])
            ("display-completion-list" function (:arguments ("completions" "common-substring")) nil [79904 81670])
            ("completion-extra-properties" variable nil nil [81672 82642])
            ("completion-annotate-function" variable nil nil [82644 83527])
            ("make-obsolete-variable" code nil nil [83528 83642])
            ("completion--done" function (:arguments ("string" "finished" "message")) nil [83644 84460])
            ("minibuffer-completion-help" function
               (:user-visible-flag t
                :arguments ("start" "end"))
                nil [84462 90794])
            ("minibuffer-hide-completions" function nil nil [90796 91139])
            ("exit-minibuffer" function (:user-visible-flag t) nil [91141 91622])
            ("self-insert-and-exit" function (:user-visible-flag t) nil [91624 91821])
            ("completion-in-region-functions" variable nil nil [91823 91975])
            ("make-obsolete-variable" code nil nil [91976 92094])
            ("completion-in-region-function" variable (:default-value (function completion--in-region)) nil [92096 92375])
            ("completion-in-region--data" variable nil nil [92377 92416])
            ("completion-in-region-mode-predicate" variable nil nil [92418 92674])
            ("completion-in-region-mode--predicate" variable nil nil [92676 92897])
            ("completion-in-region" function (:arguments ("start" "end" "collection" "predicate")) nil [92899 93516])
            ("read-file-name-completion-ignore-case" variable (:default-value (if (memq system-type (quote (ms-dos windows-nt darwin cygwin))) t nil)) nil [93518 93743])
            ("completion--in-region" function (:arguments ("start" "end" "collection" "predicate")) nil [93745 94829])
            ("completion-in-region-mode-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map "\277" (quote completion-help-at-point)) (define-key map "	" (quote completion-at-point)) map)) nil [94831 95183])
            ("completion-in-region--postch" function nil nil [95531 96188])
            ("completion-in-region-mode" variable nil nil [96264 96302])
            ("define-minor-mode" code nil nil [96340 97516])
            ("setq" code nil nil [97643 97771])
            ("completion-at-point-functions" variable (:default-value (quote (tags-completion-at-point-function))) nil [97773 98880])
            ("completion--capf-misbehave-funs" variable nil nil [98882 99130])
            ("completion--capf-safe-funs" variable nil nil [99131 99361])
            ("completion--capf-wrapper" function (:arguments ("fun" "which")) nil [99363 101286])
            ("completion-at-point" function (:user-visible-flag t) nil [101288 102424])
            ("completion-help-at-point" function (:user-visible-flag t) nil [102426 104192])
            ("let" code nil nil [104213 104377])
            ("minibuffer-local-completion-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map minibuffer-local-map) (define-key map "	" (quote minibuffer-complete)) (define-key map " " (quote minibuffer-complete-word)) (define-key map "?" (quote minibuffer-completion-help)) map)) nil [104379 104882])
            ("minibuffer-local-must-match-map" variable (:default-value (let ((map (make-sparse-keymap))) (set-keymap-parent map minibuffer-local-completion-map) (define-key map "" (quote minibuffer-complete-and-exit)) (define-key map "
" (quote minibuffer-complete-and-exit)) map)) nil [104884 105213])
            ("minibuffer-local-filename-completion-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map " " nil) map)) nil [105215 105510])
            ("define-obsolete-variable-alias" code nil nil [105512 105637])
            ("minibuffer-local-filename-must-match-map" variable (:default-value (make-sparse-keymap)) nil [105638 105708])
            ("make-obsolete-variable" code nil nil [105709 105786])
            ("let" code nil nil [105788 105951])
            ("minibuffer-inactive-mode-map" variable (:default-value (let ((map (make-keymap))) (suppress-keymap map) (define-key map "e" (quote find-file-other-frame)) (define-key map "f" (quote find-file-other-frame)) (define-key map "b" (quote switch-to-buffer-other-frame)) (define-key map "i" (quote info)) (define-key map "m" (quote mail)) (define-key map "n" (quote make-frame)) (define-key map [mouse-1] (quote view-echo-area-messages)) (define-key map [down-mouse-1] (function ignore)) map)) nil [105953 106729])
            ("define-derived-mode" code nil nil [106731 107058])
            ("minibuffer--double-dollars" function (:arguments ("str")) nil [107084 107340])
            ("completion--make-envvar-table" function nil nil [107342 107508])
            ("completion--embedded-envvar-re" variable
               (:constant-flag t
                :default-value (concat "\\(?:^\\|[^$]\\(?:\\$\\$\\)*\\)" "$\\([[:alnum:]_]*\\|{\\([^}]*\\)\\)\\'"))
                nil [107510 107779])
            ("completion--embedded-envvar-table" function (:arguments ("string" "_pred" "action")) nil [107781 110228])
            ("completion-file-name-table" function (:arguments ("string" "pred" "action")) nil [110230 112958])
            ("read-file-name-predicate" variable nil nil [113017 113111])
            ("make-obsolete-variable" code nil nil [113112 113225])
            ("completion--sifn-requote" function (:arguments ("upos" "qstr")) nil [113227 115610])
            ("defalias" code nil nil [115612 116046])
            ("defalias" code nil nil [116048 116271])
            ("read-file-name-function" variable (:default-value (quote read-file-name-default)) nil [116273 116446])
            ("insert-default-directory" variable (:default-value t) nil [116448 117487])
            ("declare-function" code nil nil [117569 117689])
            ("read-file-name--defaults" function (:arguments ("dir" "initial")) nil [117691 118881])
            ("read-file-name" function (:arguments ("prompt" "dir" "default-filename" "mustmatch" "initial" "predicate")) nil [118883 121967])
            ("minibuffer-local-filename-syntax" variable (:default-value (let ((table (make-syntax-table)) (punctuation (car (string-to-syntax ".")))) (map-char-table (lambda (c syntax) (when (eq (car syntax) punctuation) (modify-syntax-entry c "_" table))) table) (mapc (lambda (c) (modify-syntax-entry c "." table)) (quote (47 58 92))) table)) nil [121969 122441])
            ("read-file-name-default" function (:arguments ("prompt" "dir" "default-filename" "mustmatch" "initial" "predicate")) nil [123031 130258])
            ("internal-complete-buffer-except" function (:arguments ("buffer")) nil [130260 130759])
            ("completion-emacs21-try-completion" function (:arguments ("string" "table" "pred" "_point")) nil [130819 131038])
            ("completion-emacs21-all-completions" function (:arguments ("string" "table" "pred" "_point")) nil [131040 131254])
            ("completion-emacs22-try-completion" function (:arguments ("string" "table" "pred" "point")) nil [131256 132293])
            ("completion-emacs22-all-completions" function (:arguments ("string" "table" "pred" "point")) nil [132295 132567])
            ("completion--merge-suffix" function (:arguments ("completion" "point" "suffix")) nil [132592 133273])
            ("completion-basic--pattern" function (:arguments ("beforepoint" "afterpoint" "bounds")) nil [133275 133470])
            ("completion-basic-try-completion" function (:arguments ("string" "table" "pred" "point")) nil [133472 134752])
            ("completion-basic-all-completions" function (:arguments ("string" "table" "pred" "point")) nil [134754 135437])
            ("completion-pcm--delim-wild-regex" variable nil nil [135486 135938])
            ("completion-pcm--prepare-delim-re" function (:arguments ("delims")) nil [135940 136056])
            ("completion-pcm-word-delimiters" variable (:default-value "-_./:| ") nil [136058 136699])
            ("completion-pcm-complete-word-inserts-delimiters" variable nil nil [136701 137138])
            ("completion-pcm--pattern-trivial-p" function (:arguments ("pattern")) nil [137140 137425])
            ("completion-pcm--string->pattern" function (:arguments ("string" "point")) nil [137427 139884])
            ("completion-pcm--optimize-pattern" function (:arguments ("p")) nil [139886 140821])
            ("completion-pcm--pattern->regex" function (:arguments ("pattern" "group")) nil [140823 141633])
            ("completion-pcm--all-completions" function (:arguments ("prefix" "pattern" "table" "pred")) nil [141635 142888])
            ("completion-pcm--hilit-commonality" function (:arguments ("pattern" "completions")) nil [142890 143690])
            ("completion-pcm--find-all-completions" function (:arguments ("string" "table" "pred" "point" "filter")) nil [143692 148926])
            ("completion-pcm-all-completions" function (:arguments ("string" "table" "pred" "point")) nil [148928 149228])
            ("completion--common-suffix" function (:arguments ("strs")) nil [149230 149377])
            ("completion-pcm--merge-completions" function (:arguments ("strs" "pattern")) nil [149379 154410])
            ("completion-pcm--pattern->string" function (:arguments ("pattern")) nil [154412 154683])
            ("completion-pcm--filename-try-filter" function (:arguments ("all")) nil [155307 155695])
            ("completion-pcm--merge-try" function (:arguments ("pattern" "all" "prefix" "suffix")) nil [155698 157550])
            ("completion-pcm-try-completion" function (:arguments ("string" "table" "pred" "point")) nil [157552 157928])
            ("completion-substring--all-completions" function (:arguments ("string" "table" "pred" "point")) nil [158011 158746])
            ("completion-substring-try-completion" function (:arguments ("string" "table" "pred" "point")) nil [158748 159135])
            ("completion-substring-all-completions" function (:arguments ("string" "table" "pred" "point")) nil [159137 159472])
            ("completion-initials-expand" function (:arguments ("str" "table" "pred")) nil [159567 161268])
            ("completion-initials-all-completions" function (:arguments ("string" "table" "pred" "_point")) nil [161270 161497])
            ("completion-initials-try-completion" function (:arguments ("string" "table" "pred" "_point")) nil [161499 161724])
            ("completing-read-function" variable (:default-value (quote completing-read-default)) nil [161727 161904])
            ("completing-read-default" function (:arguments ("prompt" "collection" "predicate" "require-match" "initial-input" "hist" "def" "inherit-input-method")) nil [161906 163689])
            ("minibuffer-insert-file-name-at-point" function (:user-visible-flag t) nil [163710 164083])
            ("minibuffer" package nil nil [164085 164106]))          
      :file "minibuffer.el.gz"
      :pointmax 164136
      :fsize 43248
      :lastmodtime '(22966 58805 0 0)
      :unmatched-syntax '((close-paren 4246 . 4247) (symbol 4211 . 4228) (open-paren 4210 . 4211)))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("reference-point-alist" variable
               (:constant-flag t
                :default-value (quote ((tl . 0) (tc . 1) (tr . 2) (Bl . 3) (Bc . 4) (Br . 5) (bl . 6) (bc . 7) (br . 8) (cl . 9) (cc . 10) (cr . 11) (top-left . 0) (top-center . 1) (top-right . 2) (base-left . 3) (base-center . 4) (base-right . 5) (bottom-left . 6) (bottom-center . 7) (bottom-right . 8) (center-left . 9) (center-center . 10) (center-right . 11) (ml . 3) (mc . 10) (mr . 5) (mid-left . 3) (mid-center . 10) (mid-right . 5))))
                nil [1166 3374])
            ("encode-composition-rule" function (:arguments ("rule")) nil [3392 4587])
            ("decode-composition-rule" function (:arguments ("rule-code")) nil [4794 5460])
            ("encode-composition-components" function (:arguments ("components" "nocopy")) nil [5795 6267])
            ("decode-composition-components" function (:arguments ("components" "nocopy")) nil [6724 7034])
            ("compose-region" function
               (:user-visible-flag t
                :arguments ("start" "end" "components" "modification-func"))
                nil [7036 9255])
            ("decompose-region" function
               (:user-visible-flag t
                :arguments ("start" "end"))
                nil [9257 9629])
            ("compose-string" function (:arguments ("string" "start" "end" "components" "modification-func")) nil [9631 10595])
            ("decompose-string" function (:arguments ("string")) nil [10597 10769])
            ("compose-chars" function (:arguments ("args")) nil [10771 11647])
            ("find-composition" function (:arguments ("pos" "limit" "string" "detail-p")) nil [11649 13597])
            ("compose-chars-after" function (:arguments ("pos" "limit" "object")) nil [13601 15045])
            ("compose-last-chars" function
               (:user-visible-flag t
                :arguments ("args"))
                nil [15047 15958])
            ("global-set-key" code nil nil [15960 16017])
            ("lgstring-header" function (:arguments ("gstring")) nil [16138 16191])
            ("lgstring-set-header" function (:arguments ("gstring" "header")) nil [16192 16263])
            ("lgstring-font" function (:arguments ("gstring")) nil [16264 16333])
            ("lgstring-char" function (:arguments ("gstring" "i")) nil [16334 16410])
            ("lgstring-char-len" function (:arguments ("gstring")) nil [16411 16489])
            ("lgstring-shaped-p" function (:arguments ("gstring")) nil [16490 16545])
            ("lgstring-set-id" function (:arguments ("gstring" "id")) nil [16546 16605])
            ("lgstring-glyph" function (:arguments ("gstring" "i")) nil [16606 16666])
            ("lgstring-glyph-len" function (:arguments ("gstring")) nil [16667 16729])
            ("lgstring-set-glyph" function (:arguments ("gstring" "i" "glyph")) nil [16730 16806])
            ("lglyph-from" function (:arguments ("glyph")) nil [16808 16853])
            ("lglyph-to" function (:arguments ("glyph")) nil [16854 16897])
            ("lglyph-char" function (:arguments ("glyph")) nil [16898 16943])
            ("lglyph-code" function (:arguments ("glyph")) nil [16944 16989])
            ("lglyph-width" function (:arguments ("glyph")) nil [16990 17036])
            ("lglyph-lbearing" function (:arguments ("glyph")) nil [17037 17086])
            ("lglyph-rbearing" function (:arguments ("glyph")) nil [17087 17136])
            ("lglyph-ascent" function (:arguments ("glyph")) nil [17137 17184])
            ("lglyph-descent" function (:arguments ("glyph")) nil [17185 17233])
            ("lglyph-adjustment" function (:arguments ("glyph")) nil [17234 17285])
            ("lglyph-set-from-to" function (:arguments ("glyph" "from" "to")) nil [17287 17380])
            ("lglyph-set-char" function (:arguments ("glyph" "char")) nil [17381 17440])
            ("lglyph-set-code" function (:arguments ("glyph" "code")) nil [17441 17500])
            ("lglyph-set-width" function (:arguments ("glyph" "width")) nil [17501 17563])
            ("lglyph-set-adjustment" function (:arguments ("glyph" "xoff" "yoff" "wadjust")) nil [17564 17697])
            ("lglyph-copy" function (:arguments ("glyph")) nil [17699 17751])
            ("lgstring-insert-glyph" function (:arguments ("gstring" "idx" "glyph")) nil [17753 18252])
            ("compose-glyph-string" function (:arguments ("gstring" "from" "to")) nil [18254 18827])
            ("compose-glyph-string-relative" function (:arguments ("gstring" "from" "to" "gap")) nil [18829 20043])
            ("compose-gstring-for-graphic" function (:arguments ("gstring")) nil [20045 25966])
            ("compose-gstring-for-dotted-circle" function (:arguments ("gstring")) nil [25968 27759])
            ("when" code nil nil [27806 28251])
            ("compose-gstring-for-terminal" function (:arguments ("gstring")) nil [28253 30196])
            ("auto-compose-chars" function (:arguments ("func" "from" "to" "font-object" "string")) nil [30199 31138])
            ("put" code nil nil [31140 31187])
            ("make-variable-buffer-local" code nil nil [31189 31244])
            ("setq-default" code nil nil [31245 31305])
            ("define-minor-mode" code nil nil [31322 31923])
            ("make-variable-buffer-local" code nil nil [31975 32026])
            ("define-minor-mode" code nil nil [32043 32423])
            ("defalias" code nil nil [32425 32483]))          
      :file "composite.el.gz"
      :pointmax 32515
      :fsize 9066
      :lastmodtime '(22966 58805 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("unless" code nil nil [1410 1510])
            ("color-name-to-rgb" function (:arguments ("color" "frame")) nil [1528 2308])
            ("color-rgb-to-hex" function (:arguments ("red" "green" "blue")) nil [2310 2561])
            ("color-complement" function (:arguments ("color-name")) nil [2563 2936])
            ("color-gradient" function (:arguments ("start" "stop" "step-number")) nil [2938 3583])
            ("color-hue-to-rgb" function (:arguments ("v1" "v2" "h")) nil [3585 3867])
            ("color-hsl-to-rgb" function (:arguments ("H" "S" "L")) nil [3869 4420])
            ("color-complement-hex" function (:arguments ("color")) nil [4422 4588])
            ("color-rgb-to-hsv" function (:arguments ("red" "green" "blue")) nil [4590 5448])
            ("color-rgb-to-hsl" function (:arguments ("red" "green" "blue")) nil [5450 6286])
            ("color-srgb-to-xyz" function (:arguments ("red" "green" "blue")) nil [6288 6996])
            ("color-xyz-to-srgb" function (:arguments ("X" "Y" "Z")) nil [6998 7601])
            ("color-d65-xyz" variable
               (:constant-flag t
                :default-value (quote (0.950455 1.0 1.088753)))
                nil [7603 7684])
            ("color-cie-\316\265" variable
               (:constant-flag t
                :default-value (/ 216 24389.0))
                nil [7686 7724])
            ("color-cie-\316\272" variable
               (:constant-flag t
                :default-value (/ 24389 27.0))
                nil [7725 7762])
            ("color-xyz-to-lab" function (:arguments ("X" "Y" "Z" "white-point")) nil [7764 8650])
            ("color-lab-to-xyz" function (:arguments ("L" "a" "b" "white-point")) nil [8668 9572])
            ("color-srgb-to-lab" function (:arguments ("red" "green" "blue")) nil [9593 9729])
            ("color-lab-to-srgb" function (:arguments ("L" "a" "b")) nil [9731 9849])
            ("color-cie-de2000" function (:arguments ("color1" "color2" "kL" "kC" "kH")) nil [9851 12809])
            ("color-clamp" function (:arguments ("value")) nil [12811 12929])
            ("color-saturate-hsl" function (:arguments ("H" "S" "L" "percent")) nil [12931 13261])
            ("color-saturate-name" function (:arguments ("name" "percent")) nil [13263 13583])
            ("color-desaturate-hsl" function (:arguments ("H" "S" "L" "percent")) nil [13585 13907])
            ("color-desaturate-name" function (:arguments ("name" "percent")) nil [13909 14088])
            ("color-lighten-hsl" function (:arguments ("H" "S" "L" "percent")) nil [14090 14404])
            ("color-lighten-name" function (:arguments ("name" "percent")) nil [14406 14716])
            ("color-darken-hsl" function (:arguments ("H" "S" "L" "percent")) nil [14718 15020])
            ("color-darken-name" function (:arguments ("name" "percent")) nil [15022 15184])
            ("color" package nil nil [15186 15202]))          
      :file "color.el.gz"
      :pointmax 15227
      :fsize 4505
      :lastmodtime '(22966 58805 0 0)
      :unmatched-syntax '((close-paren 1510 . 1511) (symbol 1391 . 1407) (open-paren 1390 . 1391)))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("term-file-prefix" variable (:default-value (purecopy "term/")) nil [874 1326])
            ("term-file-aliases" variable (:default-value (quote (("apollo" . "vt100") ("vt102" . "vt100") ("vt125" . "vt100") ("vt201" . "vt200") ("vt220" . "vt200") ("vt240" . "vt200") ("vt300" . "vt200") ("vt320" . "vt200") ("vt400" . "vt200") ("vt420" . "vt200")))) nil [1328 1912])
            ("declare-function" code nil nil [1914 1986])
            ("help-xref-stack-item" variable nil nil [1988 2017])
            ("face-name-history" variable nil nil [2019 2200])
            ("font-selection" customgroup (:user-visible-flag t) nil [2371 2453])
            ("face-font-selection-order" variable (:default-value (quote (:width :height :weight :slant))) nil [2456 3238])
            ("face-font-family-alternatives" variable (:default-value (mapcar (lambda (arg) (mapcar (quote purecopy) arg)) (quote (("Monospace" "courier" "fixed") ("Monospace Serif" "Courier 10 Pitch" "Consolas" "Courier Std" "FreeMono" "Nimbus Mono L" "courier" "fixed") ("courier" "CMU Typewriter Text" "fixed") ("Sans Serif" "helv" "helvetica" "arial" "fixed") ("helv" "helvetica" "arial" "fixed"))))) nil [3412 4998])
            ("face-font-registry-alternatives" variable (:default-value (mapcar (lambda (arg) (mapcar (quote purecopy) arg)) (if (featurep (quote w32)) (quote (("iso8859-1" "ms-oemlatin") ("gb2312.1980" "gb2312" "gbk" "gb18030") ("jisx0208.1990" "jisx0208.1983" "jisx0208.1978") ("ksc5601.1989" "ksx1001.1992" "ksc5601.1987") ("muletibetan-2" "muletibetan-0"))) (quote (("gb2312.1980" "gb2312.80&gb8565.88" "gbk" "gb18030") ("jisx0208.1990" "jisx0208.1983" "jisx0208.1978") ("ksc5601.1989" "ksx1001.1992" "ksc5601.1987") ("muletibetan-2" "muletibetan-0")))))) nil [5044 6108])
            ("face-list" function nil nil [6283 6384])
            ("make-face" function
               (:user-visible-flag t
                :arguments ("face"))
                nil [6386 7087])
            ("make-empty-face" function
               (:user-visible-flag t
                :arguments ("face"))
                nil [7089 7351])
            ("copy-face" function (:arguments ("old-face" "new-face" "frame" "new-frame")) nil [7353 8604])
            ("facep" function (:arguments ("face")) nil [8784 8933])
            ("check-face" function (:arguments ("face")) nil [8936 9090])
            ("face-id" function (:arguments ("face" "_frame")) nil [9271 9613])
            ("face-equal" function (:arguments ("face1" "face2" "frame")) nil [9615 10032])
            ("face-differs-from-default-p" function (:arguments ("face" "frame")) nil [10035 10748])
            ("face-nontrivial-p" function (:arguments ("face" "frame")) nil [10751 11095])
            ("face-list-p" function (:arguments ("face-or-list")) nil [11098 11527])
            ("face-x-resources" variable (:default-value (mapcar (lambda (arg) (cons (car arg) (cons (purecopy (car (cdr arg))) (purecopy (cdr (cdr arg)))))) (quote ((:family (".attributeFamily" . "Face.AttributeFamily")) (:foundry (".attributeFoundry" . "Face.AttributeFoundry")) (:width (".attributeWidth" . "Face.AttributeWidth")) (:height (".attributeHeight" . "Face.AttributeHeight")) (:weight (".attributeWeight" . "Face.AttributeWeight")) (:slant (".attributeSlant" . "Face.AttributeSlant")) (:foreground (".attributeForeground" . "Face.AttributeForeground")) (:distant-foreground (".attributeDistantForeground" . "Face.AttributeDistantForeground")) (:background (".attributeBackground" . "Face.AttributeBackground")) (:overline (".attributeOverline" . "Face.AttributeOverline")) (:strike-through (".attributeStrikeThrough" . "Face.AttributeStrikeThrough")) (:box (".attributeBox" . "Face.AttributeBox")) (:underline (".attributeUnderline" . "Face.AttributeUnderline")) (:inverse-video (".attributeInverse" . "Face.AttributeInverse")) (:stipple (".attributeStipple" . "Face.AttributeStipple") (".attributeBackgroundPixmap" . "Face.AttributeBackgroundPixmap")) (:bold (".attributeBold" . "Face.AttributeBold")) (:italic (".attributeItalic" . "Face.AttributeItalic")) (:font (".attributeFont" . "Face.AttributeFont")) (:inherit (".attributeInherit" . "Face.AttributeInherit")))))) nil [11725 13617])
            ("declare-function" code nil nil [13620 13715])
            ("declare-function" code nil nil [13717 13831])
            ("set-face-attribute-from-resource" function (:arguments ("face" "attribute" "resource" "class" "frame")) nil [13833 14542])
            ("set-face-attributes-from-resources" function (:arguments ("face" "frame")) nil [14545 14908])
            ("make-face-x-resource-internal" function (:arguments ("face" "frame")) nil [14911 15507])
            ("face-name" function (:arguments ("face")) nil [15691 15783])
            ("face-all-attributes" function (:arguments ("face" "frame")) nil [15786 16252])
            ("face-attribute" function (:arguments ("face" "attribute" "frame" "inherit")) nil [16254 18068])
            ("face-attribute-merged-with" function (:arguments ("attribute" "value" "faces" "frame")) nil [18070 18658])
            ("face-attribute-specified-or" function (:arguments ("value" "body")) nil [18661 18942])
            ("face-foreground" function (:arguments ("face" "frame" "inherit")) nil [18944 20000])
            ("face-background" function (:arguments ("face" "frame" "inherit")) nil [20002 21058])
            ("face-stipple" function (:arguments ("face" "frame" "inherit")) nil [21060 22080])
            ("defalias" code nil nil [22083 22131])
            ("face-underline-p" function (:arguments ("face" "frame" "inherit")) nil [22134 22587])
            ("face-inverse-video-p" function (:arguments ("face" "frame" "inherit")) nil [22590 23024])
            ("face-bold-p" function (:arguments ("face" "frame" "inherit")) nil [23027 23546])
            ("face-italic-p" function (:arguments ("face" "frame" "inherit")) nil [23549 24053])
            ("face-documentation" function (:arguments ("face")) nil [24229 24651])
            ("set-face-documentation" function (:arguments ("face" "string")) nil [24654 24842])
            ("defalias" code nil nil [24845 24892])
            ("defalias" code nil nil [24893 24948])
            ("set-face-attribute" function (:arguments ("face" "frame" "args")) nil [25129 32824])
            ("make-face-bold" function
               (:user-visible-flag t
                :arguments ("face" "frame" "_noerror"))
                nil [32826 33277])
            ("make-face-unbold" function
               (:user-visible-flag t
                :arguments ("face" "frame" "_noerror"))
                nil [33280 33680])
            ("make-face-italic" function
               (:user-visible-flag t
                :arguments ("face" "frame" "_noerror"))
                nil [33683 34140])
            ("make-face-unitalic" function
               (:user-visible-flag t
                :arguments ("face" "frame" "_noerror"))
                nil [34143 34548])
            ("make-face-bold-italic" function
               (:user-visible-flag t
                :arguments ("face" "frame" "_noerror"))
                nil [34551 35048])
            ("set-face-font" function
               (:user-visible-flag t
                :arguments ("face" "font" "frame"))
                nil [35051 35477])
            ("set-face-background" function
               (:user-visible-flag t
                :arguments ("face" "color" "frame"))
                nil [35683 36152])
            ("set-face-foreground" function
               (:user-visible-flag t
                :arguments ("face" "color" "frame"))
                nil [36155 36624])
            ("set-face-stipple" function
               (:user-visible-flag t
                :arguments ("face" "stipple" "frame"))
                nil [36627 37232])
            ("set-face-underline" function
               (:user-visible-flag t
                :arguments ("face" "underline" "frame"))
                nil [37235 38004])
            ("define-obsolete-function-alias" code nil nil [38006 38119])
            ("set-face-inverse-video" function
               (:user-visible-flag t
                :arguments ("face" "inverse-video-p" "frame"))
                nil [38122 38695])
            ("define-obsolete-function-alias" code nil nil [38697 38818])
            ("set-face-bold" function (:arguments ("face" "bold-p" "frame")) nil [38820 39236])
            ("define-obsolete-function-alias" code nil nil [39238 39309])
            ("set-face-italic" function (:arguments ("face" "italic-p" "frame")) nil [39312 39748])
            ("define-obsolete-function-alias" code nil nil [39750 39825])
            ("defalias" code nil nil [39828 39884])
            ("invert-face" function
               (:user-visible-flag t
                :arguments ("face" "frame"))
                nil [39887 40687])
            ("crm-separator" variable nil nil [40873 40895])
            ("read-face-name" function (:arguments ("prompt" "default" "multiple")) nil [40911 43420])
            ("x-bitmap-file-path" variable nil nil [43479 43506])
            ("face-valid-attribute-values" function (:arguments ("attribute" "frame")) nil [43508 46197])
            ("face-attribute-name-alist" variable
               (:constant-flag t
                :default-value (quote ((:family . "font family") (:foundry . "font foundry") (:width . "character set width") (:height . "height in 1/10 pt") (:weight . "weight") (:slant . "slant") (:underline . "underline") (:overline . "overline") (:strike-through . "strike-through") (:box . "box") (:inverse-video . "inverse-video display") (:foreground . "foreground color") (:background . "background color") (:stipple . "background stipple") (:inherit . "inheritance"))))
                nil [46200 46970])
            ("face-descriptive-attribute-name" function (:arguments ("attribute")) nil [46973 47120])
            ("face-read-string" function (:arguments ("face" "default" "name" "completion-alist")) nil [47123 48138])
            ("face-read-integer" function (:arguments ("face" "default" "name")) nil [48141 48758])
            ("read-face-attribute" function (:arguments ("face" "attribute" "frame")) nil [48919 51260])
            ("declare-function" code nil nil [51262 51308])
            ("declare-function" code nil nil [51309 51400])
            ("read-face-font" function (:arguments ("face" "frame")) nil [51402 51774])
            ("read-all-face-attributes" function (:arguments ("face" "frame")) nil [51777 52205])
            ("modify-face" function
               (:user-visible-flag t
                :arguments ("face" "foreground" "background" "stipple" "bold-p" "italic-p" "underline" "inverse-p" "frame"))
                nil [52207 53152])
            ("read-face-and-attribute" function (:arguments ("attribute" "frame")) nil [53154 53943])
            ("list-faces-sample-text" variable
               (:constant-flag t
                :default-value "abcdefghijklmnopqrstuvwxyz ABCDEFGHIJKLMNOPQRSTUVWXYZ")
                nil [54114 54277])
            ("help-xref-stack" variable nil nil [54406 54430])
            ("list-faces-display" function
               (:user-visible-flag t
                :arguments ("regexp"))
                nil [54431 57466])
            ("describe-face" function
               (:user-visible-flag t
                :arguments ("face" "frame"))
                nil [57469 61586])
            ("face-attr-construct" function (:arguments ("face" "_frame")) nil [61864 62454])
            ("face-spec-set-match-display" function (:arguments ("display" "frame")) nil [62457 64259])
            ("face-spec-choose" function (:arguments ("spec" "frame" "no-match-retval")) nil [64262 65683])
            ("face--attributes-unspecified" variable
               (:constant-flag t
                :default-value (apply (quote append) (mapcar (lambda (x) (list (car x) (quote unspecified))) face-attribute-name-alist)))
                nil [65863 66022])
            ("face-spec-reset-face" function (:arguments ("face" "frame")) nil [66024 67097])
            ("face-spec-set" function (:arguments ("face" "spec" "spec-type")) nil [67099 69053])
            ("face-spec-recalc" function (:arguments ("face" "frame")) nil [69055 70720])
            ("face-spec-set-2" function (:arguments ("face" "frame" "spec")) nil [70722 71049])
            ("face-attr-match-p" function (:arguments ("face" "attrs" "frame")) nil [71051 72125])
            ("face-spec-match-p" function (:arguments ("face" "spec" "frame")) nil [72127 72322])
            ("face-default-spec" function (:arguments ("face")) nil [72324 72512])
            ("face-user-default-spec" function (:arguments ("face")) nil [72514 72797])
            ("defined-colors" function (:arguments ("frame")) nil [73055 73513])
            ("defalias" code nil nil [73514 73558])
            ("declare-function" code nil nil [73560 73630])
            ("color-defined-p" function (:arguments ("color" "frame")) nil [73632 74299])
            ("defalias" code nil nil [74300 74346])
            ("declare-function" code nil nil [74348 74415])
            ("color-values" function (:arguments ("color" "frame")) nil [74417 75336])
            ("defalias" code nil nil [75338 75378])
            ("declare-function" code nil nil [75380 75447])
            ("display-color-p" function (:arguments ("display")) nil [75449 75851])
            ("defalias" code nil nil [75852 75898])
            ("declare-function" code nil nil [75900 75970])
            ("display-grayscale-p" function (:arguments ("display")) nil [75972 76405])
            ("read-color" function
               (:user-visible-flag t
                :arguments ("prompt" "convert-to-RGB" "allow-empty-name" "msg"))
                nil [76407 79111])
            ("face-at-point" function (:arguments ("thing" "multiple")) nil [79113 80119])
            ("faces--attribute-at-point" function (:arguments ("attribute" "attribute-unnamed")) nil [80121 81654])
            ("foreground-color-at-point" function nil nil [81656 81814])
            ("background-color-at-point" function nil nil [81816 81974])
            ("declare-function" code nil nil [82145 82190])
            ("declare-function" code nil nil [82191 82284])
            ("declare-function" code nil nil [82285 82379])
            ("declare-function" code nil nil [82380 82434])
            ("x-display-name" variable nil nil [82435 82458])
            ("x-handle-named-frame-geometry" function (:arguments ("parameters")) nil [82460 83355])
            ("x-handle-reverse-video" function (:arguments ("frame" "parameters")) nil [83358 84364])
            ("declare-function" code nil nil [84366 84416])
            ("declare-function" code nil nil [84417 84483])
            ("x-create-frame-with-faces" function (:arguments ("parameters")) nil [84485 85686])
            ("face-set-after-frame-default" function (:arguments ("frame" "parameters")) nil [85688 87085])
            ("tty-handle-reverse-video" function (:arguments ("frame" "parameters")) nil [87087 87763])
            ("tty-create-frame-with-faces" function (:arguments ("parameters")) nil [87766 88525])
            ("tty-find-type" function (:arguments ("pred" "type")) nil [88527 89092])
            ("tty-setup-hook" variable nil nil [89094 89326])
            ("tty-run-terminal-initialization" function (:arguments ("frame" "type" "run-hook")) nil [89328 90901])
            ("tty-set-up-initial-frame-faces" function nil nil [91007 91164])
            ("basic-faces" customgroup (:user-visible-flag t) nil [91335 91410])
            ("default" variable
               (:default-value (quote ((t nil)))
                :type "face")
                nil [91412 91544])
            ("bold" variable
               (:default-value (quote ((t :weight bold)))
                :type "face")
                nil [91546 91625])
            ("italic" variable
               (:default-value (quote ((((supports :slant italic)) :slant italic) (((supports :underline t)) :underline t) (t :slant italic)))
                :type "face")
                nil [91627 91992])
            ("bold-italic" variable
               (:default-value (quote ((t :weight bold :slant italic)))
                :type "face")
                nil [91994 92101])
            ("underline" variable
               (:default-value (quote ((((supports :underline t)) :underline t) (((supports :weight bold)) :weight bold) (t :underline t)))
                :type "face")
                nil [92103 92293])
            ("fixed-pitch" variable
               (:default-value (quote ((t :family "Monospace")))
                :type "face")
                nil [92295 92399])
            ("fixed-pitch-serif" variable
               (:default-value (quote ((t :family "Monospace Serif")))
                :type "face")
                nil [92401 92529])
            ("variable-pitch" variable
               (:default-value (quote ((((type w32)) :family "Arial" :foundry "outline") (t :family "Sans Serif")))
                :type "face")
                nil [92531 93021])
            ("shadow" variable
               (:default-value (quote ((((class color grayscale) (min-colors 88) (background light)) :foreground "grey50") (((class color grayscale) (min-colors 88) (background dark)) :foreground "grey70") (((class color) (min-colors 8) (background light)) :foreground "green") (((class color) (min-colors 8) (background dark)) :foreground "yellow")))
                :type "face")
                nil [93023 93461])
            ("link" variable
               (:default-value (quote ((((class color) (min-colors 88) (background light)) :foreground "RoyalBlue3" :underline t) (((class color) (background light)) :foreground "blue" :underline t) (((class color) (min-colors 88) (background dark)) :foreground "cyan1" :underline t) (((class color) (background dark)) :foreground "cyan" :underline t) (t :inherit underline)))
                :type "face")
                nil [93463 93930])
            ("link-visited" variable
               (:default-value (quote ((default :inherit link) (((class color) (background light)) :foreground "magenta4") (((class color) (background dark)) :foreground "violet")))
                :type "face")
                nil [93932 94182])
            ("highlight" variable
               (:default-value (quote ((((class color) (min-colors 88) (background light)) :background "darkseagreen2") (((class color) (min-colors 88) (background dark)) :background "darkolivegreen") (((class color) (min-colors 16) (background light)) :background "darkseagreen2") (((class color) (min-colors 16) (background dark)) :background "darkolivegreen") (((class color) (min-colors 8)) :background "green" :foreground "black") (t :inverse-video t)))
                :type "face")
                nil [94184 94726])
            ("region" variable
               (:default-value (quote ((((class color) (min-colors 88) (background dark)) :background "blue3") (((class color) (min-colors 88) (background light) (type gtk)) :distant-foreground "gtk_selection_fg_color" :background "gtk_selection_bg_color") (((class color) (min-colors 88) (background light) (type ns)) :distant-foreground "ns_selection_fg_color" :background "ns_selection_bg_color") (((class color) (min-colors 88) (background light)) :background "lightgoldenrod2") (((class color) (min-colors 16) (background dark)) :background "blue3") (((class color) (min-colors 16) (background light)) :background "lightgoldenrod2") (((class color) (min-colors 8)) :background "blue" :foreground "white") (((type tty) (class mono)) :inverse-video t) (t :background "gray")))
                :type "face")
                nil [94888 95814])
            ("secondary-selection" variable
               (:default-value (quote ((((class color) (min-colors 88) (background light)) :background "yellow1") (((class color) (min-colors 88) (background dark)) :background "SkyBlue4") (((class color) (min-colors 16) (background light)) :background "yellow") (((class color) (min-colors 16) (background dark)) :background "SkyBlue4") (((class color) (min-colors 8)) :background "cyan" :foreground "black") (t :inverse-video t)))
                :type "face")
                nil [95816 96364])
            ("trailing-whitespace" variable
               (:default-value (quote ((((class color) (background light)) :background "red1") (((class color) (background dark)) :background "red1") (t :inverse-video t)))
                :type "face")
                nil [96366 96643])
            ("escape-glyph" variable
               (:default-value (quote ((((background dark)) :foreground "cyan") (((type pc)) :foreground "magenta") (t :foreground "brown")))
                :type "face")
                nil [96645 97075])
            ("nobreak-space" variable
               (:default-value (quote ((((class color) (min-colors 88)) :inherit escape-glyph :underline t) (((class color) (min-colors 8)) :background "magenta") (t :inverse-video t)))
                :type "face")
                nil [97077 97337])
            ("mode-line-faces" customgroup (:user-visible-flag t) nil [97339 97456])
            ("mode-line" variable
               (:default-value (quote ((((class color) (min-colors 88)) :box (:line-width -1 :style released-button) :background "grey75" :foreground "black") (t :inverse-video t)))
                :type "face")
                nil [97458 97754])
            ("mode-line-inactive" variable
               (:default-value (quote ((default :inherit mode-line) (((class color) (min-colors 88) (background light)) :weight light :box (:line-width -1 :color "grey75" :style nil) :foreground "grey20" :background "grey90") (((class color) (min-colors 88) (background dark)) :weight light :box (:line-width -1 :color "grey40" :style nil) :foreground "grey80" :background "grey30")))
                :type "face")
                nil [97756 98294])
            ("define-obsolete-face-alias" code nil nil [98295 98369])
            ("mode-line-highlight" variable
               (:default-value (quote ((((class color) (min-colors 88)) :box (:line-width 2 :color "grey40" :style released-button)) (t :inherit highlight)))
                :type "face")
                nil [98371 98645])
            ("define-obsolete-face-alias" code nil nil [98646 98722])
            ("mode-line-emphasis" variable
               (:default-value (quote ((t (:weight bold))))
                :type "face")
                nil [98724 98967])
            ("mode-line-buffer-id" variable
               (:default-value (quote ((t (:weight bold))))
                :type "face")
                nil [98969 99152])
            ("define-obsolete-face-alias" code nil nil [99153 99229])
            ("header-line" variable
               (:default-value (quote ((default :inherit mode-line) (((type tty)) :inverse-video nil :underline t) (((class color grayscale) (background light)) :background "grey90" :foreground "grey20" :box nil) (((class color grayscale) (background dark)) :background "grey20" :foreground "grey90" :box nil) (((class mono) (background light)) :background "white" :foreground "black" :inverse-video nil :box nil :underline t) (((class mono) (background dark)) :background "black" :foreground "white" :inverse-video nil :box nil :underline t)))
                :type "face")
                nil [99231 100567])
            ("vertical-border" variable
               (:default-value (quote ((((type tty)) :inherit mode-line-inactive)))
                :type "face")
                nil [100569 100734])
            ("window-divider" variable
               (:default-value (quote ((t :foreground "gray60")))
                :type "face")
                nil [100736 101204])
            ("window-divider-first-pixel" variable
               (:default-value (quote ((t :foreground "gray80")))
                :type "face")
                nil [101206 101623])
            ("window-divider-last-pixel" variable
               (:default-value (quote ((t :foreground "gray40")))
                :type "face")
                nil [101625 102038])
            ("minibuffer-prompt" variable
               (:default-value (quote ((((background dark)) :foreground "cyan") (((type pc)) :foreground "magenta") (t :foreground "medium blue")))
                :type "face")
                nil [102040 102535])
            ("setq" code nil nil [102537 102648])
            ("fringe" variable
               (:default-value (quote ((((class color) (background light)) :background "grey95") (((class color) (background dark)) :background "grey10") (t :background "gray")))
                :type "face")
                nil [102650 102962])
            ("scroll-bar" variable
               (:default-value (quote ((t nil)))
                :type "face")
                nil [102964 103102])
            ("border" variable
               (:default-value (quote ((t nil)))
                :type "face")
                nil [103104 103233])
            ("cursor" variable
               (:default-value (quote ((((background light)) :background "black") (((background dark)) :background "white")))
                :type "face")
                nil [103235 103685])
            ("put" code nil nil [103687 103719])
            ("mouse" variable
               (:default-value (quote ((t nil)))
                :type "face")
                nil [103721 103847])
            ("tool-bar" variable
               (:default-value (quote ((default :box (:line-width 1 :style released-button) :foreground "black") (((type x w32 ns) (class color)) :background "grey75") (((type x) (class mono)) :background "grey")))
                :type "face")
                nil [103849 104139])
            ("menu" variable
               (:default-value (quote ((((type tty)) :inverse-video t) (((type x-toolkit))) (t :inverse-video t)))
                :type "face")
                nil [104141 104385])
            ("help-argument-name" variable
               (:default-value (quote ((t :inherit italic)))
                :type "face")
                nil [104387 104509])
            ("glyphless-char" variable
               (:default-value (quote ((((type tty)) :inherit underline) (((type pc)) :inherit escape-glyph) (t :height 0.6)))
                :type "face")
                nil [104511 104785])
            ("error" variable
               (:default-value (quote ((default :weight bold) (((class color) (min-colors 88) (background light)) :foreground "Red1") (((class color) (min-colors 88) (background dark)) :foreground "Pink") (((class color) (min-colors 16) (background light)) :foreground "Red1") (((class color) (min-colors 16) (background dark)) :foreground "Pink") (((class color) (min-colors 8)) :foreground "red") (t :inverse-video t)))
                :type "face")
                nil [104787 105317])
            ("warning" variable
               (:default-value (quote ((default :weight bold) (((class color) (min-colors 16)) :foreground "DarkOrange") (((class color)) :foreground "yellow")))
                :type "face")
                nil [105319 105553])
            ("success" variable
               (:default-value (quote ((default :weight bold) (((class color) (min-colors 16) (background light)) :foreground "ForestGreen") (((class color) (min-colors 88) (background dark)) :foreground "Green1") (((class color) (min-colors 16) (background dark)) :foreground "Green") (((class color)) :foreground "green")))
                :type "face")
                nil [105555 105974])
            ("tty-menu-enabled-face" variable
               (:default-value (quote ((t :foreground "yellow" :background "blue" :weight bold)))
                :type "face")
                nil [106000 106172])
            ("tty-menu-disabled-face" variable
               (:default-value (quote ((((class color) (min-colors 16)) :foreground "lightgray" :background "blue") (t :foreground "white" :background "blue")))
                :type "face")
                nil [106174 106420])
            ("tty-menu-selected-face" variable
               (:default-value (quote ((t :background "red")))
                :type "face")
                nil [106422 106569])
            ("paren-showing-faces" customgroup (:user-visible-flag t) nil [106571 106706])
            ("show-paren-match" variable
               (:default-value (quote ((((class color) (background light)) :background "turquoise") (((class color) (background dark)) :background "steelblue3") (((background dark) (min-colors 4)) :background "grey50") (((background light) (min-colors 4)) :background "gray") (t :inherit underline)))
                :type "face")
                nil [106708 107174])
            ("show-paren-mismatch" variable
               (:default-value (quote ((((class color)) (:foreground "white" :background "purple")) (t (:inverse-video t))))
                :type "face")
                nil [107176 107367])
            ("x-font-regexp" variable nil nil [107743 107769])
            ("x-font-regexp-head" variable nil nil [107770 107801])
            ("x-font-regexp-weight" variable nil nil [107802 107835])
            ("x-font-regexp-slant" variable nil nil [107836 107868])
            ("x-font-regexp-weight-subnum" variable
               (:constant-flag t
                :default-value 1)
                nil [107870 107910])
            ("x-font-regexp-slant-subnum" variable
               (:constant-flag t
                :default-value 2)
                nil [107911 107950])
            ("x-font-regexp-swidth-subnum" variable
               (:constant-flag t
                :default-value 3)
                nil [107951 107991])
            ("x-font-regexp-adstyle-subnum" variable
               (:constant-flag t
                :default-value 4)
                nil [107992 108033])
            ("let" code nil nil [108116 109334])
            ("x-resolve-font-name" function (:arguments ("pattern" "face" "frame")) nil [109337 110451])
            ("font-list-limit" variable (:default-value 100) nil [110453 110568])
            ("make-obsolete-variable" code nil nil [110569 110621])
            ("faces" package nil nil [110623 110639]))          
      :file "faces.el.gz"
      :pointmax 110664
      :fsize 28077
      :lastmodtime '(22966 58805 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [1227 1244])
            ("cl-defstruct" code nil nil [1295 1627])
            ("cl-defun" code nil nil [1629 2250])
            ("register-alist" variable nil nil [2252 2965])
            ("register" customgroup (:user-visible-flag t) nil [2967 3053])
            ("register-separator" variable nil nil [3055 3451])
            ("register-preview-delay" variable (:default-value 1) nil [3453 3779])
            ("get-register" function (:arguments ("register")) nil [3781 3920])
            ("set-register" function (:arguments ("register" "value")) nil [3922 4162])
            ("register-describe-oneline" function (:arguments ("c")) nil [4164 4483])
            ("register-preview-default" function (:arguments ("r")) nil [4485 4685])
            ("register-preview-function" variable (:default-value (function register-preview-default)) nil [4687 4891])
            ("register-preview" function (:arguments ("buffer" "show-empty")) nil [4893 5535])
            ("register-read-with-preview" function (:arguments ("prompt")) nil [5537 6795])
            ("point-to-register" function
               (:user-visible-flag t
                :arguments ("register" "arg"))
                nil [6797 7484])
            ("window-configuration-to-register" function
               (:user-visible-flag t
                :arguments ("register" "_arg"))
                nil [7486 8130])
            ("set-advertised-calling-convention" code nil nil [8192 8287])
            ("frame-configuration-to-register" function
               (:user-visible-flag t
                :arguments ("register" "_arg"))
                nil [8289 8921])
            ("set-advertised-calling-convention" code nil nil [8983 9077])
            ("make-obsolete" code nil nil [9079 9156])
            ("defalias" code nil nil [9158 9205])
            ("jump-to-register" function
               (:user-visible-flag t
                :arguments ("register" "delete"))
                nil [9206 11249])
            ("register-swap-out" function nil nil [11251 11604])
            ("number-to-register" function
               (:user-visible-flag t
                :arguments ("number" "register"))
                nil [11606 12307])
            ("increment-register" function
               (:user-visible-flag t
                :arguments ("prefix" "register"))
                nil [12309 13167])
            ("view-register" function
               (:user-visible-flag t
                :arguments ("register"))
                nil [13169 13648])
            ("list-registers" function (:user-visible-flag t) nil [13650 14027])
            ("describe-register-1" function (:arguments ("register" "verbose")) nil [14029 16230])
            ("insert-register" function
               (:user-visible-flag t
                :arguments ("register" "arg"))
                nil [16232 17439])
            ("copy-to-register" function
               (:user-visible-flag t
                :arguments ("register" "start" "end" "delete-flag" "region"))
                nil [17441 18412])
            ("append-to-register" function
               (:user-visible-flag t
                :arguments ("register" "start" "end" "delete-flag"))
                nil [18414 19420])
            ("prepend-to-register" function
               (:user-visible-flag t
                :arguments ("register" "start" "end" "delete-flag"))
                nil [19422 20432])
            ("copy-rectangle-to-register" function
               (:user-visible-flag t
                :arguments ("register" "start" "end" "delete-flag"))
                nil [20434 21370])
            ("register" package nil nil [21372 21391]))          
      :file "register.el.gz"
      :pointmax 21418
      :fsize 5933
      :lastmodtime '(22966 58805 0 0)
      :unmatched-syntax '((close-paren 1244 . 1245) (symbol 1209 . 1226) (open-paren 1208 . 1209)))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("font-lock-keywords" variable nil nil [1117 1144])
            ("backup" customgroup (:user-visible-flag t) nil [1146 1217])
            ("find-file" customgroup (:user-visible-flag t) nil [1219 1278])
            ("delete-auto-save-files" variable (:default-value t) nil [1281 1531])
            ("directory-abbrev-alist" variable nil nil [1533 2545])
            ("make-backup-files" variable (:default-value t) nil [2547 3470])
            ("backup-inhibited" variable nil nil [3571 3763])
            ("put" code nil nil [3764 3806])
            ("backup-by-copying" variable nil nil [3808 3986])
            ("backup-by-copying-when-linked" variable nil nil [3988 4281])
            ("backup-by-copying-when-mismatch" variable (:default-value t) nil [4283 4771])
            ("put" code nil nil [4772 4829])
            ("backup-by-copying-when-privileged-mismatch" variable (:default-value 200) nil [4831 5454])
            ("backup-enable-predicate" variable (:default-value (quote normal-backup-enable-predicate)) nil [5456 5675])
            ("buffer-offer-save" variable nil nil [5677 5896])
            ("make-variable-buffer-local" code nil nil [5897 5944])
            ("put" code nil nil [5945 5988])
            ("find-file-existing-other-name" variable (:default-value t) nil [5990 6283])
            ("find-file-visit-truename" variable nil nil [6285 6657])
            ("put" code nil nil [6658 6720])
            ("revert-without-query" variable nil nil [6722 7087])
            ("buffer-file-number" variable nil nil [7089 7358])
            ("make-variable-buffer-local" code nil nil [7359 7407])
            ("put" code nil nil [7408 7452])
            ("buffer-file-numbers-unique" variable (:default-value (not (memq system-type (quote (windows-nt))))) nil [7454 7599])
            ("buffer-file-read-only" variable nil nil [7601 7691])
            ("make-variable-buffer-local" code nil nil [7692 7743])
            ("small-temporary-file-directory" variable (:default-value (if (eq system-type (quote ms-dos)) (getenv "TMPDIR"))) nil [7745 8189])
            ("null-device" variable (:default-value (purecopy "/dev/null")) nil [8257 8326])
            ("declare-function" code nil nil [8328 8378])
            ("declare-function" code nil nil [8379 8428])
            ("declare-function" code nil nil [8429 8515])
            ("declare-function" code nil nil [8516 8583])
            ("declare-function" code nil nil [8584 8656])
            ("declare-function" code nil nil [8657 8713])
            ("declare-function" code nil nil [8714 8773])
            ("file-name-invalid-regexp" variable (:default-value (cond ((and (eq system-type (quote ms-dos)) (not (msdos-long-file-names))) (purecopy (concat "^\\([^A-Z[-`a-z]\\|..+\\)?:\\|" "[+, ;=|<>\"?*]\\|\\[\\|\\]\\|" "[ -]\\|" "\\(/\\.\\.?[^/]\\)\\|" "\\(/[^/.]+\\.[^/.]*\\.\\)"))) ((memq system-type (quote (ms-dos windows-nt cygwin))) (purecopy (concat "^\\([^A-Z[-`a-z]\\|..+\\)?:\\|" "[|<>\"?* -]"))) (t (purecopy "[ ]")))) nil [8775 9448])
            ("file-precious-flag" variable nil nil [9450 10290])
            ("break-hardlink-on-save" variable nil nil [10292 11047])
            ("version-control" variable nil nil [11049 11419])
            ("put" code nil nil [11420 11516])
            ("dired-kept-versions" variable (:default-value 2) nil [11518 11658])
            ("delete-old-versions" variable nil nil [11660 11926])
            ("kept-old-versions" variable (:default-value 2) nil [11928 12067])
            ("put" code nil nil [12068 12123])
            ("kept-new-versions" variable (:default-value 2) nil [12125 12302])
            ("put" code nil nil [12303 12358])
            ("require-final-newline" variable nil nil [12360 13131])
            ("mode-require-final-newline" variable (:default-value t) nil [13133 14268])
            ("auto-save-default" variable (:default-value t) nil [14270 14412])
            ("auto-save-file-name-transforms" variable (:default-value (\` (("\\`/[^/]*:\\([^/]*/\\)*\\([^/]*\\)\\'" (\, (concat temporary-file-directory "\\2")) t)))) nil [14414 15842])
            ("save-abbrevs" variable (:default-value t) nil [15844 16055])
            ("find-file-run-dired" variable (:default-value t) nil [16057 16254])
            ("find-directory-functions" variable (:default-value (quote (cvs-dired-noselect dired-noselect))) nil [16256 16584])
            ("file-name-at-point-functions" variable (:default-value (quote (ffap-guess-file-name-at-point))) nil [16645 16973])
            ("define-obsolete-variable-alias" code nil nil [17081 17182])
            ("find-file-not-found-functions" variable nil nil [17183 17484])
            ("define-obsolete-variable-alias" code nil nil [17582 17654])
            ("find-file-hook" variable nil nil [17655 17932])
            ("define-obsolete-variable-alias" code nil nil [17934 18013])
            ("write-file-functions" variable nil nil [18014 18818])
            ("put" code nil nil [18819 18865])
            ("local-write-file-hooks" variable nil nil [18867 18902])
            ("make-variable-buffer-local" code nil nil [18903 18955])
            ("put" code nil nil [18956 19004])
            ("make-obsolete-variable" code nil nil [19005 19082])
            ("define-obsolete-variable-alias" code nil nil [19084 19175])
            ("write-contents-functions" variable nil nil [19176 19960])
            ("make-variable-buffer-local" code nil nil [19961 20015])
            ("enable-local-variables" variable (:default-value t) nil [20017 21269])
            ("enable-dir-local-variables" variable (:default-value t) nil [21271 21492])
            ("local-enable-local-variables" variable (:default-value t) nil [22855 23240])
            ("enable-local-eval" variable (:default-value (quote maybe)) nil [23242 23633])
            ("view-read-only" variable nil nil [23635 23985])
            ("file-name-history" variable nil nil [23987 24170])
            ("save-silently" variable nil nil [24172 24327])
            ("put" code nil nil [24331 24385])
            ("ange-ftp-completion-hook-function" function (:arguments ("op" "args")) nil [24386 24992])
            ("declare-function" code nil nil [24994 25066])
            ("declare-function" code nil nil [25067 25139])
            ("convert-standard-filename" function (:arguments ("filename")) nil [25141 26394])
            ("read-directory-name" function (:arguments ("prompt" "dir" "default-dirname" "mustmatch" "initial")) nil [26396 27517])
            ("pwd" function
               (:user-visible-flag t
                :arguments ("insert"))
                nil [27521 27789])
            ("cd-path" variable nil nil [27791 27921])
            ("parse-colon-path" function (:arguments ("search-path")) nil [27923 28542])
            ("cd-absolute" function (:arguments ("dir")) nil [28544 29449])
            ("cd" function
               (:user-visible-flag t
                :arguments ("dir"))
                nil [29451 31278])
            ("directory-name-p" function (:arguments ("name")) nil [31280 31597])
            ("directory-files-recursively" function (:arguments ("dir" "regexp" "include-directories")) nil [31599 32994])
            ("module-file-suffix" variable nil nil [32996 33023])
            ("load-file" function
               (:user-visible-flag t
                :arguments ("file"))
                nil [33025 33493])
            ("locate-file" function (:arguments ("filename" "path" "suffixes" "predicate")) nil [33495 34872])
            ("locate-file-completion-table" function (:arguments ("dirs" "suffixes" "string" "pred" "action")) nil [34874 37836])
            ("locate-file-completion" function (:arguments ("string" "path-and-suffixes" "action")) nil [37838 38246])
            ("locate-dominating-stop-dir-regexp" variable (:default-value (purecopy "\\`\\(?:[\\/][\\/][^\\/]+[\\/]\\|/\\(?:net\\|afs\\|\\.\\.\\.\\)/\\)\\'")) nil [38248 38852])
            ("locate-dominating-file" function (:arguments ("file" "name")) nil [40405 42613])
            ("user-emacs-directory-warning" variable (:default-value t) nil [42615 42817])
            ("locate-user-emacs-file" function (:arguments ("new-name" "old-name")) nil [42819 44505])
            ("executable-find" function (:arguments ("command")) nil [44508 44816])
            ("load-library" function
               (:user-visible-flag t
                :arguments ("library"))
                nil [44818 45513])
            ("file-remote-p" function (:arguments ("file" "identification" "connected")) nil [45515 47267])
            ("remote-shell-program" variable (:default-value (purecopy (let ((list (quote ("ssh" "remsh" "rcmd" "rsh")))) (while (and list (not (executable-find (car list))) (setq list (cdr list)))) (or (car list) "ssh")))) nil [47566 48285])
            ("remote-file-name-inhibit-cache" variable (:default-value 10) nil [48287 49506])
            ("file-local-copy" function (:arguments ("file")) nil [49508 49897])
            ("file-truename" function (:arguments ("filename" "counter" "prev-dirs")) nil [49899 54795])
            ("file-chase-links" function (:arguments ("filename" "limit")) nil [54797 56200])
            ("file-size-human-readable" function (:arguments ("file-size" "flavor")) nil [56332 57449])
            ("make-temp-file" function (:arguments ("prefix" "dir-flag" "suffix")) nil [57451 58753])
            ("recode-file-name" function
               (:user-visible-flag t
                :arguments ("file" "coding" "new-coding" "ok-if-already-exists"))
                nil [58755 60992])
            ("confirm-nonexistent-file-or-buffer" variable (:default-value (quote after-completion)) nil [60995 61608])
            ("confirm-nonexistent-file-or-buffer" function nil nil [61610 62051])
            ("minibuffer-with-setup-hook" function (:arguments ("fun" "body")) nil [62053 63296])
            ("find-file-read-args" function (:arguments ("prompt" "mustmatch")) nil [63298 63412])
            ("find-file" function
               (:user-visible-flag t
                :arguments ("filename" "wildcards"))
                nil [63414 64659])
            ("find-file-other-window" function
               (:user-visible-flag t
                :arguments ("filename" "wildcards"))
                nil [64661 65592])
            ("find-file-other-frame" function
               (:user-visible-flag t
                :arguments ("filename" "wildcards"))
                nil [65594 66519])
            ("find-file-existing" function
               (:user-visible-flag t
                :arguments ("filename"))
                nil [66521 66956])
            ("find-file--read-only" function (:arguments ("fun" "filename" "wildcards")) nil [66958 67385])
            ("find-file-read-only" function
               (:user-visible-flag t
                :arguments ("filename" "wildcards"))
                nil [67387 67768])
            ("find-file-read-only-other-window" function
               (:user-visible-flag t
                :arguments ("filename" "wildcards"))
                nil [67770 68221])
            ("find-file-read-only-other-frame" function
               (:user-visible-flag t
                :arguments ("filename" "wildcards"))
                nil [68223 68669])
            ("find-alternate-file-other-window" function
               (:user-visible-flag t
                :arguments ("filename" "wildcards"))
                nil [68671 69620])
            ("kill-buffer-hook" variable nil nil [69681 69921])
            ("find-alternate-file" function
               (:user-visible-flag t
                :arguments ("filename" "wildcards"))
                nil [69923 72976])
            ("create-file-buffer" function (:arguments ("filename")) nil [73101 73781])
            ("generate-new-buffer" function (:arguments ("name")) nil [73783 73988])
            ("automount-dir-prefix" variable (:default-value (purecopy "^/tmp_mnt/")) nil [73990 74142])
            ("make-obsolete-variable" code nil nil [74143 74220])
            ("abbreviated-home-dir" variable nil nil [74222 74396])
            ("abbreviate-file-name" function (:arguments ("filename")) nil [74398 77697])
            ("find-buffer-visiting" function (:arguments ("filename" "predicate")) nil [77699 79626])
            ("find-file-wildcards" variable (:default-value t) nil [79629 79876])
            ("find-file-suppress-same-file-warnings" variable nil nil [79878 80204])
            ("large-file-warning-threshold" variable (:default-value 10000000) nil [80206 80485])
            ("out-of-memory-warning-percentage" variable nil nil [80487 80870])
            ("abort-if-file-too-large" function (:arguments ("size" "op-type" "filename")) nil [80872 81364])
            ("warn-maybe-out-of-memory" function (:arguments ("size")) nil [81366 82204])
            ("files--message" function (:arguments ("format" "args")) nil [82206 82473])
            ("find-file-noselect" function (:arguments ("filename" "nowarn" "rawfile" "wildcards")) nil [82475 89545])
            ("find-file-noselect-1" function (:arguments ("buf" "filename" "nowarn" "rawfile" "truename" "number")) nil [89547 92041])
            ("insert-file-contents-literally" function (:arguments ("filename" "visit" "beg" "end" "replace")) nil [92044 93065])
            ("insert-file-1" function (:arguments ("filename" "insert-func")) nil [93067 93759])
            ("insert-file-literally" function (:arguments ("filename")) nil [93761 94244])
            ("find-file-literally" variable nil nil [94246 94453])
            ("put" code nil nil [94454 94499])
            ("find-file-literally" function
               (:user-visible-flag t
                :arguments ("filename"))
                nil [94501 95595])
            ("after-find-file" function (:arguments ("error" "warn" "noauto" "_after-find-file-from-revert-buffer" "nomodes")) nil [95598 98938])
            ("define-obsolete-function-alias" code nil nil [98940 99015])
            ("normal-mode" function
               (:user-visible-flag t
                :arguments ("find-file"))
                nil [99017 100638])
            ("auto-mode-case-fold" variable (:default-value t) nil [100640 101078])
            ("auto-mode-alist" variable (:default-value (mapcar (lambda (elt) (cons (purecopy (car elt)) (cdr elt))) (\` (("\\.[sx]?html?\\(\\.[a-zA-Z_]+\\)?\\'" . html-mode) ("\\.svgz?\\'" . image-mode) ("\\.svgz?\\'" . xml-mode) ("\\.x[bp]m\\'" . image-mode) ("\\.x[bp]m\\'" . c-mode) ("\\.p[bpgn]m\\'" . image-mode) ("\\.tiff?\\'" . image-mode) ("\\.gif\\'" . image-mode) ("\\.png\\'" . image-mode) ("\\.jpe?g\\'" . image-mode) ("\\.te?xt\\'" . text-mode) ("\\.[tT]e[xX]\\'" . tex-mode) ("\\.ins\\'" . tex-mode) ("\\.ltx\\'" . latex-mode) ("\\.dtx\\'" . doctex-mode) ("\\.org\\'" . org-mode) ("\\.el\\'" . emacs-lisp-mode) ("Project\\.ede\\'" . emacs-lisp-mode) ("\\.\\(scm\\|stk\\|ss\\|sch\\)\\'" . scheme-mode) ("\\.l\\'" . lisp-mode) ("\\.li?sp\\'" . lisp-mode) ("\\.[fF]\\'" . fortran-mode) ("\\.for\\'" . fortran-mode) ("\\.p\\'" . pascal-mode) ("\\.pas\\'" . pascal-mode) ("\\.\\(dpr\\|DPR\\)\\'" . delphi-mode) ("\\.ad[abs]\\'" . ada-mode) ("\\.ad[bs].dg\\'" . ada-mode) ("\\.\\([pP]\\([Llm]\\|erl\\|od\\)\\|al\\)\\'" . perl-mode) ("Imakefile\\'" . makefile-imake-mode) ("Makeppfile\\(?:\\.mk\\)?\\'" . makefile-makepp-mode) ("\\.makepp\\'" . makefile-makepp-mode) (\,@ (if (memq system-type (quote (berkeley-unix darwin))) (quote (("\\.mk\\'" . makefile-bsdmake-mode) ("\\.make\\'" . makefile-bsdmake-mode) ("GNUmakefile\\'" . makefile-gmake-mode) ("[Mm]akefile\\'" . makefile-bsdmake-mode))) (quote (("\\.mk\\'" . makefile-gmake-mode) ("\\.make\\'" . makefile-gmake-mode) ("[Mm]akefile\\'" . makefile-gmake-mode))))) ("\\.am\\'" . makefile-automake-mode) ("\\.texinfo\\'" . texinfo-mode) ("\\.te?xi\\'" . texinfo-mode) ("\\.[sS]\\'" . asm-mode) ("\\.asm\\'" . asm-mode) ("\\.css\\'" . css-mode) ("\\.mixal\\'" . mixal-mode) ("\\.gcov\\'" . compilation-mode) ("/\\.[a-z0-9-]*gdbinit" . gdb-script-mode) ("-gdb\\.gdb" . gdb-script-mode) ("[cC]hange\\.?[lL]og?\\'" . change-log-mode) ("[cC]hange[lL]og[-.][0-9]+\\'" . change-log-mode) ("\\$CHANGE_LOG\\$\\.TXT" . change-log-mode) ("\\.scm\\.[0-9]*\\'" . scheme-mode) ("\\.[ckz]?sh\\'\\|\\.shar\\'\\|/\\.z?profile\\'" . sh-mode) ("\\.bash\\'" . sh-mode) ("\\(/\\|\\`\\)\\.\\(bash_\\(profile\\|history\\|log\\(in\\|out\\)\\)\\|z?log\\(in\\|out\\)\\)\\'" . sh-mode) ("\\(/\\|\\`\\)\\.\\(shrc\\|[kz]shrc\\|bashrc\\|t?cshrc\\|esrc\\)\\'" . sh-mode) ("\\(/\\|\\`\\)\\.\\([kz]shenv\\|xinitrc\\|startxrc\\|xsession\\)\\'" . sh-mode) ("\\.m?spec\\'" . sh-mode) ("\\.m[mes]\\'" . nroff-mode) ("\\.man\\'" . nroff-mode) ("\\.sty\\'" . latex-mode) ("\\.cl[so]\\'" . latex-mode) ("\\.bbl\\'" . latex-mode) ("\\.bib\\'" . bibtex-mode) ("\\.bst\\'" . bibtex-style-mode) ("\\.sql\\'" . sql-mode) ("\\.m[4c]\\'" . m4-mode) ("\\.mf\\'" . metafont-mode) ("\\.mp\\'" . metapost-mode) ("\\.vhdl?\\'" . vhdl-mode) ("\\.article\\'" . text-mode) ("\\.letter\\'" . text-mode) ("\\.i?tcl\\'" . tcl-mode) ("\\.exp\\'" . tcl-mode) ("\\.itk\\'" . tcl-mode) ("\\.icn\\'" . icon-mode) ("\\.sim\\'" . simula-mode) ("\\.mss\\'" . scribe-mode) ("\\.f9[05]\\'" . f90-mode) ("\\.f0[38]\\'" . f90-mode) ("\\.indent\\.pro\\'" . fundamental-mode) ("\\.\\(pro\\|PRO\\)\\'" . idlwave-mode) ("\\.srt\\'" . srecode-template-mode) ("\\.prolog\\'" . prolog-mode) ("\\.tar\\'" . tar-mode) ("\\.\\(arc\\|zip\\|lzh\\|lha\\|zoo\\|[jew]ar\\|xpi\\|rar\\|7z\\|ARC\\|ZIP\\|LZH\\|LHA\\|ZOO\\|[JEW]AR\\|XPI\\|RAR\\|7Z\\)\\'" . archive-mode) ("\\.oxt\\'" . archive-mode) ("\\.\\(deb\\|[oi]pk\\)\\'" . archive-mode) ("\\`/tmp/Re" . text-mode) ("/Message[0-9]*\\'" . text-mode) ("\\`/tmp/fol/" . text-mode) ("\\.oak\\'" . scheme-mode) ("\\.sgml?\\'" . sgml-mode) ("\\.x[ms]l\\'" . xml-mode) ("\\.dbk\\'" . xml-mode) ("\\.dtd\\'" . sgml-mode) ("\\.ds\\(ss\\)?l\\'" . dsssl-mode) ("\\.jsm?\\'" . javascript-mode) ("\\.json\\'" . javascript-mode) ("\\.[ds]?vh?\\'" . verilog-mode) ("\\.by\\'" . bovine-grammar-mode) ("\\.wy\\'" . wisent-grammar-mode) ("[:/\\]\\..*\\(emacs\\|gnus\\|viper\\)\\'" . emacs-lisp-mode) ("\\`\\..*emacs\\'" . emacs-lisp-mode) ("[:/]_emacs\\'" . emacs-lisp-mode) ("/crontab\\.X*[0-9]+\\'" . shell-script-mode) ("\\.ml\\'" . lisp-mode) ("\\.ld[si]?\\'" . ld-script-mode) ("ld\\.?script\\'" . ld-script-mode) ("\\.xs\\'" . c-mode) ("\\.x[abdsru]?[cnw]?\\'" . ld-script-mode) ("\\.zone\\'" . dns-mode) ("\\.soa\\'" . dns-mode) ("\\.asd\\'" . lisp-mode) ("\\.\\(asn\\|mib\\|smi\\)\\'" . snmp-mode) ("\\.\\(as\\|mi\\|sm\\)2\\'" . snmpv2-mode) ("\\.\\(diffs?\\|patch\\|rej\\)\\'" . diff-mode) ("\\.\\(dif\\|pat\\)\\'" . diff-mode) ("\\.[eE]?[pP][sS]\\'" . ps-mode) ("\\.\\(?:PDF\\|DVI\\|OD[FGPST]\\|DOCX?\\|XLSX?\\|PPTX?\\|pdf\\|djvu\\|dvi\\|od[fgpst]\\|docx?\\|xlsx?\\|pptx?\\)\\'" . doc-view-mode-maybe) ("configure\\.\\(ac\\|in\\)\\'" . autoconf-mode) ("\\.s\\(v\\|iv\\|ieve\\)\\'" . sieve-mode) ("BROWSE\\'" . ebrowse-tree-mode) ("\\.ebrowse\\'" . ebrowse-tree-mode) ("#\\*mail\\*" . mail-mode) ("\\.g\\'" . antlr-mode) ("\\.mod\\'" . m2-mode) ("\\.ses\\'" . ses-mode) ("\\.docbook\\'" . sgml-mode) ("\\.com\\'" . dcl-mode) ("/config\\.\\(?:bat\\|log\\)\\'" . fundamental-mode) ("\\.\\(?:[iI][nN][iI]\\|[lL][sS][tT]\\|[rR][eE][gG]\\|[sS][yY][sS]\\)\\'" . conf-mode) ("\\.\\(?:desktop\\|la\\)\\'" . conf-unix-mode) ("\\.ppd\\'" . conf-ppd-mode) ("java.+\\.conf\\'" . conf-javaprop-mode) ("\\.properties\\(?:\\.[a-zA-Z0-9._-]+\\)?\\'" . conf-javaprop-mode) ("\\`/etc/\\(?:DIR_COLORS\\|ethers\\|.?fstab\\|.*hosts\\|lesskey\\|login\\.?de\\(?:fs\\|vperm\\)\\|magic\\|mtab\\|pam\\.d/.*\\|permissions\\(?:\\.d/.+\\)?\\|protocols\\|rpc\\|services\\)\\'" . conf-space-mode) ("\\`/etc/\\(?:acpid?/.+\\|aliases\\(?:\\.d/.+\\)?\\|default/.+\\|group-?\\|hosts\\..+\\|inittab\\|ksysguarddrc\\|opera6rc\\|passwd-?\\|shadow-?\\|sysconfig/.+\\)\\'" . conf-mode) ("[cC]hange[lL]og[-.][-0-9a-z]+\\'" . change-log-mode) ("/\\.?\\(?:gitconfig\\|gnokiirc\\|hgrc\\|kde.*rc\\|mime\\.types\\|wgetrc\\)\\'" . conf-mode) ("/\\.\\(?:enigma\\|gltron\\|gtk\\|hxplayer\\|net\\|neverball\\|qt/.+\\|realplayer\\|scummvm\\|sversion\\|sylpheed/.+\\|xmp\\)rc\\'" . conf-mode) ("/\\.\\(?:gdbtkinit\\|grip\\|orbital/.+txt\\|rhosts\\|tuxracer/options\\)\\'" . conf-mode) ("/\\.?X\\(?:default\\|resource\\|re\\)s\\>" . conf-xdefaults-mode) ("/X11.+app-defaults/\\|\\.ad\\'" . conf-xdefaults-mode) ("/X11.+locale/.+/Compose\\'" . conf-colon-mode) ("/X11.+locale/compose\\.dir\\'" . conf-javaprop-mode) ("\\.~?[0-9]+\\.[0-9][-.0-9]*~?\\'" nil t) ("\\.\\(?:orig\\|in\\|[bB][aA][kK]\\)\\'" nil t) ("[/.]c\\(?:on\\)?f\\(?:i?g\\)?\\(?:\\.[a-zA-Z0-9._-]+\\)?\\'" . conf-mode-maybe) ("\\.[1-9]\\'" . nroff-mode))))) nil [101080 112489])
            ("put" code nil nil [112490 112536])
            ("conf-mode-maybe" function nil nil [112538 112788])
            ("interpreter-mode-alist" variable (:default-value (mapcar (lambda (l) (cons (purecopy (car l)) (cdr l))) (quote (("\\(mini\\)?perl5?" . perl-mode) ("wishx?" . tcl-mode) ("tcl\\(sh\\)?" . tcl-mode) ("expect" . tcl-mode) ("octave" . octave-mode) ("scm" . scheme-mode) ("[acjkwz]sh" . sh-mode) ("r?bash2?" . sh-mode) ("dash" . sh-mode) ("mksh" . sh-mode) ("\\(dt\\|pd\\|w\\)ksh" . sh-mode) ("es" . sh-mode) ("i?tcsh" . sh-mode) ("oash" . sh-mode) ("rc" . sh-mode) ("rpm" . sh-mode) ("sh5?" . sh-mode) ("tail" . text-mode) ("more" . text-mode) ("less" . text-mode) ("pg" . text-mode) ("make" . makefile-gmake-mode) ("guile" . scheme-mode) ("clisp" . lisp-mode) ("emacs" . emacs-lisp-mode))))) nil [112790 114185])
            ("define-obsolete-variable-alias" code nil nil [114187 114300])
            ("inhibit-local-variables-regexps" variable (:default-value (mapcar (quote purecopy) (quote ("\\.tar\\'" "\\.t[bg]z\\'" "\\.arc\\'" "\\.zip\\'" "\\.lzh\\'" "\\.lha\\'" "\\.zoo\\'" "\\.[jew]ar\\'" "\\.xpi\\'" "\\.rar\\'" "\\.7z\\'" "\\.sx[dmicw]\\'" "\\.odt\\'" "\\.diff\\'" "\\.patch\\'" "\\.tiff?\\'" "\\.gif\\'" "\\.png\\'" "\\.jpe?g\\'")))) nil [114499 115359])
            ("define-obsolete-variable-alias" code nil nil [115361 115471])
            ("inhibit-local-variables-suffixes" variable nil nil [115473 115749])
            ("inhibit-local-variables-ignore-case" variable (:default-value t) nil [115821 115927])
            ("inhibit-local-variables-p" function nil nil [115929 116739])
            ("auto-mode-interpreter-regexp" variable (:default-value (purecopy "#![ 	]?\\([^ 	
]*/bin/env[ 	]\\)?\\([^ 	
]+\\)")) nil [116741 117259])
            ("magic-mode-alist" variable nil nil [117261 117795])
            ("put" code nil nil [117796 117843])
            ("magic-fallback-mode-alist" variable (:default-value (purecopy (\` ((image-type-auto-detected-p . image-mode) ("\\(PK00\\)?[P]K" . archive-mode) ((\, (let* ((incomment-re "\\(?:[^-]\\|-[^-]\\)") (comment-re (concat "\\(?:!--" incomment-re "*-->[ 	
]*<\\)"))) (concat "\\(?:<\\?xml[ 	
]+[^>]*>\\)?[ 	
]*<" comment-re "*" "\\(?:!DOCTYPE[ 	
]+[^>]*>[ 	
]*<[ 	
]*" comment-re "*\\)?" "[Hh][Tt][Mm][Ll]"))) . html-mode) ("<!DOCTYPE[ 	
]+[Hh][Tt][Mm][Ll]" . html-mode) ("<\\?xml " . xml-mode) ((\, (let* ((incomment-re "\\(?:[^-]\\|-[^-]\\)") (comment-re (concat "\\(?:!--" incomment-re "*-->[ 	
]*<\\)"))) (concat "[ 	
]*<" comment-re "*!DOCTYPE "))) . sgml-mode) ("%!PS" . ps-mode) ("# xmcd " . conf-unix-mode))))) nil [117845 119386])
            ("put" code nil nil [119387 119443])
            ("magic-mode-regexp-match-limit" variable (:default-value 4000) nil [119445 119587])
            ("set-auto-mode" function (:arguments ("keep-mode-if-same")) nil [119589 126017])
            ("set-auto-mode-0" function (:arguments ("mode" "keep-mode-if-same")) nil [126270 126677])
            ("file-auto-mode-skip" variable (:default-value "^\\(#!\\|'\\\\\"\\)") nil [126679 126945])
            ("set-auto-mode-1" function nil nil [126947 128452])
            ("ignored-local-variables" variable (:default-value (quote (ignored-local-variables safe-local-variable-values file-local-variables-alist dir-local-variables-alist))) nil [128490 128696])
            ("put" code nil nil [128697 128751])
            ("hack-local-variables-hook" variable nil nil [128753 128986])
            ("safe-local-variable-values" variable nil nil [128988 129248])
            ("safe-local-eval-forms" variable (:default-value (quote ((add-hook (quote write-file-hooks) (quote time-stamp)) (add-hook (quote write-file-functions) (quote time-stamp)) (add-hook (quote before-save-hook) (quote time-stamp) nil t) (add-hook (quote before-save-hook) (quote delete-trailing-whitespace) nil t)))) nil [129250 129912])
            ("mapc" code nil nil [129940 130557])
            ("dolist" code nil nil [131199 131887])
            ("put" code nil nil [131889 132003])
            ("put" code nil nil [132005 132051])
            ("file-local-variables-alist" variable nil nil [132053 132408])
            ("make-variable-buffer-local" code nil nil [132409 132465])
            ("put" code nil nil [132466 132518])
            ("dir-local-variables-alist" variable nil nil [132520 132902])
            ("make-variable-buffer-local" code nil nil [132903 132958])
            ("before-hack-local-variables-hook" variable nil nil [132960 133378])
            ("hack-local-variables-confirm" function (:arguments ("all-vars" "unsafe-vars" "risky-vars" "dir-name")) nil [133380 136250])
            ("hack-local-variable-regexp" variable
               (:constant-flag t
                :default-value "[ 	]*\\([^][;\"'?()\\ 	
]+\\)[ 	]*:[ 	]*")
                nil [136252 136339])
            ("hack-local-variables-prop-line" function (:arguments ("mode-only")) nil [136341 138795])
            ("hack-local-variables-filter" function (:arguments ("variables" "dir-name")) nil [138797 141283])
            ("hack-local-variables--warned-lexical" variable nil nil [141344 141393])
            ("hack-local-variables" function (:arguments ("mode-only")) nil [141395 147633])
            ("hack-local-variables-apply" function nil nil [147635 148436])
            ("safe-local-variable-p" function (:arguments ("sym" "val")) nil [148438 149126])
            ("risky-local-variable-p" function (:arguments ("sym" "_ignored")) nil [149128 150031])
            ("hack-one-local-variable-quotep" function (:arguments ("exp")) nil [150033 150137])
            ("hack-one-local-variable-constantp" function (:arguments ("exp")) nil [150139 150327])
            ("hack-one-local-variable-eval-safep" function (:arguments ("exp")) nil [150329 152149])
            ("hack-one-local-variable--obsolete" function (:arguments ("var")) nil [152151 152583])
            ("hack-one-local-variable" function (:arguments ("var" "val")) nil [152585 153498])
            ("dir-locals-class-alist" variable (:default-value (quote nil)) nil [153564 153679])
            ("dir-locals-directory-cache" variable (:default-value (quote nil)) nil [153681 154257])
            ("dir-locals-get-class-variables" function (:arguments ("class")) nil [154259 154392])
            ("dir-locals-collect-mode-variables" function (:arguments ("mode-variables" "variables")) nil [154394 155039])
            ("dir-locals-collect-variables" function (:arguments ("class-variables" "root" "variables")) nil [155041 157133])
            ("dir-locals-set-directory-class" function (:arguments ("directory" "class" "mtime")) nil [157135 157899])
            ("dir-locals-set-class-variables" function (:arguments ("class" "variables")) nil [157901 159276])
            ("dir-locals-file" variable
               (:constant-flag t
                :default-value ".dir-locals.el")
                nil [159278 159460])
            ("dir-locals-find-file" function (:arguments ("file")) nil [159462 162478])
            ("dir-locals-read-from-file" function (:arguments ("file")) nil [162480 163323])
            ("enable-remote-dir-locals" variable nil nil [163325 163491])
            ("hack-dir-local-variables--warned-coding" variable nil nil [163493 163545])
            ("hack-dir-local-variables" function nil nil [163547 165203])
            ("hack-dir-local-variables-non-file-buffer" function nil nil [165205 165511])
            ("change-major-mode-with-file-name" variable (:default-value t) nil [165515 165950])
            ("set-visited-file-name" function
               (:user-visible-flag t
                :arguments ("filename" "no-query" "along-with-file"))
                nil [165952 171041])
            ("write-file" function
               (:user-visible-flag t
                :arguments ("filename" "confirm"))
                nil [171043 173108])
            ("file-extended-attributes" function (:arguments ("filename")) nil [173111 173425])
            ("set-file-extended-attributes" function (:arguments ("filename" "attributes")) nil [173427 174029])
            ("backup-buffer" function nil nil [174032 177655])
            ("backup-buffer-copy" function (:arguments ("from-name" "to-name" "modes" "extended-attributes")) nil [177657 178758])
            ("file-name-version-regexp" variable (:default-value "\\(?:~\\|\\.~[-[:alnum:]:#@^._]+\\(?:~[[:digit:]]+\\)?~\\)") nil [178760 179053])
            ("file-name-sans-versions" function (:arguments ("name" "keep-backup-version")) nil [179055 179754])
            ("file-ownership-preserved-p" function (:arguments ("file" "group")) nil [179756 181623])
            ("file-name-sans-extension" function (:arguments ("filename")) nil [181625 182350])
            ("file-name-extension" function (:arguments ("filename" "period")) nil [182352 183281])
            ("file-name-base" function (:arguments ("filename")) nil [183283 183527])
            ("make-backup-file-name-function" variable (:default-value (function make-backup-file-name--default-function)) nil [183529 184277])
            ("backup-directory-alist" variable nil nil [184279 185316])
            ("normal-backup-enable-predicate" function (:arguments ("name")) nil [185318 186610])
            ("make-backup-file-name" function (:arguments ("file")) nil [186612 186925])
            ("make-backup-file-name--default-function" function (:arguments ("file")) nil [186927 187677])
            ("make-backup-file-name-1" function (:arguments ("file")) nil [187679 189786])
            ("backup-file-name-p" function (:arguments ("file")) nil [189788 190049])
            ("backup-extract-version-start" variable nil nil [190051 190088])
            ("backup-extract-version" function (:arguments ("fn")) nil [190263 190715])
            ("find-backup-file-name" function (:arguments ("fn")) nil [190717 192856])
            ("file-nlinks" function (:arguments ("filename")) nil [192858 192975])
            ("file-relative-name" function (:arguments ("filename" "directory")) nil [194951 197713])
            ("save-buffer" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [197716 200534])
            ("delete-auto-save-file-if-necessary" function (:arguments ("force")) nil [200536 201107])
            ("auto-save-hook" variable nil nil [201109 201181])
            ("before-save-hook" variable nil nil [201183 201381])
            ("after-save-hook" variable nil nil [201383 201602])
            ("save-buffer-coding-system" variable nil nil [201604 201976])
            ("make-variable-buffer-local" code nil nil [201978 202033])
            ("put" code nil nil [202034 202085])
            ("basic-save-buffer" function
               (:user-visible-flag t
                :arguments ("called-interactively"))
                nil [202087 206458])
            ("basic-save-buffer-1" function nil nil [206740 207043])
            ("basic-save-buffer-2" function nil nil [207132 211981])
            ("declare-function" code nil nil [211983 212069])
            ("save-some-buffers-action-alist" variable (:default-value (\` ((18 (\, (lambda (buf) (if (not enable-recursive-minibuffers) (progn (display-buffer buf) (setq other-window-scroll-buffer buf)) (view-buffer buf (lambda (_) (exit-recursive-edit))) (recursive-edit)) nil)) (\, (purecopy "view this buffer"))) (100 (\, (lambda (buf) (if (null (buffer-file-name buf)) (message "Not applicable: no file") (require (quote diff)) (let ((diffbuf (diff-no-select (buffer-file-name buf) buf nil (quote noasync)))) (if (not enable-recursive-minibuffers) (progn (display-buffer diffbuf) (setq other-window-scroll-buffer diffbuf)) (view-buffer diffbuf (lambda (_) (exit-recursive-edit))) (recursive-edit)))) nil)) (\, (purecopy "view changes in this buffer")))))) nil [212071 213237])
            ("put" code nil nil [213238 213299])
            ("buffer-save-without-query" variable nil nil [213301 213417])
            ("make-variable-buffer-local" code nil nil [213418 213473])
            ("save-some-buffers" function
               (:user-visible-flag t
                :arguments ("arg" "pred"))
                nil [213475 217054])
            ("clear-visited-file-modtime" function nil nil [217057 217238])
            ("not-modified" function (:arguments ("arg")) nil [217240 217763])
            ("toggle-read-only" function (:arguments ("arg" "interactive")) nil [217765 218051])
            ("insert-file" function (:arguments ("filename")) nil [218053 218501])
            ("append-to-file" function
               (:user-visible-flag t
                :arguments ("start" "end" "filename"))
                nil [218503 219161])
            ("file-newest-backup" function (:arguments ("filename")) nil [219163 220086])
            ("rename-uniquely" function (:user-visible-flag t) nil [220088 221104])
            ("make-directory" function
               (:user-visible-flag t
                :arguments ("dir" "parents"))
                nil [221106 222678])
            ("directory-files-no-dot-files-regexp" variable
               (:constant-flag t
                :default-value "^\\([^.]\\|\\.\\([^.]\\|\\..\\)\\).*")
                nil [222680 222826])
            ("delete-directory" function
               (:user-visible-flag t
                :arguments ("directory" "recursive" "trash"))
                nil [222828 225326])
            ("file-equal-p" function (:arguments ("file1" "file2")) nil [225328 225888])
            ("file-in-directory-p" function (:arguments ("file" "dir")) nil [225890 227008])
            ("copy-directory" function
               (:user-visible-flag t
                :arguments ("directory" "newname" "keep-time" "parents" "copy-contents"))
                nil [227010 230197])
            ("prune-directory-list" function (:arguments ("dirs" "keep" "reject")) nil [230245 230807])
            ("put" code nil nil [230811 230859])
            ("revert-buffer-function" variable (:default-value (function revert-buffer--default)) nil [230860 231312])
            ("put" code nil nil [231314 231383])
            ("revert-buffer-insert-file-contents-function" variable (:default-value (function revert-buffer-insert-file-contents--default-function)) nil [231384 231856])
            ("buffer-stale--default-function" function (:arguments ("_noconfirm")) nil [231858 232420])
            ("buffer-stale-function" variable (:default-value (function buffer-stale--default-function)) nil [232422 233337])
            ("before-revert-hook" variable nil nil [233339 233542])
            ("after-revert-hook" variable nil nil [233544 233899])
            ("revert-buffer-in-progress-p" variable nil nil [233901 234015])
            ("revert-buffer-internal-hook" variable nil nil [234017 234053])
            ("revert-buffer-preserve-modes" variable nil nil [234243 234280])
            ("revert-buffer" function
               (:user-visible-flag t
                :arguments ("ignore-auto" "noconfirm" "preserve-modes"))
                nil [234282 236494])
            ("revert-buffer--default" function (:arguments ("ignore-auto" "noconfirm")) nil [236496 239851])
            ("revert-buffer-insert-file-contents--default-function" function (:arguments ("file-name" "auto-save-p")) nil [239853 242053])
            ("recover-this-file" function (:user-visible-flag t) nil [242055 242206])
            ("recover-file" function
               (:user-visible-flag t
                :arguments ("file"))
                nil [242208 244291])
            ("recover-session" function (:user-visible-flag t) nil [244293 246025])
            ("recover-session-finish" function (:user-visible-flag t) nil [246027 248430])
            ("kill-buffer-ask" function (:arguments ("buffer")) nil [248432 248683])
            ("kill-some-buffers" function
               (:user-visible-flag t
                :arguments ("list"))
                nil [248685 249288])
            ("kill-matching-buffers" function
               (:user-visible-flag t
                :arguments ("regexp" "internal-too"))
                nil [249290 249818])
            ("rename-auto-save-file" function nil nil [249822 250386])
            ("make-auto-save-file-name" function nil nil [250388 254617])
            ("auto-save-file-name-p" function (:arguments ("filename")) nil [254619 254847])
            ("wildcard-to-regexp" function (:arguments ("wildcard")) nil [254850 257033])
            ("list-directory-brief-switches" variable (:default-value (purecopy "-CF")) nil [257036 257197])
            ("list-directory-verbose-switches" variable (:default-value (purecopy "-l")) nil [257199 257365])
            ("file-expand-wildcards" function (:arguments ("pattern" "full")) nil [257367 259009])
            ("files" package nil nil [259083 259119])
            ("list-directory" function
               (:user-visible-flag t
                :arguments ("dirname" "verbose"))
                nil [259121 260467])
            ("shell-quote-wildcard-pattern" function (:arguments ("pattern")) nil [260469 262307])
            ("insert-directory-program" variable (:default-value (purecopy "ls")) nil [262310 262437])
            ("directory-free-space-program" variable (:default-value (purecopy "df")) nil [262439 262976])
            ("directory-free-space-args" variable (:default-value (purecopy (if (eq system-type (quote darwin)) "-k" "-Pk"))) nil [262978 263165])
            ("get-free-disk-space" function (:arguments ("dir")) nil [263167 264937])
            ("directory-listing-before-filename-regexp" variable (:default-value (let* ((l "\\([A-Za-z]\\|[^ -]\\)") (l-or-quote "\\([A-Za-z']\\|[^ -]\\)") (month (concat l-or-quote l-or-quote "+\\.?")) (s " ") (yyyy "[0-9][0-9][0-9][0-9]") (dd "[ 0-3][0-9]") (HH:MM "[ 0-2][0-9][:.][0-5][0-9]") (seconds "[0-6][0-9]\\([.,][0-9]+\\)?") (zone "[-+][0-2][0-9][0-5][0-9]") (iso-mm-dd "[01][0-9]-[0-3][0-9]") (iso-time (concat HH:MM "\\(:" seconds "\\( ?" zone "\\)?\\)?")) (iso (concat "\\(\\(" yyyy "-\\)?" iso-mm-dd "[ T]" iso-time "\\|" yyyy "-" iso-mm-dd "\\)")) (western (concat "\\(" month s "+" dd "\\|" dd "\\.?" s month "\\)" s "+" "\\(" HH:MM "\\|" yyyy "\\)")) (western-comma (concat month s "+" dd "," s "+" yyyy)) (mm "[ 0-1]?[0-9]") (east-asian (concat "\\(" mm l "?" s dd l "?" s "+" "\\|" dd s mm s "+" "\\)" "\\(" HH:MM "\\|" yyyy l "?" "\\)"))) (purecopy (concat "\\([0-9][BkKMGTPEZY]? " iso "\\|.*[0-9][BkKMGTPEZY]? " "\\(" western "\\|" western-comma "\\|" east-asian "\\)" "\\) +")))) nil [265009 267398])
            ("insert-directory-ls-version" variable (:default-value (quote unknown)) nil [267400 267445])
            ("insert-directory" function (:arguments ("file" "switches" "wildcard" "full-directory-p")) nil [268519 278659])
            ("insert-directory-adj-pos" function (:arguments ("pos" "error-lines")) nil [278661 279227])
            ("insert-directory-safely" function (:arguments ("file" "switches" "wildcard" "full-directory-p")) nil [279229 279713])
            ("kill-emacs-query-functions" variable nil nil [279715 280021])
            ("confirm-kill-emacs" variable nil nil [280023 280463])
            ("save-buffers-kill-emacs" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [280465 282554])
            ("save-buffers-kill-terminal" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [282556 283044])
            ("setq" code nil nil [283154 283275])
            ("file-name-non-special" function (:arguments ("operation" "arguments")) nil [283476 286109])
            ("file-modes-char-to-who" function (:arguments ("char")) nil [286152 286619])
            ("file-modes-char-to-right" function (:arguments ("char" "from")) nil [286621 287470])
            ("file-modes-rights-to-number" function (:arguments ("rights" "who-mask" "from")) nil [287472 288626])
            ("file-modes-symbolic-to-number" function (:arguments ("modes" "from")) nil [288628 289711])
            ("read-file-modes" function (:arguments ("prompt" "orig-file")) nil [289713 290780])
            ("define-obsolete-variable-alias" code nil nil [290782 290864])
            ("trash-directory" variable nil nil [290888 291291])
            ("trash--hexify-table" variable nil nil [291293 291321])
            ("declare-function" code nil nil [291323 291389])
            ("move-file-to-trash" function
               (:user-visible-flag t
                :arguments ("filename"))
                nil [291391 296655])
            ("define-key" code nil nil [296659 296699])
            ("define-key" code nil nil [296700 296750])
            ("define-key" code nil nil [296751 296801])
            ("define-key" code nil nil [296802 296844])
            ("define-key" code nil nil [296845 296890])
            ("define-key" code nil nil [296891 296932])
            ("define-key" code nil nil [296933 296972])
            ("define-key" code nil nil [296973 297011])
            ("define-key" code nil nil [297012 297057])
            ("define-key" code nil nil [297058 297115])
            ("define-key" code nil nil [297116 297161])
            ("define-key" code nil nil [297163 297215])
            ("define-key" code nil nil [297216 297278])
            ("define-key" code nil nil [297279 297334])
            ("define-key" code nil nil [297335 297394])
            ("define-key" code nil nil [297395 297442])
            ("define-key" code nil nil [297444 297502])
            ("define-key" code nil nil [297503 297554])
            ("define-key" code nil nil [297555 297609])
            ("define-key" code nil nil [297610 297671])
            ("define-key" code nil nil [297672 297731]))          
      :file "files.el.gz"
      :pointmax 297756
      :fsize 85939
      :lastmodtime '(22966 58805 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("describe-buffer-case-table" function (:user-visible-flag t) nil [1238 2284])
            ("case-table-get-table" function (:arguments ("case-table" "table")) nil [2286 2982])
            ("get-upcase-table" function (:arguments ("case-table")) nil [2984 3104])
            ("make-obsolete" code nil nil [3105 3167])
            ("copy-case-table" function (:arguments ("case-table")) nil [3169 3584])
            ("set-case-syntax-delims" function (:arguments ("l" "r" "table")) nil [3586 4420])
            ("set-case-syntax-pair" function (:arguments ("uc" "lc" "table")) nil [4422 5200])
            ("set-upcase-syntax" function (:arguments ("uc" "lc" "table")) nil [5202 5803])
            ("set-downcase-syntax" function (:arguments ("uc" "lc" "table")) nil [5805 6410])
            ("set-case-syntax" function (:arguments ("c" "syntax" "table")) nil [6412 7060])
            ("case-table" package nil nil [7062 7083]))          
      :file "case-table.el.gz"
      :pointmax 7113
      :fsize 2027
      :lastmodtime '(22966 58805 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("read-file-local-variable" function (:arguments ("prompt")) nil [1154 1916])
            ("read-file-local-variable-value" function (:arguments ("variable")) nil [1918 3570])
            ("read-file-local-variable-mode" function nil nil [3572 4409])
            ("modify-file-local-variable-message" function (:arguments ("variable" "value" "op")) nil [4411 5506])
            ("modify-file-local-variable" function (:arguments ("variable" "value" "op" "interactive")) nil [5508 8836])
            ("add-file-local-variable" function
               (:user-visible-flag t
                :arguments ("variable" "value" "interactive"))
                nil [8853 9887])
            ("delete-file-local-variable" function
               (:user-visible-flag t
                :arguments ("variable" "interactive"))
                nil [9904 10197])
            ("modify-file-local-variable-prop-line" function (:arguments ("variable" "value" "op" "interactive")) nil [10199 14650])
            ("add-file-local-variable-prop-line" function
               (:user-visible-flag t
                :arguments ("variable" "value" "interactive"))
                nil [14667 15294])
            ("delete-file-local-variable-prop-line" function
               (:user-visible-flag t
                :arguments ("variable" "interactive"))
                nil [15311 15616])
            ("auto-insert" variable nil nil [15618 15638])
            ("modify-dir-local-variable" function (:arguments ("mode" "variable" "value" "op")) nil [15661 18740])
            ("add-dir-local-variable" function
               (:user-visible-flag t
                :arguments ("mode" "variable" "value"))
                nil [18757 19165])
            ("delete-dir-local-variable" function
               (:user-visible-flag t
                :arguments ("mode" "variable"))
                nil [19182 19487])
            ("copy-file-locals-to-dir-locals" function (:user-visible-flag t) nil [19504 19772])
            ("copy-dir-locals-to-file-locals" function (:user-visible-flag t) nil [19789 20003])
            ("copy-dir-locals-to-file-locals-prop-line" function (:user-visible-flag t) nil [20020 20242])
            ("files-x" package nil nil [20247 20265]))          
      :file "files-x.el.gz"
      :pointmax 20292
      :fsize 4988
      :lastmodtime '(22966 58805 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("make-mode-line-mouse-map" function (:arguments ("mouse" "function")) nil [928 1263])
            ("mode-line-toggle-read-only" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [1266 1471])
            ("mode-line-toggle-modified" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [1473 1732])
            ("mode-line-widen" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [1734 1924])
            ("mode-line-input-method-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [mode-line mouse-2] (lambda (e) (interactive "e") (with-selected-window (posn-window (event-start e)) (toggle-input-method) (force-mode-line-update)))) (define-key map [mode-line mouse-3] (lambda (e) (interactive "e") (with-selected-window (posn-window (event-start e)) (describe-current-input-method)))) (purecopy map))) nil [1926 2371])
            ("mode-line-coding-system-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [mode-line mouse-1] (lambda (e) (interactive "e") (with-selected-window (posn-window (event-start e)) (when (and enable-multibyte-characters buffer-file-coding-system) (describe-coding-system buffer-file-coding-system))))) (define-key map [mode-line mouse-3] (lambda (e) (interactive "e") (with-selected-window (posn-window (event-start e)) (call-interactively (quote set-buffer-file-coding-system))))) (purecopy map))) nil [2373 2981])
            ("mode-line-change-eol" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [2983 3333])
            ("mode-line-eol-desc-cache" variable nil nil [3335 3372])
            ("mode-line-eol-desc" function nil nil [3374 4253])
            ("mode-line-default-help-echo" variable (:default-value "mouse-1: Select (drag to resize)
mouse-2: Make current window occupy the whole frame
mouse-3: Remove current window from display") nil [4281 4821])
            ("mode-line-front-space" variable (:default-value (quote (:eval (if (display-graphic-p) " " "-")))) nil [4823 5108])
            ("put" code nil nil [5109 5161])
            ("mode-line-mule-info-help-echo" function (:arguments ("window" "_object" "_point")) nil [5163 5615])
            ("mode-line-mule-info" variable (:default-value (\` ("" (current-input-method (:propertize ("" current-input-method-title) help-echo (concat (\, (purecopy "Current input method: ")) current-input-method (\, (purecopy "
mouse-2: Disable input method
mouse-3: Describe current input method"))) local-map (\, mode-line-input-method-map) mouse-face mode-line-highlight)) (\, (propertize "%z" (quote help-echo) (quote mode-line-mule-info-help-echo) (quote mouse-face) (quote mode-line-highlight) (quote local-map) mode-line-coding-system-map)) (:eval (mode-line-eol-desc))))) nil [5617 6539])
            ("put" code nil nil [6555 6605])
            ("make-variable-buffer-local" code nil nil [6606 6655])
            ("mode-line-client" variable (:default-value (\` ("" (:propertize ("" (:eval (if (frame-parameter nil (quote client)) "@" ""))) help-echo (\, (purecopy "emacsclient frame")))))) nil [6657 6868])
            ("put" code nil nil [6884 6931])
            ("mode-line-read-only-help-echo" function (:arguments ("window" "_object" "_point")) nil [6933 7208])
            ("mode-line-modified-help-echo" function (:arguments ("window" "_object" "_point")) nil [7210 7470])
            ("mode-line-modified" variable (:default-value (list (propertize "%1*" (quote help-echo) (quote mode-line-read-only-help-echo) (quote local-map) (purecopy (make-mode-line-mouse-map (quote mouse-1) (function mode-line-toggle-read-only))) (quote mouse-face) (quote mode-line-highlight)) (propertize "%1+" (quote help-echo) (quote mode-line-modified-help-echo) (quote local-map) (purecopy (make-mode-line-mouse-map (quote mouse-1) (function mode-line-toggle-modified))) (quote mouse-face) (quote mode-line-highlight)))) nil [7472 7990])
            ("put" code nil nil [8006 8055])
            ("make-variable-buffer-local" code nil nil [8056 8104])
            ("mode-line-remote" variable (:default-value (list (propertize "%1@" (quote mouse-face) (quote mode-line-highlight) (quote help-echo) (purecopy (lambda (window _object _point) (format "%s" (with-selected-window window (if (stringp default-directory) (concat (if (file-remote-p default-directory) "Current directory is remote: " "Current directory is local: ") default-directory) "Current directory is nil")))))))) nil [8106 8616])
            ("put" code nil nil [8632 8679])
            ("make-variable-buffer-local" code nil nil [8680 8726])
            ("mode-line-frame-control" function nil nil [8796 9033])
            ("mode-line-frame-identification" variable (:default-value (quote (:eval (mode-line-frame-control)))) nil [9143 9272])
            ("put" code nil nil [9288 9349])
            ("mode-line-process" variable nil nil [9351 9510])
            ("put" code nil nil [9526 9574])
            ("make-variable-buffer-local" code nil nil [9575 9622])
            ("bindings--define-key" function (:arguments ("map" "key" "item")) nil [9624 10375])
            ("mode-line-mode-menu" variable (:default-value (make-sparse-keymap "Minor Modes")) nil [10377 10486])
            ("mode-line-major-mode-keymap" variable (:default-value (let ((map (make-sparse-keymap))) (bindings--define-key map [mode-line down-mouse-1] (\` (menu-item "Menu Bar" ignore :filter (\, (lambda (_) (mouse-menu-major-mode-map)))))) (define-key map [mode-line mouse-2] (quote describe-mode)) (define-key map [mode-line down-mouse-3] mode-line-mode-menu) map)) nil [10488 10879])
            ("mode-line-minor-mode-keymap" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [mode-line down-mouse-1] (quote mouse-minor-mode-menu)) (define-key map [mode-line mouse-2] (quote mode-line-minor-mode-help)) (define-key map [mode-line down-mouse-3] mode-line-mode-menu) (define-key map [header-line down-mouse-3] mode-line-mode-menu) map)) nil [10881 11271])
            ("mode-line-modes" variable (:default-value (let ((recursive-edit-help-echo "Recursive edit, type C-M-c to get out")) (list (propertize "%[" (quote help-echo) recursive-edit-help-echo) "(" (\` (:propertize ("" mode-name) help-echo "Major mode
mouse-1: Display major mode menu
mouse-2: Show help for major mode
mouse-3: Toggle minor modes" mouse-face mode-line-highlight local-map (\, mode-line-major-mode-keymap))) (quote ("" mode-line-process)) (\` (:propertize ("" minor-mode-alist) mouse-face mode-line-highlight help-echo "Minor mode
mouse-1: Display minor mode menu
mouse-2: Show help for minor mode
mouse-3: Toggle minor modes" local-map (\, mode-line-minor-mode-keymap))) (propertize "%n" (quote help-echo) "mouse-2: Remove narrowing from buffer" (quote mouse-face) (quote mode-line-highlight) (quote local-map) (make-mode-line-mouse-map (quote mouse-2) (function mode-line-widen))) ")" (propertize "%]" (quote help-echo) recursive-edit-help-echo) " "))) nil [11273 12283])
            ("put" code nil nil [12284 12330])
            ("mode-line-column-line-number-mode-map" variable (:default-value (let ((map (make-sparse-keymap)) (menu-map (make-sparse-keymap "Toggle Line and Column Number Display"))) (bindings--define-key menu-map [line-number-mode] (quote (menu-item "Display Line Numbers" line-number-mode :help "Toggle displaying line numbers in the mode-line" :button (:toggle . line-number-mode)))) (bindings--define-key menu-map [column-number-mode] (quote (menu-item "Display Column Numbers" column-number-mode :help "Toggle displaying column numbers in the mode-line" :button (:toggle . column-number-mode)))) (define-key map [mode-line down-mouse-1] menu-map) map)) nil [12332 13041])
            ("mode-line-position" variable (:default-value (\` ((-3 (\, (propertize "%p" (quote local-map) mode-line-column-line-number-mode-map (quote mouse-face) (quote mode-line-highlight) (quote help-echo) "Size indication mode
mouse-1: Display Line and Column Mode Menu"))) (size-indication-mode (8 (\, (propertize " of %I" (quote local-map) mode-line-column-line-number-mode-map (quote mouse-face) (quote mode-line-highlight) (quote help-echo) "Size indication mode
mouse-1: Display Line and Column Mode Menu")))) (line-number-mode ((column-number-mode (10 (\, (propertize " (%l,%c)" (quote local-map) mode-line-column-line-number-mode-map (quote mouse-face) (quote mode-line-highlight) (quote help-echo) "Line number and Column number
mouse-1: Display Line and Column Mode Menu"))) (6 (\, (propertize " L%l" (quote local-map) mode-line-column-line-number-mode-map (quote mouse-face) (quote mode-line-highlight) (quote help-echo) "Line Number
mouse-1: Display Line and Column Mode Menu"))))) ((column-number-mode (5 (\, (propertize " C%c" (quote local-map) mode-line-column-line-number-mode-map (quote mouse-face) (quote mode-line-highlight) (quote help-echo) "Column number
mouse-1: Display Line and Column Mode Menu"))))))))) nil [13043 14479])
            ("put" code nil nil [14480 14529])
            ("mode-line-buffer-identification-keymap" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [mode-line mouse-1] (quote mode-line-previous-buffer)) (define-key map [header-line down-mouse-1] (quote ignore)) (define-key map [header-line mouse-1] (quote mode-line-previous-buffer)) (define-key map [mode-line mouse-3] (quote mode-line-next-buffer)) (define-key map [header-line down-mouse-3] (quote ignore)) (define-key map [header-line mouse-3] (quote mode-line-next-buffer)) map)) nil [14531 15264])
            ("propertized-buffer-identification" function (:arguments ("fmt")) nil [15266 15750])
            ("mode-line-buffer-identification" variable (:default-value (propertized-buffer-identification "%12b")) nil [15752 16065])
            ("put" code nil nil [16081 16143])
            ("make-variable-buffer-local" code nil nil [16144 16205])
            ("mode-line-misc-info" variable (:default-value (quote ((which-func-mode ("" which-func-format " ")) (global-mode-string ("" global-mode-string " "))))) nil [16207 16489])
            ("put" code nil nil [16490 16540])
            ("mode-line-end-spaces" variable (:default-value (quote (:eval (unless (display-graphic-p) "-%-")))) nil [16542 16675])
            ("put" code nil nil [16676 16727])
            ("let" code nil nil [16792 17357])
            ("mode-line-unbury-buffer" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [17361 17540])
            ("mode-line-bury-buffer" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [17542 17739])
            ("mode-line-other-buffer" function (:user-visible-flag t) nil [17741 17908])
            ("mode-line-next-buffer" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [17910 18107])
            ("mode-line-previous-buffer" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [18109 18318])
            ("bound-and-true-p" function (:arguments ("var")) nil [18320 18450])
            ("bindings--define-key" code nil nil [18569 18790])
            ("bindings--define-key" code nil nil [18791 19039])
            ("bindings--define-key" code nil nil [19040 19305])
            ("bindings--define-key" code nil nil [19306 19535])
            ("bindings--define-key" code nil nil [19536 19775])
            ("bindings--define-key" code nil nil [19776 19950])
            ("bindings--define-key" code nil nil [19951 20156])
            ("bindings--define-key" code nil nil [20157 20451])
            ("bindings--define-key" code nil nil [20452 20692])
            ("bindings--define-key" code nil nil [20693 20893])
            ("bindings--define-key" code nil nil [20894 21084])
            ("mode-line-minor-mode-help" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [21086 21325])
            ("minor-mode-alist" variable nil nil [21327 21624])
            ("put" code nil nil [21640 21687])
            ("setq" code nil nil [21758 21965])
            ("setq" code nil nil [22250 23512])
            ("setq" code nil nil [23548 23690])
            ("setq" code nil nil [23804 24207])
            ("make-variable-buffer-local" code nil nil [24209 24255])
            ("mapc" code nil nil [24511 24877])
            ("base64" package nil nil [24935 24952])
            ("md5" package nil nil [24953 24967])
            ("sha1" package nil nil [24968 24983])
            ("overlay" package nil nil [24984 25032])
            ("text-properties" package nil nil [25033 25103])
            ("define-key" code nil nil [25105 25147])
            ("complete-symbol" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [25149 25528])
            ("garbage-collect" code nil nil [25646 25663])
            ("setq" code nil nil [25667 25704])
            ("make-variable-buffer-local" code nil nil [25706 25767])
            ("global-set-key" code nil nil [25785 25837])
            ("global-set-key" code nil nil [25838 25892])
            ("global-set-key" code nil nil [26088 26140])
            ("global-set-key" code nil nil [26141 26187])
            ("global-set-key" code nil nil [26188 26239])
            ("put" code nil nil [26325 26360])
            ("visual-order-cursor-movement" variable nil nil [26413 27117])
            ("right-char" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [27119 27875])
            ("left-char" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [27877 28632])
            ("right-word" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [28634 29248])
            ("left-word" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [29250 29863])
            ("narrow-map" variable (:default-value (make-sparse-keymap)) nil [29865 29940])
            ("define-key" code nil nil [29941 29978])
            ("define-key" code nil nil [29980 30025])
            ("define-key" code nil nil [30026 30060])
            ("define-key" code nil nil [30074 30128])
            ("define-key" code nil nil [30129 30174])
            ("substitute-key-definition" code nil nil [30283 30351])
            ("define-key" code nil nil [30353 30392])
            ("define-key" code nil nil [30393 30434])
            ("define-key" code nil nil [30435 30474])
            ("define-key" code nil nil [30475 30520])
            ("define-key" code nil nil [30521 30565])
            ("define-key" code nil nil [30566 30616])
            ("define-key" code nil nil [30617 30662])
            ("define-key" code nil nil [30663 30712])
            ("define-key" code nil nil [30713 30753])
            ("define-key" code nil nil [30754 30791])
            ("define-key" code nil nil [30792 30836])
            ("define-key" code nil nil [30837 30885])
            ("define-key" code nil nil [30886 30927])
            ("define-key" code nil nil [31001 31045])
            ("define-key" code nil nil [31112 31165])
            ("define-key" code nil nil [31199 31252])
            ("define-key" code nil nil [31253 31285])
            ("put" code nil nil [31286 31328])
            ("define-key" code nil nil [31399 31436])
            ("define-key" code nil nil [31437 31473])
            ("define-key" code nil nil [31652 31691])
            ("define-key" code nil nil [31692 31741])
            ("define-key" code nil nil [31742 31787])
            ("define-key" code nil nil [31789 31832])
            ("define-key" code nil nil [31833 31878])
            ("define-key" code nil nil [31879 31929])
            ("define-key" code nil nil [31930 31976])
            ("define-key" code nil nil [31977 32025])
            ("define-key" code nil nil [32026 32077])
            ("let" code nil nil [32079 32982])
            ("define-key" code nil nil [32984 33034])
            ("let" code nil nil [33035 33149])
            ("define-key" code nil nil [33150 33193])
            ("let" code nil nil [33220 33348])
            ("define-key" code nil nil [33349 33399])
            ("let" code nil nil [33431 33556])
            ("define-key" code nil nil [33557 33610])
            ("define-key" code nil nil [33666 33718])
            ("define-key" code nil nil [34001 34044])
            ("define-key" code nil nil [34046 34087])
            ("define-key" code nil nil [34088 34131])
            ("define-key" code nil nil [34132 34172])
            ("define-key" code nil nil [34173 34218])
            ("define-key" code nil nil [34219 34255])
            ("define-key" code nil nil [34256 34290])
            ("define-key" code nil nil [34341 34389])
            ("define-key" code nil nil [34447 34496])
            ("put" code nil nil [34497 34548])
            ("define-key" code nil nil [34550 34604])
            ("define-key" code nil nil [34605 34651])
            ("define-key" code nil nil [34652 34699])
            ("define-key" code nil nil [34700 34747])
            ("define-key" code nil nil [34749 34790])
            ("define-key" code nil nil [34791 34836])
            ("define-key" code nil nil [34837 34883])
            ("define-key" code nil nil [34884 34938])
            ("define-key" code nil nil [34939 34987])
            ("define-key" code nil nil [34989 35027])
            ("goto-map" variable (:default-value (make-sparse-keymap)) nil [35029 35103])
            ("define-key" code nil nil [35104 35137])
            ("define-key" code nil nil [35139 35178])
            ("define-key" code nil nil [35179 35218])
            ("define-key" code nil nil [35219 35258])
            ("define-key" code nil nil [35259 35299])
            ("define-key" code nil nil [35300 35340])
            ("define-key" code nil nil [35341 35385])
            ("define-key" code nil nil [35386 35430])
            ("define-key" code nil nil [35431 35475])
            ("search-map" variable (:default-value (make-sparse-keymap)) nil [35477 35557])
            ("define-key" code nil nil [35558 35593])
            ("define-key" code nil nil [35595 35632])
            ("define-key" code nil nil [35633 35681])
            ("define-key" code nil nil [35682 35730])
            ("define-key" code nil nil [35731 35779])
            ("define-key" code nil nil [35780 35843])
            ("define-key" code nil nil [35844 35901])
            ("define-key" code nil nil [35902 35952])
            ("define-key" code nil nil [35953 36006])
            ("define-key" code nil nil [36007 36073])
            ("define-key" code nil nil [36183 36239])
            ("define-key" code nil nil [36240 36286])
            ("define-key" code nil nil [36483 36540])
            ("define-key" code nil nil [36541 36596])
            ("define-key" code nil nil [36597 36651])
            ("define-key" code nil nil [36652 36719])
            ("define-key" code nil nil [36720 36785])
            ("define-key" code nil nil [36786 36828])
            ("define-key" code nil nil [36829 36873])
            ("define-key" code nil nil [36874 36918])
            ("define-key" code nil nil [36919 36961])
            ("define-key" code nil nil [36962 37015])
            ("define-key" code nil nil [37016 37066])
            ("define-key" code nil nil [37067 37118])
            ("define-key" code nil nil [37119 37171])
            ("define-key" code nil nil [37172 37219])
            ("put" code nil nil [37220 37250])
            ("define-key" code nil nil [37251 37297])
            ("define-key" code nil nil [37298 37352])
            ("define-key" code nil nil [37353 37405])
            ("define-key" code nil nil [37406 37465])
            ("define-key" code nil nil [37466 37524])
            ("define-key" code nil nil [37525 37583])
            ("define-key" code nil nil [37584 37632])
            ("define-key" code nil nil [37633 37680])
            ("define-key" code nil nil [37681 37741])
            ("define-key" code nil nil [37742 37800])
            ("define-key" code nil nil [37801 37854])
            ("define-key" code nil nil [37855 37922])
            ("define-key" code nil nil [37923 37989])
            ("define-key" code nil nil [38101 38160])
            ("define-key" code nil nil [38161 38210])
            ("define-key" code nil nil [38211 38261])
            ("define-key" code nil nil [38262 38302])
            ("define-key" code nil nil [38401 38453])
            ("define-key" code nil nil [38454 38508])
            ("define-key" code nil nil [38509 38553])
            ("define-key" code nil nil [38554 38591])
            ("define-key" code nil nil [38592 38647])
            ("define-key" code nil nil [38648 38704])
            ("define-key" code nil nil [38720 38762])
            ("define-key" code nil nil [38994 39041])
            ("define-key" code nil nil [39042 39089])
            ("define-key" code nil nil [39090 39147])
            ("let" code nil nil [43108 43954])
            ("define-key" code nil nil [43956 44005])
            ("define-key" code nil nil [44006 44052])
            ("define-key" code nil nil [44053 44102])
            ("define-key" code nil nil [45269 45315])
            ("define-key" code nil nil [45437 45484])
            ("define-key" code nil nil [45486 45534])
            ("define-key" code nil nil [45536 45583])
            ("define-key" code nil nil [45584 45625])
            ("define-key" code nil nil [45626 45670])
            ("define-key" code nil nil [45671 45717])
            ("define-key" code nil nil [45719 45757])
            ("define-key" code nil nil [45758 45807])
            ("define-key" code nil nil [45808 45860])
            ("define-key" code nil nil [45861 45907])
            ("define-key" code nil nil [45908 45953])
            ("define-key" code nil nil [45954 45997])
            ("define-key" code nil nil [45998 46047])
            ("define-key" code nil nil [46049 46084])
            ("define-key" code nil nil [46085 46123])
            ("define-key" code nil nil [46124 46163])
            ("define-key" code nil nil [46164 46199])
            ("define-key" code nil nil [46200 46247])
            ("define-key" code nil nil [46249 46294])
            ("define-key" code nil nil [46295 46334])
            ("define-key" code nil nil [46335 46380])
            ("define-key" code nil nil [46381 46431])
            ("defalias" code nil nil [46433 46494])
            ("mode-specific-map" variable (:default-value (symbol-function (quote mode-specific-command-prefix))) nil [46495 46610])
            ("define-key" code nil nil [46611 46671])
            ("global-set-key" code nil nil [46673 46712])
            ("define-key" code nil nil [46713 46755])
            ("global-set-key" code nil nil [46756 46794])
            ("define-key" code nil nil [46795 46837])
            ("global-set-key" code nil nil [46914 46953])
            ("global-set-key" code nil nil [46954 46992])
            ("global-set-key" code nil nil [47052 47090])
            ("global-set-key" code nil nil [47091 47141])
            ("global-set-key" code nil nil [47202 47242])
            ("global-set-key" code nil nil [47244 47289])
            ("define-key" code nil nil [47290 47335])
            ("global-set-key" code nil nil [47336 47380])
            ("define-key" code nil nil [47381 47425])
            ("global-set-key" code nil nil [47426 47474])
            ("define-key" code nil nil [47475 47523])
            ("global-set-key" code nil nil [47524 47565])
            ("define-key" code nil nil [47566 47607])
            ("global-set-key" code nil nil [47608 47658])
            ("define-key" code nil nil [47659 47709])
            ("global-set-key" code nil nil [47710 47754])
            ("define-key" code nil nil [47755 47799])
            ("define-key" code nil nil [47801 47842])
            ("define-key" code nil nil [47843 47885])
            ("define-key" code nil nil [47886 47931])
            ("define-key" code nil nil [47932 47970])
            ("define-key" code nil nil [47971 48011])
            ("define-key" code nil nil [48012 48050])
            ("define-key" code nil nil [48051 48089])
            ("define-key" code nil nil [48307 48358])
            ("define-key" code nil nil [48359 48413])
            ("define-key" code nil nil [48414 48455])
            ("define-key" code nil nil [48456 48498])
            ("define-key" code nil nil [48499 48546])
            ("define-key" code nil nil [48547 48588])
            ("define-key" code nil nil [48589 48628])
            ("define-key" code nil nil [48629 48673])
            ("define-key" code nil nil [48674 48718])
            ("define-key" code nil nil [48719 48773])
            ("define-key" code nil nil [48775 48820])
            ("define-key" code nil nil [48822 48862])
            ("define-key" code nil nil [48863 48918])
            ("define-key" code nil nil [48919 48973])
            ("ctl-x-r-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map "c" (quote clear-rectangle)) (define-key map "k" (quote kill-rectangle)) (define-key map "d" (quote delete-rectangle)) (define-key map "y" (quote yank-rectangle)) (define-key map "o" (quote open-rectangle)) (define-key map "t" (quote string-rectangle)) (define-key map "N" (quote rectangle-number-lines)) (define-key map "\367" (quote copy-rectangle-as-kill)) (define-key map " " (quote point-to-register)) (define-key map [67108896] (quote point-to-register)) (define-key map " " (quote point-to-register)) (define-key map "j" (quote jump-to-register)) (define-key map "s" (quote copy-to-register)) (define-key map "x" (quote copy-to-register)) (define-key map "i" (quote insert-register)) (define-key map "g" (quote insert-register)) (define-key map "r" (quote copy-rectangle-to-register)) (define-key map "n" (quote number-to-register)) (define-key map "+" (quote increment-register)) (define-key map "w" (quote window-configuration-to-register)) (define-key map "f" (quote frameset-to-register)) map)) nil [48977 50033])
            ("define-key" code nil nil [50034 50072])
            ("define-key" code nil nil [50074 50114])
            ("define-key" code nil nil [50115 50158])
            ("define-key" code nil nil [50161 50205])
            ("define-key" code nil nil [50206 50249])
            ("define-key" code nil nil [50250 50290])
            ("define-key" code nil nil [50291 50334])
            ("define-key" code nil nil [50335 50377])
            ("define-key" code nil nil [50378 50417])
            ("define-key" code nil nil [50418 50471])
            ("define-key" code nil nil [50473 50514])
            ("define-key" code nil nil [50515 50555])
            ("define-key" code nil nil [50556 50596])
            ("define-key" code nil nil [50597 50641])
            ("define-key" code nil nil [50642 50685])
            ("abbrev-map" variable (:default-value (make-sparse-keymap)) nil [50734 50806])
            ("define-key" code nil nil [50807 50844])
            ("define-key" code nil nil [50846 50890])
            ("define-key" code nil nil [50891 50938])
            ("define-key" code nil nil [50939 50985])
            ("define-key" code nil nil [50986 51030])
            ("define-key" code nil nil [51031 51086])
            ("define-key" code nil nil [51087 51140])
            ("define-key" code nil nil [51202 51256])
            ("define-key" code nil nil [51257 51299])
            ("define-key" code nil nil [51300 51342])
            ("define-key" code nil nil [51557 51601])
            ("define-key" code nil nil [51602 51643])
            ("define-key" code nil nil [51644 51687])
            ("define-key" code nil nil [51689 51723])
            ("define-key" code nil nil [51725 51771])
            ("define-key" code nil nil [51773 51836])
            ("define-key" code nil nil [51837 51901])
            ("define-key" code nil nil [51922 51970])
            ("define-key" code nil nil [51971 52019]))          
      :file "bindings.el.gz"
      :pointmax 52151
      :fsize 13097
      :lastmodtime '(22966 58805 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("read-envvar-name-history" variable nil nil [1441 1478])
            ("read-envvar-name" function (:arguments ("prompt" "mustmatch")) nil [1480 2282])
            ("setenv-history" variable nil nil [2330 2357])
            ("env--substitute-vars-regexp" variable
               (:constant-flag t
                :default-value "\\$\\(?:\\(?1:[[:alnum:]_]+\\)\\|{\\(?1:[^{}]+\\)}\\|\\$\\)")
                nil [2359 2461])
            ("substitute-env-vars" function (:arguments ("string" "when-undefined")) nil [2463 4017])
            ("substitute-env-in-file-name" function (:arguments ("filename")) nil [4019 4401])
            ("setenv-internal" function (:arguments ("env" "variable" "value" "keep-empty")) nil [4403 5395])
            ("setenv" function
               (:user-visible-flag t
                :arguments ("variable" "value" "substitute-env-vars"))
                nil [5465 7868])
            ("getenv" function
               (:user-visible-flag t
                :arguments ("variable" "frame"))
                nil [7870 8920])
            ("env" package nil nil [8922 8936]))          
      :file "env.el.gz"
      :pointmax 8959
      :fsize 3296
      :lastmodtime '(22966 58805 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("cl-lib" include nil nil [975 992])
            ("cl-defgeneric" code nil nil [995 1259])
            ("cl-generic-define-context-rewriter" code nil nil [1261 1519])
            ("cl-defmethod" code nil nil [1521 1920])
            ("window-system-default-frame-alist" variable nil nil [1922 2369])
            ("display-format-alist" variable nil nil [2371 2623])
            ("initial-frame-alist" variable nil nil [2815 4048])
            ("minibuffer-frame-alist" variable (:default-value (quote ((width . 80) (height . 2)))) nil [4050 4755])
            ("handle-delete-frame" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [4757 5226])
            ("handle-focus-in" function
               (:user-visible-flag t
                :arguments ("_event"))
                nil [5228 5524])
            ("handle-focus-out" function
               (:user-visible-flag t
                :arguments ("_event"))
                nil [5526 5786])
            ("frame-initial-frame" variable nil nil [6282 6314])
            ("frame-initial-frame-alist" variable nil nil [6393 6427])
            ("frame-initial-geometry-arguments" variable nil nil [6429 6474])
            ("frame-initialize" function nil nil [6663 8195])
            ("frame-notice-user-settings" variable (:default-value t) nil [8197 8306])
            ("declare-function" code nil nil [8308 8367])
            ("declare-function" code nil nil [8368 8440])
            ("defalias" code nil nil [8442 8492])
            ("frame-notice-user-settings" function nil nil [8689 19804])
            ("make-initial-minibuffer-frame" function (:arguments ("display")) nil [19806 20007])
            ("modify-all-frames-parameters" function (:arguments ("alist")) nil [20074 21249])
            ("get-other-frame" function nil nil [21251 21509])
            ("next-multiframe-window" function (:user-visible-flag t) nil [21511 21769])
            ("previous-multiframe-window" function (:user-visible-flag t) nil [21771 22035])
            ("window-system-for-display" function (:arguments ("display")) nil [22037 22532])
            ("make-frame-on-display" function
               (:user-visible-flag t
                :arguments ("display" "parameters"))
                nil [22534 22803])
            ("declare-function" code nil nil [22805 22862])
            ("close-display-connection" function
               (:user-visible-flag t
                :arguments ("display"))
                nil [22864 24216])
            ("make-frame-command" function (:user-visible-flag t) nil [24218 24481])
            ("before-make-frame-hook" variable nil nil [24483 24566])
            ("after-make-frame-functions" variable nil nil [24568 24715])
            ("after-setting-font-hook" variable nil nil [24717 24813])
            ("define-obsolete-function-alias" code nil nil [24843 24905])
            ("frame-inherited-parameters" variable (:default-value (quote nil)) nil [24907 25025])
            ("x-display-name" variable nil nil [25027 25050])
            ("make-frame" function
               (:user-visible-flag t
                :arguments ("parameters"))
                nil [25052 29046])
            ("filtered-frame-list" function (:arguments ("predicate")) nil [29048 29347])
            ("minibuffer-frame-list" function nil nil [29349 29542])
            ("get-device-terminal" function (:arguments ("device")) nil [29594 30347])
            ("frames-on-display-list" function (:arguments ("device")) nil [30349 30791])
            ("framep-on-display" function (:arguments ("terminal")) nil [30793 31232])
            ("frame-remove-geometry-params" function (:arguments ("param-list")) nil [31234 32095])
            ("declare-function" code nil nil [32097 32147])
            ("select-frame-set-input-focus" function (:arguments ("frame" "norecord")) nil [32149 33259])
            ("other-frame" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [33261 34240])
            ("iconify-or-deiconify-frame" function (:user-visible-flag t) nil [34242 34472])
            ("suspend-frame" function (:user-visible-flag t) nil [34474 34951])
            ("make-frame-names-alist" function nil nil [34953 35359])
            ("frame-name-history" variable nil nil [35361 35392])
            ("select-frame-by-name" function
               (:user-visible-flag t
                :arguments ("name"))
                nil [35393 36084])
            ("frame-background-mode" variable nil nil [36111 36787])
            ("declare-function" code nil nil [36789 36883])
            ("declare-function" code nil nil [36928 36998])
            ("inhibit-frame-set-background-mode" variable nil nil [37000 37046])
            ("frame-set-background-mode" function (:arguments ("frame" "keep-face-specs")) nil [37048 39946])
            ("frame-terminal-default-bg-mode" function (:arguments ("frame")) nil [39948 40464])
            ("current-frame-configuration" function nil nil [40495 41091])
            ("set-frame-configuration" function (:arguments ("configuration" "nodelete")) nil [41093 43098])
            ("frame-height" function (:arguments ("frame")) nil [43193 43859])
            ("frame-width" function (:arguments ("frame")) nil [43861 44066])
            ("declare-function" code nil nil [44068 44173])
            ("define-obsolete-function-alias" code nil nil [44175 44248])
            ("set-frame-font" function
               (:user-visible-flag t
                :arguments ("font" "keep-size" "frames"))
                nil [44250 47566])
            ("set-frame-parameter" function (:arguments ("frame" "parameter" "value")) nil [47568 47819])
            ("set-background-color" function
               (:user-visible-flag t
                :arguments ("color-name"))
                nil [47821 48566])
            ("set-foreground-color" function
               (:user-visible-flag t
                :arguments ("color-name"))
                nil [48568 49313])
            ("set-cursor-color" function
               (:user-visible-flag t
                :arguments ("color-name"))
                nil [49315 49801])
            ("set-mouse-color" function
               (:user-visible-flag t
                :arguments ("color-name"))
                nil [49803 50269])
            ("set-border-color" function
               (:user-visible-flag t
                :arguments ("color-name"))
                nil [50271 50653])
            ("define-minor-mode" code nil nil [50655 51535])
            ("define-minor-mode" code nil nil [51537 52378])
            ("set-frame-name" function
               (:user-visible-flag t
                :arguments ("name"))
                nil [52380 52756])
            ("frame-current-scroll-bars" function (:arguments ("frame")) nil [52758 53480])
            ("declare-function" code nil nil [53482 53544])
            ("declare-function" code nil nil [53545 53611])
            ("declare-function" code nil nil [53612 53676])
            ("frame-geometry" function (:arguments ("frame")) nil [53678 56124])
            ("frame--size-history" function (:arguments ("frame")) nil [56126 56954])
            ("declare-function" code nil nil [56956 57020])
            ("declare-function" code nil nil [57021 57089])
            ("declare-function" code nil nil [57090 57156])
            ("frame-edges" function (:arguments ("frame" "type")) nil [57158 58144])
            ("declare-function" code nil nil [58146 58209])
            ("declare-function" code nil nil [58210 58269])
            ("mouse-absolute-pixel-position" function nil nil [58271 58753])
            ("declare-function" code nil nil [58755 58828])
            ("declare-function" code nil nil [58829 58898])
            ("set-mouse-absolute-pixel-position" function (:arguments ("x" "y")) nil [58900 59325])
            ("frame-monitor-attributes" function (:arguments ("frame")) nil [59327 60017])
            ("declare-function" code nil nil [60055 60098])
            ("display-mouse-p" function (:arguments ("display")) nil [60100 60891])
            ("display-popup-menus-p" function (:arguments ("display")) nil [60893 61179])
            ("display-graphic-p" function (:arguments ("display")) nil [61181 61638])
            ("display-images-p" function (:arguments ("display")) nil [61640 61918])
            ("defalias" code nil nil [61920 61972])
            ("defalias" code nil nil [61973 62024])
            ("display-selections-p" function (:arguments ("display")) nil [62026 62654])
            ("declare-function" code nil nil [62656 62722])
            ("display-screens" function (:arguments ("display")) nil [62724 63113])
            ("declare-function" code nil nil [63115 63186])
            ("display-pixel-height" function (:arguments ("display")) nil [63188 63921])
            ("declare-function" code nil nil [63923 63993])
            ("display-pixel-width" function (:arguments ("display")) nil [63995 64723])
            ("display-mm-dimensions-alist" variable nil nil [64725 65343])
            ("declare-function" code nil nil [65345 65413])
            ("display-mm-height" function (:arguments ("display")) nil [65415 66294])
            ("declare-function" code nil nil [66296 66363])
            ("display-mm-width" function (:arguments ("display")) nil [66365 67240])
            ("declare-function" code nil nil [67242 67314])
            ("display-backing-store" function (:arguments ("display")) nil [67419 67937])
            ("declare-function" code nil nil [67939 68008])
            ("display-save-under" function (:arguments ("display")) nil [68010 68407])
            ("declare-function" code nil nil [68409 68474])
            ("display-planes" function (:arguments ("display")) nil [68476 68917])
            ("declare-function" code nil nil [68919 68989])
            ("display-color-cells" function (:arguments ("display")) nil [68991 69436])
            ("declare-function" code nil nil [69438 69509])
            ("display-visual-class" function (:arguments ("display")) nil [69511 70101])
            ("declare-function" code nil nil [70103 70189])
            ("declare-function" code nil nil [70190 70279])
            ("declare-function" code nil nil [70280 70368])
            ("display-monitor-attributes-list" function (:arguments ("display")) nil [70370 72895])
            ("frame-geom-value-cons" function (:arguments ("type" "value" "frame")) nil [72927 74797])
            ("frame-geom-spec-cons" function (:arguments ("spec" "frame")) nil [74799 76058])
            ("delete-other-frames" function
               (:user-visible-flag t
                :arguments ("frame"))
                nil [76062 77114])
            ("define-obsolete-variable-alias" code nil nil [77159 77245])
            ("window-divider" customgroup (:user-visible-flag t) nil [77270 77373])
            ("window-divider-default-places" variable (:default-value (quote right-only)) nil [77375 78239])
            ("window-divider-width-valid-p" function (:arguments ("value")) nil [78241 78371])
            ("window-divider-default-bottom-width" variable (:default-value 6) nil [78373 79029])
            ("window-divider-default-right-width" variable (:default-value 6) nil [79031 79678])
            ("window-divider-mode-apply" function (:arguments ("enable")) nil [79680 80972])
            ("define-minor-mode" code nil nil [80974 81554])
            ("cursor" customgroup (:user-visible-flag t) nil [81577 81662])
            ("blink-cursor-delay" variable (:default-value 0.5) nil [81664 81846])
            ("blink-cursor-interval" variable (:default-value 0.5) nil [81848 81966])
            ("blink-cursor-blinks" variable (:default-value 10) nil [81968 82178])
            ("blink-cursor-blinks-done" variable (:default-value 1) nil [82180 82293])
            ("blink-cursor-idle-timer" variable nil nil [82295 82470])
            ("blink-cursor-timer" variable nil nil [82472 82634])
            ("blink-cursor-start" function nil nil [82636 83335])
            ("blink-cursor-timer-function" function nil nil [83337 83993])
            ("blink-cursor-end" function nil nil [83996 84391])
            ("blink-cursor-suspend" function nil nil [84393 84748])
            ("blink-cursor-check" function nil nil [84750 85497])
            ("define-obsolete-variable-alias" code nil nil [85499 85571])
            ("define-minor-mode" code nil nil [85573 87102])
            ("toggle-frame-maximized" function (:user-visible-flag t) nil [87140 88142])
            ("toggle-frame-fullscreen" function (:user-visible-flag t) nil [88144 89364])
            ("define-key" code nil nil [89386 89434])
            ("define-key" code nil nil [89435 89484])
            ("define-key" code nil nil [89485 89527])
            ("define-key" code nil nil [89528 89569])
            ("define-key" code nil nil [89570 89624])
            ("define-key" code nil nil [89625 89685])
            ("define-key" code nil nil [89686 89746])
            ("define-obsolete-variable-alias" code nil nil [89796 89878])
            ("make-variable-buffer-local" code nil nil [89880 89934])
            ("make-obsolete-variable" code nil nil [89961 90055])
            ("setq" code nil nil [90124 90188])
            ("mapc" code nil nil [90189 90429])
            ("frame" package nil nil [90431 90447]))          
      :file "frame.el.gz"
      :pointmax 90472
      :fsize 23140
      :lastmodtime '(22966 58805 0 0)
      :unmatched-syntax '((close-paren 992 . 993) (symbol 957 . 974) (open-paren 956 . 957)))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("indent" customgroup (:user-visible-flag t) nil [1004 1069])
            ("standard-indent" variable (:default-value 4) nil [1071 1205])
            ("indent-line-function" variable (:default-value (quote indent-relative)) nil [1207 1593])
            ("tab-always-indent" variable (:default-value t) nil [1595 2350])
            ("indent-according-to-mode" function (:user-visible-flag t) nil [2353 3439])
            ("indent--default-inside-comment" function nil nil [3441 4000])
            ("indent-for-tab-command" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [4002 6681])
            ("insert-tab" function (:arguments ("arg")) nil [6683 6975])
            ("indent-rigidly--current-indentation" function (:arguments ("beg" "end")) nil [6977 7462])
            ("indent-rigidly-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map [left] (quote indent-rigidly-left)) (define-key map [right] (quote indent-rigidly-right)) (define-key map [S-left] (quote indent-rigidly-left-to-tab-stop)) (define-key map [S-right] (quote indent-rigidly-right-to-tab-stop)) map)) nil [7464 7887])
            ("indent-rigidly" function
               (:user-visible-flag t
                :arguments ("start" "end" "arg" "interactive"))
                nil [7889 9752])
            ("indent-rigidly--pop-undo" function nil nil [9754 10041])
            ("indent-rigidly-left" function
               (:user-visible-flag t
                :arguments ("beg" "end"))
                nil [10043 10291])
            ("indent-rigidly-right" function
               (:user-visible-flag t
                :arguments ("beg" "end"))
                nil [10293 10543])
            ("indent-rigidly-left-to-tab-stop" function
               (:user-visible-flag t
                :arguments ("beg" "end"))
                nil [10545 10943])
            ("indent-rigidly-right-to-tab-stop" function
               (:user-visible-flag t
                :arguments ("beg" "end"))
                nil [10945 11341])
            ("indent-line-to" function (:arguments ("column")) nil [11343 11975])
            ("current-left-margin" function nil nil [11977 12381])
            ("move-to-left-margin" function
               (:user-visible-flag t
                :arguments ("n" "force"))
                nil [12383 13298])
            ("indent-to-left-margin" function nil nil [13398 13709])
            ("delete-to-left-margin" function (:arguments ("from" "to")) nil [13711 14275])
            ("set-left-margin" function
               (:user-visible-flag t
                :arguments ("from" "to" "width"))
                nil [14277 15152])
            ("set-right-margin" function
               (:user-visible-flag t
                :arguments ("from" "to" "width"))
                nil [15154 15713])
            ("alter-text-property" function (:arguments ("from" "to" "prop" "func" "object")) nil [15715 16383])
            ("increase-left-margin" function
               (:user-visible-flag t
                :arguments ("from" "to" "inc"))
                nil [16385 17219])
            ("decrease-left-margin" function
               (:user-visible-flag t
                :arguments ("from" "to" "inc"))
                nil [17221 17702])
            ("increase-right-margin" function
               (:user-visible-flag t
                :arguments ("from" "to" "inc"))
                nil [17704 18357])
            ("decrease-right-margin" function
               (:user-visible-flag t
                :arguments ("from" "to" "inc"))
                nil [18359 18890])
            ("beginning-of-line-text" function
               (:user-visible-flag t
                :arguments ("n"))
                nil [18892 19906])
            ("indent-region-function" variable nil nil [19908 20090])
            ("indent-region" function
               (:user-visible-flag t
                :arguments ("start" "end" "column"))
                nil [20092 22501])
            ("indent-relative-maybe" function (:user-visible-flag t) nil [22503 22766])
            ("indent-relative" function
               (:user-visible-flag t
                :arguments ("unindented-ok"))
                nil [22768 24131])
            ("tab-stop-list" variable nil nil [24133 24691])
            ("edit-tab-stops-map" variable (:default-value (let ((map (make-sparse-keymap))) (define-key map "" (quote edit-tab-stops-note-changes)) (define-key map "" (quote edit-tab-stops-note-changes)) map)) nil [24693 24924])
            ("edit-tab-stops-buffer" variable nil nil [24926 25075])
            ("edit-tab-stops" function (:user-visible-flag t) nil [25077 26100])
            ("edit-tab-stops-note-changes" function (:user-visible-flag t) nil [26102 26502])
            ("indent-next-tab-stop" function (:arguments ("column" "prev")) nil [26504 27503])
            ("indent-accumulate-tab-stops" function (:arguments ("limit")) nil [27505 27745])
            ("tab-to-tab-stop" function (:user-visible-flag t) nil [27747 28176])
            ("move-to-tab-stop" function (:user-visible-flag t) nil [28178 29038])
            ("define-key" code nil nil [29040 29092])
            ("define-key" code nil nil [29093 29136])
            ("define-key" code nil nil [29137 29180])
            ("define-key" code nil nil [29181 29222]))          
      :file "indent.el.gz"
      :pointmax 29248
      :fsize 8068
      :lastmodtime '(22966 58805 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("fringe" customgroup (:user-visible-flag t) nil [1309 1385])
            ("when" code nil nil [1453 2744])
            ("fringe-bitmap-p" function (:arguments ("symbol")) nil [2747 2851])
            ("fringe-mode" variable nil nil [2886 2906])
            ("fringe-mode-explicit" variable nil nil [2908 3061])
            ("set-fringe-mode-1" function (:arguments ("_ignore" "value")) nil [3063 3288])
            ("set-fringe-mode" function (:arguments ("value")) nil [3290 3754])
            ("fringe--check-style" function (:arguments ("style")) nil [3756 4010])
            ("fringe-mode-initialize" function (:arguments ("symbol" "value")) nil [4117 4795])
            ("fringe-styles" variable
               (:constant-flag t
                :default-value (quote (("default") ("no-fringes" . 0) ("right-only" 0) ("left-only" nil . 0) ("half-width" 4 . 4) ("minimal" 1 . 1))))
                nil [4797 5434])
            ("fringe-mode" variable nil nil [5436 7089])
            ("setq" code nil nil [7186 7215])
            ("fringe-query-style" function (:arguments ("all-frames")) nil [7217 8036])
            ("fringe-mode" function
               (:user-visible-flag t
                :arguments ("mode"))
                nil [8038 9200])
            ("set-fringe-style" function
               (:user-visible-flag t
                :arguments ("mode"))
                nil [9202 10433])
            ("fringe-columns" function (:arguments ("side" "real")) nil [10435 10859])
            ("fringe" package nil nil [10861 10878]))          
      :file "fringe.el.gz"
      :pointmax 10904
      :fsize 3538
      :lastmodtime '(22966 58805 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("internal--before-save-selected-window" function nil nil [962 1995])
            ("internal--after-save-selected-window" function (:arguments ("state")) nil [1997 2294])
            ("save-selected-window" function (:arguments ("body")) nil [2296 3334])
            ("temp-buffer-window-setup-hook" variable nil nil [3336 3537])
            ("temp-buffer-window-show-hook" variable nil nil [3539 3760])
            ("temp-buffer-window-setup" function (:arguments ("buffer-or-name")) nil [3762 4376])
            ("temp-buffer-window-show" function (:arguments ("buffer" "action")) nil [4378 5622])
            ("with-temp-buffer-window" function (:arguments ("buffer-or-name" "action" "quit-function" "body")) nil [5624 8206])
            ("with-current-buffer-window" function (:arguments ("buffer-or-name" "action" "quit-function" "body")) nil [8208 9097])
            ("with-displayed-buffer-window" function (:arguments ("buffer-or-name" "action" "quit-function" "body")) nil [9099 10679])
            ("window-right" function (:arguments ("window")) nil [10986 11198])
            ("window-left" function (:arguments ("window")) nil [11200 11410])
            ("window-child" function (:arguments ("window")) nil [11412 11567])
            ("window-child-count" function (:arguments ("window")) nil [11569 11865])
            ("window-last-child" function (:arguments ("window")) nil [11867 12134])
            ("window-normalize-buffer" function (:arguments ("buffer-or-name")) nil [12136 12630])
            ("window-normalize-frame" function (:arguments ("frame")) nil [12632 12885])
            ("window-normalize-window" function (:arguments ("window" "live-only")) nil [12887 13442])
            ("frame-char-size" function (:arguments ("window-or-frame" "horizontal")) nil [13481 14253])
            ("ignore-window-parameters" variable nil nil [14255 14599])
            ("window-safe-min-height" variable
               (:constant-flag t
                :default-value 1)
                nil [14649 14773])
            ("window-safe-min-pixel-height" function (:arguments ("window")) nil [14775 14971])
            ("window-min-height" variable (:default-value 4) nil [14973 15676])
            ("window-min-pixel-height" function (:arguments ("window")) nil [15678 15865])
            ("window-safe-min-width" variable
               (:constant-flag t
                :default-value 2)
                nil [15915 16038])
            ("window-safe-min-pixel-width" function (:arguments ("window")) nil [16040 16235])
            ("window-min-width" variable (:default-value 10) nil [16237 16936])
            ("window-min-pixel-width" function (:arguments ("window")) nil [16938 17123])
            ("window-safe-min-pixel-size" function (:arguments ("window" "horizontal")) nil [17125 17442])
            ("window-min-pixel-size" function (:arguments ("window" "horizontal")) nil [17444 17728])
            ("window-combined-p" function (:arguments ("window" "horizontal")) nil [17730 18362])
            ("window-combination-p" function (:arguments ("window" "horizontal")) nil [18364 18790])
            ("window-combinations" function (:arguments ("window" "horizontal")) nil [18792 19899])
            ("walk-window-tree-1" function (:arguments ("fun" "walk-window-tree-window" "any" "sub-only")) nil [19901 20613])
            ("walk-window-tree" function (:arguments ("fun" "frame" "any" "minibuf")) nil [20615 21838])
            ("walk-window-subtree" function (:arguments ("fun" "window" "any")) nil [21840 22491])
            ("window-with-parameter" function (:arguments ("parameter" "value" "frame" "any" "minibuf")) nil [22493 23451])
            ("window-atom-root" function (:arguments ("window")) nil [23473 23893])
            ("window-make-atom" function (:arguments ("window")) nil [23895 24283])
            ("display-buffer-in-atom-window" function (:arguments ("buffer" "alist")) nil [24285 26730])
            ("window--atom-check-1" function (:arguments ("window")) nil [26732 27620])
            ("window--atom-check" function (:arguments ("frame")) nil [27622 28010])
            ("window-sides" variable (:default-value (quote (left top right bottom))) nil [28029 28093])
            ("window-sides-vertical" variable nil nil [28095 28301])
            ("window-sides-slots" variable (:default-value (quote (nil nil nil nil))) nil [28303 29724])
            ("window--side-window-p" function (:arguments ("window")) nil [29726 30046])
            ("window--major-non-side-window" function (:arguments ("frame")) nil [30048 31104])
            ("window--major-side-window" function (:arguments ("side")) nil [31106 32776])
            ("display-buffer-in-major-side-window" function (:arguments ("buffer" "side" "slot" "alist")) nil [32778 34830])
            ("delete-side-window" function (:arguments ("window")) nil [34832 35050])
            ("display-buffer-in-side-window" function (:arguments ("buffer" "alist")) nil [35052 40055])
            ("window--side-check" function (:arguments ("frame")) nil [40057 42561])
            ("window--check" function (:arguments ("frame")) nil [42563 42742])
            ("window--dump-window" function (:arguments ("window" "erase")) nil [42778 44622])
            ("window--dump-frame" function (:arguments ("window-or-frame")) nil [44624 46245])
            ("window-total-size" function (:arguments ("window" "horizontal" "round")) nil [46265 47213])
            ("window-size" function (:arguments ("window" "horizontal" "pixelwise" "round")) nil [47215 48019])
            ("window-size-fixed" variable nil nil [48021 48458])
            ("make-variable-buffer-local" code nil nil [48459 48506])
            ("window--preservable-size" function (:arguments ("window" "horizontal")) nil [48508 48934])
            ("window-preserve-size" function (:arguments ("window" "horizontal" "preserve")) nil [48936 50340])
            ("window-preserved-size" function (:arguments ("window" "horizontal")) nil [50342 50880])
            ("window--preserve-size" function (:arguments ("window" "horizontal")) nil [50882 51242])
            ("window-safe-min-size" function (:arguments ("window" "horizontal" "pixelwise")) nil [51244 51949])
            ("window-min-size" function (:arguments ("window" "horizontal" "ignore" "pixelwise")) nil [51951 52519])
            ("window--min-size-ignore-p" function (:arguments ("window" "horizontal" "ignore")) nil [52521 52853])
            ("window--min-size-1" function (:arguments ("window" "horizontal" "ignore" "pixelwise")) nil [52855 56690])
            ("window-sizable" function (:arguments ("window" "delta" "horizontal" "ignore" "pixelwise")) nil [56692 58062])
            ("window-sizable-p" function (:arguments ("window" "delta" "horizontal" "ignore" "pixelwise")) nil [58064 58569])
            ("window--size-fixed-1" function (:arguments ("window" "horizontal" "ignore")) nil [58571 59896])
            ("window-size-fixed-p" function (:arguments ("window" "horizontal" "ignore")) nil [59898 60546])
            ("window--min-delta-1" function (:arguments ("window" "delta" "horizontal" "ignore" "trail" "noup" "pixelwise")) nil [60548 61890])
            ("window-min-delta" function (:arguments ("window" "horizontal" "ignore" "trail" "noup" "nodown" "pixelwise")) nil [61892 63675])
            ("frame-windows-min-size" function (:arguments ("frame" "horizontal" "ignore" "pixelwise")) nil [63677 64286])
            ("window--max-delta-1" function (:arguments ("window" "delta" "horizontal" "ignore" "trail" "noup" "pixelwise")) nil [64288 65588])
            ("window-max-delta" function (:arguments ("window" "horizontal" "ignore" "trail" "noup" "nodown" "pixelwise")) nil [65590 67036])
            ("window--resizable" function (:arguments ("window" "delta" "horizontal" "ignore" "trail" "noup" "nodown" "pixelwise")) nil [67084 68893])
            ("window--resizable-p" function (:arguments ("window" "delta" "horizontal" "ignore" "trail" "noup" "nodown" "pixelwise")) nil [68895 69553])
            ("window-resizable" function (:arguments ("window" "delta" "horizontal" "ignore" "pixelwise")) nil [69555 71067])
            ("window-resizable-p" function (:arguments ("window" "delta" "horizontal" "ignore" "pixelwise")) nil [71069 71625])
            ("defalias" code nil nil [71672 71718])
            ("defalias" code nil nil [71719 71762])
            ("window-full-height-p" function (:arguments ("window")) nil [71764 72302])
            ("window-full-width-p" function (:arguments ("window")) nil [72304 72736])
            ("window-body-size" function (:arguments ("window" "horizontal" "pixelwise")) nil [72738 73269])
            ("declare-function" code nil nil [73271 73331])
            ("window-font-width" function (:arguments ("window" "face")) nil [73333 73963])
            ("window-font-height" function (:arguments ("window" "face")) nil [73965 74528])
            ("overflow-newline-into-fringe" variable nil nil [74530 74567])
            ("window-max-chars-per-line" function (:arguments ("window" "face")) nil [74569 76083])
            ("window-current-scroll-bars" function (:arguments ("window")) nil [76085 77056])
            ("walk-windows" function (:arguments ("fun" "minibuf" "all-frames")) nil [77058 78940])
            ("window-at-side-p" function (:arguments ("window" "side")) nil [78942 79519])
            ("window-at-side-list" function (:arguments ("frame" "side")) nil [79521 80039])
            ("window--in-direction-2" function (:arguments ("window" "posn" "horizontal")) nil [80041 80431])
            ("window-in-direction" function (:arguments ("direction" "window" "ignore" "sign" "wrap" "mini")) nil [80726 86224])
            ("get-window-with-predicate" function (:arguments ("predicate" "minibuf" "all-frames" "default")) nil [86226 87847])
            ("defalias" code nil nil [87849 87899])
            ("get-lru-window" function (:arguments ("all-frames" "dedicated" "not-selected")) nil [87901 89552])
            ("get-mru-window" function (:arguments ("all-frames" "dedicated" "not-selected")) nil [89554 90824])
            ("get-largest-window" function (:arguments ("all-frames" "dedicated" "not-selected")) nil [90826 92119])
            ("get-buffer-window-list" function (:arguments ("buffer-or-name" "minibuf" "all-frames")) nil [92121 93689])
            ("minibuffer-window-active-p" function (:arguments ("window")) nil [93691 93841])
            ("count-windows" function (:arguments ("minibuf")) nil [93843 94136])
            ("window--size-to-pixel" function (:arguments ("window" "size" "horizontal" "pixelwise" "round-maybe")) nil [94161 95111])
            ("window--pixel-to-total-1" function (:arguments ("window" "horizontal" "char-size")) nil [95113 96737])
            ("window--pixel-to-total" function (:arguments ("frame" "horizontal")) nil [96739 98654])
            ("window--resize-reset" function (:arguments ("frame" "horizontal")) nil [98656 99092])
            ("window--resize-reset-1" function (:arguments ("window" "horizontal")) nil [99094 99616])
            ("window--resize-mini-window" function (:arguments ("window" "delta")) nil [99618 100842])
            ("window--resize-apply-p" function (:arguments ("frame" "horizontal")) nil [100844 101250])
            ("window-resize" function (:arguments ("window" "delta" "horizontal" "ignore" "pixelwise")) nil [101252 105153])
            ("window-resize-no-error" function (:arguments ("window" "delta" "horizontal" "ignore" "pixelwise")) nil [105155 105702])
            ("window--resize-child-windows-skip-p" function (:arguments ("window")) nil [105704 105881])
            ("window--resize-child-windows-normal" function (:arguments ("parent" "horizontal" "window" "this-delta" "trail" "other-delta")) nil [105883 109401])
            ("window--resize-child-windows" function (:arguments ("parent" "delta" "horizontal" "window" "ignore" "trail" "edge" "char-size")) nil [109403 116015])
            ("window--resize-siblings" function (:arguments ("window" "delta" "horizontal" "ignore" "trail" "edge" "char-size")) nil [116017 119813])
            ("window--resize-this-window" function (:arguments ("window" "delta" "horizontal" "ignore" "add" "trail" "edge" "char-size")) nil [119815 121718])
            ("window--resize-root-window" function (:arguments ("window" "delta" "horizontal" "ignore" "pixelwise")) nil [121720 122553])
            ("window--resize-root-window-vertically" function (:arguments ("window" "delta" "pixelwise")) nil [122555 124476])
            ("window--sanitize-window-sizes" function (:arguments ("frame" "horizontal")) nil [124478 125440])
            ("adjust-window-trailing-edge" function (:arguments ("window" "delta" "horizontal" "pixelwise")) nil [125442 132448])
            ("enlarge-window" function
               (:user-visible-flag t
                :arguments ("delta" "horizontal"))
                nil [132450 134284])
            ("shrink-window" function
               (:user-visible-flag t
                :arguments ("delta" "horizontal"))
                nil [134286 136137])
            ("maximize-window" function
               (:user-visible-flag t
                :arguments ("window"))
                nil [136139 136735])
            ("minimize-window" function
               (:user-visible-flag t
                :arguments ("window"))
                nil [136737 137347])
            ("window-edges" function (:arguments ("window" "body" "absolute" "pixelwise")) nil [137367 140431])
            ("window-body-edges" function (:arguments ("window")) nil [140433 140641])
            ("defalias" code nil nil [140642 140692])
            ("window-pixel-edges" function (:arguments ("window")) nil [140694 140915])
            ("window-body-pixel-edges" function (:arguments ("window")) nil [140917 141158])
            ("defalias" code nil nil [141159 141221])
            ("window-absolute-pixel-edges" function (:arguments ("window")) nil [141223 141450])
            ("window-absolute-body-pixel-edges" function (:arguments ("window")) nil [141452 141704])
            ("defalias" code nil nil [141705 141785])
            ("window-absolute-pixel-position" function (:arguments ("position" "window")) nil [141787 142687])
            ("frame-root-window-p" function (:arguments ("window")) nil [142690 142829])
            ("window--subtree" function (:arguments ("window" "next")) nil [142831 143554])
            ("window-tree" function (:arguments ("frame")) nil [143556 144451])
            ("other-window" function
               (:user-visible-flag t
                :arguments ("count" "all-frames"))
                nil [144454 147085])
            ("one-window-p" function (:arguments ("nomini" "all-frames")) nil [147221 148494])
            ("window-deletable-p" function (:arguments ("window")) nil [148519 149909])
            ("window--in-subtree-p" function (:arguments ("window" "root")) nil [149911 150214])
            ("delete-window" function
               (:user-visible-flag t
                :arguments ("window"))
                nil [150216 153612])
            ("delete-other-windows" function
               (:user-visible-flag t
                :arguments ("window"))
                nil [153614 156065])
            ("delete-other-windows-vertically" function
               (:user-visible-flag t
                :arguments ("window"))
                nil [156067 156693])
            ("record-window-buffer" function (:arguments ("window")) nil [158429 159848])
            ("unrecord-window-buffer" function (:arguments ("window" "buffer")) nil [159850 160349])
            ("set-window-buffer-start-and-point" function (:arguments ("window" "buffer" "start" "point")) nil [160351 161278])
            ("switch-to-visible-buffer" variable (:default-value t) nil [161280 161735])
            ("switch-to-prev-buffer" function
               (:user-visible-flag t
                :arguments ("window" "bury-or-kill"))
                nil [161737 167088])
            ("switch-to-next-buffer" function
               (:user-visible-flag t
                :arguments ("window"))
                nil [167090 170489])
            ("get-next-valid-buffer" function (:arguments ("list" "buffer" "visible-ok" "frame")) nil [170491 171487])
            ("last-buffer" function (:arguments ("buffer" "visible-ok" "frame")) nil [171489 172216])
            ("frame-auto-hide-function" variable (:default-value (function iconify-frame)) nil [172218 172736])
            ("window--delete" function (:arguments ("window" "dedicated-only" "kill")) nil [172738 173578])
            ("bury-buffer" function
               (:user-visible-flag t
                :arguments ("buffer-or-name"))
                nil [173580 174713])
            ("unbury-buffer" function (:user-visible-flag t) nil [174715 174840])
            ("next-buffer" function (:user-visible-flag t) nil [174842 175144])
            ("previous-buffer" function (:user-visible-flag t) nil [175146 175456])
            ("delete-windows-on" function
               (:user-visible-flag t
                :arguments ("buffer-or-name" "frame"))
                nil [175458 177212])
            ("replace-buffer-in-windows" function
               (:user-visible-flag t
                :arguments ("buffer-or-name"))
                nil [177214 178246])
            ("quit-restore-window" function (:arguments ("window" "bury-or-kill")) nil [178248 183091])
            ("quit-window" function
               (:user-visible-flag t
                :arguments ("kill" "window"))
                nil [183093 183693])
            ("quit-windows-on" function
               (:user-visible-flag t
                :arguments ("buffer-or-name" "kill" "frame"))
                nil [183695 184659])
            ("split-window" function (:arguments ("window" "size" "side" "pixelwise")) nil [184662 196451])
            ("split-window-keep-point" variable (:default-value t) nil [196528 196902])
            ("split-window-below" function
               (:user-visible-flag t
                :arguments ("size"))
                nil [196904 199158])
            ("defalias" code nil nil [199160 199215])
            ("split-window-right" function
               (:user-visible-flag t
                :arguments ("size"))
                nil [199217 200425])
            ("defalias" code nil nil [200427 200484])
            ("balance-windows-2" function (:arguments ("window" "horizontal")) nil [200987 203755])
            ("balance-windows-1" function (:arguments ("window" "horizontal")) nil [203757 204183])
            ("balance-windows" function
               (:user-visible-flag t
                :arguments ("window-or-frame"))
                nil [204185 205442])
            ("window-fixed-size-p" function (:arguments ("window" "direction")) nil [205444 205874])
            ("window-area-factor" variable (:default-value 1) nil [205921 206090])
            ("make-variable-buffer-local" code nil nil [206091 206139])
            ("balance-windows-area-adjust" function (:arguments ("window" "delta" "horizontal" "pixelwise")) nil [206141 206795])
            ("balance-windows-area" function (:user-visible-flag t) nil [206797 211153])
            ("window--state-get-1" function (:arguments ("window" "writable")) nil [211223 214018])
            ("window-state-get" function (:arguments ("window" "writable")) nil [214020 216109])
            ("window-state-put-list" variable nil nil [216111 216189])
            ("window-state-put-stale-windows" variable nil nil [216191 216278])
            ("window--state-put-1" function (:arguments ("state" "window" "ignore" "totals" "pixelwise")) nil [216280 218982])
            ("window--state-put-2" function (:arguments ("ignore" "pixelwise")) nil [218984 222760])
            ("window-state-put" function (:arguments ("state" "window" "ignore")) nil [222762 226878])
            ("display-buffer-record-window" function (:arguments ("type" "window" "buffer")) nil [226881 229398])
            ("display-buffer-function" variable nil nil [229400 229956])
            ("make-obsolete-variable" code nil nil [229958 230039])
            ("pop-up-frame-alist" variable nil nil [230220 230836])
            ("pop-up-frame-function" variable (:default-value (lambda nil (make-frame pop-up-frame-alist))) nil [230838 231167])
            ("special-display-buffer-names" variable nil nil [231169 233759])
            ("make-obsolete-variable" code nil nil [233760 233843])
            ("put" code nil nil [233844 233903])
            ("special-display-regexps" variable nil nil [233905 236547])
            ("make-obsolete-variable" code nil nil [236548 236626])
            ("put" code nil nil [236627 236681])
            ("special-display-p" function (:arguments ("buffer-name")) nil [236683 237578])
            ("special-display-frame-alist" variable (:default-value (quote ((height . 14) (width . 80) (unsplittable . t)))) nil [237580 238198])
            ("make-obsolete-variable" code nil nil [238199 238281])
            ("special-display-popup-frame" function (:arguments ("buffer" "args")) nil [238283 240303])
            ("special-display-function" variable (:default-value (quote special-display-popup-frame)) nil [240305 241103])
            ("make-obsolete-variable" code nil nil [241104 241183])
            ("same-window-buffer-names" variable nil nil [241185 241757])
            ("same-window-regexps" variable nil nil [241759 242347])
            ("same-window-p" function (:arguments ("buffer-name")) nil [242349 243320])
            ("pop-up-frames" variable nil nil [243322 243734])
            ("display-buffer-reuse-frames" variable nil nil [243736 243965])
            ("make-obsolete-variable" code nil nil [243967 244095])
            ("pop-up-windows" variable (:default-value t) nil [244097 244221])
            ("split-window-preferred-function" variable (:default-value (quote split-window-sensibly)) nil [244223 245606])
            ("split-height-threshold" variable (:default-value 80) nil [245608 246134])
            ("split-width-threshold" variable (:default-value 160) nil [246136 246524])
            ("window-splittable-p" function (:arguments ("window" "horizontal")) nil [246526 248846])
            ("split-window-sensibly" function (:arguments ("window")) nil [248848 251233])
            ("window--try-to-split-window" function (:arguments ("window" "alist")) nil [251235 252345])
            ("window--frame-usable-p" function (:arguments ("frame")) nil [252347 253289])
            ("even-window-sizes" variable (:default-value t) nil [253291 253814])
            ("defvaralias" code nil nil [253815 253868])
            ("window--even-window-sizes" function (:arguments ("window")) nil [253870 254875])
            ("window--display-buffer" function (:arguments ("buffer" "window" "type" "alist" "dedicated")) nil [254877 257786])
            ("window--maybe-raise-frame" function (:arguments ("frame")) nil [257788 258212])
            ("display-buffer-mark-dedicated" variable nil nil [258551 258760])
            ("display-buffer--action-function-custom-type" variable
               (:constant-flag t
                :default-value (quote (choice :tag "Function" (const :tag "--" ignore) (const display-buffer-reuse-window) (const display-buffer-pop-up-window) (const display-buffer-same-window) (const display-buffer-pop-up-frame) (const display-buffer-below-selected) (const display-buffer-at-bottom) (const display-buffer-in-previous-window) (const display-buffer-use-some-window) (const display-buffer-use-some-frame) (function :tag "Other function"))))
                nil [258762 259359])
            ("display-buffer--action-custom-type" variable
               (:constant-flag t
                :default-value (\` (cons :tag "Action" (choice :tag "Action functions" (\, display-buffer--action-function-custom-type) (repeat :tag "List of functions" (\, display-buffer--action-function-custom-type))) (alist :tag "Action arguments" :key-type symbol :value-type (sexp :tag "Value")))))
                nil [259361 259736])
            ("display-buffer-overriding-action" variable (:default-value (quote (nil))) nil [259738 260073])
            ("put" code nil nil [260074 260137])
            ("display-buffer-alist" variable nil nil [260139 261150])
            ("display-buffer-base-action" variable (:default-value (quote (nil))) nil [261152 261576])
            ("display-buffer-fallback-action" variable
               (:constant-flag t
                :default-value (quote ((display-buffer--maybe-same-window display-buffer-reuse-window display-buffer--maybe-pop-up-frame-or-window display-buffer-in-previous-window display-buffer-use-some-window display-buffer-pop-up-frame))))
                nil [261578 262162])
            ("put" code nil nil [262163 262224])
            ("display-buffer-assq-regexp" function (:arguments ("buffer-name" "alist" "action")) nil [262226 262649])
            ("display-buffer--same-window-action" variable (:default-value (quote (display-buffer-same-window (inhibit-same-window)))) nil [262651 262823])
            ("put" code nil nil [262824 262889])
            ("display-buffer--other-frame-action" variable (:default-value (quote ((display-buffer-reuse-window display-buffer-pop-up-frame) (reusable-frames . 0) (inhibit-same-window . t)))) nil [262891 263121])
            ("put" code nil nil [263122 263187])
            ("display-buffer" function
               (:user-visible-flag t
                :arguments ("buffer-or-name" "action" "frame"))
                nil [263189 269137])
            ("display-buffer-other-frame" function
               (:user-visible-flag t
                :arguments ("buffer"))
                nil [269139 269472])
            ("display-buffer-use-some-frame" function (:arguments ("buffer" "alist")) nil [269514 271014])
            ("display-buffer-same-window" function (:arguments ("buffer" "alist")) nil [271016 271501])
            ("display-buffer--maybe-same-window" function (:arguments ("buffer" "alist")) nil [271503 271844])
            ("display-buffer-reuse-window" function (:arguments ("buffer" "alist")) nil [271846 273492])
            ("display-buffer--special-action" function (:arguments ("buffer")) nil [273494 274245])
            ("display-buffer-pop-up-frame" function (:arguments ("buffer" "alist")) nil [274247 275267])
            ("display-buffer-pop-up-window" function (:arguments ("buffer" "alist")) nil [275269 276583])
            ("display-buffer--maybe-pop-up-frame-or-window" function (:arguments ("buffer" "alist")) nil [276585 277171])
            ("display-buffer-below-selected" function (:arguments ("buffer" "alist")) nil [277173 278022])
            ("display-buffer-at-bottom" function (:arguments ("buffer" "alist")) nil [278024 279561])
            ("display-buffer-in-previous-window" function (:arguments ("buffer" "alist")) nil [279563 281850])
            ("display-buffer-use-some-window" function (:arguments ("buffer" "alist")) nil [281852 283593])
            ("display-buffer-no-window" function (:arguments ("_buffer" "alist")) nil [283595 284050])
            ("pop-to-buffer" function
               (:user-visible-flag t
                :arguments ("buffer" "action" "norecord"))
                nil [284086 285618])
            ("pop-to-buffer-same-window" function (:arguments ("buffer" "norecord")) nil [285620 286254])
            ("read-buffer-to-switch" function (:arguments ("prompt")) nil [286256 287400])
            ("window-normalize-buffer-to-switch-to" function (:arguments ("buffer-or-name")) nil [287402 287958])
            ("switch-to-buffer-preserve-window-point" variable nil nil [287960 288849])
            ("switch-to-buffer-in-dedicated-window" variable nil nil [288851 289641])
            ("switch-to-buffer" function
               (:user-visible-flag t
                :arguments ("buffer-or-name" "norecord" "force-same-window"))
                nil [289643 293386])
            ("switch-to-buffer-other-window" function
               (:user-visible-flag t
                :arguments ("buffer-or-name" "norecord"))
                nil [293388 294420])
            ("switch-to-buffer-other-frame" function
               (:user-visible-flag t
                :arguments ("buffer-or-name" "norecord"))
                nil [294422 295434])
            ("set-window-text-height" function (:arguments ("window" "height")) nil [295437 296410])
            ("enlarge-window-horizontally" function
               (:user-visible-flag t
                :arguments ("delta"))
                nil [296412 296627])
            ("shrink-window-horizontally" function
               (:user-visible-flag t
                :arguments ("delta"))
                nil [296629 296848])
            ("count-screen-lines" function (:arguments ("beg" "end" "count-final-newline" "window")) nil [296850 298251])
            ("window-buffer-height" function (:arguments ("window")) nil [298253 298731])
            ("fit-window-to-buffer-horizontally" variable nil nil [298796 299190])
            ("fit-frame-to-buffer" variable nil nil [299304 299753])
            ("fit-frame-to-buffer-margins" variable (:default-value (quote (nil nil nil nil))) nil [299755 300969])
            ("fit-frame-to-buffer-sizes" variable (:default-value (quote (nil nil nil nil))) nil [300971 302260])
            ("declare-function" code nil nil [302262 302333])
            ("window--sanitize-margin" function (:arguments ("margin" "left" "right")) nil [302335 302539])
            ("declare-function" code nil nil [302541 302613])
            ("fit-frame-to-buffer" function
               (:user-visible-flag t
                :arguments ("frame" "max-height" "min-height" "max-width" "min-width" "only"))
                nil [302615 311275])
            ("fit-window-to-buffer" function
               (:user-visible-flag t
                :arguments ("window" "max-height" "min-height" "max-width" "min-width" "preserve-size"))
                nil [311277 317764])
            ("window-safely-shrinkable-p" function (:arguments ("window")) nil [317766 318147])
            ("shrink-window-if-larger-than-buffer" function
               (:user-visible-flag t
                :arguments ("window"))
                nil [318149 319257])
            ("kill-buffer-and-window" function (:user-visible-flag t) nil [319260 320082])
            ("window-group-start-function" variable nil nil [320502 320542])
            ("make-variable-buffer-local" code nil nil [320543 320600])
            ("put" code nil nil [320601 320654])
            ("window-group-start" function (:arguments ("window")) nil [320655 321154])
            ("window-group-end-function" variable nil nil [321156 321194])
            ("make-variable-buffer-local" code nil nil [321195 321250])
            ("put" code nil nil [321251 321302])
            ("window-group-end" function (:arguments ("window" "update")) nil [321303 322109])
            ("set-window-group-start-function" variable nil nil [322111 322155])
            ("make-variable-buffer-local" code nil nil [322156 322217])
            ("put" code nil nil [322218 322275])
            ("set-window-group-start" function (:arguments ("window" "pos" "noforce")) nil [322276 322917])
            ("recenter-window-group-function" variable nil nil [322919 322962])
            ("make-variable-buffer-local" code nil nil [322963 323023])
            ("put" code nil nil [323024 323080])
            ("recenter-window-group" function (:arguments ("arg")) nil [323081 324251])
            ("pos-visible-in-window-group-p-function" variable nil nil [324253 324304])
            ("make-variable-buffer-local" code nil nil [324305 324373])
            ("put" code nil nil [324374 324438])
            ("pos-visible-in-window-group-p" function (:arguments ("pos" "window" "partially")) nil [324439 325915])
            ("selected-window-group-function" variable nil nil [325917 325960])
            ("make-variable-buffer-local" code nil nil [325961 326021])
            ("put" code nil nil [326022 326078])
            ("selected-window-group" function nil nil [326079 326429])
            ("move-to-window-group-line-function" variable nil nil [326431 326478])
            ("make-variable-buffer-local" code nil nil [326479 326543])
            ("put" code nil nil [326544 326604])
            ("move-to-window-group-line" function (:arguments ("arg")) nil [326605 327203])
            ("recenter-last-op" variable nil nil [327207 327432])
            ("recenter-positions" variable (:default-value (quote (middle top bottom))) nil [327434 328294])
            ("recenter-top-bottom" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [328296 329443])
            ("define-key" code nil nil [329445 329497])
            ("move-to-window-line-top-bottom" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [329499 330633])
            ("define-key" code nil nil [330635 330698])
            ("scroll-error-top-bottom" variable nil nil [330868 331312])
            ("scroll-up-command" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [331314 332377])
            ("put" code nil nil [332379 332421])
            ("scroll-down-command" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [332423 333490])
            ("put" code nil nil [333492 333536])
            ("scroll-up-line" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [333606 333889])
            ("put" code nil nil [333891 333930])
            ("scroll-down-line" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [333932 334217])
            ("put" code nil nil [334219 334260])
            ("scroll-other-window-down" function
               (:user-visible-flag t
                :arguments ("lines"))
                nil [334264 334659])
            ("beginning-of-buffer-other-window" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [334661 335345])
            ("end-of-buffer-other-window" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [335347 335850])
            ("mouse-autoselect-window-timer" variable nil nil [335853 335943])
            ("mouse-autoselect-window-position-1" variable nil nil [335945 336059])
            ("mouse-autoselect-window-position" variable nil nil [336061 336172])
            ("mouse-autoselect-window-window" variable nil nil [336174 336275])
            ("mouse-autoselect-window-state" variable nil nil [336277 336574])
            ("mouse-autoselect-window-cancel" function (:arguments ("force")) nil [336576 337347])
            ("mouse-autoselect-window-start" function (:arguments ("mouse-position" "window" "suspend")) nil [337349 338177])
            ("mouse-autoselect-window-select" function nil nil [338179 341964])
            ("handle-select-window" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [341966 343505])
            ("truncated-partial-width-window-p" function (:arguments ("window")) nil [343507 344192])
            ("window-adjust-process-window-size-function" variable (:default-value (quote window-adjust-process-window-size-smallest)) nil [344261 345703])
            ("window-adjust-process-window-size" function (:arguments ("reducer" "process" "windows")) nil [345705 346322])
            ("window-adjust-process-window-size-smallest" function (:arguments ("process" "windows")) nil [346324 346622])
            ("window-adjust-process-window-size-largest" function (:arguments ("process" "windows")) nil [346624 346920])
            ("window--process-window-list" function nil nil [346922 348135])
            ("window--adjust-process-windows" function nil nil [348137 348833])
            ("add-hook" code nil nil [348835 348911])
            ("define-key" code nil nil [349002 349043])
            ("define-key" code nil nil [349044 349092])
            ("define-key" code nil nil [349093 349139])
            ("define-key" code nil nil [349140 349186])
            ("define-key" code nil nil [349187 349227])
            ("define-key" code nil nil [349228 349270])
            ("define-key" code nil nil [349271 349326])
            ("define-key" code nil nil [349327 349381])
            ("define-key" code nil nil [349382 349445])
            ("define-key" code nil nil [349446 349489])
            ("define-key" code nil nil [349490 349542]))          
      :file "window.el.gz"
      :pointmax 349568
      :fsize 77609
      :lastmodtime '(22966 58805 0 0)
      :unmatched-syntax nil)
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("mouse" include nil nil [1043 1059])
            ("cl-lib" include nil nil [1079 1096])
            ("scroll-bar-event-ratio" function (:arguments ("event")) nil [1118 1434])
            ("scroll-bar-scale" function (:arguments ("num-denom" "whole")) nil [1436 2117])
            ("scroll-bar-columns" function (:arguments ("side")) nil [2119 2794])
            ("scroll-bar-lines" function nil nil [2796 3324])
            ("scroll-bar-mode" variable nil nil [3392 3416])
            ("horizontal-scroll-bar-mode" variable nil nil [3417 3452])
            ("previous-scroll-bar-mode" variable nil nil [3453 3490])
            ("scroll-bar-mode-explicit" variable nil nil [3492 3657])
            ("set-scroll-bar-mode" function (:arguments ("value")) nil [3659 4071])
            ("scroll-bar-mode" variable (:default-value default-frame-scroll-bars) nil [4073 4763])
            ("setq" code nil nil [4864 4897])
            ("get-scroll-bar-mode" function nil nil [4899 4991])
            ("define-minor-mode" code nil nil [4993 5507])
            ("horizontal-scroll-bars-available-p" function nil nil [5509 5765])
            ("define-minor-mode" code nil nil [5767 6745])
            ("toggle-scroll-bar" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [6747 7407])
            ("toggle-horizontal-scroll-bar" function
               (:user-visible-flag t
                :arguments ("arg"))
                nil [7409 7910])
            ("scroll-bar-set-window-start" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [8018 8548])
            ("scroll-bar-drag-position" function (:arguments ("portion-whole")) nil [8550 8805])
            ("scroll-bar-maybe-set-window-start" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [8807 9817])
            ("scroll-bar-drag-1" function (:arguments ("event")) nil [9874 10338])
            ("scroll-bar-drag" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [10340 11331])
            ("scroll-bar-horizontal-drag-1" function (:arguments ("event")) nil [11388 11888])
            ("scroll-bar-horizontal-drag" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [11890 12927])
            ("scroll-bar-scroll-down" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [12929 13657])
            ("scroll-bar-scroll-up" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [13659 14379])
            ("scroll-bar-toolkit-scroll" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [14408 15588])
            ("scroll-bar-toolkit-horizontal-scroll" function
               (:user-visible-flag t
                :arguments ("event"))
                nil [15590 17155])
            ("cond" code nil nil [17226 17936])
            ("scroll-bar" package nil nil [17940 17961]))          
      :file "scroll-bar.el.gz"
      :pointmax 17991
      :fsize 4444
      :lastmodtime '(22966 58805 0 0)
      :unmatched-syntax '((close-paren 1096 . 1097) (symbol 1061 . 1078) (open-paren 1060 . 1061)))
    (semanticdb-table "semanticdb-table"
      :major-mode emacs-lisp-mode
      :tags 
        '( ("put" code nil nil [1005 1051])
            ("make-display-table" function nil nil [1068 1175])
            ("or" code nil nil [1177 1259])
            ("put" code nil nil [1329 1368])
            ("put" code nil nil [1369 1402])
            ("put" code nil nil [1403 1438])
            ("put" code nil nil [1439 1475])
            ("put" code nil nil [1476 1522])
            ("put" code nil nil [1523 1567])
            ("display-table-slot" function (:arguments ("display-table" "slot")) nil [1584 2077])
            ("set-display-table-slot" function (:arguments ("display-table" "slot" "value")) nil [2094 2608])
            ("describe-display-table" function (:arguments ("dt")) nil [2625 3544])
            ("display-table-print-array" function (:arguments ("desc")) nil [3546 3945])
            ("describe-current-display-table" function (:user-visible-flag t) nil [3962 4284])
            ("standard-display-8bit" function (:arguments ("l" "h")) nil [4301 5131])
            ("standard-display-default" function (:arguments ("l" "h")) nil [5148 5461])
            ("standard-display-ascii" function (:arguments ("c" "s")) nil [5656 5875])
            ("standard-display-g1" function (:arguments ("c" "sc")) nil [5892 6385])
            ("standard-display-graphic" function (:arguments ("c" "gc")) nil [6402 6882])
            ("standard-display-underline" function (:arguments ("c" "uc")) nil [6899 7251])
            ("create-glyph" function (:arguments ("string")) nil [7268 7697])
            ("make-glyph-code" function (:arguments ("char" "face")) nil [7714 8129])
            ("glyph-char" function (:arguments ("glyph")) nil [8146 8285])
            ("glyph-face" function (:arguments ("glyph")) nil [8302 8610])
            ("standard-display-european" function (:arguments ("arg")) nil [8627 10791])
            ("disp-table" package nil nil [10793 10814]))          
      :file "disp-table.el.gz"
      :pointmax 10844
      :fsize 3558
      :lastmodtime '(22966 58805 0 0)
      :unmatched-syntax nil))
  :file "!usr!local!Cellar!emacs-plus!25.3!share!emacs!25.3!lisp!semantic.cache"
  :semantic-tag-version "2.0"
  :semanticdb-version "2.2")
